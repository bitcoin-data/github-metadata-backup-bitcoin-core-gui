{
  "type": "pull",
  "pull": {
    "url": "https://api.github.com/repos/bitcoin-core/gui/pulls/733",
    "id": 1358124979,
    "node_id": "PR_kwDOEEET9c5Q81ez",
    "html_url": "https://github.com/bitcoin-core/gui/pull/733",
    "diff_url": "https://github.com/bitcoin-core/gui/pull/733.diff",
    "patch_url": "https://github.com/bitcoin-core/gui/pull/733.patch",
    "issue_url": "https://api.github.com/repos/bitcoin-core/gui/issues/733",
    "commits_url": "https://api.github.com/repos/bitcoin-core/gui/pulls/733/commits",
    "review_comments_url": "https://api.github.com/repos/bitcoin-core/gui/pulls/733/comments",
    "review_comment_url": "https://api.github.com/repos/bitcoin-core/gui/pulls/comments%7B/number%7D",
    "comments_url": "https://api.github.com/repos/bitcoin-core/gui/issues/733/comments",
    "statuses_url": "https://api.github.com/repos/bitcoin-core/gui/statuses/8f72d4abe3ab4e4cbbe909694a1fd9d0a8f4a3bf",
    "number": 733,
    "state": "open",
    "locked": false,
    "maintainer_can_modify": true,
    "title": "Deniability - a tool to automatically improve coin ownership privacy",
    "user": {
      "login": "denavila",
      "id": 123340139,
      "node_id": "U_kgDOB1oFaw",
      "avatar_url": "https://avatars.githubusercontent.com/u/123340139?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/denavila",
      "html_url": "https://github.com/denavila",
      "followers_url": "https://api.github.com/users/denavila/followers",
      "following_url": "https://api.github.com/users/denavila/following%7B/other_user%7D",
      "gists_url": "https://api.github.com/users/denavila/gists%7B/gist_id%7D",
      "starred_url": "https://api.github.com/users/denavila/starred%7B/owner%7D%7B/repo%7D",
      "subscriptions_url": "https://api.github.com/users/denavila/subscriptions",
      "organizations_url": "https://api.github.com/users/denavila/orgs",
      "repos_url": "https://api.github.com/users/denavila/repos",
      "events_url": "https://api.github.com/users/denavila/events%7B/privacy%7D",
      "received_events_url": "https://api.github.com/users/denavila/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "This new feature is an implementation of the ideas in Paul Sztorc's blog post \"Deniability - Unilateral Transaction Meta-Privacy\"(https://www.truthcoin.info/blog/deniability/).\r\n\r\nIn short, the idea is to periodically split coins and send them to yourself, making it look like common \"spend\" transactions, such that blockchain ownership analysis becomes more difficult, and thus improving the user's privacy.\r\n\r\nThis is the GUI portion of the PR (bitcoin-core/gui). The core functionality PR ( https://github.com/bitcoin/bitcoin/pull/27792 ) is in the main repo (bitcoin/bitcoin).\r\n\r\nThis PR implements an additional \"Deniability\" wallet view. The majority of the GUI code is in a new deniabilitydialog.cpp/h source files containing a new DeniabilityDialog class, hooked up via the WalletView class. \r\n\r\nOn startup and on notable events (new blocks, new transactions, etc), we evaluate the privacy of all coins in the wallet, and we build a \"deniabilization\" candidate list. UTXOs that share the same destination address are grouped together into a single candidate (see DeniabilityDialog::updateCoins and DeniabilityDialog::updateCoinTable).\r\n\r\nWe inspect the blockchain data to find out if we have performed \"deniabilization\" transactions already, and we count how many \"cycles\" (self-sends) have been performed for each coin (see DeniabilityDialog::calculateDeniabilizationStats). Since we infer the state entirely from the blockchain data, even if the wallet is restored from a backup, the state would not be lost. This also means that if the user has performed manual self-sends that have improved the ownership privacy, they will be counted too.\r\n\r\n<img width=\"983\" alt=\"deniability_view_initial\" src=\"https://github.com/bitcoin-core/gui/assets/123340139/6626cca3-1b96-4ccd-9463-2a91a9993faa\">\r\n\r\nThe user has a couple of controls for the \"deniabillization\" process - a Frequency selector and a Budget spinner, which respectively determine how often to perform a cycle (see below) and how much total BTC to spend on transaction fees.\r\n\r\n<img width=\"983\" alt=\"deniability_view_pick_budget_frequency\" src=\"https://github.com/bitcoin-core/gui/assets/123340139/7508c23f-2ebb-4345-a440-49b9f60b8412\">\r\n\r\nThe user can initiate the \"deniabillization\" process by pressing the Start button (DeniabilityDialog::startDeniabilization). \r\nThe first time the button is pressed, we offer an information / confirmation box to explain to the user how Deniability works.\r\n\r\n<img width=\"532\" alt=\"deniability_view_start_confirmation\" src=\"https://github.com/bitcoin-core/gui/assets/123340139/c08ee856-8736-4e4e-be71-28219735f764\">\r\n\r\nThe process periodically perform a \"deniabilization\" cycle (DeniabilityDialog::deniabilizeProc). In each such cycle we do the following: \r\nA coin is selected form the candidate list. The more a coin is \"deniabilized\", the less likely it is to be selected. Smaller coins are also less likely to be selected. If a coin is selected, we prepare and broadcast a transaction, which splits the coin into a pair of new wallet addresses (DeniabilityDialog::deniabilizeCoin). \r\n\r\n<img width=\"983\" alt=\"deniability_view_tx_awaiting_confirmation\" src=\"https://github.com/bitcoin-core/gui/assets/123340139/df0354dc-f60f-45db-b692-db5c6ca36253\">\r\n\r\n<img width=\"983\" alt=\"transaction_view_after_deniabilization\" src=\"https://github.com/bitcoin-core/gui/assets/123340139/709084d3-227d-4c0d-ac47-cd83433b992a\">\r\n\r\nIf Bitcoin Core is left running continuously, the cycles would be performed at the selected frequency (with some randomization). If Bitcoin Core is shutdown, the \"deniabilization\" process will resume at the next restart, and if more time has elapsed than the selected frequency, it will perform a single cycle. We deliberately don't \"catch up\" all missed cycles, since that would expose the process to blockchain analysis. The state is saved and restored via QSettings (DeniabilityDialog::loadSettings and DeniabilityDialog::saveSettings).\r\n\r\n<img width=\"983\" alt=\"deniability_view_next_cycle_countdown\" src=\"https://github.com/bitcoin-core/gui/assets/123340139/da5a71e1-0174-4f2a-a9b3-b8a635abe769\">\r\n\r\nWe monitor each broadcasted transaction and we automatically attempt a fee bump if the transaction is still in the memory pool since the previous cycle (DeniabilityDialog::bumpDeniabilizationTx). We don't issue any other deniabilization transactions until the previous transaction is confirmed (or abandoned/dropped).\r\n\r\nThe process ends when the budget is exhausted or if there's no candidates left. The user can also stop the process manually by pressing a Stop button (DeniabilityDialog::stopDeniabilization).\r\n\r\nExternal signers are supported in a \"best effort\" way - since the user needs to manually sign, we postpone the deniabilization processing till the external signer is connected and use some additional UI to get the user's attention to sign (see the codepath predicated on hasExternalSigner). This is not ideal, so I'm looking for ideas if we can improve this in some way.\r\n\r\nWatch-only wallets are partially supported, where we display the candidate list, but we don't allow any processing (since we don't have the private keys to issue transactions).\r\n\r\nI've tested all this functionality on regtest, testnet, signet and mainnet. I've also added some unit tests (under WalletTests) to exercise the main functions.\r\n\r\nThis is my first change and PR for Bitcoin Core, and I did my best to validate everything against the guidelines and documentation and to follow the patterns in the existing code, but I'm sure there may be things I've missed, so I'm looking forward to your feedback. \r\nIn particular one thing I'm not particularly happy with - the save/restore of state via QSettings makes me a bit nervous as we store wallet specific data keyed on wallet name, however wallets can be erased and new ones created with the same name, so this is not ideal. I made an effort to validate all data on load, but it would be great if we could improve this somehow - either by storing the settings based on some wallet identity signature, or by storing the state in the wallet database (however that doesn't seem accessible via the interfaces::Wallet API). Please let me know your thoughts and suggestions.\r\n\r\nThank you.\r\n",
    "labels": [
      {
        "id": 2147693884,
        "node_id": "MDU6TGFiZWwyMTQ3NjkzODg0",
        "url": "https://api.github.com/repos/bitcoin-core/gui/labels/Feature",
        "name": "Feature",
        "description": "",
        "color": "8fe567",
        "default": false
      },
      {
        "id": 2927906211,
        "node_id": "MDU6TGFiZWwyOTI3OTA2MjEx",
        "url": "https://api.github.com/repos/bitcoin-core/gui/labels/Wallet",
        "name": "Wallet",
        "description": "",
        "color": "08a781",
        "default": false
      },
      {
        "id": 5353934559,
        "node_id": "LA_kwDOEEET9c8AAAABPx6O3w",
        "url": "https://api.github.com/repos/bitcoin-core/gui/labels/CI%20failed",
        "name": "CI failed",
        "color": "ededed",
        "default": false
      }
    ],
    "created_at": "2023-05-21T06:32:50Z",
    "updated_at": "2024-01-17T05:09:22Z",
    "mergeable": true,
    "mergeable_state": "unstable",
    "merge_commit_sha": "43fc39fac1c56f5ab75f77aec1e64d90bbaca0ae",
    "assignees": [],
    "requested_reviewers": [],
    "requested_teams": [],
    "rebaseable": true,
    "head": {
      "label": "denavila:deniability",
      "ref": "deniability",
      "sha": "8f72d4abe3ab4e4cbbe909694a1fd9d0a8f4a3bf",
      "user": {
        "login": "denavila",
        "id": 123340139,
        "node_id": "U_kgDOB1oFaw",
        "avatar_url": "https://avatars.githubusercontent.com/u/123340139?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/denavila",
        "html_url": "https://github.com/denavila",
        "followers_url": "https://api.github.com/users/denavila/followers",
        "following_url": "https://api.github.com/users/denavila/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/denavila/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/denavila/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/denavila/subscriptions",
        "organizations_url": "https://api.github.com/users/denavila/orgs",
        "repos_url": "https://api.github.com/users/denavila/repos",
        "events_url": "https://api.github.com/users/denavila/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/denavila/received_events",
        "type": "User",
        "site_admin": false
      },
      "repo": {
        "id": 643409150,
        "node_id": "R_kgDOJlmk_g",
        "name": "gui",
        "full_name": "denavila/gui",
        "owner": {
          "login": "denavila",
          "id": 123340139,
          "node_id": "U_kgDOB1oFaw",
          "avatar_url": "https://avatars.githubusercontent.com/u/123340139?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/denavila",
          "html_url": "https://github.com/denavila",
          "followers_url": "https://api.github.com/users/denavila/followers",
          "following_url": "https://api.github.com/users/denavila/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/denavila/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/denavila/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/denavila/subscriptions",
          "organizations_url": "https://api.github.com/users/denavila/orgs",
          "repos_url": "https://api.github.com/users/denavila/repos",
          "events_url": "https://api.github.com/users/denavila/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/denavila/received_events",
          "type": "User",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/denavila/gui",
        "description": "Bitcoin Core GUI staging repository",
        "fork": true,
        "url": "https://api.github.com/repos/denavila/gui",
        "archive_url": "https://api.github.com/repos/denavila/gui/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/denavila/gui/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/denavila/gui/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/denavila/gui/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/denavila/gui/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/denavila/gui/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/denavila/gui/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/denavila/gui/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/denavila/gui/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/denavila/gui/contributors",
        "deployments_url": "https://api.github.com/repos/denavila/gui/deployments",
        "downloads_url": "https://api.github.com/repos/denavila/gui/downloads",
        "events_url": "https://api.github.com/repos/denavila/gui/events",
        "forks_url": "https://api.github.com/repos/denavila/gui/forks",
        "git_commits_url": "https://api.github.com/repos/denavila/gui/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/denavila/gui/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/denavila/gui/git/tags%7B/sha%7D",
        "git_url": "git://github.com/denavila/gui.git",
        "issue_comment_url": "https://api.github.com/repos/denavila/gui/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/denavila/gui/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/denavila/gui/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/denavila/gui/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/denavila/gui/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/denavila/gui/languages",
        "merges_url": "https://api.github.com/repos/denavila/gui/merges",
        "milestones_url": "https://api.github.com/repos/denavila/gui/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/denavila/gui/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/denavila/gui/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/denavila/gui/releases%7B/id%7D",
        "ssh_url": "git@github.com:denavila/gui.git",
        "stargazers_url": "https://api.github.com/repos/denavila/gui/stargazers",
        "statuses_url": "https://api.github.com/repos/denavila/gui/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/denavila/gui/subscribers",
        "subscription_url": "https://api.github.com/repos/denavila/gui/subscription",
        "tags_url": "https://api.github.com/repos/denavila/gui/tags",
        "teams_url": "https://api.github.com/repos/denavila/gui/teams",
        "trees_url": "https://api.github.com/repos/denavila/gui/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/denavila/gui.git",
        "hooks_url": "https://api.github.com/repos/denavila/gui/hooks",
        "svn_url": "https://github.com/denavila/gui",
        "homepage": "https://github.com/bitcoin/bitcoin",
        "language": "C++",
        "forks_count": 0,
        "stargazers_count": 0,
        "watchers_count": 0,
        "size": 151457,
        "default_branch": "master",
        "open_issues_count": 0,
        "is_template": false,
        "topics": [],
        "has_issues": false,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": true,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2023-12-12T17:20:29Z",
        "created_at": "2023-05-21T04:12:26Z",
        "updated_at": "2023-09-02T21:29:07Z",
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "base": {
      "label": "bitcoin-core:master",
      "ref": "master",
      "sha": "d646ca35d991e4f694096fdbd2d2ebd8cebf244e",
      "user": {
        "login": "bitcoin-core",
        "id": 13464320,
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjEzNDY0MzIw",
        "avatar_url": "https://avatars.githubusercontent.com/u/13464320?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitcoin-core",
        "html_url": "https://github.com/bitcoin-core",
        "followers_url": "https://api.github.com/users/bitcoin-core/followers",
        "following_url": "https://api.github.com/users/bitcoin-core/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bitcoin-core/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bitcoin-core/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bitcoin-core/subscriptions",
        "organizations_url": "https://api.github.com/users/bitcoin-core/orgs",
        "repos_url": "https://api.github.com/users/bitcoin-core/repos",
        "events_url": "https://api.github.com/users/bitcoin-core/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bitcoin-core/received_events",
        "type": "Organization",
        "site_admin": false
      },
      "repo": {
        "id": 272700405,
        "node_id": "MDEwOlJlcG9zaXRvcnkyNzI3MDA0MDU=",
        "name": "gui",
        "full_name": "bitcoin-core/gui",
        "owner": {
          "login": "bitcoin-core",
          "id": 13464320,
          "node_id": "MDEyOk9yZ2FuaXphdGlvbjEzNDY0MzIw",
          "avatar_url": "https://avatars.githubusercontent.com/u/13464320?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/bitcoin-core",
          "html_url": "https://github.com/bitcoin-core",
          "followers_url": "https://api.github.com/users/bitcoin-core/followers",
          "following_url": "https://api.github.com/users/bitcoin-core/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/bitcoin-core/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/bitcoin-core/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/bitcoin-core/subscriptions",
          "organizations_url": "https://api.github.com/users/bitcoin-core/orgs",
          "repos_url": "https://api.github.com/users/bitcoin-core/repos",
          "events_url": "https://api.github.com/users/bitcoin-core/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/bitcoin-core/received_events",
          "type": "Organization",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/bitcoin-core/gui",
        "description": "Bitcoin Core GUI staging repository",
        "fork": false,
        "url": "https://api.github.com/repos/bitcoin-core/gui",
        "archive_url": "https://api.github.com/repos/bitcoin-core/gui/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/bitcoin-core/gui/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/bitcoin-core/gui/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/bitcoin-core/gui/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/bitcoin-core/gui/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/bitcoin-core/gui/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/bitcoin-core/gui/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/bitcoin-core/gui/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/bitcoin-core/gui/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/bitcoin-core/gui/contributors",
        "deployments_url": "https://api.github.com/repos/bitcoin-core/gui/deployments",
        "downloads_url": "https://api.github.com/repos/bitcoin-core/gui/downloads",
        "events_url": "https://api.github.com/repos/bitcoin-core/gui/events",
        "forks_url": "https://api.github.com/repos/bitcoin-core/gui/forks",
        "git_commits_url": "https://api.github.com/repos/bitcoin-core/gui/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/bitcoin-core/gui/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/bitcoin-core/gui/git/tags%7B/sha%7D",
        "git_url": "git://github.com/bitcoin-core/gui.git",
        "issue_comment_url": "https://api.github.com/repos/bitcoin-core/gui/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/bitcoin-core/gui/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/bitcoin-core/gui/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/bitcoin-core/gui/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/bitcoin-core/gui/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/bitcoin-core/gui/languages",
        "merges_url": "https://api.github.com/repos/bitcoin-core/gui/merges",
        "milestones_url": "https://api.github.com/repos/bitcoin-core/gui/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/bitcoin-core/gui/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/bitcoin-core/gui/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/bitcoin-core/gui/releases%7B/id%7D",
        "ssh_url": "git@github.com:bitcoin-core/gui.git",
        "stargazers_url": "https://api.github.com/repos/bitcoin-core/gui/stargazers",
        "statuses_url": "https://api.github.com/repos/bitcoin-core/gui/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/bitcoin-core/gui/subscribers",
        "subscription_url": "https://api.github.com/repos/bitcoin-core/gui/subscription",
        "tags_url": "https://api.github.com/repos/bitcoin-core/gui/tags",
        "teams_url": "https://api.github.com/repos/bitcoin-core/gui/teams",
        "trees_url": "https://api.github.com/repos/bitcoin-core/gui/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/bitcoin-core/gui.git",
        "hooks_url": "https://api.github.com/repos/bitcoin-core/gui/hooks",
        "svn_url": "https://github.com/bitcoin-core/gui",
        "homepage": "https://github.com/bitcoin/bitcoin",
        "language": "C++",
        "forks_count": 294,
        "stargazers_count": 527,
        "watchers_count": 527,
        "size": 152159,
        "default_branch": "master",
        "open_issues_count": 166,
        "is_template": false,
        "topics": [],
        "has_issues": true,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": true,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2024-01-16T21:50:12Z",
        "created_at": "2020-06-16T12:20:07Z",
        "updated_at": "2024-01-12T22:35:37Z",
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin-core/gui/pulls/733"
      }
    },
    "author_association": "NONE",
    "draft": true,
    "additions": 2988,
    "deletions": 7,
    "changed_files": 24,
    "commits": 2,
    "review_comments": 19,
    "comments": 14
  },
  "events": [
    {
      "event": "commented",
      "id": 1556097316,
      "node_id": "IC_kwDOEEET9c5cwCkk",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/comments/1556097316",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-05-21T06:32:52Z",
      "updated_at": "2024-01-17T05:09:22Z",
      "author_association": "CONTRIBUTOR",
      "body": "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--021abf342d371248e50ceaed478a90ca-->\n### Reviews\nSee [the guideline](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#code-review) for information on the review process.\n| Type | Reviewers |\n| ---- | --------- |\n| Concept ACK | [katesalazar](https://github.com/bitcoin-core/gui/pull/733#pullrequestreview-1700307265) |\n\nIf your review is incorrectly listed, please react with 👎 to this comment and the bot will ignore it on the next update.\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#700](https://github.com/bitcoin-core/gui/pull/700) (Dialog for allowing the user to choose the change output when bumping a tx by achow101)\n* [#bitcoin/bitcoin/28710](https://github.com/bitcoin/bitcoin/pull/28710) (Remove the legacy wallet and BDB dependency by achow101)\n* [#bitcoin/bitcoin/28560](https://github.com/bitcoin/bitcoin/pull/28560) (wallet, rpc: `FundTransaction` refactor by josibake)\n* [#bitcoin/bitcoin/28201](https://github.com/bitcoin/bitcoin/pull/28201) (Silent Payments: sending by josibake)\n* [#bitcoin/bitcoin/27865](https://github.com/bitcoin/bitcoin/pull/27865) (wallet: Track no-longer-spendable TXOs separately by achow101)\n* [#bitcoin/bitcoin/27286](https://github.com/bitcoin/bitcoin/pull/27286) (wallet: Keep track of the wallet's own transaction outputs in memory by achow101)\n* [#bitcoin/bitcoin/24963](https://github.com/bitcoin/bitcoin/pull/24963) (RPC/Wallet: Convert walletprocesspsbt to use options parameter by luke-jr)\n* [#bitcoin/bitcoin/21283](https://github.com/bitcoin/bitcoin/pull/21283) (Implement BIP 370 PSBTv2 by achow101)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.\n",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/gui/pull/733#issuecomment-1556097316",
      "issue_url": "https://api.github.com/repos/bitcoin-core/gui/issues/733"
    },
    {
      "event": "labeled",
      "id": 9295518119,
      "node_id": "LE_lADOEEET9c5mbIhxzwAAAAIqDlmn",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/9295518119",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-05-21T07:29:06Z",
      "label": {
        "name": "CI failed",
        "color": "ededed"
      }
    },
    {
      "event": "labeled",
      "id": 9295547046,
      "node_id": "LE_lADOEEET9c5mbIhxzwAAAAIqDsqm",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/9295547046",
      "actor": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-05-21T07:56:08Z",
      "label": {
        "name": "Feature",
        "color": "8fe567"
      }
    },
    {
      "event": "labeled",
      "id": 9295547495,
      "node_id": "LE_lADOEEET9c5mbIhxzwAAAAIqDsxn",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/9295547495",
      "actor": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-05-21T07:56:31Z",
      "label": {
        "name": "Wallet",
        "color": "08a781"
      }
    },
    {
      "event": "commented",
      "id": 1556112377,
      "node_id": "IC_kwDOEEET9c5cwGP5",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/comments/1556112377",
      "actor": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-05-21T08:01:58Z",
      "updated_at": "2023-05-21T08:01:58Z",
      "author_association": "MEMBER",
      "body": "> This PR is an implementation of the ideas in Paul Sztorc's blog post \"Deniability - Unilateral Transaction Meta-Privacy\"([truthcoin.info/blog/deniability](https://www.truthcoin.info/blog/deniability/)).\r\n\r\nHas that idea been discussed somewhere already?",
      "user": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/gui/pull/733#issuecomment-1556112377",
      "issue_url": "https://api.github.com/repos/bitcoin-core/gui/issues/733"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-05-21T08:16:37Z",
      "updated_at": "2023-05-21T08:16:37Z",
      "source": {
        "issue": {
          "id": 1553833085,
          "node_id": "PR_kwDOEEET9c5IXbBv",
          "url": "https://api.github.com/repos/bitcoin-core/gui/issues/700",
          "repository_url": "https://api.github.com/repos/bitcoin-core/gui",
          "labels_url": "https://api.github.com/repos/bitcoin-core/gui/issues/700/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin-core/gui/issues/700/comments",
          "events_url": "https://api.github.com/repos/bitcoin-core/gui/issues/700/events",
          "html_url": "https://github.com/bitcoin-core/gui/pull/700",
          "number": 700,
          "state": "open",
          "state_reason": null,
          "title": "Dialog for allowing the user to choose the change output when bumping a tx",
          "body": "Based on https://github.com/bitcoin/bitcoin/pull/26467\r\n\r\nImplements a GUI dialog for allowing the user to choose the output to reduce when bumping a transaction. This adds the functionality that was added to the RPC.",
          "user": {
            "login": "achow101",
            "id": 3782274,
            "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
            "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/achow101",
            "html_url": "https://github.com/achow101",
            "followers_url": "https://api.github.com/users/achow101/followers",
            "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
            "organizations_url": "https://api.github.com/users/achow101/orgs",
            "repos_url": "https://api.github.com/users/achow101/repos",
            "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/achow101/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 2147693884,
              "node_id": "MDU6TGFiZWwyMTQ3NjkzODg0",
              "url": "https://api.github.com/repos/bitcoin-core/gui/labels/Feature",
              "name": "Feature",
              "description": "",
              "color": "8fe567",
              "default": false
            },
            {
              "id": 2964264316,
              "node_id": "MDU6TGFiZWwyOTY0MjY0MzE2",
              "url": "https://api.github.com/repos/bitcoin-core/gui/labels/UX",
              "name": "UX",
              "description": "All about \"how to get things done\"",
              "color": "0052cc",
              "default": false
            },
            {
              "id": 5353934559,
              "node_id": "LA_kwDOEEET9c8AAAABPx6O3w",
              "url": "https://api.github.com/repos/bitcoin-core/gui/labels/CI%20failed",
              "name": "CI failed",
              "color": "ededed",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": false,
          "comments": 5,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin-core/gui/pulls/700",
            "html_url": "https://github.com/bitcoin-core/gui/pull/700",
            "diff_url": "https://github.com/bitcoin-core/gui/pull/700.diff",
            "patch_url": "https://github.com/bitcoin-core/gui/pull/700.patch"
          },
          "created_at": "2023-01-23T21:13:11Z",
          "updated_at": "2024-01-08T16:13:13Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "commented",
      "id": 1558676764,
      "node_id": "IC_kwDOEEET9c5c54Uc",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/comments/1558676764",
      "actor": {
        "login": "denavila",
        "id": 123340139,
        "node_id": "U_kgDOB1oFaw",
        "avatar_url": "https://avatars.githubusercontent.com/u/123340139?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/denavila",
        "html_url": "https://github.com/denavila",
        "followers_url": "https://api.github.com/users/denavila/followers",
        "following_url": "https://api.github.com/users/denavila/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/denavila/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/denavila/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/denavila/subscriptions",
        "organizations_url": "https://api.github.com/users/denavila/orgs",
        "repos_url": "https://api.github.com/users/denavila/repos",
        "events_url": "https://api.github.com/users/denavila/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/denavila/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-05-23T07:17:22Z",
      "updated_at": "2023-05-23T18:50:10Z",
      "author_association": "NONE",
      "body": "> Has that idea been discussed somewhere already?\r\n\r\nThe idea was published quite a while ago, but I learned about it from some Bitcoiner friends just recently. \r\nWe looked around to see if there were existing discussions or implementations, but we didn't find anything on bitcoin-dev or the repo here. \r\nThere's an old implementation in a Bitcoin fork (Drivechain) which I used as a starting point, but ended up with a pretty different approach and implementation. \r\nWe were thinking of perhaps writing down the spec into a Process BIP, if this would make it easier to review on a conceptual level?",
      "user": {
        "login": "denavila",
        "id": 123340139,
        "node_id": "U_kgDOB1oFaw",
        "avatar_url": "https://avatars.githubusercontent.com/u/123340139?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/denavila",
        "html_url": "https://github.com/denavila",
        "followers_url": "https://api.github.com/users/denavila/followers",
        "following_url": "https://api.github.com/users/denavila/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/denavila/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/denavila/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/denavila/subscriptions",
        "organizations_url": "https://api.github.com/users/denavila/orgs",
        "repos_url": "https://api.github.com/users/denavila/repos",
        "events_url": "https://api.github.com/users/denavila/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/denavila/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/gui/pull/733#issuecomment-1558676764",
      "issue_url": "https://api.github.com/repos/bitcoin-core/gui/issues/733"
    },
    {
      "event": "commented",
      "id": 1561041240,
      "node_id": "IC_kwDOEEET9c5dC5lY",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/comments/1561041240",
      "actor": {
        "login": "VladdyC",
        "id": 56368755,
        "node_id": "MDQ6VXNlcjU2MzY4NzU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/56368755?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/VladdyC",
        "html_url": "https://github.com/VladdyC",
        "followers_url": "https://api.github.com/users/VladdyC/followers",
        "following_url": "https://api.github.com/users/VladdyC/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/VladdyC/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/VladdyC/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/VladdyC/subscriptions",
        "organizations_url": "https://api.github.com/users/VladdyC/orgs",
        "repos_url": "https://api.github.com/users/VladdyC/repos",
        "events_url": "https://api.github.com/users/VladdyC/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/VladdyC/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-05-24T12:33:50Z",
      "updated_at": "2023-05-24T12:33:50Z",
      "author_association": "NONE",
      "body": "This is really cool and I'd love to have it as an option in Bitcoin Core. However, most CoinJoin implementations are more advanced in this regard – for example, WabiSabi performs both divisions and consolidations. And it makes me wonder to which extent it's possible to decentralize coordination to the point where clients randomly take turns in doing it. \r\n\r\nAnyway, this is just my curiosity/wish list. I believe that anything is better than having no privacy options at all, so I'd be happy with some more basic deniability too :)",
      "user": {
        "login": "VladdyC",
        "id": 56368755,
        "node_id": "MDQ6VXNlcjU2MzY4NzU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/56368755?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/VladdyC",
        "html_url": "https://github.com/VladdyC",
        "followers_url": "https://api.github.com/users/VladdyC/followers",
        "following_url": "https://api.github.com/users/VladdyC/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/VladdyC/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/VladdyC/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/VladdyC/subscriptions",
        "organizations_url": "https://api.github.com/users/VladdyC/orgs",
        "repos_url": "https://api.github.com/users/VladdyC/repos",
        "events_url": "https://api.github.com/users/VladdyC/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/VladdyC/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/gui/pull/733#issuecomment-1561041240",
      "issue_url": "https://api.github.com/repos/bitcoin-core/gui/issues/733"
    },
    {
      "event": "commented",
      "id": 1561460052,
      "node_id": "IC_kwDOEEET9c5dEf1U",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/comments/1561460052",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-05-24T15:59:24Z",
      "updated_at": "2023-05-24T15:59:24Z",
      "author_association": "MEMBER",
      "body": "It seems like a feature like this would be better to integrate into the wallet directly rather than something that is done through and managed by the GUI.",
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/gui/pull/733#issuecomment-1561460052",
      "issue_url": "https://api.github.com/repos/bitcoin-core/gui/issues/733"
    },
    {
      "event": "commented",
      "id": 1561670353,
      "node_id": "IC_kwDOEEET9c5dFTLR",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/comments/1561670353",
      "actor": {
        "login": "denavila",
        "id": 123340139,
        "node_id": "U_kgDOB1oFaw",
        "avatar_url": "https://avatars.githubusercontent.com/u/123340139?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/denavila",
        "html_url": "https://github.com/denavila",
        "followers_url": "https://api.github.com/users/denavila/followers",
        "following_url": "https://api.github.com/users/denavila/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/denavila/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/denavila/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/denavila/subscriptions",
        "organizations_url": "https://api.github.com/users/denavila/orgs",
        "repos_url": "https://api.github.com/users/denavila/repos",
        "events_url": "https://api.github.com/users/denavila/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/denavila/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-05-24T17:31:52Z",
      "updated_at": "2023-05-24T17:52:19Z",
      "author_association": "NONE",
      "body": "> This is really cool and I'd love to have it as an option in Bitcoin Core. However, most CoinJoin implementations are more advanced in this regard – for example, WabiSabi performs both divisions and consolidations. And it makes me wonder to which extent it's possible to decentralize coordination to the point where clients randomly take turns in doing it.\r\n> \r\n\r\nYes, CoinJoin is definitely more powerful, however it has some drawbacks. \r\nIn particular, if it's possible to detect that an UTXO has come from a coinjoin, it may be considered \"tainted\" by CEXs and they could refuse processing it (eg demand source of funds etc).\r\n\r\nThat's the \"meta-privacy\" that Paul talks about in his blog post. The idea that the knowledge of a secret has to also be kept a secret.\r\n\r\nHere's another one of Paul's blog posts where he talks about drawbacks of other privacy methods: https://www.truthcoin.info/blog/expensive-privacy/\r\n\r\nAt any rate, I'm definitely open to suggestions or ideas we can borrow from CoinJoin. \r\nIn particular if there's a way we can re-merge UTXOs in a privacy-preserving way. Or at bare minimum, use \"deniability-aware\" logic in the automatic coin selection during user-initiated spends to minimize the privacy reduction.\r\n\r\n> Anyway, this is just my curiosity/wish list. I believe that anything is better than having no privacy options at all, so I'd be happy with some more basic deniability too :)\r\n\r\nThank you. I believe so too.",
      "user": {
        "login": "denavila",
        "id": 123340139,
        "node_id": "U_kgDOB1oFaw",
        "avatar_url": "https://avatars.githubusercontent.com/u/123340139?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/denavila",
        "html_url": "https://github.com/denavila",
        "followers_url": "https://api.github.com/users/denavila/followers",
        "following_url": "https://api.github.com/users/denavila/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/denavila/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/denavila/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/denavila/subscriptions",
        "organizations_url": "https://api.github.com/users/denavila/orgs",
        "repos_url": "https://api.github.com/users/denavila/repos",
        "events_url": "https://api.github.com/users/denavila/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/denavila/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/gui/pull/733#issuecomment-1561670353",
      "issue_url": "https://api.github.com/repos/bitcoin-core/gui/issues/733"
    },
    {
      "event": "commented",
      "id": 1561680006,
      "node_id": "IC_kwDOEEET9c5dFViG",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/comments/1561680006",
      "actor": {
        "login": "denavila",
        "id": 123340139,
        "node_id": "U_kgDOB1oFaw",
        "avatar_url": "https://avatars.githubusercontent.com/u/123340139?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/denavila",
        "html_url": "https://github.com/denavila",
        "followers_url": "https://api.github.com/users/denavila/followers",
        "following_url": "https://api.github.com/users/denavila/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/denavila/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/denavila/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/denavila/subscriptions",
        "organizations_url": "https://api.github.com/users/denavila/orgs",
        "repos_url": "https://api.github.com/users/denavila/repos",
        "events_url": "https://api.github.com/users/denavila/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/denavila/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-05-24T17:39:28Z",
      "updated_at": "2023-05-24T17:39:28Z",
      "author_association": "NONE",
      "body": "> It seems like a feature like this would be better to integrate into the wallet directly rather than something that is done through and managed by the GUI.\r\n\r\nDo you mean moving some of the core logic inside the interfaces::Wallet API, or the CWallet implementation?\r\n\r\nYes, certainly, that could have benefits. I had to workaround certain things that weren't in the Wallet API (namely address reservation, bump fee handling etc). So that would clean up the wallet side for sure.\r\n\r\nSince this was my first Bitcoin Core change I decided to be more conservative and avoid API changes. \r\nOf course, if this PR is accepted, I'd be happy to move functionality into the API.",
      "user": {
        "login": "denavila",
        "id": 123340139,
        "node_id": "U_kgDOB1oFaw",
        "avatar_url": "https://avatars.githubusercontent.com/u/123340139?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/denavila",
        "html_url": "https://github.com/denavila",
        "followers_url": "https://api.github.com/users/denavila/followers",
        "following_url": "https://api.github.com/users/denavila/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/denavila/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/denavila/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/denavila/subscriptions",
        "organizations_url": "https://api.github.com/users/denavila/orgs",
        "repos_url": "https://api.github.com/users/denavila/repos",
        "events_url": "https://api.github.com/users/denavila/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/denavila/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/gui/pull/733#issuecomment-1561680006",
      "issue_url": "https://api.github.com/repos/bitcoin-core/gui/issues/733"
    },
    {
      "event": "commented",
      "id": 1561716951,
      "node_id": "IC_kwDOEEET9c5dFejX",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/comments/1561716951",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-05-24T18:08:25Z",
      "updated_at": "2023-05-24T18:08:25Z",
      "author_association": "MEMBER",
      "body": "> Do you mean moving some of the core logic inside the interfaces::Wallet API, or the CWallet implementation?\r\n\r\nInside of `CWallet`.\r\n\r\n> Since this was my first Bitcoin Core change I decided to be more conservative and avoid API changes.\r\n> Of course, if this PR is accepted, I'd be happy to move functionality into the API.\r\n\r\nThe API isn't public, so changing it isn't a big concern. Really the only consumer of it is the GUI.\r\n\r\nHaving it inside of `CWallet` will probably make this feature more likely to be accepted. It will be easier to write tests (adding an RPC allows for functional tests, and implementing in `CWallet` allows unit tests to better access the data) and it can be split up into at least 2 chunks - the `CWallet` and RPC only implementation, and then the GUI and interface changes. This makes it more likely to be accepted.",
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/gui/pull/733#issuecomment-1561716951",
      "issue_url": "https://api.github.com/repos/bitcoin-core/gui/issues/733"
    },
    {
      "event": "commented",
      "id": 1561725613,
      "node_id": "IC_kwDOEEET9c5dFgqt",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/comments/1561725613",
      "actor": {
        "login": "denavila",
        "id": 123340139,
        "node_id": "U_kgDOB1oFaw",
        "avatar_url": "https://avatars.githubusercontent.com/u/123340139?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/denavila",
        "html_url": "https://github.com/denavila",
        "followers_url": "https://api.github.com/users/denavila/followers",
        "following_url": "https://api.github.com/users/denavila/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/denavila/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/denavila/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/denavila/subscriptions",
        "organizations_url": "https://api.github.com/users/denavila/orgs",
        "repos_url": "https://api.github.com/users/denavila/repos",
        "events_url": "https://api.github.com/users/denavila/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/denavila/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-05-24T18:15:34Z",
      "updated_at": "2023-05-24T18:15:34Z",
      "author_association": "NONE",
      "body": "> The API isn't public, so changing it isn't a big concern. Really the only consumer of it is the GUI.\r\n> \r\n> Having it inside of `CWallet` will probably make this feature more likely to be accepted. It will be easier to write tests (adding an RPC allows for functional tests, and implementing in `CWallet` allows unit tests to better access the data) and it can be split up into at least 2 chunks - the `CWallet` and RPC only implementation, and then the GUI and interface changes. This makes it more likely to be accepted.\r\n\r\nAh, I see. I had assumed the opposite - that not touching the API would be easier to accept.\r\nOk, I can look into refactoring the PR and moving the core functionality into CWallet.\r\n\r\nI'd need to open a PR against the main repo in that case, right?\r\nShould I keep this PR and leave the GUI bits here, and open another PR in the main repo with just the CWallet changes? \r\nOr is it better to close this PR and open a new one in the main repo with all the changes?",
      "user": {
        "login": "denavila",
        "id": 123340139,
        "node_id": "U_kgDOB1oFaw",
        "avatar_url": "https://avatars.githubusercontent.com/u/123340139?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/denavila",
        "html_url": "https://github.com/denavila",
        "followers_url": "https://api.github.com/users/denavila/followers",
        "following_url": "https://api.github.com/users/denavila/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/denavila/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/denavila/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/denavila/subscriptions",
        "organizations_url": "https://api.github.com/users/denavila/orgs",
        "repos_url": "https://api.github.com/users/denavila/repos",
        "events_url": "https://api.github.com/users/denavila/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/denavila/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/gui/pull/733#issuecomment-1561725613",
      "issue_url": "https://api.github.com/repos/bitcoin-core/gui/issues/733"
    },
    {
      "event": "commented",
      "id": 1561747032,
      "node_id": "IC_kwDOEEET9c5dFl5Y",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/comments/1561747032",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-05-24T18:31:55Z",
      "updated_at": "2023-05-24T18:31:55Z",
      "author_association": "MEMBER",
      "body": "> I'd need to open a PR against the main repo in that case, right?\r\n\r\nYes\r\n\r\n> Should I keep this PR and leave the GUI bits here, and open another PR in the main repo with just the CWallet changes?\r\n> Or is it better to close this PR and open a new one in the main repo with all the changes?\r\n\r\nYou can leave this open and rebase it onto the main repo PR, just mention it in the description.",
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/gui/pull/733#issuecomment-1561747032",
      "issue_url": "https://api.github.com/repos/bitcoin-core/gui/issues/733"
    },
    {
      "event": "commented",
      "id": 1562231512,
      "node_id": "IC_kwDOEEET9c5dHcLY",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/comments/1562231512",
      "actor": {
        "login": "denavila",
        "id": 123340139,
        "node_id": "U_kgDOB1oFaw",
        "avatar_url": "https://avatars.githubusercontent.com/u/123340139?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/denavila",
        "html_url": "https://github.com/denavila",
        "followers_url": "https://api.github.com/users/denavila/followers",
        "following_url": "https://api.github.com/users/denavila/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/denavila/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/denavila/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/denavila/subscriptions",
        "organizations_url": "https://api.github.com/users/denavila/orgs",
        "repos_url": "https://api.github.com/users/denavila/repos",
        "events_url": "https://api.github.com/users/denavila/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/denavila/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-05-25T04:05:37Z",
      "updated_at": "2023-05-25T04:05:37Z",
      "author_association": "NONE",
      "body": "> You can leave this open and rebase it onto the main repo PR, just mention it in the description.\r\n\r\nAll right, I'll start working on this refactor. \r\nBtw, do we have some docs on how to setup git locally so I can have dependent changes across the \"bitcoin\" and the \"gui\" repos? So far I was moving changes via patches but that doesn't seem too convenient.",
      "user": {
        "login": "denavila",
        "id": 123340139,
        "node_id": "U_kgDOB1oFaw",
        "avatar_url": "https://avatars.githubusercontent.com/u/123340139?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/denavila",
        "html_url": "https://github.com/denavila",
        "followers_url": "https://api.github.com/users/denavila/followers",
        "following_url": "https://api.github.com/users/denavila/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/denavila/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/denavila/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/denavila/subscriptions",
        "organizations_url": "https://api.github.com/users/denavila/orgs",
        "repos_url": "https://api.github.com/users/denavila/repos",
        "events_url": "https://api.github.com/users/denavila/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/denavila/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/gui/pull/733#issuecomment-1562231512",
      "issue_url": "https://api.github.com/repos/bitcoin-core/gui/issues/733"
    },
    {
      "event": "referenced",
      "id": 9347912115,
      "node_id": "REFE_lADOEEET9c5mbIhxzwAAAAItLdGz",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/9347912115",
      "actor": {
        "login": "denavila",
        "id": 123340139,
        "node_id": "U_kgDOB1oFaw",
        "avatar_url": "https://avatars.githubusercontent.com/u/123340139?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/denavila",
        "html_url": "https://github.com/denavila",
        "followers_url": "https://api.github.com/users/denavila/followers",
        "following_url": "https://api.github.com/users/denavila/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/denavila/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/denavila/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/denavila/subscriptions",
        "organizations_url": "https://api.github.com/users/denavila/orgs",
        "repos_url": "https://api.github.com/users/denavila/repos",
        "events_url": "https://api.github.com/users/denavila/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/denavila/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "a035b42fd6c3c5e9601905d4846e3ad68c7d12da",
      "commit_url": "https://api.github.com/repos/denavila/bitcoin/commits/a035b42fd6c3c5e9601905d4846e3ad68c7d12da",
      "created_at": "2023-05-26T08:21:33Z"
    },
    {
      "event": "unlabeled",
      "id": 9352346587,
      "node_id": "UNLE_lADOEEET9c5mbIhxzwAAAAItcXvb",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/9352346587",
      "actor": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-05-26T15:54:27Z",
      "label": {
        "name": "CI failed",
        "color": "ededed"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 9380504252,
      "node_id": "HRFPE_lADOEEET9c5mbIhxzwAAAAIvHyK8",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/9380504252",
      "actor": {
        "login": "denavila",
        "id": 123340139,
        "node_id": "U_kgDOB1oFaw",
        "avatar_url": "https://avatars.githubusercontent.com/u/123340139?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/denavila",
        "html_url": "https://github.com/denavila",
        "followers_url": "https://api.github.com/users/denavila/followers",
        "following_url": "https://api.github.com/users/denavila/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/denavila/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/denavila/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/denavila/subscriptions",
        "organizations_url": "https://api.github.com/users/denavila/orgs",
        "repos_url": "https://api.github.com/users/denavila/repos",
        "events_url": "https://api.github.com/users/denavila/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/denavila/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-05-30T16:20:51Z"
    },
    {
      "event": "commented",
      "id": 1568736418,
      "node_id": "IC_kwDOEEET9c5dgQSi",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/comments/1568736418",
      "actor": {
        "login": "denavila",
        "id": 123340139,
        "node_id": "U_kgDOB1oFaw",
        "avatar_url": "https://avatars.githubusercontent.com/u/123340139?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/denavila",
        "html_url": "https://github.com/denavila",
        "followers_url": "https://api.github.com/users/denavila/followers",
        "following_url": "https://api.github.com/users/denavila/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/denavila/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/denavila/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/denavila/subscriptions",
        "organizations_url": "https://api.github.com/users/denavila/orgs",
        "repos_url": "https://api.github.com/users/denavila/repos",
        "events_url": "https://api.github.com/users/denavila/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/denavila/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-05-30T16:31:20Z",
      "updated_at": "2023-05-30T16:31:20Z",
      "author_association": "NONE",
      "body": "I refactored the code and updated the PR. The new code is split between two branches:\r\n1) deniability-api - new API and implementation of core \"deniabilization\" functions. I'll open a PR in the main repo once I add RPC and unit tests.\r\n2) deniability - the GUI portion of the Deniability dialog which uses the new deniability-api functions.",
      "user": {
        "login": "denavila",
        "id": 123340139,
        "node_id": "U_kgDOB1oFaw",
        "avatar_url": "https://avatars.githubusercontent.com/u/123340139?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/denavila",
        "html_url": "https://github.com/denavila",
        "followers_url": "https://api.github.com/users/denavila/followers",
        "following_url": "https://api.github.com/users/denavila/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/denavila/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/denavila/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/denavila/subscriptions",
        "organizations_url": "https://api.github.com/users/denavila/orgs",
        "repos_url": "https://api.github.com/users/denavila/repos",
        "events_url": "https://api.github.com/users/denavila/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/denavila/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/gui/pull/733#issuecomment-1568736418",
      "issue_url": "https://api.github.com/repos/bitcoin-core/gui/issues/733"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 9380819233,
      "node_id": "HRFPE_lADOEEET9c5mbIhxzwAAAAIvI_Eh",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/9380819233",
      "actor": {
        "login": "denavila",
        "id": 123340139,
        "node_id": "U_kgDOB1oFaw",
        "avatar_url": "https://avatars.githubusercontent.com/u/123340139?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/denavila",
        "html_url": "https://github.com/denavila",
        "followers_url": "https://api.github.com/users/denavila/followers",
        "following_url": "https://api.github.com/users/denavila/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/denavila/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/denavila/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/denavila/subscriptions",
        "organizations_url": "https://api.github.com/users/denavila/orgs",
        "repos_url": "https://api.github.com/users/denavila/repos",
        "events_url": "https://api.github.com/users/denavila/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/denavila/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-05-30T16:57:24Z"
    },
    {
      "event": "labeled",
      "id": 9380820036,
      "node_id": "LE_lADOEEET9c5mbIhxzwAAAAIvI_RE",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/9380820036",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-05-30T16:57:29Z",
      "label": {
        "name": "CI failed",
        "color": "ededed"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 9381798577,
      "node_id": "HRFPE_lADOEEET9c5mbIhxzwAAAAIvMuKx",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/9381798577",
      "actor": {
        "login": "denavila",
        "id": 123340139,
        "node_id": "U_kgDOB1oFaw",
        "avatar_url": "https://avatars.githubusercontent.com/u/123340139?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/denavila",
        "html_url": "https://github.com/denavila",
        "followers_url": "https://api.github.com/users/denavila/followers",
        "following_url": "https://api.github.com/users/denavila/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/denavila/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/denavila/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/denavila/subscriptions",
        "organizations_url": "https://api.github.com/users/denavila/orgs",
        "repos_url": "https://api.github.com/users/denavila/repos",
        "events_url": "https://api.github.com/users/denavila/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/denavila/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-05-30T18:47:19Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 9382432553,
      "node_id": "HRFPE_lADOEEET9c5mbIhxzwAAAAIvPI8p",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/9382432553",
      "actor": {
        "login": "denavila",
        "id": 123340139,
        "node_id": "U_kgDOB1oFaw",
        "avatar_url": "https://avatars.githubusercontent.com/u/123340139?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/denavila",
        "html_url": "https://github.com/denavila",
        "followers_url": "https://api.github.com/users/denavila/followers",
        "following_url": "https://api.github.com/users/denavila/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/denavila/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/denavila/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/denavila/subscriptions",
        "organizations_url": "https://api.github.com/users/denavila/orgs",
        "repos_url": "https://api.github.com/users/denavila/repos",
        "events_url": "https://api.github.com/users/denavila/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/denavila/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-05-30T19:58:00Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 9382800138,
      "node_id": "HRFPE_lADOEEET9c5mbIhxzwAAAAIvQisK",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/9382800138",
      "actor": {
        "login": "denavila",
        "id": 123340139,
        "node_id": "U_kgDOB1oFaw",
        "avatar_url": "https://avatars.githubusercontent.com/u/123340139?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/denavila",
        "html_url": "https://github.com/denavila",
        "followers_url": "https://api.github.com/users/denavila/followers",
        "following_url": "https://api.github.com/users/denavila/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/denavila/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/denavila/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/denavila/subscriptions",
        "organizations_url": "https://api.github.com/users/denavila/orgs",
        "repos_url": "https://api.github.com/users/denavila/repos",
        "events_url": "https://api.github.com/users/denavila/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/denavila/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-05-30T20:39:25Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 9385009615,
      "node_id": "HRFPE_lADOEEET9c5mbIhxzwAAAAIvY-HP",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/9385009615",
      "actor": {
        "login": "denavila",
        "id": 123340139,
        "node_id": "U_kgDOB1oFaw",
        "avatar_url": "https://avatars.githubusercontent.com/u/123340139?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/denavila",
        "html_url": "https://github.com/denavila",
        "followers_url": "https://api.github.com/users/denavila/followers",
        "following_url": "https://api.github.com/users/denavila/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/denavila/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/denavila/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/denavila/subscriptions",
        "organizations_url": "https://api.github.com/users/denavila/orgs",
        "repos_url": "https://api.github.com/users/denavila/repos",
        "events_url": "https://api.github.com/users/denavila/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/denavila/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-05-31T03:45:32Z"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-05-31T04:33:37Z",
      "updated_at": "2023-05-31T04:33:37Z",
      "source": {
        "issue": {
          "id": 1260256447,
          "node_id": "PR_kwDOABII5845Fj6p",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25273",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25273/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25273/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25273/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/25273",
          "number": 25273,
          "state": "closed",
          "state_reason": null,
          "title": "wallet: Pass through transaction locktime and preset input sequences and scripts to CreateTransaction",
          "body": "Currently `FundTransaction` handles transaction locktime and preset input data by extracting the selected inputs and change output from `CreateTransaction`'s results. This means that `CreateTransaction` is actually unaware of any user desired locktime or sequence numbers. This can have an effect on whether and how anti-fee-sniping works.\r\n\r\nThis PR makes `CreateTransaction` aware of the locktime and preset input data by providing them to `CCoinControl`. `CreateTransasction` will then set the sequences, scriptSigs, scriptWItnesses, and locktime as appropriate if they are specified. This allows `FundTransaction` to actually use `CreateTransaction`'s result directly instead of having to extract the parts of it that it wants.\r\n\r\nAdditionally `FundTransaction` will return a `CreateTransactionResult` as `CreateTransaction` does instead of having several output parameters. Lastly, instead of using `-1` as a magic number for the change output position, the change position is changed to be an optional with no value set indicating no desired change output position (when provided as an input parameter) or no change output present (in the result).",
          "user": {
            "login": "achow101",
            "id": 3782274,
            "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
            "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/achow101",
            "html_url": "https://github.com/achow101",
            "followers_url": "https://api.github.com/users/achow101/followers",
            "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
            "organizations_url": "https://api.github.com/users/achow101/orgs",
            "repos_url": "https://api.github.com/users/achow101/repos",
            "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/achow101/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 149424,
              "node_id": "MDU6TGFiZWwxNDk0MjQ=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Wallet",
              "name": "Wallet",
              "color": "08a781",
              "default": false
            },
            {
              "id": 98279177,
              "node_id": "MDU6TGFiZWw5ODI3OTE3Nw==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/RPC/REST/ZMQ",
              "name": "RPC/REST/ZMQ",
              "color": "0052cc",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": false,
          "comments": 13,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25273",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/25273",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/25273.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/25273.patch"
          },
          "closed_at": "2023-12-11T15:29:36Z",
          "created_at": "2022-06-03T18:58:15Z",
          "updated_at": "2023-12-12T12:52:23Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 9385915217,
      "node_id": "HRFPE_lADOEEET9c5mbIhxzwAAAAIvcbNR",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/9385915217",
      "actor": {
        "login": "denavila",
        "id": 123340139,
        "node_id": "U_kgDOB1oFaw",
        "avatar_url": "https://avatars.githubusercontent.com/u/123340139?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/denavila",
        "html_url": "https://github.com/denavila",
        "followers_url": "https://api.github.com/users/denavila/followers",
        "following_url": "https://api.github.com/users/denavila/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/denavila/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/denavila/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/denavila/subscriptions",
        "organizations_url": "https://api.github.com/users/denavila/orgs",
        "repos_url": "https://api.github.com/users/denavila/repos",
        "events_url": "https://api.github.com/users/denavila/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/denavila/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-05-31T06:36:50Z"
    },
    {
      "event": "referenced",
      "id": 9385962013,
      "node_id": "REFE_lADOEEET9c5mbIhxzwAAAAIvcmod",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/9385962013",
      "actor": {
        "login": "denavila",
        "id": 123340139,
        "node_id": "U_kgDOB1oFaw",
        "avatar_url": "https://avatars.githubusercontent.com/u/123340139?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/denavila",
        "html_url": "https://github.com/denavila",
        "followers_url": "https://api.github.com/users/denavila/followers",
        "following_url": "https://api.github.com/users/denavila/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/denavila/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/denavila/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/denavila/subscriptions",
        "organizations_url": "https://api.github.com/users/denavila/orgs",
        "repos_url": "https://api.github.com/users/denavila/repos",
        "events_url": "https://api.github.com/users/denavila/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/denavila/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "246589f3f795146216531f0311fe5d1ac171842b",
      "commit_url": "https://api.github.com/repos/denavila/bitcoin/commits/246589f3f795146216531f0311fe5d1ac171842b",
      "created_at": "2023-05-31T06:43:19Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 9386219263,
      "node_id": "HRFPE_lADOEEET9c5mbIhxzwAAAAIvdlb_",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/9386219263",
      "actor": {
        "login": "denavila",
        "id": 123340139,
        "node_id": "U_kgDOB1oFaw",
        "avatar_url": "https://avatars.githubusercontent.com/u/123340139?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/denavila",
        "html_url": "https://github.com/denavila",
        "followers_url": "https://api.github.com/users/denavila/followers",
        "following_url": "https://api.github.com/users/denavila/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/denavila/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/denavila/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/denavila/subscriptions",
        "organizations_url": "https://api.github.com/users/denavila/orgs",
        "repos_url": "https://api.github.com/users/denavila/repos",
        "events_url": "https://api.github.com/users/denavila/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/denavila/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-05-31T07:12:16Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 9386393922,
      "node_id": "HRFPE_lADOEEET9c5mbIhxzwAAAAIveQFC",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/9386393922",
      "actor": {
        "login": "denavila",
        "id": 123340139,
        "node_id": "U_kgDOB1oFaw",
        "avatar_url": "https://avatars.githubusercontent.com/u/123340139?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/denavila",
        "html_url": "https://github.com/denavila",
        "followers_url": "https://api.github.com/users/denavila/followers",
        "following_url": "https://api.github.com/users/denavila/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/denavila/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/denavila/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/denavila/subscriptions",
        "organizations_url": "https://api.github.com/users/denavila/orgs",
        "repos_url": "https://api.github.com/users/denavila/repos",
        "events_url": "https://api.github.com/users/denavila/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/denavila/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-05-31T07:30:31Z"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "denavila",
        "id": 123340139,
        "node_id": "U_kgDOB1oFaw",
        "avatar_url": "https://avatars.githubusercontent.com/u/123340139?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/denavila",
        "html_url": "https://github.com/denavila",
        "followers_url": "https://api.github.com/users/denavila/followers",
        "following_url": "https://api.github.com/users/denavila/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/denavila/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/denavila/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/denavila/subscriptions",
        "organizations_url": "https://api.github.com/users/denavila/orgs",
        "repos_url": "https://api.github.com/users/denavila/repos",
        "events_url": "https://api.github.com/users/denavila/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/denavila/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-05-31T07:50:37Z",
      "updated_at": "2023-05-31T07:50:37Z",
      "source": {
        "issue": {
          "id": 1733592520,
          "node_id": "PR_kwDOABII585RwZm6",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/27792",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/27792/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/27792/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/27792/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/27792",
          "number": 27792,
          "state": "open",
          "state_reason": null,
          "title": "wallet: Deniability API (Unilateral Transaction Meta-Privacy)",
          "body": "This PR is the wallet API and implementation portion of the GUI PR ( https://github.com/bitcoin-core/gui/pull/733 ) which is an implementation of the ideas in Paul Sztorc's blog post \"**Deniability - Unilateral Transaction Meta-Privacy**\"(https://www.truthcoin.info/blog/deniability/).\r\n\r\nThe GUI PR has all the details and screenshots of the GUI additions. Here I'll just copy the relevant context for the wallet API changes:\r\n\r\n\"_In short, Paul's idea is to periodically split coins and send them to yourself, making it look like common \"spend\" transactions, such that blockchain ownership analysis becomes more difficult, and thus improving the user's privacy.\r\nWe've implemented this as an additional \"Deniability\" wallet view. The majority of the code is in a new deniabilitydialog.cpp/h source files containing a new DeniabilityDialog class, hooked up to the WalletView class._ \"\r\n\r\nWhile the Deniability dialog can be implemented entirely with the existing API, adding the core \"deniabilization\" functions to the interfaces::Wallet API allows us to implement the GUI portion with much less code, and more importantly allows us to add RPC support and more thorough unit tests, which is what this PR attempts to do.\r\n\r\nThe main \"deniabilization\" functionality is implemented in spend.cpp/h and feebumper.cpp/h and exposed via the interfaces::Wallet API. \r\nWe've added RPC support via a new RPC call \"walletdeniabilizecoin\". \r\nWe also extended the Wallet tests with coverage for the functionality.\r\n",
          "user": {
            "login": "denavila",
            "id": 123340139,
            "node_id": "U_kgDOB1oFaw",
            "avatar_url": "https://avatars.githubusercontent.com/u/123340139?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/denavila",
            "html_url": "https://github.com/denavila",
            "followers_url": "https://api.github.com/users/denavila/followers",
            "following_url": "https://api.github.com/users/denavila/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/denavila/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/denavila/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/denavila/subscriptions",
            "organizations_url": "https://api.github.com/users/denavila/orgs",
            "repos_url": "https://api.github.com/users/denavila/repos",
            "events_url": "https://api.github.com/users/denavila/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/denavila/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 149424,
              "node_id": "MDU6TGFiZWwxNDk0MjQ=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Wallet",
              "name": "Wallet",
              "color": "08a781",
              "default": false
            },
            {
              "id": 5334691551,
              "node_id": "LA_kwDOABII588AAAABPfju3w",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/CI%20failed",
              "name": "CI failed",
              "description": "",
              "color": "cccccc",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "NONE",
          "locked": false,
          "comments": 26,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/27792",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/27792",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/27792.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/27792.patch"
          },
          "created_at": "2023-05-31T07:50:37Z",
          "updated_at": "2024-01-16T08:05:29Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-05-31T11:16:41Z",
      "updated_at": "2023-05-31T11:16:41Z",
      "source": {
        "issue": {
          "id": 1632858009,
          "node_id": "PR_kwDOABII585MfYTP",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/27286",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/27286/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/27286/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/27286/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/27286",
          "number": 27286,
          "state": "open",
          "state_reason": null,
          "title": "wallet: Keep track of the wallet's own transaction outputs in memory",
          "body": "Currently, the wallet is not actually aware about its own transaction outputs. Instead, it will iterate all of the transactions stored in `mapWallet`, and then all of the outputs of those transactions, in order to figure out what belongs to it for the purposes of coin selection and balance calculation. For balance calculation, there is caching that results in it only iterating all of the transactions, but not all of the outputs. However when the cache is dirty, everything is iterated. This is especially problematic for wallets that have a lot of transactions, or transactions that have a lot of unrelated outputs (as may occur with coinjoins or batched payments).\r\n\r\nThis PR helps to resolve this issue by making the wallet track all of the outputs that belong to it in a new member `m_txos`. Note that this includes outputs that may have already been spent. Both balance calculation (`GetBalance`) and coin selection (`AvailableCoins`) are updated to iterate `m_txos`. This is generally faster since it ignores all of the unrelated outputs, and it is not slower as in the worst case of wallets containing only single output transactions, it's exactly the same number of outputs iterated.\r\n\r\n`m_txos` is memory only, and it is populated during wallet loading. When each transaction is loaded, all of its outputs are checked to see if it is `IsMine`, and if so, an entry added to `m_txos`. When new transactions are received, the same procedure is done.\r\n\r\nSince imports can change the `IsMine` status of a transaction (although they can only be \"promoted\" from watchonly to spendable), all of the import RPCs will be a bit slower as they re-iterate all transactions and all outputs to update `m_txos`.\r\n\r\nEach output in `m_txos` is stored in a new `WalletTXO` class. This class contains references to the parent `CWalletTx` and the `CTxOut` itself. It also caches the `IsMine` value of the txout. This should be safe as `IsMine` should not change unless there are imports. This allows us to have additional performance improvements in places that use these `WalletTXO`s as they can use the cached `IsMine` rather than repeatedly calling `IsMine` which can be expensive.\r\n\r\nThe existing `WalletBalance` benchmark demonstrates the performance improvement that this PR makes. The existing `WalletAvailableCoins` benchmark doesn't as all of the outputs used in that benchmark belong to the test wallet. I've updated that benchmark to have a bunch of unrelated outputs in each transaction so that the difference is demonstrated.\r\n\r\nThis is part of a larger project to have the wallet actually track and store a set of its UTXOs.\r\n\r\nBuilt on #24914 as it requires loading the txs last in order for `m_txos` to be built correctly.\r\n\r\n***\r\n\r\n## Benchmarks:\r\n\r\nMaster:\r\n\r\n|               ns/op |                op/s |    err% |          ins/op |         bra/op |   miss% |     total | benchmark\r\n|--------------------:|--------------------:|--------:|----------------:|---------------:|--------:|----------:|:----------\r\n|       92,245,141.50 |               10.84 |    0.1% |  988,823,975.00 |  66,803,340.50 |    0.0% |      2.04 | `WalletAvailableCoins`\r\n|            5,709.90 |          175,134.50 |    0.5% |       80,968.24 |      25,539.15 |    0.1% |      0.01 | `WalletBalanceClean`\r\n|          139,396.17 |            7,173.80 |    0.6% |    1,383,390.50 |     430,276.86 |    0.0% |      0.01 | `WalletBalanceDirty`\r\n|            5,055.80 |          197,792.47 |    0.3% |       80,968.10 |      25,539.02 |    0.1% |      0.01 | `WalletBalanceMine`\r\n|                9.79 |      102,152,396.19 |    0.1% |          161.00 |          37.00 |    0.0% |      0.01 | `WalletBalanceWatch`\r\n|        1,552,736.00 |              644.02 |    1.5% |   20,316,315.80 |     618,545.80 |    0.6% |      0.08 | `WalletCreateTxUseOnlyPresetInputs`\r\n|      114,114,732.00 |                8.76 |    0.5% |1,291,047,717.60 | 320,244,602.00 |    0.0% |      6.30 | `WalletCreateTxUsePresetInputsAndCoinSelection`\r\n|      359,315,754.00 |                2.78 |    0.1% |4,339,447,818.00 | 136,619,757.00 |    0.7% |      1.80 | `WalletLoadingDescriptors`\r\n|       98,230,601.00 |               10.18 |    0.1% |  537,688,964.00 |  97,332,266.00 |    0.3% |      0.49 | `WalletLoadingLegacy`\r\n\r\nPR:\r\n\r\n|               ns/op |                op/s |    err% |          ins/op |         bra/op |   miss% |     total | benchmark\r\n|--------------------:|--------------------:|--------:|----------------:|---------------:|--------:|----------:|:----------\r\n|       75,319,868.50 |               13.28 |    0.2% |  863,758,229.00 |  30,892,593.00 |    0.2% |      1.66 | `WalletAvailableCoins`\r\n|            2,367.62 |          422,364.95 |    1.0% |       35,785.05 |       9,893.01 |    0.2% |      0.01 | `WalletBalanceClean`\r\n|            2,685.58 |          372,359.55 |    0.2% |       36,501.05 |      10,027.01 |    0.1% |      0.01 | `WalletBalanceDirty`\r\n|            3,462.24 |          288,830.68 |    2.7% |       35,785.06 |       9,893.01 |    0.3% |      0.01 | `WalletBalanceMine`\r\n|               11.65 |       85,838,176.97 |    0.1% |          180.00 |          42.00 |    0.0% |      0.01 | `WalletBalanceWatch`\r\n|        1,563,092.60 |              639.76 |    1.5% |   20,426,154.40 |     649,953.80 |    0.6% |      0.09 | `WalletCreateTxUseOnlyPresetInputs`\r\n|       58,367,804.40 |               17.13 |    0.9% |  587,164,005.00 | 107,905,843.80 |    0.1% |      3.21 | `WalletCreateTxUsePresetInputsAndCoinSelection`\r\n|      365,302,636.00 |                2.74 |    0.2% |4,349,345,147.00 | 138,730,668.00 |    0.8% |      1.83 | `WalletLoadingDescriptors`\r\n|      124,995,585.00 |                8.00 |    1.2% |  801,998,316.00 | 103,210,721.00 |    0.3% |      0.63 | `WalletLoadingLegacy`\r\n",
          "user": {
            "login": "achow101",
            "id": 3782274,
            "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
            "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/achow101",
            "html_url": "https://github.com/achow101",
            "followers_url": "https://api.github.com/users/achow101/followers",
            "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
            "organizations_url": "https://api.github.com/users/achow101/orgs",
            "repos_url": "https://api.github.com/users/achow101/repos",
            "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/achow101/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 149424,
              "node_id": "MDU6TGFiZWwxNDk0MjQ=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Wallet",
              "name": "Wallet",
              "color": "08a781",
              "default": false
            },
            {
              "id": 5334691551,
              "node_id": "LA_kwDOABII588AAAABPfju3w",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/CI%20failed",
              "name": "CI failed",
              "description": "",
              "color": "cccccc",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": false,
          "comments": 7,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/27286",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/27286",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/27286.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/27286.patch"
          },
          "created_at": "2023-03-20T21:02:45Z",
          "updated_at": "2024-01-17T01:31:01Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-05-31T13:35:56Z",
      "updated_at": "2023-05-31T13:35:56Z",
      "source": {
        "issue": {
          "id": 1347108338,
          "node_id": "PR_kwDOABII5849mUDu",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25907",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25907/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25907/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25907/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/25907",
          "number": 25907,
          "state": "closed",
          "state_reason": null,
          "title": "wallet: rpc to add automatically generated descriptors",
          "body": "It is useful to have a RPC that can create and add the automatically generated descriptors (that are normally made during creation) to a wallet. This is especially useful when a new default descriptor has been implemented as it allows wallets created before that time to quickly and easily add that type of descriptor.\r\n\r\nIn particular, descriptor wallets created before Taproot was implemented can use the new `createwalletdescriptor` RPC in order to get a Taproot descriptor.\r\n\r\nFurthermore, to keep the newly generated descriptor in line with the existing descriptors, this PR uses #26728 as it exposes a \"wallet extended key\" for us (in addition to upgrading wallets implemented prior to have a wallet xpub). The newly generated descriptors will use the \"wallet extended key\" stored in `CWallet` that PR adds.\r\n\r\n`createwalletdescriptor` is generic and so it can also be used with the other address types. Of course, it given the same wallet extended key, address type, and internal-ness, it will create the same descriptor. So some refactoring has been done in order to detect that the same descriptor is about to be created, and to avoid overwriting any existing descriptors.",
          "user": {
            "login": "achow101",
            "id": 3782274,
            "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
            "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/achow101",
            "html_url": "https://github.com/achow101",
            "followers_url": "https://api.github.com/users/achow101/followers",
            "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
            "organizations_url": "https://api.github.com/users/achow101/orgs",
            "repos_url": "https://api.github.com/users/achow101/repos",
            "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/achow101/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 149424,
              "node_id": "MDU6TGFiZWwxNDk0MjQ=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Wallet",
              "name": "Wallet",
              "color": "08a781",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": false,
          "comments": 18,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25907",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/25907",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/25907.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/25907.patch"
          },
          "closed_at": "2024-01-06T00:06:14Z",
          "created_at": "2022-08-22T23:17:45Z",
          "updated_at": "2024-01-06T00:06:14Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-05-31T14:00:01Z",
      "updated_at": "2023-05-31T14:00:01Z",
      "source": {
        "issue": {
          "id": 1213857595,
          "node_id": "PR_kwDOABII5842sX1K",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/24963",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/24963/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/24963/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/24963/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/24963",
          "number": 24963,
          "state": "open",
          "state_reason": null,
          "title": "RPC/Wallet: Convert walletprocesspsbt to use options parameter",
          "body": "`walletprocesspsbt` has a single logical positional argument and a bunch that only make sense as named options. Convert them to an actual options Object for a better positional API.\r\n\r\nRetains backward compatibility for now.",
          "user": {
            "login": "luke-jr",
            "id": 1095675,
            "node_id": "MDQ6VXNlcjEwOTU2NzU=",
            "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/luke-jr",
            "html_url": "https://github.com/luke-jr",
            "followers_url": "https://api.github.com/users/luke-jr/followers",
            "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
            "organizations_url": "https://api.github.com/users/luke-jr/orgs",
            "repos_url": "https://api.github.com/users/luke-jr/repos",
            "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/luke-jr/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 149424,
              "node_id": "MDU6TGFiZWwxNDk0MjQ=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Wallet",
              "name": "Wallet",
              "color": "08a781",
              "default": false
            },
            {
              "id": 98279177,
              "node_id": "MDU6TGFiZWw5ODI3OTE3Nw==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/RPC/REST/ZMQ",
              "name": "RPC/REST/ZMQ",
              "color": "0052cc",
              "default": false
            },
            {
              "id": 5334691551,
              "node_id": "LA_kwDOABII588AAAABPfju3w",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/CI%20failed",
              "name": "CI failed",
              "description": "",
              "color": "cccccc",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": false,
          "comments": 8,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24963",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/24963",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/24963.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/24963.patch"
          },
          "created_at": "2022-04-25T02:03:07Z",
          "updated_at": "2024-01-14T05:13:00Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-05-31T14:52:48Z",
      "updated_at": "2023-05-31T14:52:48Z",
      "source": {
        "issue": {
          "id": 814723992,
          "node_id": "MDExOlB1bGxSZXF1ZXN0NTc4NjY1NDk1",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21283",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21283/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21283/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21283/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/21283",
          "number": 21283,
          "state": "open",
          "state_reason": null,
          "title": "Implement BIP 370 PSBTv2",
          "body": "BIP 370 PSBTv2 introduces several new fields and different invariants for PSBT. This PR implements those new fields and restructures the PSBT implementation to match PSBTv2 but still remain compatible with PSBTv0.",
          "user": {
            "login": "achow101",
            "id": 3782274,
            "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
            "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/achow101",
            "html_url": "https://github.com/achow101",
            "followers_url": "https://api.github.com/users/achow101/followers",
            "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
            "organizations_url": "https://api.github.com/users/achow101/orgs",
            "repos_url": "https://api.github.com/users/achow101/repos",
            "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/achow101/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 135946,
              "node_id": "MDU6TGFiZWwxMzU5NDY=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/GUI",
              "name": "GUI",
              "color": "02d7e1",
              "default": false
            },
            {
              "id": 149424,
              "node_id": "MDU6TGFiZWwxNDk0MjQ=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Wallet",
              "name": "Wallet",
              "color": "08a781",
              "default": false
            },
            {
              "id": 98279177,
              "node_id": "MDU6TGFiZWw5ODI3OTE3Nw==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/RPC/REST/ZMQ",
              "name": "RPC/REST/ZMQ",
              "color": "0052cc",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": false,
          "comments": 8,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21283",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/21283",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/21283.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/21283.patch"
          },
          "created_at": "2021-02-23T18:29:20Z",
          "updated_at": "2024-01-17T02:41:57Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "unlabeled",
      "id": 9393863738,
      "node_id": "UNLE_lADOEEET9c5mbIhxzwAAAAIv6vw6",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/9393863738",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-05-31T18:18:55Z",
      "label": {
        "name": "CI failed",
        "color": "ededed"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-05-31T20:07:24Z",
      "updated_at": "2023-05-31T20:07:24Z",
      "source": {
        "issue": {
          "id": 1656067373,
          "node_id": "PR_kwDOABII585NszR8",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/27425",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/27425/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/27425/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/27425/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/27425",
          "number": 27425,
          "state": "closed",
          "state_reason": null,
          "title": "test: move remaining rand code from util/setup_common to util/random",
          "body": "and drop the `util/random` dependency on `util/setup_common`.  This improves code separation and allows `util/setup_common` to call `util/random` functions without creating a circular dependency, thereby addressing https://github.com/bitcoin/bitcoin/pull/26940#issuecomment-1497266140 by glozow (thanks!)\r\n",
          "user": {
            "login": "jonatack",
            "id": 2415484,
            "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
            "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jonatack",
            "html_url": "https://github.com/jonatack",
            "followers_url": "https://api.github.com/users/jonatack/followers",
            "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
            "organizations_url": "https://api.github.com/users/jonatack/orgs",
            "repos_url": "https://api.github.com/users/jonatack/repos",
            "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/jonatack/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 62963516,
              "node_id": "MDU6TGFiZWw2Mjk2MzUxNg==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Tests",
              "name": "Tests",
              "color": "d4c5f9",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "CONTRIBUTOR",
          "locked": false,
          "comments": 9,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/27425",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/27425",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/27425.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/27425.patch"
          },
          "closed_at": "2023-07-19T09:26:25Z",
          "created_at": "2023-04-05T18:05:11Z",
          "updated_at": "2023-07-19T11:50:29Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-06-01T08:18:02Z",
      "updated_at": "2023-06-01T08:18:02Z",
      "source": {
        "issue": {
          "id": 1444391214,
          "node_id": "PR_kwDOABII585CpZuT",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26485",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26485/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26485/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26485/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/26485",
          "number": 26485,
          "state": "closed",
          "state_reason": null,
          "title": "RPC: Accept options as named-only parameters",
          "body": "Allow RPC methods which take an `options` parameter (`importmulti`, `listunspent`, `fundrawtransaction`, `bumpfee`, `send`, `sendall`, `walletcreatefundedpsbt`, `simulaterawtransaction`), to accept the options as named parameters, without the need for nested JSON objects.\r\n\r\nThis makes it possible to make calls like:\r\n\r\n```sh\r\nsrc/bitcoin-cli -named bumpfee txid fee_rate=10\r\n```\r\n\r\ninstead of\r\n\r\n```sh\r\nsrc/bitcoin-cli -named bumpfee txid options='{\"fee_rate\": 10}'\r\n```\r\n\r\nRPC help is also updated to show options as top level named arguments instead of as nested objects.\r\n\r\n\r\n<details><summary>diff</summary>\r\n<p>\r\n\r\n```diff\r\n@@ -15,16 +15,17 @@\r\n \r\n Arguments:\r\n 1. txid                           (string, required) The txid to be bumped\r\n-2. options                        (json object, optional)\r\n+2. options                        (json object, optional) Options object that can be used to pass named arguments, listed below.\r\n+                 \r\n+Named Arguments:\r\n-     {\r\n-       \"conf_target\": n,          (numeric, optional, default=wallet -txconfirmtarget) Confirmation target in blocks\r\n+conf_target                       (numeric, optional, default=wallet -txconfirmtarget) Confirmation target in blocks\r\n \r\n-       \"fee_rate\": amount,        (numeric or string, optional, default=not set, fall back to wallet fee estimation) \r\n+fee_rate                          (numeric or string, optional, default=not set, fall back to wallet fee estimation) \r\n                                   Specify a fee rate in sat/vB instead of relying on the built-in fee estimator.\r\n                                   Must be at least 1.000 sat/vB higher than the current transaction fee rate.\r\n                                   WARNING: before version 0.21, fee_rate was in BTC/kvB. As of 0.21, fee_rate is in sat/vB.\r\n                                   \r\n-       \"replaceable\": bool,       (boolean, optional, default=true) Whether the new transaction should still be\r\n+replaceable                       (boolean, optional, default=true) Whether the new transaction should still be\r\n                                   marked bip-125 replaceable. If true, the sequence numbers in the transaction will\r\n                                   be left unchanged from the original. If false, any input sequence numbers in the\r\n                                   original transaction that were less than 0xfffffffe will be increased to 0xfffffffe\r\n@@ -32,11 +33,10 @@\r\n                                   still be replaceable in practice, for example if it has unconfirmed ancestors which\r\n                                   are replaceable).\r\n                                   \r\n-       \"estimate_mode\": \"str\",    (string, optional, default=\"unset\") The fee estimate mode, must be one of (case insensitive):\r\n+estimate_mode                     (string, optional, default=\"unset\") The fee estimate mode, must be one of (case insensitive):\r\n                                   \"unset\"\r\n                                   \"economical\"\r\n                                   \"conservative\"\r\n-     }\r\n \r\n Result:\r\n {                    (json object)\r\n```\r\n\r\n</p>\r\n</details>\r\n\r\n\r\n**Review suggestion:** To understand this PR, it is probably easiest to review the commits in reverse order because the last commit shows the external API changes, the middle commit shows the internal API changes, and the first commit contains the low-level implementation.\r\n",
          "user": {
            "login": "ryanofsky",
            "id": 7133040,
            "node_id": "MDQ6VXNlcjcxMzMwNDA=",
            "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/ryanofsky",
            "html_url": "https://github.com/ryanofsky",
            "followers_url": "https://api.github.com/users/ryanofsky/followers",
            "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
            "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
            "repos_url": "https://api.github.com/users/ryanofsky/repos",
            "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 98279177,
              "node_id": "MDU6TGFiZWw5ODI3OTE3Nw==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/RPC/REST/ZMQ",
              "name": "RPC/REST/ZMQ",
              "color": "0052cc",
              "default": false
            },
            {
              "id": 5334691551,
              "node_id": "LA_kwDOABII588AAAABPfju3w",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/CI%20failed",
              "name": "CI failed",
              "description": "",
              "color": "cccccc",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "CONTRIBUTOR",
          "locked": false,
          "comments": 35,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26485",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/26485",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/26485.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/26485.patch"
          },
          "closed_at": "2023-06-01T19:32:05Z",
          "created_at": "2022-11-10T18:41:09Z",
          "updated_at": "2023-06-01T19:32:06Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-06-12T20:49:34Z",
      "updated_at": "2023-06-12T20:49:34Z",
      "source": {
        "issue": {
          "id": 1753342247,
          "node_id": "PR_kwDOABII585SzfoS",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/27865",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/27865/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/27865/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/27865/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/27865",
          "number": 27865,
          "state": "open",
          "state_reason": null,
          "title": "wallet: Track no-longer-spendable TXOs separately",
          "body": "In #27286, the wallet keeps track of all of its transaction outputs, even if they are already spent or are otherwise unspendable. This TXO set is iterated for balance checking and coin selection preparation, which can still be slow for wallets that have had a lot of activity. This PR aims to improve the performance of such wallets by moving UTXOs that are definitely no longer spendable to a different map in the wallet so that far fewer TXOs need to be iterated for the aforementioned functions.\r\n\r\nUnspendable TXOs (not to be confused with Unspent TXOs) are those which have a spending transaction that has been confirmed, or are no longer valid due to reorgs. TXOs that are spent in unconfirmed transactions remain in the primary TXO set, and are filtered out of balance and coin selection as before.\r\n\r\nDepends on #27286",
          "user": {
            "login": "achow101",
            "id": 3782274,
            "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
            "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/achow101",
            "html_url": "https://github.com/achow101",
            "followers_url": "https://api.github.com/users/achow101/followers",
            "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
            "organizations_url": "https://api.github.com/users/achow101/orgs",
            "repos_url": "https://api.github.com/users/achow101/repos",
            "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/achow101/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 149424,
              "node_id": "MDU6TGFiZWwxNDk0MjQ=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Wallet",
              "name": "Wallet",
              "color": "08a781",
              "default": false
            },
            {
              "id": 5334691551,
              "node_id": "LA_kwDOABII588AAAABPfju3w",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/CI%20failed",
              "name": "CI failed",
              "description": "",
              "color": "cccccc",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": false,
          "comments": 6,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/27865",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/27865",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/27865.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/27865.patch"
          },
          "created_at": "2023-06-12T18:40:10Z",
          "updated_at": "2024-01-17T01:06:53Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "commented",
      "id": 1590038670,
      "node_id": "IC_kwDOEEET9c5exhCO",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/comments/1590038670",
      "actor": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-06-13T21:17:21Z",
      "updated_at": "2023-06-13T21:17:21Z",
      "author_association": "CONTRIBUTOR",
      "body": "Maybe mark as draft as long as it depends on the upstream changes?",
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/gui/pull/733#issuecomment-1590038670",
      "issue_url": "https://api.github.com/repos/bitcoin-core/gui/issues/733"
    },
    {
      "event": "convert_to_draft",
      "id": 9521285297,
      "node_id": "CTDE_lADOEEET9c5mbIhxzwAAAAI3g0ix",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/9521285297",
      "actor": {
        "login": "denavila",
        "id": 123340139,
        "node_id": "U_kgDOB1oFaw",
        "avatar_url": "https://avatars.githubusercontent.com/u/123340139?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/denavila",
        "html_url": "https://github.com/denavila",
        "followers_url": "https://api.github.com/users/denavila/followers",
        "following_url": "https://api.github.com/users/denavila/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/denavila/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/denavila/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/denavila/subscriptions",
        "organizations_url": "https://api.github.com/users/denavila/orgs",
        "repos_url": "https://api.github.com/users/denavila/repos",
        "events_url": "https://api.github.com/users/denavila/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/denavila/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-06-13T21:56:53Z"
    },
    {
      "event": "commented",
      "id": 1590079466,
      "node_id": "IC_kwDOEEET9c5exq_q",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/comments/1590079466",
      "actor": {
        "login": "denavila",
        "id": 123340139,
        "node_id": "U_kgDOB1oFaw",
        "avatar_url": "https://avatars.githubusercontent.com/u/123340139?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/denavila",
        "html_url": "https://github.com/denavila",
        "followers_url": "https://api.github.com/users/denavila/followers",
        "following_url": "https://api.github.com/users/denavila/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/denavila/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/denavila/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/denavila/subscriptions",
        "organizations_url": "https://api.github.com/users/denavila/orgs",
        "repos_url": "https://api.github.com/users/denavila/repos",
        "events_url": "https://api.github.com/users/denavila/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/denavila/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-06-13T22:00:14Z",
      "updated_at": "2023-06-13T22:00:14Z",
      "author_association": "NONE",
      "body": "> Maybe mark as draft as long as it depends on the upstream changes?\r\n\r\nI converted the PR to a draft. Thanks!",
      "user": {
        "login": "denavila",
        "id": 123340139,
        "node_id": "U_kgDOB1oFaw",
        "avatar_url": "https://avatars.githubusercontent.com/u/123340139?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/denavila",
        "html_url": "https://github.com/denavila",
        "followers_url": "https://api.github.com/users/denavila/followers",
        "following_url": "https://api.github.com/users/denavila/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/denavila/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/denavila/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/denavila/subscriptions",
        "organizations_url": "https://api.github.com/users/denavila/orgs",
        "repos_url": "https://api.github.com/users/denavila/repos",
        "events_url": "https://api.github.com/users/denavila/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/denavila/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/gui/pull/733#issuecomment-1590079466",
      "issue_url": "https://api.github.com/repos/bitcoin-core/gui/issues/733"
    },
    {
      "event": "labeled",
      "id": 9860265875,
      "node_id": "LE_lADOEEET9c5mbIhxzwAAAAJLt7eT",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/9860265875",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-07-19T09:29:58Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "referenced",
      "id": 10264561188,
      "node_id": "REFE_lADOEEET9c5mbIhxzwAAAAJj0MYk",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/10264561188",
      "actor": {
        "login": "denavila",
        "id": 123340139,
        "node_id": "U_kgDOB1oFaw",
        "avatar_url": "https://avatars.githubusercontent.com/u/123340139?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/denavila",
        "html_url": "https://github.com/denavila",
        "followers_url": "https://api.github.com/users/denavila/followers",
        "following_url": "https://api.github.com/users/denavila/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/denavila/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/denavila/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/denavila/subscriptions",
        "organizations_url": "https://api.github.com/users/denavila/orgs",
        "repos_url": "https://api.github.com/users/denavila/repos",
        "events_url": "https://api.github.com/users/denavila/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/denavila/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "19257380745f0783eb1e2e863797038738d093dd",
      "commit_url": "https://api.github.com/repos/denavila/bitcoin/commits/19257380745f0783eb1e2e863797038738d093dd",
      "created_at": "2023-09-02T18:00:52Z"
    },
    {
      "event": "referenced",
      "id": 10264878787,
      "node_id": "REFE_lADOEEET9c5mbIhxzwAAAAJj1Z7D",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/10264878787",
      "actor": {
        "login": "denavila",
        "id": 123340139,
        "node_id": "U_kgDOB1oFaw",
        "avatar_url": "https://avatars.githubusercontent.com/u/123340139?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/denavila",
        "html_url": "https://github.com/denavila",
        "followers_url": "https://api.github.com/users/denavila/followers",
        "following_url": "https://api.github.com/users/denavila/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/denavila/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/denavila/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/denavila/subscriptions",
        "organizations_url": "https://api.github.com/users/denavila/orgs",
        "repos_url": "https://api.github.com/users/denavila/repos",
        "events_url": "https://api.github.com/users/denavila/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/denavila/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "379b724eb56320ed9f5704814817488686d9c28f",
      "commit_url": "https://api.github.com/repos/denavila/bitcoin/commits/379b724eb56320ed9f5704814817488686d9c28f",
      "created_at": "2023-09-02T21:34:47Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 10264927234,
      "node_id": "HRFPE_lADOEEET9c5mbIhxzwAAAAJj1lwC",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/10264927234",
      "actor": {
        "login": "denavila",
        "id": 123340139,
        "node_id": "U_kgDOB1oFaw",
        "avatar_url": "https://avatars.githubusercontent.com/u/123340139?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/denavila",
        "html_url": "https://github.com/denavila",
        "followers_url": "https://api.github.com/users/denavila/followers",
        "following_url": "https://api.github.com/users/denavila/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/denavila/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/denavila/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/denavila/subscriptions",
        "organizations_url": "https://api.github.com/users/denavila/orgs",
        "repos_url": "https://api.github.com/users/denavila/repos",
        "events_url": "https://api.github.com/users/denavila/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/denavila/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-09-02T22:17:40Z"
    },
    {
      "event": "unlabeled",
      "id": 10265004937,
      "node_id": "UNLE_lADOEEET9c5mbIhxzwAAAAJj14uJ",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/10265004937",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-09-02T23:34:29Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "labeled",
      "id": 10265059357,
      "node_id": "LE_lADOEEET9c5mbIhxzwAAAAJj2GAd",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/10265059357",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-09-03T00:26:36Z",
      "label": {
        "name": "CI failed",
        "color": "ededed"
      }
    },
    {
      "event": "unlabeled",
      "id": 10275551913,
      "node_id": "UNLE_lADOEEET9c5mbIhxzwAAAAJkeHqp",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/10275551913",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-09-04T15:56:49Z",
      "label": {
        "name": "CI failed",
        "color": "ededed"
      }
    },
    {
      "event": "labeled",
      "id": 10362139685,
      "node_id": "LE_lADOEEET9c5mbIhxzwAAAAJpobQl",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/10362139685",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-09-13T16:55:26Z",
      "label": {
        "name": "CI failed",
        "color": "ededed"
      }
    },
    {
      "event": "unlabeled",
      "id": 10400130156,
      "node_id": "UNLE_lADOEEET9c5mbIhxzwAAAAJr5WRs",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/10400130156",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-09-18T16:09:35Z",
      "label": {
        "name": "CI failed",
        "color": "ededed"
      }
    },
    {
      "event": "labeled",
      "id": 10428096386,
      "node_id": "LE_lADOEEET9c5mbIhxzwAAAAJtkB-C",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/10428096386",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-09-20T21:57:31Z",
      "label": {
        "name": "CI failed",
        "color": "ededed"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-10-02T18:58:58Z",
      "updated_at": "2023-10-02T18:58:58Z",
      "source": {
        "issue": {
          "id": 1922280104,
          "node_id": "PR_kwDOABII585bsSxi",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28560",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28560/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28560/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28560/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/28560",
          "number": 28560,
          "state": "open",
          "state_reason": null,
          "title": "wallet, rpc: `FundTransaction` refactor",
          "body": "## Motivation\r\n\r\nThe primary motivation for this PR is to enable `FundTransaction` to take a vector of `CRecipient` objects to allow passing BIP352 silent payment addresses to RPCs that use `FundTransaction` (e.g. `send`, `walletcreatefundedpsbt`). To do that, SFFO logic needs to be moved out of `FundTransaction` so the `CRecipient` objects with the correct SFFO information can be created and then passed to `FundTransaction`.\r\n\r\nAs a secondary motivation, this PR moves the SFFO stuff closer to the caller, making the code cleaner and easier to understand. This is done by having a single function which parses RPC inputs for SFFO and consistently using the `set<int>` method for communicating SFFO.\r\n\r\nI'm also not convinced we need to pass a full `CMutableTx` object to `FundTransaction`, but I'm leaving that for a follow-up PR/discussion, as its not a blocker for silent payments.",
          "user": {
            "login": "josibake",
            "id": 7444140,
            "node_id": "MDQ6VXNlcjc0NDQxNDA=",
            "avatar_url": "https://avatars.githubusercontent.com/u/7444140?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/josibake",
            "html_url": "https://github.com/josibake",
            "followers_url": "https://api.github.com/users/josibake/followers",
            "following_url": "https://api.github.com/users/josibake/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/josibake/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/josibake/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/josibake/subscriptions",
            "organizations_url": "https://api.github.com/users/josibake/orgs",
            "repos_url": "https://api.github.com/users/josibake/repos",
            "events_url": "https://api.github.com/users/josibake/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/josibake/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 5334691551,
              "node_id": "LA_kwDOABII588AAAABPfju3w",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/CI%20failed",
              "name": "CI failed",
              "description": "",
              "color": "cccccc",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": false,
          "comments": 5,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28560",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/28560",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/28560.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/28560.patch"
          },
          "created_at": "2023-10-02T16:50:20Z",
          "updated_at": "2024-01-17T05:48:42Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-10-03T12:01:20Z",
      "updated_at": "2023-10-03T12:01:20Z",
      "source": {
        "issue": {
          "id": 1833542215,
          "node_id": "PR_kwDOABII585XB4Gh",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28201",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28201/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28201/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28201/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/28201",
          "number": 28201,
          "state": "open",
          "state_reason": null,
          "title": "Silent Payments: sending",
          "body": "This PR is part of integrating silent payments into Bitcoin Core. Status and tracking for the project is managed in https://github.com/bitcoin/bitcoin/issues/28536\r\n\r\nThis PR depends on #28122 and is marked as a draft until it is merged. If interested in those commits, please review on #28122\r\n\r\n## Sending \r\n### Silent Payments logic\r\n\r\nThe main focus of this PR is:\r\n\r\n* Applying the Taptweak to a taproot internal private key (this is a copy-paste of the code for applying the taptweak in the signing process)\r\n* Getting a private key from a given `scriptPubKey`\r\n* Creating silent payment outputs\r\n* Applying the created scriptPubKeys back to the vector of `CRecipients`\r\n\r\nThe functions are then used together to create silent payment outputs during `CreateTransactionInternal`.\r\n\r\n### Final steps\r\n\r\nThe last commits ensure that:\r\n\r\n* Coin selection is silent payments aware and knows to exclude taproot script path spends and inputs with unknown witness when funding a transaction which pays to a silent payment address\r\n* The change output type is correctly chosen when paying to a silent payment address\r\n* Functional tests\r\n",
          "user": {
            "login": "josibake",
            "id": 7444140,
            "node_id": "MDQ6VXNlcjc0NDQxNDA=",
            "avatar_url": "https://avatars.githubusercontent.com/u/7444140?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/josibake",
            "html_url": "https://github.com/josibake",
            "followers_url": "https://api.github.com/users/josibake/followers",
            "following_url": "https://api.github.com/users/josibake/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/josibake/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/josibake/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/josibake/subscriptions",
            "organizations_url": "https://api.github.com/users/josibake/orgs",
            "repos_url": "https://api.github.com/users/josibake/repos",
            "events_url": "https://api.github.com/users/josibake/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/josibake/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": false,
          "comments": 3,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28201",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/28201",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/28201.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/28201.patch"
          },
          "created_at": "2023-08-02T16:37:04Z",
          "updated_at": "2024-01-17T00:38:53Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "referenced",
      "id": 10577855644,
      "node_id": "REFE_lADOEEET9c5mbIhxzwAAAAJ2fUSc",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/10577855644",
      "actor": {
        "login": "denavila",
        "id": 123340139,
        "node_id": "U_kgDOB1oFaw",
        "avatar_url": "https://avatars.githubusercontent.com/u/123340139?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/denavila",
        "html_url": "https://github.com/denavila",
        "followers_url": "https://api.github.com/users/denavila/followers",
        "following_url": "https://api.github.com/users/denavila/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/denavila/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/denavila/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/denavila/subscriptions",
        "organizations_url": "https://api.github.com/users/denavila/orgs",
        "repos_url": "https://api.github.com/users/denavila/repos",
        "events_url": "https://api.github.com/users/denavila/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/denavila/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "403dba36a571826f11345a3c6372aa36bb9c184d",
      "commit_url": "https://api.github.com/repos/denavila/bitcoin/commits/403dba36a571826f11345a3c6372aa36bb9c184d",
      "created_at": "2023-10-06T17:08:21Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 10578079420,
      "node_id": "HRFPE_lADOEEET9c5mbIhxzwAAAAJ2gK68",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/10578079420",
      "actor": {
        "login": "denavila",
        "id": 123340139,
        "node_id": "U_kgDOB1oFaw",
        "avatar_url": "https://avatars.githubusercontent.com/u/123340139?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/denavila",
        "html_url": "https://github.com/denavila",
        "followers_url": "https://api.github.com/users/denavila/followers",
        "following_url": "https://api.github.com/users/denavila/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/denavila/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/denavila/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/denavila/subscriptions",
        "organizations_url": "https://api.github.com/users/denavila/orgs",
        "repos_url": "https://api.github.com/users/denavila/repos",
        "events_url": "https://api.github.com/users/denavila/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/denavila/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-10-06T17:32:31Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 10584579591,
      "node_id": "HRFPE_lADOEEET9c5mbIhxzwAAAAJ2494H",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/10584579591",
      "actor": {
        "login": "denavila",
        "id": 123340139,
        "node_id": "U_kgDOB1oFaw",
        "avatar_url": "https://avatars.githubusercontent.com/u/123340139?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/denavila",
        "html_url": "https://github.com/denavila",
        "followers_url": "https://api.github.com/users/denavila/followers",
        "following_url": "https://api.github.com/users/denavila/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/denavila/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/denavila/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/denavila/subscriptions",
        "organizations_url": "https://api.github.com/users/denavila/orgs",
        "repos_url": "https://api.github.com/users/denavila/repos",
        "events_url": "https://api.github.com/users/denavila/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/denavila/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-10-08T16:34:06Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 10585249087,
      "node_id": "HRFPE_lADOEEET9c5mbIhxzwAAAAJ27hU_",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/10585249087",
      "actor": {
        "login": "denavila",
        "id": 123340139,
        "node_id": "U_kgDOB1oFaw",
        "avatar_url": "https://avatars.githubusercontent.com/u/123340139?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/denavila",
        "html_url": "https://github.com/denavila",
        "followers_url": "https://api.github.com/users/denavila/followers",
        "following_url": "https://api.github.com/users/denavila/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/denavila/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/denavila/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/denavila/subscriptions",
        "organizations_url": "https://api.github.com/users/denavila/orgs",
        "repos_url": "https://api.github.com/users/denavila/repos",
        "events_url": "https://api.github.com/users/denavila/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/denavila/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-10-08T19:25:07Z"
    },
    {
      "event": "unlabeled",
      "id": 10585480038,
      "node_id": "UNLE_lADOEEET9c5mbIhxzwAAAAJ28Ztm",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/10585480038",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-10-08T21:30:09Z",
      "label": {
        "name": "CI failed",
        "color": "ededed"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 10610690298,
      "node_id": "HRFPE_lADOEEET9c5mbIhxzwAAAAJ4ckj6",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/10610690298",
      "actor": {
        "login": "denavila",
        "id": 123340139,
        "node_id": "U_kgDOB1oFaw",
        "avatar_url": "https://avatars.githubusercontent.com/u/123340139?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/denavila",
        "html_url": "https://github.com/denavila",
        "followers_url": "https://api.github.com/users/denavila/followers",
        "following_url": "https://api.github.com/users/denavila/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/denavila/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/denavila/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/denavila/subscriptions",
        "organizations_url": "https://api.github.com/users/denavila/orgs",
        "repos_url": "https://api.github.com/users/denavila/repos",
        "events_url": "https://api.github.com/users/denavila/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/denavila/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-10-10T22:36:24Z"
    },
    {
      "event": "referenced",
      "id": 10729489962,
      "node_id": "REFE_lADOEEET9c5mbIhxzwAAAAJ_hwYq",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/10729489962",
      "actor": {
        "login": "denavila",
        "id": 123340139,
        "node_id": "U_kgDOB1oFaw",
        "avatar_url": "https://avatars.githubusercontent.com/u/123340139?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/denavila",
        "html_url": "https://github.com/denavila",
        "followers_url": "https://api.github.com/users/denavila/followers",
        "following_url": "https://api.github.com/users/denavila/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/denavila/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/denavila/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/denavila/subscriptions",
        "organizations_url": "https://api.github.com/users/denavila/orgs",
        "repos_url": "https://api.github.com/users/denavila/repos",
        "events_url": "https://api.github.com/users/denavila/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/denavila/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "ed75f632a9ffffd0a102a0577bcbf822e0e2575a",
      "commit_url": "https://api.github.com/repos/denavila/bitcoin/commits/ed75f632a9ffffd0a102a0577bcbf822e0e2575a",
      "created_at": "2023-10-20T23:32:21Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 10729610451,
      "node_id": "HRFPE_lADOEEET9c5mbIhxzwAAAAJ_iNzT",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/10729610451",
      "actor": {
        "login": "denavila",
        "id": 123340139,
        "node_id": "U_kgDOB1oFaw",
        "avatar_url": "https://avatars.githubusercontent.com/u/123340139?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/denavila",
        "html_url": "https://github.com/denavila",
        "followers_url": "https://api.github.com/users/denavila/followers",
        "following_url": "https://api.github.com/users/denavila/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/denavila/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/denavila/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/denavila/subscriptions",
        "organizations_url": "https://api.github.com/users/denavila/orgs",
        "repos_url": "https://api.github.com/users/denavila/repos",
        "events_url": "https://api.github.com/users/denavila/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/denavila/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-10-21T00:19:05Z"
    },
    {
      "event": "labeled",
      "id": 10730114338,
      "node_id": "LE_lADOEEET9c5mbIhxzwAAAAJ_kI0i",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/10730114338",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-10-21T03:00:21Z",
      "label": {
        "name": "CI failed",
        "color": "ededed"
      }
    },
    {
      "event": "referenced",
      "id": 10731746572,
      "node_id": "REFE_lADOEEET9c5mbIhxzwAAAAJ_qXUM",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/10731746572",
      "actor": {
        "login": "denavila",
        "id": 123340139,
        "node_id": "U_kgDOB1oFaw",
        "avatar_url": "https://avatars.githubusercontent.com/u/123340139?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/denavila",
        "html_url": "https://github.com/denavila",
        "followers_url": "https://api.github.com/users/denavila/followers",
        "following_url": "https://api.github.com/users/denavila/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/denavila/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/denavila/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/denavila/subscriptions",
        "organizations_url": "https://api.github.com/users/denavila/orgs",
        "repos_url": "https://api.github.com/users/denavila/repos",
        "events_url": "https://api.github.com/users/denavila/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/denavila/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "4d1a6d147ef4b44ccc92d5040aaf5bcc565c4b69",
      "commit_url": "https://api.github.com/repos/denavila/bitcoin/commits/4d1a6d147ef4b44ccc92d5040aaf5bcc565c4b69",
      "created_at": "2023-10-21T17:11:01Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 10731841205,
      "node_id": "HRFPE_lADOEEET9c5mbIhxzwAAAAJ_qua1",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/10731841205",
      "actor": {
        "login": "denavila",
        "id": 123340139,
        "node_id": "U_kgDOB1oFaw",
        "avatar_url": "https://avatars.githubusercontent.com/u/123340139?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/denavila",
        "html_url": "https://github.com/denavila",
        "followers_url": "https://api.github.com/users/denavila/followers",
        "following_url": "https://api.github.com/users/denavila/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/denavila/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/denavila/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/denavila/subscriptions",
        "organizations_url": "https://api.github.com/users/denavila/orgs",
        "repos_url": "https://api.github.com/users/denavila/repos",
        "events_url": "https://api.github.com/users/denavila/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/denavila/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-10-21T18:03:35Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 10734749592,
      "node_id": "HRFPE_lADOEEET9c5mbIhxzwAAAAJ_10eY",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/10734749592",
      "actor": {
        "login": "denavila",
        "id": 123340139,
        "node_id": "U_kgDOB1oFaw",
        "avatar_url": "https://avatars.githubusercontent.com/u/123340139?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/denavila",
        "html_url": "https://github.com/denavila",
        "followers_url": "https://api.github.com/users/denavila/followers",
        "following_url": "https://api.github.com/users/denavila/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/denavila/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/denavila/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/denavila/subscriptions",
        "organizations_url": "https://api.github.com/users/denavila/orgs",
        "repos_url": "https://api.github.com/users/denavila/repos",
        "events_url": "https://api.github.com/users/denavila/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/denavila/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-10-23T01:36:02Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 10734900648,
      "node_id": "HRFPE_lADOEEET9c5mbIhxzwAAAAJ_2ZWo",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/10734900648",
      "actor": {
        "login": "denavila",
        "id": 123340139,
        "node_id": "U_kgDOB1oFaw",
        "avatar_url": "https://avatars.githubusercontent.com/u/123340139?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/denavila",
        "html_url": "https://github.com/denavila",
        "followers_url": "https://api.github.com/users/denavila/followers",
        "following_url": "https://api.github.com/users/denavila/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/denavila/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/denavila/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/denavila/subscriptions",
        "organizations_url": "https://api.github.com/users/denavila/orgs",
        "repos_url": "https://api.github.com/users/denavila/repos",
        "events_url": "https://api.github.com/users/denavila/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/denavila/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-10-23T02:07:37Z"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-10-24T02:47:02Z",
      "updated_at": "2023-10-24T02:47:02Z",
      "source": {
        "issue": {
          "id": 1958204865,
          "node_id": "PR_kwDOABII585dlfBo",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28710",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28710/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28710/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28710/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/28710",
          "number": 28710,
          "state": "open",
          "state_reason": null,
          "title": "Remove the legacy wallet and BDB dependency",
          "body": "The final step of #20160.\r\n\r\nA bare minimum of legacy wallet code is kept in order to perform wallet migration. Migration of legacy wallets uses the independent BDB parser and a minimal `LegacyDataSPKM` that allows the legacy data to be loaded so that the migration can be completed.\r\n\r\nAll tests which tested legacy wallet behavior have been removed. The `--descriptors` and `--legacy-wallet` options are removed from the functional tests.\r\n\r\nBDB has been removed as a dependency and documentation have been updated to reflect that.\r\n\r\nDepends on #26596",
          "user": {
            "login": "achow101",
            "id": 3782274,
            "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
            "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/achow101",
            "html_url": "https://github.com/achow101",
            "followers_url": "https://api.github.com/users/achow101/followers",
            "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
            "organizations_url": "https://api.github.com/users/achow101/orgs",
            "repos_url": "https://api.github.com/users/achow101/repos",
            "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/achow101/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 5334691551,
              "node_id": "LA_kwDOABII588AAAABPfju3w",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/CI%20failed",
              "name": "CI failed",
              "description": "",
              "color": "cccccc",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": false,
          "comments": 1,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28710",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/28710",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/28710.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/28710.patch"
          },
          "created_at": "2023-10-23T23:36:07Z",
          "updated_at": "2024-01-16T21:56:14Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 10761558547,
      "node_id": "HRFPE_lADOEEET9c5mbIhxzwAAAAKBcFoT",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/10761558547",
      "actor": {
        "login": "denavila",
        "id": 123340139,
        "node_id": "U_kgDOB1oFaw",
        "avatar_url": "https://avatars.githubusercontent.com/u/123340139?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/denavila",
        "html_url": "https://github.com/denavila",
        "followers_url": "https://api.github.com/users/denavila/followers",
        "following_url": "https://api.github.com/users/denavila/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/denavila/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/denavila/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/denavila/subscriptions",
        "organizations_url": "https://api.github.com/users/denavila/orgs",
        "repos_url": "https://api.github.com/users/denavila/repos",
        "events_url": "https://api.github.com/users/denavila/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/denavila/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-10-25T03:03:49Z"
    },
    {
      "event": "unlabeled",
      "id": 10766750616,
      "node_id": "UNLE_lADOEEET9c5mbIhxzwAAAAKBv5OY",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/10766750616",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-10-25T12:28:52Z",
      "label": {
        "name": "CI failed",
        "color": "ededed"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 10772927208,
      "node_id": "HRFPE_lADOEEET9c5mbIhxzwAAAAKCHdLo",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/10772927208",
      "actor": {
        "login": "denavila",
        "id": 123340139,
        "node_id": "U_kgDOB1oFaw",
        "avatar_url": "https://avatars.githubusercontent.com/u/123340139?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/denavila",
        "html_url": "https://github.com/denavila",
        "followers_url": "https://api.github.com/users/denavila/followers",
        "following_url": "https://api.github.com/users/denavila/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/denavila/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/denavila/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/denavila/subscriptions",
        "organizations_url": "https://api.github.com/users/denavila/orgs",
        "repos_url": "https://api.github.com/users/denavila/repos",
        "events_url": "https://api.github.com/users/denavila/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/denavila/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-10-25T22:27:20Z"
    },
    {
      "event": "labeled",
      "id": 10773138978,
      "node_id": "LE_lADOEEET9c5mbIhxzwAAAAKCIQ4i",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/10773138978",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-10-25T23:01:30Z",
      "label": {
        "name": "CI failed",
        "color": "ededed"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 10773274427,
      "node_id": "HRFPE_lADOEEET9c5mbIhxzwAAAAKCIx87",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/10773274427",
      "actor": {
        "login": "denavila",
        "id": 123340139,
        "node_id": "U_kgDOB1oFaw",
        "avatar_url": "https://avatars.githubusercontent.com/u/123340139?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/denavila",
        "html_url": "https://github.com/denavila",
        "followers_url": "https://api.github.com/users/denavila/followers",
        "following_url": "https://api.github.com/users/denavila/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/denavila/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/denavila/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/denavila/subscriptions",
        "organizations_url": "https://api.github.com/users/denavila/orgs",
        "repos_url": "https://api.github.com/users/denavila/repos",
        "events_url": "https://api.github.com/users/denavila/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/denavila/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-10-25T23:28:22Z"
    },
    {
      "event": "unlabeled",
      "id": 10773630248,
      "node_id": "UNLE_lADOEEET9c5mbIhxzwAAAAKCKI0o",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/10773630248",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-10-26T00:46:13Z",
      "label": {
        "name": "CI failed",
        "color": "ededed"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 10774032659,
      "node_id": "HRFPE_lADOEEET9c5mbIhxzwAAAAKCLrET",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/10774032659",
      "actor": {
        "login": "denavila",
        "id": 123340139,
        "node_id": "U_kgDOB1oFaw",
        "avatar_url": "https://avatars.githubusercontent.com/u/123340139?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/denavila",
        "html_url": "https://github.com/denavila",
        "followers_url": "https://api.github.com/users/denavila/followers",
        "following_url": "https://api.github.com/users/denavila/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/denavila/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/denavila/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/denavila/subscriptions",
        "organizations_url": "https://api.github.com/users/denavila/orgs",
        "repos_url": "https://api.github.com/users/denavila/repos",
        "events_url": "https://api.github.com/users/denavila/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/denavila/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-10-26T02:16:55Z"
    },
    {
      "event": "labeled",
      "id": 10777849578,
      "node_id": "LE_lADOEEET9c5mbIhxzwAAAAKCaO7q",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/10777849578",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-10-26T10:23:29Z",
      "label": {
        "name": "CI failed",
        "color": "ededed"
      }
    },
    {
      "event": "reviewed",
      "id": 1700307265,
      "node_id": "PRR_kwDOEEET9c5lWKFB",
      "url": null,
      "actor": null,
      "commit_id": "16d50b3699232bfe48b21057e6175ab12417ebe3",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "what a long shot\r\n\r\nConcept ACK\r\n\r\nkeep up the good works\r\n",
      "user": {
        "login": "katesalazar",
        "id": 52637275,
        "node_id": "MDQ6VXNlcjUyNjM3Mjc1",
        "avatar_url": "https://avatars.githubusercontent.com/u/52637275?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/katesalazar",
        "html_url": "https://github.com/katesalazar",
        "followers_url": "https://api.github.com/users/katesalazar/followers",
        "following_url": "https://api.github.com/users/katesalazar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/katesalazar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/katesalazar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/katesalazar/subscriptions",
        "organizations_url": "https://api.github.com/users/katesalazar/orgs",
        "repos_url": "https://api.github.com/users/katesalazar/repos",
        "events_url": "https://api.github.com/users/katesalazar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/katesalazar/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/gui/pull/733#pullrequestreview-1700307265",
      "submitted_at": "2023-10-26T18:36:25Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin-core/gui/pulls/733"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 10798516215,
      "node_id": "HRFPE_lADOEEET9c5mbIhxzwAAAAKDpEf3",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/10798516215",
      "actor": {
        "login": "denavila",
        "id": 123340139,
        "node_id": "U_kgDOB1oFaw",
        "avatar_url": "https://avatars.githubusercontent.com/u/123340139?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/denavila",
        "html_url": "https://github.com/denavila",
        "followers_url": "https://api.github.com/users/denavila/followers",
        "following_url": "https://api.github.com/users/denavila/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/denavila/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/denavila/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/denavila/subscriptions",
        "organizations_url": "https://api.github.com/users/denavila/orgs",
        "repos_url": "https://api.github.com/users/denavila/repos",
        "events_url": "https://api.github.com/users/denavila/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/denavila/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-10-28T20:25:47Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 10798552547,
      "node_id": "HRFPE_lADOEEET9c5mbIhxzwAAAAKDpNXj",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/10798552547",
      "actor": {
        "login": "denavila",
        "id": 123340139,
        "node_id": "U_kgDOB1oFaw",
        "avatar_url": "https://avatars.githubusercontent.com/u/123340139?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/denavila",
        "html_url": "https://github.com/denavila",
        "followers_url": "https://api.github.com/users/denavila/followers",
        "following_url": "https://api.github.com/users/denavila/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/denavila/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/denavila/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/denavila/subscriptions",
        "organizations_url": "https://api.github.com/users/denavila/orgs",
        "repos_url": "https://api.github.com/users/denavila/repos",
        "events_url": "https://api.github.com/users/denavila/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/denavila/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-10-28T21:00:41Z"
    },
    {
      "event": "unlabeled",
      "id": 10798641942,
      "node_id": "UNLE_lADOEEET9c5mbIhxzwAAAAKDpjMW",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/10798641942",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-10-28T22:20:03Z",
      "label": {
        "name": "CI failed",
        "color": "ededed"
      }
    },
    {
      "event": "reviewed",
      "id": 1702973669,
      "node_id": "PRR_kwDOEEET9c5lgVDl",
      "url": null,
      "actor": null,
      "commit_id": "c781cd8863bb12e60ce8905063c8041145db63ac",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "katesalazar",
        "id": 52637275,
        "node_id": "MDQ6VXNlcjUyNjM3Mjc1",
        "avatar_url": "https://avatars.githubusercontent.com/u/52637275?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/katesalazar",
        "html_url": "https://github.com/katesalazar",
        "followers_url": "https://api.github.com/users/katesalazar/followers",
        "following_url": "https://api.github.com/users/katesalazar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/katesalazar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/katesalazar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/katesalazar/subscriptions",
        "organizations_url": "https://api.github.com/users/katesalazar/orgs",
        "repos_url": "https://api.github.com/users/katesalazar/repos",
        "events_url": "https://api.github.com/users/katesalazar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/katesalazar/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/gui/pull/733#pullrequestreview-1702973669",
      "submitted_at": "2023-10-29T14:42:16Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin-core/gui/pulls/733"
    },
    {
      "event": "reviewed",
      "id": 1702974130,
      "node_id": "PRR_kwDOEEET9c5lgVKy",
      "url": null,
      "actor": null,
      "commit_id": "c781cd8863bb12e60ce8905063c8041145db63ac",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "katesalazar",
        "id": 52637275,
        "node_id": "MDQ6VXNlcjUyNjM3Mjc1",
        "avatar_url": "https://avatars.githubusercontent.com/u/52637275?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/katesalazar",
        "html_url": "https://github.com/katesalazar",
        "followers_url": "https://api.github.com/users/katesalazar/followers",
        "following_url": "https://api.github.com/users/katesalazar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/katesalazar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/katesalazar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/katesalazar/subscriptions",
        "organizations_url": "https://api.github.com/users/katesalazar/orgs",
        "repos_url": "https://api.github.com/users/katesalazar/repos",
        "events_url": "https://api.github.com/users/katesalazar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/katesalazar/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/gui/pull/733#pullrequestreview-1702974130",
      "submitted_at": "2023-10-29T14:45:10Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin-core/gui/pulls/733"
    },
    {
      "event": "reviewed",
      "id": 1702974253,
      "node_id": "PRR_kwDOEEET9c5lgVMt",
      "url": null,
      "actor": null,
      "commit_id": "c781cd8863bb12e60ce8905063c8041145db63ac",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "katesalazar",
        "id": 52637275,
        "node_id": "MDQ6VXNlcjUyNjM3Mjc1",
        "avatar_url": "https://avatars.githubusercontent.com/u/52637275?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/katesalazar",
        "html_url": "https://github.com/katesalazar",
        "followers_url": "https://api.github.com/users/katesalazar/followers",
        "following_url": "https://api.github.com/users/katesalazar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/katesalazar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/katesalazar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/katesalazar/subscriptions",
        "organizations_url": "https://api.github.com/users/katesalazar/orgs",
        "repos_url": "https://api.github.com/users/katesalazar/repos",
        "events_url": "https://api.github.com/users/katesalazar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/katesalazar/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/gui/pull/733#pullrequestreview-1702974253",
      "submitted_at": "2023-10-29T14:45:55Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin-core/gui/pulls/733"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 10912849574,
      "node_id": "HRFPE_lADOEEET9c5mbIhxzwAAAAKKdN6m",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/10912849574",
      "actor": {
        "login": "denavila",
        "id": 123340139,
        "node_id": "U_kgDOB1oFaw",
        "avatar_url": "https://avatars.githubusercontent.com/u/123340139?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/denavila",
        "html_url": "https://github.com/denavila",
        "followers_url": "https://api.github.com/users/denavila/followers",
        "following_url": "https://api.github.com/users/denavila/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/denavila/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/denavila/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/denavila/subscriptions",
        "organizations_url": "https://api.github.com/users/denavila/orgs",
        "repos_url": "https://api.github.com/users/denavila/repos",
        "events_url": "https://api.github.com/users/denavila/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/denavila/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-11-09T12:53:05Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 10974112196,
      "node_id": "HRFPE_lADOEEET9c5mbIhxzwAAAAKOG6nE",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/10974112196",
      "actor": {
        "login": "denavila",
        "id": 123340139,
        "node_id": "U_kgDOB1oFaw",
        "avatar_url": "https://avatars.githubusercontent.com/u/123340139?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/denavila",
        "html_url": "https://github.com/denavila",
        "followers_url": "https://api.github.com/users/denavila/followers",
        "following_url": "https://api.github.com/users/denavila/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/denavila/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/denavila/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/denavila/subscriptions",
        "organizations_url": "https://api.github.com/users/denavila/orgs",
        "repos_url": "https://api.github.com/users/denavila/repos",
        "events_url": "https://api.github.com/users/denavila/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/denavila/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-11-16T01:07:56Z"
    },
    {
      "event": "labeled",
      "id": 11002071457,
      "node_id": "LE_lADOEEET9c5mbIhxzwAAAAKPxkmh",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/11002071457",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-11-18T16:38:09Z",
      "label": {
        "name": "CI failed",
        "color": "ededed"
      }
    },
    {
      "event": "referenced",
      "id": 11004283743,
      "node_id": "REFE_lADOEEET9c5mbIhxzwAAAAKP6Atf",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/11004283743",
      "actor": {
        "login": "denavila",
        "id": 123340139,
        "node_id": "U_kgDOB1oFaw",
        "avatar_url": "https://avatars.githubusercontent.com/u/123340139?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/denavila",
        "html_url": "https://github.com/denavila",
        "followers_url": "https://api.github.com/users/denavila/followers",
        "following_url": "https://api.github.com/users/denavila/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/denavila/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/denavila/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/denavila/subscriptions",
        "organizations_url": "https://api.github.com/users/denavila/orgs",
        "repos_url": "https://api.github.com/users/denavila/repos",
        "events_url": "https://api.github.com/users/denavila/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/denavila/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "842cb26c18bda83538842bec382c749a2354ec1f",
      "commit_url": "https://api.github.com/repos/denavila/bitcoin/commits/842cb26c18bda83538842bec382c749a2354ec1f",
      "created_at": "2023-11-19T17:56:03Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 11004330486,
      "node_id": "HRFPE_lADOEEET9c5mbIhxzwAAAAKP6MH2",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/11004330486",
      "actor": {
        "login": "denavila",
        "id": 123340139,
        "node_id": "U_kgDOB1oFaw",
        "avatar_url": "https://avatars.githubusercontent.com/u/123340139?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/denavila",
        "html_url": "https://github.com/denavila",
        "followers_url": "https://api.github.com/users/denavila/followers",
        "following_url": "https://api.github.com/users/denavila/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/denavila/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/denavila/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/denavila/subscriptions",
        "organizations_url": "https://api.github.com/users/denavila/orgs",
        "repos_url": "https://api.github.com/users/denavila/repos",
        "events_url": "https://api.github.com/users/denavila/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/denavila/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-11-19T18:22:20Z"
    },
    {
      "event": "unlabeled",
      "id": 11004451512,
      "node_id": "UNLE_lADOEEET9c5mbIhxzwAAAAKP6pq4",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/11004451512",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-11-19T19:31:54Z",
      "label": {
        "name": "CI failed",
        "color": "ededed"
      }
    },
    {
      "event": "referenced",
      "id": 11039627155,
      "node_id": "REFE_lADOEEET9c5mbIhxzwAAAAKSA1eT",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/11039627155",
      "actor": {
        "login": "denavila",
        "id": 123340139,
        "node_id": "U_kgDOB1oFaw",
        "avatar_url": "https://avatars.githubusercontent.com/u/123340139?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/denavila",
        "html_url": "https://github.com/denavila",
        "followers_url": "https://api.github.com/users/denavila/followers",
        "following_url": "https://api.github.com/users/denavila/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/denavila/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/denavila/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/denavila/subscriptions",
        "organizations_url": "https://api.github.com/users/denavila/orgs",
        "repos_url": "https://api.github.com/users/denavila/repos",
        "events_url": "https://api.github.com/users/denavila/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/denavila/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "21e39b96bc08e29920a1efb61dee79082adb414c",
      "commit_url": "https://api.github.com/repos/denavila/bitcoin/commits/21e39b96bc08e29920a1efb61dee79082adb414c",
      "created_at": "2023-11-22T17:59:36Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 11039734643,
      "node_id": "HRFPE_lADOEEET9c5mbIhxzwAAAAKSBPtz",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/11039734643",
      "actor": {
        "login": "denavila",
        "id": 123340139,
        "node_id": "U_kgDOB1oFaw",
        "avatar_url": "https://avatars.githubusercontent.com/u/123340139?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/denavila",
        "html_url": "https://github.com/denavila",
        "followers_url": "https://api.github.com/users/denavila/followers",
        "following_url": "https://api.github.com/users/denavila/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/denavila/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/denavila/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/denavila/subscriptions",
        "organizations_url": "https://api.github.com/users/denavila/orgs",
        "repos_url": "https://api.github.com/users/denavila/repos",
        "events_url": "https://api.github.com/users/denavila/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/denavila/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-11-22T18:12:17Z"
    },
    {
      "event": "labeled",
      "id": 11073424013,
      "node_id": "LE_lADOEEET9c5mbIhxzwAAAAKUBwqN",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/11073424013",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-11-27T16:39:11Z",
      "label": {
        "name": "CI failed",
        "color": "ededed"
      }
    },
    {
      "event": "referenced",
      "id": 11090321078,
      "node_id": "REFE_lADOEEET9c5mbIhxzwAAAAKVCN62",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/11090321078",
      "actor": {
        "login": "denavila",
        "id": 123340139,
        "node_id": "U_kgDOB1oFaw",
        "avatar_url": "https://avatars.githubusercontent.com/u/123340139?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/denavila",
        "html_url": "https://github.com/denavila",
        "followers_url": "https://api.github.com/users/denavila/followers",
        "following_url": "https://api.github.com/users/denavila/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/denavila/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/denavila/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/denavila/subscriptions",
        "organizations_url": "https://api.github.com/users/denavila/orgs",
        "repos_url": "https://api.github.com/users/denavila/repos",
        "events_url": "https://api.github.com/users/denavila/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/denavila/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "37722d6f2762aa42fd4bfdd59c3351a52848b732",
      "commit_url": "https://api.github.com/repos/denavila/bitcoin/commits/37722d6f2762aa42fd4bfdd59c3351a52848b732",
      "created_at": "2023-11-29T00:46:38Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 11090406607,
      "node_id": "HRFPE_lADOEEET9c5mbIhxzwAAAAKVCizP",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/11090406607",
      "actor": {
        "login": "denavila",
        "id": 123340139,
        "node_id": "U_kgDOB1oFaw",
        "avatar_url": "https://avatars.githubusercontent.com/u/123340139?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/denavila",
        "html_url": "https://github.com/denavila",
        "followers_url": "https://api.github.com/users/denavila/followers",
        "following_url": "https://api.github.com/users/denavila/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/denavila/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/denavila/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/denavila/subscriptions",
        "organizations_url": "https://api.github.com/users/denavila/orgs",
        "repos_url": "https://api.github.com/users/denavila/repos",
        "events_url": "https://api.github.com/users/denavila/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/denavila/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-11-29T01:03:37Z"
    },
    {
      "event": "unlabeled",
      "id": 11091012594,
      "node_id": "UNLE_lADOEEET9c5mbIhxzwAAAAKVE2vy",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/11091012594",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-11-29T03:01:29Z",
      "label": {
        "name": "CI failed",
        "color": "ededed"
      }
    },
    {
      "event": "labeled",
      "id": 11213352858,
      "node_id": "LE_lADOEEET9c5mbIhxzwAAAAKcXi-a",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/11213352858",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-12-11T17:12:07Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "referenced",
      "id": 11216390221,
      "node_id": "REFE_lADOEEET9c5mbIhxzwAAAAKcjIhN",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/11216390221",
      "actor": {
        "login": "denavila",
        "id": 123340139,
        "node_id": "U_kgDOB1oFaw",
        "avatar_url": "https://avatars.githubusercontent.com/u/123340139?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/denavila",
        "html_url": "https://github.com/denavila",
        "followers_url": "https://api.github.com/users/denavila/followers",
        "following_url": "https://api.github.com/users/denavila/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/denavila/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/denavila/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/denavila/subscriptions",
        "organizations_url": "https://api.github.com/users/denavila/orgs",
        "repos_url": "https://api.github.com/users/denavila/repos",
        "events_url": "https://api.github.com/users/denavila/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/denavila/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "9e6fdce4394b941c21b88ebf2ef6910fbe9aa7c7",
      "commit_url": "https://api.github.com/repos/denavila/bitcoin/commits/9e6fdce4394b941c21b88ebf2ef6910fbe9aa7c7",
      "created_at": "2023-12-11T22:08:29Z"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOEEET9doAKDczN2ZiYzQ2NDM0OGM4YzJlYjUxZWY2NWNlZWYzMTg5Mjk5NjllYWM",
      "url": "https://api.github.com/repos/bitcoin-core/gui/git/commits/737fbc464348c8c2eb51ef65ceef318929969eac",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin-core/gui/commit/737fbc464348c8c2eb51ef65ceef318929969eac",
      "tree": {
        "sha": "4580dc56c3ecbc81345f0c749d41765a70da4339",
        "url": "https://api.github.com/repos/bitcoin-core/gui/git/trees/4580dc56c3ecbc81345f0c749d41765a70da4339"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin-core/gui/git/commits/d5e5810bd36f6e899d64a57e9264729b27a9c3f8",
          "sha": "d5e5810bd36f6e899d64a57e9264729b27a9c3f8",
          "html_url": "https://github.com/bitcoin-core/gui/commit/d5e5810bd36f6e899d64a57e9264729b27a9c3f8"
        }
      ],
      "message": "Deniability API\n\nThis PR is the wallet API and implementation portion of the GUI PR ( https://github.com/bitcoin-core/gui/pull/733 ) which is an implementation of the ideas in Paul Sztorc's blog post \"Deniability - Unilateral Transaction Meta-Privacy\"(https://www.truthcoin.info/blog/deniability/).\n\nThe GUI PR has all the details and screenshots of the GUI additions. Here I'll just copy the relevant context for the wallet API changes:\n\n\"\nIn short, Paul's idea is to periodically split coins and send them to yourself, making it look like common \"spend\" transactions, such that blockchain ownership analysis becomes more difficult, and thus improving the user's privacy.\nI've implemented this as an additional \"Deniability\" wallet view. The majority of the code is in a new deniabilitydialog.cpp/h source files containing a new DeniabilityDialog class, hooked up to the WalletView class. \n\"\n\nWhile the Deniability dialog can be implemented entirely with the existing API, adding the core \"deniabilization\" functions to the CWallet and interfaces::Wallet API allows us to implement the GUI portion with much less code, and more importantly allows us to add RPC support and more thorough unit tests.\n\n-----\nImplemented basic deniability unit tests to wallet_tests\n\n-----\nImplemented a new 'walletdeniabilizecoin' RPC.\n\n-----\nImplemented fingerprint spoofing for deniabilization (and fee bump) transactions.\nCurrently spoofing with data for 6 different wallet implementations, with 4 specific fingerprint-able behaviors (version, anti-fee-sniping, bip69 ordering, no-rbf).",
      "committer": {
        "name": "denavila",
        "email": "denny_avila@tuta.io",
        "date": "2023-12-12T15:17:41Z"
      },
      "author": {
        "name": "denavila",
        "email": "denny_avila@tuta.io",
        "date": "2023-10-20T23:20:36Z"
      },
      "sha": "737fbc464348c8c2eb51ef65ceef318929969eac"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOEEET9doAKDhmNzJkNGFiZTNhYjRlNGNiYmU5MDk2OTRhMWZkOWQwYThmNGEzYmY",
      "url": "https://api.github.com/repos/bitcoin-core/gui/git/commits/8f72d4abe3ab4e4cbbe909694a1fd9d0a8f4a3bf",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin-core/gui/commit/8f72d4abe3ab4e4cbbe909694a1fd9d0a8f4a3bf",
      "tree": {
        "sha": "a98b78cd489d190e6314b641c2ad15cf7adec3c6",
        "url": "https://api.github.com/repos/bitcoin-core/gui/git/trees/a98b78cd489d190e6314b641c2ad15cf7adec3c6"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin-core/gui/git/commits/737fbc464348c8c2eb51ef65ceef318929969eac",
          "sha": "737fbc464348c8c2eb51ef65ceef318929969eac",
          "html_url": "https://github.com/bitcoin-core/gui/commit/737fbc464348c8c2eb51ef65ceef318929969eac"
        }
      ],
      "message": "Deniability - a tool to automatically improve coin ownership privacy\n\nThis new feature is an implementation of the ideas in Paul Sztorc's blog post \"Deniability - Unilateral Transaction Meta-Privacy\"(https://www.truthcoin.info/blog/deniability/).\n\nIn short, the idea is to periodically split coins and send them to yourself, making it look like a common \"spend\" transaction, such that blockchain ownership analysis becomes more difficult, and thus improving the user's privacy.\n\nThis is the GUI portion of the PR (bitcoin-core/gui). The core functionality PR is in the main repo (bitcoin/bitcoin).\n\nThis PR implements an additional \"Deniability\" wallet view. The majority of the GUI code is in a new deniabilitydialog.cpp/h source files containing a new DeniabilityDialog class, hooked up via the WalletView class. \n\nOn startup and on notable events (new blocks, new transactions, etc), we evaluate the privacy of all coins in the wallet, and we build a \"deniabilization\" candidate list. UTXOs that share the same destination address are grouped together into a single candidate (see DeniabilityDialog::updateCoins and DeniabilityDialog::updateCoinTable).\n\nWe inspect the blockchain data to find out if we have performed \"deniabilization\" transactions already, and we count how many \"cycles\" (self-sends) have been performed for each coin (see DeniabilityDialog::calculateDeniabilizationStats).\nSince we infer the state entirely from the blockchain data, even if the wallet is restored from a seed phrase, the state would not be lost. This also means that if the user has performed manual self-sends that have improved the ownership privacy, they will be counted too.\n\nThe user can initiate the \"deniabillization\" process by pressing a Start button (DeniabilityDialog::startDeniabilization). The process periodically perform a \"deniabilization\" cycle (DeniabilityDialog::deniabilizeProc). Each such cycle goes as follows:\nA coin is selected form the candidate list. The more a coin is \"deniabilized\", the less likely it is to be selected. Smaller coins are also less likely to be selected.\nIf a coin is selected, we prepare and broadcast a transaction, which splits the coin into a pair of new wallet addresses (DeniabilityDialog::deniabilizeCoin). \n\nThe user can control this process via a Frequency selector and a Budget spinner, which respectively determine how often to perform the cycle and how much total BTC to spend on transaction fees.\n\nIf Bitcoin Core is left running continuously, the cycles would be performed at the selected frequency (with some randomization). If Bitcoin Core is shutdown, the \"deniabilization\" process will resume at the next restart, and if more time has elapsed than the selected frequency, it will perform a single cycle. We deliberately don't \"catch up\" all missed cycles, since that would expose the process to blockchain analysis.\nThe state is saved and restored via QSettings (DeniabilityDialog::loadSettings and DeniabilityDialog::saveSettings).\n\nWe monitor each broadcasted transaction and we automatically attempt a fee bump if the transaction is still in the memory pool since the previous cycle (DeniabilityDialog::bumpDeniabilizationTx).\nWe don't issue any other deniabilization transactions until the previous transaction is confirmed (or abandoned/dropped).\n\nThe process ends when the budget is exhausted or if there's no candidates left. The user can also stop the process manually by pressing a Stop button (DeniabilityDialog::stopDeniabilization).\n\nExternal signers are supported in a \"best effort\" way - since the user needs to manually sign, we postpone the processing till the external signer is connected and use some additional UI to get the user's attention to sign (see the codepath predicated on hasExternalSigner). This is not ideal, so I'm looking for some ideas if we can improve this in some way.\n\nWatch-only wallets are partially supported, where we display the candidate list, but we don't allow any processing (since we don't have the private keys to issue transactions).\n\nI've tested all this functionality on regtest, testnet, signet and mainnet. I've also added some unit tests (under WalletTests) to exercise the main GUI functionality.\n\nThis is my first change and PR for Bitcoin Core, and I tried as much as possible to validate everything against the guidelines and documentation and to follow the patterns in the existing code, but I'm sure there are things I missed, so I'm looking forward to your feedback.\nIn particular things I'm not very sure about - the save/restore of state via QSettings makes me a bit nervous as we store some wallet specific data there which I put some effort to validate on load, however keying the settings based on wallet name is not ideal, so I'd like to improve this somehow - either by storing the settings based on some wallet identity signature, or by storing the state in the wallet database (however that doesn't seem accessible via the interfaces::Wallet API).\nPlease let me know your thoughts and suggestions.\n\n-----\nRefactored the coin update to explicitly match utxos by scriptPubKey and not rely on the ListCoin destination grouping.",
      "committer": {
        "name": "denavila",
        "email": "denny_avila@tuta.io",
        "date": "2023-12-12T17:04:12Z"
      },
      "author": {
        "name": "denavila",
        "email": "denny_avila@tuta.io",
        "date": "2023-10-20T23:51:29Z"
      },
      "sha": "8f72d4abe3ab4e4cbbe909694a1fd9d0a8f4a3bf"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 11226653062,
      "node_id": "HRFPE_lADOEEET9c5mbIhxzwAAAAKdKSGG",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/11226653062",
      "actor": {
        "login": "denavila",
        "id": 123340139,
        "node_id": "U_kgDOB1oFaw",
        "avatar_url": "https://avatars.githubusercontent.com/u/123340139?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/denavila",
        "html_url": "https://github.com/denavila",
        "followers_url": "https://api.github.com/users/denavila/followers",
        "following_url": "https://api.github.com/users/denavila/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/denavila/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/denavila/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/denavila/subscriptions",
        "organizations_url": "https://api.github.com/users/denavila/orgs",
        "repos_url": "https://api.github.com/users/denavila/repos",
        "events_url": "https://api.github.com/users/denavila/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/denavila/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-12-12T17:20:31Z"
    },
    {
      "event": "unlabeled",
      "id": 11227410227,
      "node_id": "UNLE_lADOEEET9c5mbIhxzwAAAAKdNK8z",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/11227410227",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-12-12T18:41:13Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-12-13T00:13:01Z",
      "updated_at": "2023-12-13T00:13:01Z",
      "source": {
        "issue": {
          "id": 2036429651,
          "node_id": "PR_kwDOABII585huQZ6",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29054",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29054/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29054/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29054/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/29054",
          "number": 29054,
          "state": "closed",
          "state_reason": null,
          "title": "wallet: reenable sethdseed for descriptor wallets",
          "body": "Enable `sethdseed` for descriptor wallets. To be able to use `createwalletdescriptor` with the other address types, we need a way to change the wallet extended key, and so `sethdseed` has been updated and enabled for descriptor wallets. As with legacy wallets, when called without parameters, it will generate a new random master key for the wallet. It can also take a xprv and set that as the master key. It still takes a BIP 32 seed as WIF or as hex as we do for legacy wallets. The seed will be transformed into and stored as a BIP 32 extended key. The latter is to give us greater compatibility with other wallets which often produce non-WIF HD seeds.\r\n\r\nSplit from #25907",
          "user": {
            "login": "achow101",
            "id": 3782274,
            "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
            "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/achow101",
            "html_url": "https://github.com/achow101",
            "followers_url": "https://api.github.com/users/achow101/followers",
            "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
            "organizations_url": "https://api.github.com/users/achow101/orgs",
            "repos_url": "https://api.github.com/users/achow101/repos",
            "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/achow101/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 149424,
              "node_id": "MDU6TGFiZWwxNDk0MjQ=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Wallet",
              "name": "Wallet",
              "color": "08a781",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": false,
          "comments": 3,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29054",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/29054",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/29054.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/29054.patch"
          },
          "closed_at": "2024-01-06T00:06:40Z",
          "created_at": "2023-12-11T20:00:27Z",
          "updated_at": "2024-01-06T00:06:40Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "labeled",
      "id": 11481726448,
      "node_id": "LE_lADOEEET9c5mbIhxzwAAAAKsXT3w",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/11481726448",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-01-14T16:50:04Z",
      "label": {
        "name": "CI failed",
        "color": "ededed"
      }
    }
  ],
  "comments": [
    {
      "url": "https://api.github.com/repos/bitcoin-core/gui/pulls/comments/1373600315",
      "pull_request_review_id": 1700307265,
      "id": 1373600315,
      "node_id": "PRRC_kwDOEEET9c5R33o7",
      "diff_hunk": "@@ -391,6 +418,140 @@ void TestGUI(interfaces::Node& node, const std::shared_ptr<CWallet>& wallet)\n \n     // Check removal from wallet\n     QCOMPARE(walletModel.wallet().getAddressReceiveRequests().size(), size_t{0});\n+\n+    // Test the Deniability Dialog\n+\n+    // Validate the main UI elements\n+    QPushButton* startButton = deniabilityDialog.findChild<QPushButton*>(\"startButton\");\n+    QVERIFY(startButton);\n+    QPushButton* stopButton = deniabilityDialog.findChild<QPushButton*>(\"stopButton\");\n+    QVERIFY(stopButton);\n+\n+    QRadioButton* hourlyRadioButton = deniabilityDialog.findChild<QRadioButton*>(\"hourlyRadioButton\");\n+    QVERIFY(hourlyRadioButton);\n+    QRadioButton* dailyRadioButton = deniabilityDialog.findChild<QRadioButton*>(\"dailyRadioButton\");\n+    QVERIFY(dailyRadioButton);\n+    QRadioButton* weeklyRadioButton = deniabilityDialog.findChild<QRadioButton*>(\"weeklyRadioButton\");\n+    QVERIFY(weeklyRadioButton);\n+\n+    BitcoinAmountField* budgetSpinner = deniabilityDialog.findChild<BitcoinAmountField*>(\"budgetSpinner\");\n+    QVERIFY(budgetSpinner);\n+\n+    QTableWidget* tableWidgetCoins = deniabilityDialog.findChild<QTableWidget*>(\"tableWidgetCoins\");\n+    QVERIFY(tableWidgetCoins);\n+\n+    QLabel* statusLabel = deniabilityDialog.findChild<QLabel*>(\"statusLabel\");\n+    QVERIFY(statusLabel);\n+\n+    // Check the initial state\n+    QVERIFY(!startButton->isEnabled());\n+    QVERIFY(!stopButton->isEnabled());\n+    QVERIFY(hourlyRadioButton->isEnabled());\n+    QVERIFY(dailyRadioButton->isEnabled());\n+    QVERIFY(weeklyRadioButton->isEnabled());\n+    // FIXME: AmountSpinBox doesn't correctly intercept isEnabled()\n+    // QVERIFY(budgetSpinner->isEnabled());\n+\n+    QVERIFY(!hourlyRadioButton->isChecked());\n+    QVERIFY(dailyRadioButton->isChecked());\n+    QVERIFY(!weeklyRadioButton->isChecked());\n+    QVERIFY(budgetSpinner->value() == 0);\n+\n+    // update coins to the latest wallet state\n+    deniabilityDialog.updateCoins();\n+\n+    // Validate the wallet supports deniabilization\n+    QVERIFY(deniabilityDialog.walletSupportsDeniabilization());\n+    // Validate a deniabilization candidate was found\n+    QVERIFY(deniabilityDialog.hasDeniabilizationCandidates());\n+\n+    // Validate one coin has been populated in the candidate table\n+    QVERIFY(tableWidgetCoins->rowCount() == 1);\n+    QTableWidgetItem* itemCheck = tableWidgetCoins->item(0, 0);\n+    QVERIFY(itemCheck);\n+    // We expect the candidate to be uncheck (since it's from a block reward)\n+    QVERIFY(itemCheck->checkState() == Qt::Unchecked);\n+    itemCheck->setCheckState(Qt::CheckState::Checked);\n+    Q_EMIT tableWidgetCoins->itemClicked(itemCheck);\n+\n+    // Test the budget spinner enabling the start button\n+    const CAmount budget = 10000;\n+    budgetSpinner->setValue(budget);\n+    QVERIFY(startButton->isEnabled());\n+\n+    // Test starting the deniabilization process\n+    CAmount balance = walletModel.wallet().getBalance();\n+    const uint expectedTxSize = 304; // 2 utxo inputs, 2 txout (LEGACY output type)\n+    CAmount expectedTxFee = walletModel.wallet().getRequiredFee(expectedTxSize);\n+\n+    // We expect to get a confirmation message box and we want to OK it\n+    bool clickedOk = false;\n+    ConfirmMessageBox(&clickedOk, QMessageBox::Ok);\n+    startButton->click();\n+    qApp->processEvents();\n+    // Verify we did get the confirmation message box\n+    QVERIFY(clickedOk);\n+\n+    // Verify only the stop button is enabled\n+    QVERIFY(stopButton->isEnabled());\n+    QVERIFY(!startButton->isEnabled());\n+    QVERIFY(!hourlyRadioButton->isEnabled());\n+    QVERIFY(!dailyRadioButton->isEnabled());\n+    QVERIFY(!weeklyRadioButton->isEnabled());\n+    // FIXME: AmountSpinBox doesn't correctly intercept isEnabled()()\n+    // QVERIFY(!budgetSpinner->isEnabled());\n+\n+    // Verify a deniabilization transaction was processed and the before and after balances match (minus the tx fee)\n+    CAmount balanceAfterTx = walletModel.wallet().getBalance();\n+    QCOMPARE(balance, balanceAfterTx + expectedTxFee);\n+\n+    // Verify the budget was updated correctly\n+    QCOMPARE(budgetSpinner->value(), budget - expectedTxFee);\n+\n+    // Verify status shows we're waiting for the tx to be confirmed\n+    std::string statusTextAfterTx = statusLabel->text().toStdString();\n+    QCOMPARE(statusTextAfterTx, std::string(\"Waiting for the deniabilization transaction to be confirmed...\"));\n+\n+    // Stop the deniabilization processing\n+    stopButton->click();\n+    qApp->processEvents();\n+\n+    // Verify stop is disabled and everything else is re-enabled\n+    QVERIFY(!stopButton->isEnabled());\n+    QVERIFY(startButton->isEnabled());\n+    QVERIFY(hourlyRadioButton->isEnabled());\n+    QVERIFY(dailyRadioButton->isEnabled());\n+    QVERIFY(weeklyRadioButton->isEnabled());\n+    // FIXME: AmountSpinBox doesn't correctly intercept isEnabled()()\n+    // QVERIFY(budgetSpinner->isEnabled());\n+\n+    // Bump the min fee to test fee bumping\n+    wallet->m_min_fee = CFeeRate(10000);\n+    CAmount expectedBumpedTxFee = walletModel.wallet().getRequiredFee(expectedTxSize);\n+\n+    // Restart the deniabilizaiton process\n+    startButton->click();\n+    qApp->processEvents();\n+\n+    CAmount balanceAfterFeeBumpTx = walletModel.wallet().getBalance();\n+    QCOMPARE(balance, balanceAfterFeeBumpTx + expectedBumpedTxFee);\n+\n+    // Verify the budget was updated correctly\n+    QCOMPARE(budgetSpinner->value(), budget - expectedBumpedTxFee);\n+\n+    // mine a block to confirm the transaction\n+    MineBlock(test.m_node, GetScriptForRawPubKey(test.coinbaseKey.GetPubKey()));\n+    {\n+        LOCK(wallet->cs_wallet);\n+        wallet->SetLastBlockProcessed(106, WITH_LOCK(node.context()->chainman->GetMutex(), return node.context()->chainman->ActiveChain().Tip()->GetBlockHash()));",
      "path": "src/qt/test/wallettests.cpp",
      "position": 240,
      "original_position": 240,
      "commit_id": "8f72d4abe3ab4e4cbbe909694a1fd9d0a8f4a3bf",
      "original_commit_id": "16d50b3699232bfe48b21057e6175ab12417ebe3",
      "in_reply_to_id": null,
      "user": {
        "login": "katesalazar",
        "id": 52637275,
        "node_id": "MDQ6VXNlcjUyNjM3Mjc1",
        "avatar_url": "https://avatars.githubusercontent.com/u/52637275?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/katesalazar",
        "html_url": "https://github.com/katesalazar",
        "followers_url": "https://api.github.com/users/katesalazar/followers",
        "following_url": "https://api.github.com/users/katesalazar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/katesalazar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/katesalazar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/katesalazar/subscriptions",
        "organizations_url": "https://api.github.com/users/katesalazar/orgs",
        "repos_url": "https://api.github.com/users/katesalazar/repos",
        "events_url": "https://api.github.com/users/katesalazar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/katesalazar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Crosses even column 160.\r\n```suggestion\r\n        wallet->SetLastBlockProcessed(106, WITH_LOCK(\r\n                node.context()->chainman->GetMutex(),\r\n                return node.context()->chainman->ActiveChain().Tip()->GetBlockHash()));\r\n```\r\nWouldn't reach even column 100.",
      "created_at": "2023-10-26T18:30:00Z",
      "updated_at": "2023-10-26T18:36:25Z",
      "html_url": "https://github.com/bitcoin-core/gui/pull/733#discussion_r1373600315",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/gui/pulls/comments/1373600315"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/gui/pulls/733"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 546,
      "original_line": 546,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/gui/pulls/comments/1373610526",
      "pull_request_review_id": 1700307265,
      "id": 1373610526,
      "node_id": "PRRC_kwDOEEET9c5R36Ie",
      "diff_hunk": "@@ -388,5 +388,102 @@ Result CommitTransaction(CWallet& wallet, const uint256& txid, CMutableTransacti\n     return Result::OK;\n }\n \n+Result CreateRateBumpDeniabilizationTransaction(CWallet& wallet, const uint256& txid, unsigned int confirm_target, bool sign, bilingual_str& error, CAmount& old_fee, CAmount& new_fee, CTransactionRef& new_tx)",
      "path": "src/wallet/feebumper.cpp",
      "position": 4,
      "original_position": 4,
      "commit_id": "8f72d4abe3ab4e4cbbe909694a1fd9d0a8f4a3bf",
      "original_commit_id": "16d50b3699232bfe48b21057e6175ab12417ebe3",
      "in_reply_to_id": null,
      "user": {
        "login": "katesalazar",
        "id": 52637275,
        "node_id": "MDQ6VXNlcjUyNjM3Mjc1",
        "avatar_url": "https://avatars.githubusercontent.com/u/52637275?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/katesalazar",
        "html_url": "https://github.com/katesalazar",
        "followers_url": "https://api.github.com/users/katesalazar/followers",
        "following_url": "https://api.github.com/users/katesalazar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/katesalazar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/katesalazar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/katesalazar/subscriptions",
        "organizations_url": "https://api.github.com/users/katesalazar/orgs",
        "repos_url": "https://api.github.com/users/katesalazar/repos",
        "events_url": "https://api.github.com/users/katesalazar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/katesalazar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```suggestion\r\nResult CreateRateBumpDeniabilizationTransaction(\r\n        CWallet& wallet, const uint256& txid, unsigned int confirm_target,\r\n        bool sign, bilingual_str& error, CAmount& old_fee, CAmount& new_fee,\r\n        CTransactionRef& new_tx)\r\n```\r\nso many params, did you think of removing some?",
      "created_at": "2023-10-26T18:32:40Z",
      "updated_at": "2023-10-26T18:36:25Z",
      "html_url": "https://github.com/bitcoin-core/gui/pull/733#discussion_r1373610526",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/gui/pulls/comments/1373610526"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/gui/pulls/733"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 389,
      "original_line": 389,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/gui/pulls/comments/1373616084",
      "pull_request_review_id": 1700307265,
      "id": 1373616084,
      "node_id": "PRRC_kwDOEEET9c5R37fU",
      "diff_hunk": "@@ -1392,4 +1392,381 @@ bool FundTransaction(CWallet& wallet, CMutableTransaction& tx, CAmount& nFeeRet,\n \n     return true;\n }\n+\n+constexpr int NUM_DENIABILIZATION_OUTPUTS = 2;\n+\n+static unsigned int CalculateDeniabilizationTxSize(const CScript& script, CAmount value, unsigned int numTxIn)\n+{\n+    // Calculation based on the comments and code in GetDustThreshold and CreateTransactionInternal\n+    unsigned int txOutSize = (unsigned int)GetSerializeSize(CTxOut(value, script), PROTOCOL_VERSION);\n+\n+    const size_t txOutCount = NUM_DENIABILIZATION_OUTPUTS;\n+    unsigned int txSize = 10 + GetSizeOfCompactSize(txOutCount); // bytes for output count\n+    txSize += txOutSize * txOutCount;\n+\n+    int witnessversion = 0;\n+    std::vector<unsigned char> witnessprogram;\n+    if (script.IsWitnessProgram(witnessversion, witnessprogram)) {\n+        txSize += (unsigned int)(numTxIn * 67.75f + 0.5f);\n+    } else {\n+        txSize += numTxIn * 148;\n+    }\n+    return txSize;\n+}\n+\n+float CalculateDeniabilizationProbability(unsigned int deniabilization_cycles)\n+{\n+    // 100%, 50%, 25%, 13%, 6%, 3%, 2%, 1%\n+    return powf(0.5f, deniabilization_cycles);\n+}\n+\n+bool IsDeniabilizationWorthwhile(CAmount total_value, CAmount fee_estimate)\n+{\n+    constexpr CAmount value_to_fee_ratio = 10;\n+    return total_value > fee_estimate * value_to_fee_ratio;\n+}\n+\n+CCoinControl SetupDeniabilizationCoinControl(unsigned int confirm_target)\n+{\n+    CCoinControl coin_control;\n+    coin_control.m_avoid_address_reuse = true;\n+    coin_control.m_avoid_partial_spends = true;\n+    coin_control.m_allow_other_inputs = false;\n+    coin_control.m_signal_bip125_rbf = true;\n+    coin_control.m_confirm_target = confirm_target;\n+    // we'll automatically bump the fee if economical ends up not confirming by the next deniabilization cycle\n+    coin_control.m_fee_mode = FeeEstimateMode::ECONOMICAL;\n+    return coin_control;\n+}\n+\n+CFeeRate CalculateDeniabilizationFeeRate(const CWallet& wallet, unsigned int confirm_target)\n+{\n+    CCoinControl coin_control = SetupDeniabilizationCoinControl(confirm_target);\n+\n+    CFeeRate requiredFeeRate = GetRequiredFeeRate(wallet);\n+    FeeCalculation fee_calc;\n+    CFeeRate minFeeRate = GetMinimumFeeRate(wallet, coin_control, &fee_calc);\n+    if (fee_calc.reason == FeeReason::FALLBACK || requiredFeeRate > minFeeRate)\n+        return requiredFeeRate;\n+    return minFeeRate;\n+}\n+\n+static CAmount CalculateDeniabilizationTxFee(const CScript& shared_script, CAmount total_value, unsigned int num_utxos, const CFeeRate& fee_rate)\n+{\n+    Assert(num_utxos > 0);\n+    unsigned int deniabilization_tx_size = CalculateDeniabilizationTxSize(shared_script, total_value, num_utxos);\n+    return fee_rate.GetFee(deniabilization_tx_size);\n+}\n+\n+CAmount CalculateDeniabilizationFeeEstimate(const CScript& shared_script, CAmount total_value, unsigned int num_utxos, unsigned int deniabilization_cycles, const CFeeRate& fee_rate)\n+{\n+    float deniabilizationProbability = CalculateDeniabilizationProbability(deniabilization_cycles);\n+    // convert to integer percent to truncate and check for zero probability\n+    unsigned int deniabilizationProbabilityPercent = deniabilizationProbability * 100;\n+    if (deniabilizationProbabilityPercent == 0) {\n+        return 0;\n+    }\n+\n+    // this cycle will use all the UTXOs, while following cycles will have just one UTXO\n+    CAmount deniabilizationFee = CalculateDeniabilizationTxFee(shared_script, total_value, num_utxos, fee_rate);\n+\n+    // calculate the fees from future deniabilization cycles\n+    CAmount futureDeniabilizationFee = CalculateDeniabilizationFeeEstimate(shared_script, total_value / NUM_DENIABILIZATION_OUTPUTS, 1, deniabilization_cycles + 1, fee_rate) * 2;\n+\n+    // if it's worthwhile to do future deniabilizations then add them to this cycle estimate\n+    if (IsDeniabilizationWorthwhile(total_value, deniabilizationFee + futureDeniabilizationFee)) {\n+        deniabilizationFee += futureDeniabilizationFee;\n+    }\n+    return deniabilizationFee;\n+}\n+\n+std::pair<unsigned int, bool> CalculateDeniabilizationCycles(CWallet& wallet, const COutPoint& outpoint)\n+{\n+    LOCK(wallet.cs_wallet);\n+    auto walletTx = wallet.GetWalletTx(outpoint.hash);\n+    if (!walletTx) {\n+        return std::make_pair(0, false);\n+    }\n+    auto tx = walletTx->tx;\n+\n+    if (tx->IsCoinBase()) {\n+        // this is a block reward tx, so we tag it as such\n+        return std::make_pair(0, true);\n+    }\n+\n+    // an deniabilized coin is one we sent to ourselves\n+    // all txIn should belong to our wallet\n+    if (tx->vin.empty()) {\n+        return std::make_pair(0, false);\n+    }\n+    for (const auto& txIn : tx->vin) {\n+        if (InputIsMine(wallet, txIn) == ISMINE_NO) {\n+            return std::make_pair(0, false);\n+        }\n+    }\n+\n+    // all txOut should belong to our wallet\n+    Assert(outpoint.n < tx->vout.size());\n+    unsigned int n = 0;\n+    for (const auto& txOut : tx->vout) {\n+        if (wallet.IsMine(txOut) == ISMINE_NO) {\n+            Assert(n != outpoint.n);\n+            return std::make_pair(0, false);\n+        }\n+        n++;\n+    }\n+\n+    unsigned int uniqueTxOutCount = 0;\n+    for (const auto& txOut : tx->vout) {\n+        // check if it's a valid destination\n+        CTxDestination txOutDestination;\n+        ExtractDestination(txOut.scriptPubKey, txOutDestination);\n+        if (std::get_if<CNoDestination>(&txOutDestination)) {\n+            continue;\n+        }\n+\n+        // don't count outputs that match any input addresses (eg it's change output)\n+        bool matchesInput = false;\n+        for (const auto& txIn : tx->vin) {\n+            auto prevWalletTx = wallet.GetWalletTx(txIn.prevout.hash);\n+            if (prevWalletTx && prevWalletTx->tx->vout[txIn.prevout.n].scriptPubKey == txOut.scriptPubKey) {\n+                matchesInput = true;\n+                break;\n+            }\n+        }\n+        if (matchesInput) {\n+            continue;\n+        }\n+\n+        uniqueTxOutCount++;\n+    }\n+\n+    // we consider two or more unique outputs an \"deniabilization\" of the coin\n+    unsigned int deniabilizationCycles = uniqueTxOutCount >= 2 ? 1 : 0;\n+\n+    // all txIn and txOut are from our wallet\n+    // however if we have multiple txIn this was either an initial deniabilization of multiple UTXOs or the user manually merged deniabilized UTXOs\n+    // in either case we don't need to recurse into parent transactions and we can return the calculated cycles\n+    if (tx->vin.size() > 1) {\n+        return std::make_pair(deniabilizationCycles, false);\n+    }\n+\n+    const auto& txIn = tx->vin[0];\n+    // now recursively calculate the deniabilization cycles of the input\n+    auto inputStats = CalculateDeniabilizationCycles(wallet, txIn.prevout);\n+    return std::make_pair(inputStats.first + deniabilizationCycles, inputStats.second);\n+};\n+\n+void SpoofTransactionFingerprint(CMutableTransaction& tx, FastRandomContext& rng_fast)\n+{\n+    // Transaction \"fingerprint\" spoofing\n+    struct Fingerprint {\n+        bool standardVersion = false;\n+        bool antiFeeSniping = false;\n+        bool bip69Ordering = false;\n+    };\n+\n+    // wallet fingerprints based on info from variuous sources, see:\n+    // https://github.com/achow101/wallet-fingerprinting/blob/main/fingerprints.md\n+    // https://gitlab.com/1440000bytes/goldfish\n+    // https://ishaana.com/blog/wallet_fingerprinting/\n+    static const Fingerprint s_walletFingerprints[] = {\n+        {true, true, false},   // Core\n+        {true, true, true},    // Electrum\n+        {true, false, false},  // Blue\n+        {false, false, true},  // Trezor\n+        {false, false, false}, // Trust, Ledger\n+    };\n+    constexpr size_t NUM_WALLET_FINGERPRINTS = sizeof(s_walletFingerprints) / sizeof(s_walletFingerprints[0]);\n+\n+    auto fingerprintIndex = rng_fast.randrange(NUM_WALLET_FINGERPRINTS);\n+    const Fingerprint& fingerprint = s_walletFingerprints[fingerprintIndex];\n+\n+    if (fingerprint.standardVersion) {\n+        Assert(tx.nVersion == TX_MAX_STANDARD_VERSION);\n+    } else {\n+        tx.nVersion = 1;\n+    }\n+\n+    if (fingerprint.antiFeeSniping) {\n+        // By default \"Core\" implements anti-fee-sniping (nLockTime == block_height - rng_fast.randrange(100))\n+    } else {\n+        // no anti-fee-sniping\n+        tx.nLockTime = 0;\n+    }\n+\n+    if (fingerprint.bip69Ordering) {\n+        // Sort the inputs and outputs in accordance with BIP69\n+        auto sortInputsBip69 = [](const CTxIn& a, const CTxIn& b) {\n+            // COutPoint operator< does sort in accordance with Bip69, so just use that.\n+            return a.prevout < b.prevout;\n+        };\n+        std::sort(tx.vin.begin(), tx.vin.end(), sortInputsBip69);\n+\n+        auto sortOutputsBip69 = [](const CTxOut& a, const CTxOut& b) {\n+            if (a.nValue == b.nValue) {\n+                // Note: prevector operator< does NOT properly order scriptPubKeys lexicographically. So instead we\n+                // fall-back to using std::memcmp.\n+                const auto& spkA = a.scriptPubKey;\n+                const auto& spkB = b.scriptPubKey;\n+                const int cmp = std::memcmp(spkA.data(), spkB.data(), std::min(spkA.size(), spkB.size()));\n+                return cmp < 0 || (cmp == 0 && spkA.size() < spkB.size());\n+            }\n+            return a.nValue < b.nValue;\n+        };\n+        std::sort(tx.vout.begin(), tx.vout.end(), sortOutputsBip69);\n+    } else {\n+        // By default \"Core\" doesn't perform BIP69 ordering\n+    }\n+}\n+\n+util::Result<CreatedTransactionResult> CreateDeniabilizationTransaction(CWallet& wallet, const std::set<COutPoint>& inputs, const std::optional<OutputType>& opt_output_type, unsigned int confirm_target, unsigned int deniabilization_cycles, bool sign, bool& insufficient_amount)",
      "path": "src/wallet/spend.cpp",
      "position": 251,
      "original_position": 232,
      "commit_id": "8f72d4abe3ab4e4cbbe909694a1fd9d0a8f4a3bf",
      "original_commit_id": "16d50b3699232bfe48b21057e6175ab12417ebe3",
      "in_reply_to_id": null,
      "user": {
        "login": "katesalazar",
        "id": 52637275,
        "node_id": "MDQ6VXNlcjUyNjM3Mjc1",
        "avatar_url": "https://avatars.githubusercontent.com/u/52637275?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/katesalazar",
        "html_url": "https://github.com/katesalazar",
        "followers_url": "https://api.github.com/users/katesalazar/followers",
        "following_url": "https://api.github.com/users/katesalazar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/katesalazar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/katesalazar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/katesalazar/subscriptions",
        "organizations_url": "https://api.github.com/users/katesalazar/orgs",
        "repos_url": "https://api.github.com/users/katesalazar/repos",
        "events_url": "https://api.github.com/users/katesalazar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/katesalazar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "same",
      "created_at": "2023-10-26T18:34:33Z",
      "updated_at": "2023-10-26T18:36:25Z",
      "html_url": "https://github.com/bitcoin-core/gui/pull/733#discussion_r1373616084",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/gui/pulls/comments/1373616084"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/gui/pulls/733"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1670,
      "original_line": 1670,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/gui/pulls/comments/1373617709",
      "pull_request_review_id": 1700307265,
      "id": 1373617709,
      "node_id": "PRRC_kwDOEEET9c5R374t",
      "diff_hunk": "@@ -1392,4 +1392,381 @@ bool FundTransaction(CWallet& wallet, CMutableTransaction& tx, CAmount& nFeeRet,\n \n     return true;\n }\n+\n+constexpr int NUM_DENIABILIZATION_OUTPUTS = 2;\n+\n+static unsigned int CalculateDeniabilizationTxSize(const CScript& script, CAmount value, unsigned int numTxIn)\n+{\n+    // Calculation based on the comments and code in GetDustThreshold and CreateTransactionInternal\n+    unsigned int txOutSize = (unsigned int)GetSerializeSize(CTxOut(value, script), PROTOCOL_VERSION);\n+\n+    const size_t txOutCount = NUM_DENIABILIZATION_OUTPUTS;\n+    unsigned int txSize = 10 + GetSizeOfCompactSize(txOutCount); // bytes for output count\n+    txSize += txOutSize * txOutCount;\n+\n+    int witnessversion = 0;\n+    std::vector<unsigned char> witnessprogram;\n+    if (script.IsWitnessProgram(witnessversion, witnessprogram)) {\n+        txSize += (unsigned int)(numTxIn * 67.75f + 0.5f);\n+    } else {\n+        txSize += numTxIn * 148;\n+    }\n+    return txSize;\n+}\n+\n+float CalculateDeniabilizationProbability(unsigned int deniabilization_cycles)\n+{\n+    // 100%, 50%, 25%, 13%, 6%, 3%, 2%, 1%\n+    return powf(0.5f, deniabilization_cycles);\n+}\n+\n+bool IsDeniabilizationWorthwhile(CAmount total_value, CAmount fee_estimate)\n+{\n+    constexpr CAmount value_to_fee_ratio = 10;\n+    return total_value > fee_estimate * value_to_fee_ratio;\n+}\n+\n+CCoinControl SetupDeniabilizationCoinControl(unsigned int confirm_target)\n+{\n+    CCoinControl coin_control;\n+    coin_control.m_avoid_address_reuse = true;\n+    coin_control.m_avoid_partial_spends = true;\n+    coin_control.m_allow_other_inputs = false;\n+    coin_control.m_signal_bip125_rbf = true;\n+    coin_control.m_confirm_target = confirm_target;\n+    // we'll automatically bump the fee if economical ends up not confirming by the next deniabilization cycle\n+    coin_control.m_fee_mode = FeeEstimateMode::ECONOMICAL;\n+    return coin_control;\n+}\n+\n+CFeeRate CalculateDeniabilizationFeeRate(const CWallet& wallet, unsigned int confirm_target)\n+{\n+    CCoinControl coin_control = SetupDeniabilizationCoinControl(confirm_target);\n+\n+    CFeeRate requiredFeeRate = GetRequiredFeeRate(wallet);\n+    FeeCalculation fee_calc;\n+    CFeeRate minFeeRate = GetMinimumFeeRate(wallet, coin_control, &fee_calc);\n+    if (fee_calc.reason == FeeReason::FALLBACK || requiredFeeRate > minFeeRate)\n+        return requiredFeeRate;\n+    return minFeeRate;\n+}\n+\n+static CAmount CalculateDeniabilizationTxFee(const CScript& shared_script, CAmount total_value, unsigned int num_utxos, const CFeeRate& fee_rate)\n+{\n+    Assert(num_utxos > 0);\n+    unsigned int deniabilization_tx_size = CalculateDeniabilizationTxSize(shared_script, total_value, num_utxos);\n+    return fee_rate.GetFee(deniabilization_tx_size);\n+}\n+\n+CAmount CalculateDeniabilizationFeeEstimate(const CScript& shared_script, CAmount total_value, unsigned int num_utxos, unsigned int deniabilization_cycles, const CFeeRate& fee_rate)\n+{\n+    float deniabilizationProbability = CalculateDeniabilizationProbability(deniabilization_cycles);\n+    // convert to integer percent to truncate and check for zero probability\n+    unsigned int deniabilizationProbabilityPercent = deniabilizationProbability * 100;\n+    if (deniabilizationProbabilityPercent == 0) {\n+        return 0;\n+    }\n+\n+    // this cycle will use all the UTXOs, while following cycles will have just one UTXO\n+    CAmount deniabilizationFee = CalculateDeniabilizationTxFee(shared_script, total_value, num_utxos, fee_rate);\n+\n+    // calculate the fees from future deniabilization cycles\n+    CAmount futureDeniabilizationFee = CalculateDeniabilizationFeeEstimate(shared_script, total_value / NUM_DENIABILIZATION_OUTPUTS, 1, deniabilization_cycles + 1, fee_rate) * 2;\n+\n+    // if it's worthwhile to do future deniabilizations then add them to this cycle estimate\n+    if (IsDeniabilizationWorthwhile(total_value, deniabilizationFee + futureDeniabilizationFee)) {\n+        deniabilizationFee += futureDeniabilizationFee;\n+    }\n+    return deniabilizationFee;\n+}\n+\n+std::pair<unsigned int, bool> CalculateDeniabilizationCycles(CWallet& wallet, const COutPoint& outpoint)\n+{\n+    LOCK(wallet.cs_wallet);\n+    auto walletTx = wallet.GetWalletTx(outpoint.hash);\n+    if (!walletTx) {\n+        return std::make_pair(0, false);\n+    }\n+    auto tx = walletTx->tx;\n+\n+    if (tx->IsCoinBase()) {\n+        // this is a block reward tx, so we tag it as such\n+        return std::make_pair(0, true);\n+    }\n+\n+    // an deniabilized coin is one we sent to ourselves\n+    // all txIn should belong to our wallet\n+    if (tx->vin.empty()) {\n+        return std::make_pair(0, false);\n+    }\n+    for (const auto& txIn : tx->vin) {\n+        if (InputIsMine(wallet, txIn) == ISMINE_NO) {\n+            return std::make_pair(0, false);\n+        }\n+    }\n+\n+    // all txOut should belong to our wallet\n+    Assert(outpoint.n < tx->vout.size());\n+    unsigned int n = 0;\n+    for (const auto& txOut : tx->vout) {\n+        if (wallet.IsMine(txOut) == ISMINE_NO) {\n+            Assert(n != outpoint.n);\n+            return std::make_pair(0, false);\n+        }\n+        n++;\n+    }\n+\n+    unsigned int uniqueTxOutCount = 0;\n+    for (const auto& txOut : tx->vout) {\n+        // check if it's a valid destination\n+        CTxDestination txOutDestination;\n+        ExtractDestination(txOut.scriptPubKey, txOutDestination);\n+        if (std::get_if<CNoDestination>(&txOutDestination)) {\n+            continue;\n+        }\n+\n+        // don't count outputs that match any input addresses (eg it's change output)\n+        bool matchesInput = false;\n+        for (const auto& txIn : tx->vin) {\n+            auto prevWalletTx = wallet.GetWalletTx(txIn.prevout.hash);\n+            if (prevWalletTx && prevWalletTx->tx->vout[txIn.prevout.n].scriptPubKey == txOut.scriptPubKey) {\n+                matchesInput = true;\n+                break;\n+            }\n+        }\n+        if (matchesInput) {\n+            continue;\n+        }\n+\n+        uniqueTxOutCount++;\n+    }\n+\n+    // we consider two or more unique outputs an \"deniabilization\" of the coin\n+    unsigned int deniabilizationCycles = uniqueTxOutCount >= 2 ? 1 : 0;\n+\n+    // all txIn and txOut are from our wallet\n+    // however if we have multiple txIn this was either an initial deniabilization of multiple UTXOs or the user manually merged deniabilized UTXOs\n+    // in either case we don't need to recurse into parent transactions and we can return the calculated cycles\n+    if (tx->vin.size() > 1) {\n+        return std::make_pair(deniabilizationCycles, false);\n+    }\n+\n+    const auto& txIn = tx->vin[0];\n+    // now recursively calculate the deniabilization cycles of the input\n+    auto inputStats = CalculateDeniabilizationCycles(wallet, txIn.prevout);\n+    return std::make_pair(inputStats.first + deniabilizationCycles, inputStats.second);\n+};\n+\n+void SpoofTransactionFingerprint(CMutableTransaction& tx, FastRandomContext& rng_fast)\n+{\n+    // Transaction \"fingerprint\" spoofing\n+    struct Fingerprint {\n+        bool standardVersion = false;\n+        bool antiFeeSniping = false;\n+        bool bip69Ordering = false;\n+    };\n+\n+    // wallet fingerprints based on info from variuous sources, see:\n+    // https://github.com/achow101/wallet-fingerprinting/blob/main/fingerprints.md\n+    // https://gitlab.com/1440000bytes/goldfish\n+    // https://ishaana.com/blog/wallet_fingerprinting/\n+    static const Fingerprint s_walletFingerprints[] = {\n+        {true, true, false},   // Core\n+        {true, true, true},    // Electrum\n+        {true, false, false},  // Blue\n+        {false, false, true},  // Trezor\n+        {false, false, false}, // Trust, Ledger\n+    };\n+    constexpr size_t NUM_WALLET_FINGERPRINTS = sizeof(s_walletFingerprints) / sizeof(s_walletFingerprints[0]);\n+\n+    auto fingerprintIndex = rng_fast.randrange(NUM_WALLET_FINGERPRINTS);\n+    const Fingerprint& fingerprint = s_walletFingerprints[fingerprintIndex];\n+\n+    if (fingerprint.standardVersion) {\n+        Assert(tx.nVersion == TX_MAX_STANDARD_VERSION);\n+    } else {\n+        tx.nVersion = 1;\n+    }\n+\n+    if (fingerprint.antiFeeSniping) {\n+        // By default \"Core\" implements anti-fee-sniping (nLockTime == block_height - rng_fast.randrange(100))\n+    } else {\n+        // no anti-fee-sniping\n+        tx.nLockTime = 0;\n+    }\n+\n+    if (fingerprint.bip69Ordering) {\n+        // Sort the inputs and outputs in accordance with BIP69\n+        auto sortInputsBip69 = [](const CTxIn& a, const CTxIn& b) {\n+            // COutPoint operator< does sort in accordance with Bip69, so just use that.\n+            return a.prevout < b.prevout;\n+        };\n+        std::sort(tx.vin.begin(), tx.vin.end(), sortInputsBip69);\n+\n+        auto sortOutputsBip69 = [](const CTxOut& a, const CTxOut& b) {\n+            if (a.nValue == b.nValue) {\n+                // Note: prevector operator< does NOT properly order scriptPubKeys lexicographically. So instead we\n+                // fall-back to using std::memcmp.\n+                const auto& spkA = a.scriptPubKey;\n+                const auto& spkB = b.scriptPubKey;\n+                const int cmp = std::memcmp(spkA.data(), spkB.data(), std::min(spkA.size(), spkB.size()));\n+                return cmp < 0 || (cmp == 0 && spkA.size() < spkB.size());\n+            }\n+            return a.nValue < b.nValue;\n+        };\n+        std::sort(tx.vout.begin(), tx.vout.end(), sortOutputsBip69);\n+    } else {\n+        // By default \"Core\" doesn't perform BIP69 ordering\n+    }\n+}\n+\n+util::Result<CreatedTransactionResult> CreateDeniabilizationTransaction(CWallet& wallet, const std::set<COutPoint>& inputs, const std::optional<OutputType>& opt_output_type, unsigned int confirm_target, unsigned int deniabilization_cycles, bool sign, bool& insufficient_amount)\n+{\n+    if (inputs.empty()) {\n+        return util::Error{_(\"Inputs must not be empty\")};\n+    }\n+\n+    CCoinControl coin_control = SetupDeniabilizationCoinControl(confirm_target);\n+    // TODO: Do we need to limit number of inputs to OUTPUT_GROUP_MAX_ENTRIES\n+    for (const auto& input : inputs) {\n+        coin_control.Select(input);\n+    }\n+    Assert(coin_control.HasSelected());\n+    CFeeRate deniabilization_fee_rate = CalculateDeniabilizationFeeRate(wallet, confirm_target);\n+    coin_control.m_feerate = deniabilization_fee_rate;\n+\n+    LOCK(wallet.cs_wallet);\n+\n+    FastRandomContext rng_fast;\n+    CoinSelectionParams coin_selection_params{rng_fast};\n+    coin_selection_params.m_avoid_partial_spends = coin_control.m_avoid_partial_spends;\n+    coin_selection_params.m_include_unsafe_inputs = coin_control.m_include_unsafe_inputs;\n+    coin_selection_params.m_effective_feerate = deniabilization_fee_rate;\n+    coin_selection_params.m_long_term_feerate = wallet.m_consolidate_feerate;\n+    coin_selection_params.m_subtract_fee_outputs = true;\n+\n+    auto res_fetch_inputs = FetchSelectedInputs(wallet, coin_control, coin_selection_params);\n+    if (!res_fetch_inputs) {\n+        return util::Error{util::ErrorString(res_fetch_inputs)};\n+    }\n+    PreSelectedInputs preset_inputs = *res_fetch_inputs;\n+    CAmount total_amount = preset_inputs.total_amount;\n+\n+    // validate that all UTXOs share the same address\n+    std::optional<CScript> op_shared_script;\n+    for (const auto& coin : preset_inputs.coins) {\n+        if (!op_shared_script) {\n+            op_shared_script = coin->txout.scriptPubKey;\n+        }\n+        if (!op_shared_script || !(*op_shared_script == coin->txout.scriptPubKey)) {\n+            return util::Error{_(\"Input addresses must all match.\")};\n+        }\n+    }\n+    Assert(op_shared_script);\n+    CScript shared_script = *op_shared_script;\n+\n+    CFeeRate discard_feerate = GetDiscardRate(wallet);\n+    CAmount dust_threshold = GetDustThreshold(CTxOut(total_amount, shared_script), discard_feerate);\n+\n+    // deniabilize the UTXOs by splitting the value randomly\n+    // find a split that leaves enough amount post split to finish the deniabilization process in each new UTXO\n+    CAmount min_post_split_amount = CalculateDeniabilizationFeeEstimate(shared_script, total_amount / NUM_DENIABILIZATION_OUTPUTS, 1, deniabilization_cycles + 1, deniabilization_fee_rate) + dust_threshold;\n+    CAmount estimated_tx_fee = CalculateDeniabilizationTxFee(shared_script, total_amount, preset_inputs.coins.size(), deniabilization_fee_rate);\n+\n+    CAmount total_random_range = total_amount - min_post_split_amount * NUM_DENIABILIZATION_OUTPUTS - estimated_tx_fee;\n+    if (total_random_range < 0) {\n+        insufficient_amount = true;\n+        return util::Error{strprintf(_(\"Insufficient amount (%d) for a deniabilization transaction, min amount (%d), tx fee (%d).\"), total_amount, min_post_split_amount, estimated_tx_fee)};\n+    }\n+\n+    OutputType output_type = wallet.m_default_address_type;\n+    if (opt_output_type) {\n+        output_type = *opt_output_type;\n+    } else {\n+        // if no output type was specified, try to infer it from the source inputs\n+        CTxDestination shared_destination = CNoDestination();\n+        if (ExtractDestination(shared_script, shared_destination)) {\n+            std::optional<OutputType> opt_shared_output_type = OutputTypeFromDestination(shared_destination);\n+            if (opt_shared_output_type) {\n+                output_type = *opt_shared_output_type;\n+            }\n+        }\n+    }\n+\n+    const int num_recipients = NUM_DENIABILIZATION_OUTPUTS;\n+    std::vector<CRecipient> recipients(num_recipients);\n+    std::list<ReserveDestination> reservedests;\n+    constexpr bool reservdest_internal = false; // TODO: Should this be \"true\" or \"false\". What does \"internal\" mean?\n+    for (int recipient_index = 0; recipient_index < num_recipients; recipient_index++) {\n+        bool lastRecipient = recipient_index == (num_recipients - 1);\n+        if (!lastRecipient) {\n+            // all recipients except for the last one,\n+            // calculate a random range based on the remaining total random range and the number of remaining recipients\n+            // then generate a random amount within that range\n+            CAmount random_range = total_random_range / (num_recipients - recipient_index - 1);\n+            CAmount random_amount = 0;\n+            if (random_range > 0) {\n+                random_amount = GetRand<CAmount>(random_range);\n+                Assert(total_random_range >= random_amount);\n+                total_random_range -= random_amount;\n+            }\n+            recipients[recipient_index].nAmount = min_post_split_amount + random_amount;\n+        } else {\n+            // the last recipient takes any leftover random amount and the estimated fee\n+            recipients[recipient_index].nAmount = min_post_split_amount + total_random_range + estimated_tx_fee;\n+        }\n+\n+        // the last recipient pays the tx fees\n+        recipients[recipient_index].fSubtractFeeFromAmount = lastRecipient;\n+\n+        auto& reservedest = reservedests.emplace_back(&wallet, output_type);\n+        CTxDestination dest;\n+        auto op_dest = reservedest.GetReservedDestination(reservdest_internal);\n+        if (!op_dest) {\n+            return util::Error{_(\"Failed to reserve a new address.\") + Untranslated(\" \") + util::ErrorString(op_dest)};\n+        }\n+        dest = *op_dest;\n+        recipients[recipient_index].dest = dest;\n+        if (lastRecipient) {\n+            // we don't expect to get change, but we provide the address to prevent CreateTransactionInternal from generating a change address\n+            coin_control.destChange = dest;\n+        }\n+    }\n+\n+    CAmount recipient_amount = std::accumulate(recipients.cbegin(), recipients.cend(), CAmount{0}, [](CAmount sum, const CRecipient& recipient) { return sum + recipient.nAmount; });",
      "path": "src/wallet/spend.cpp",
      "position": null,
      "original_position": 345,
      "commit_id": "8f72d4abe3ab4e4cbbe909694a1fd9d0a8f4a3bf",
      "original_commit_id": "16d50b3699232bfe48b21057e6175ab12417ebe3",
      "in_reply_to_id": null,
      "user": {
        "login": "katesalazar",
        "id": 52637275,
        "node_id": "MDQ6VXNlcjUyNjM3Mjc1",
        "avatar_url": "https://avatars.githubusercontent.com/u/52637275?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/katesalazar",
        "html_url": "https://github.com/katesalazar",
        "followers_url": "https://api.github.com/users/katesalazar/followers",
        "following_url": "https://api.github.com/users/katesalazar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/katesalazar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/katesalazar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/katesalazar/subscriptions",
        "organizations_url": "https://api.github.com/users/katesalazar/orgs",
        "repos_url": "https://api.github.com/users/katesalazar/repos",
        "events_url": "https://api.github.com/users/katesalazar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/katesalazar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "fold to several lines?",
      "created_at": "2023-10-26T18:35:10Z",
      "updated_at": "2023-10-26T18:36:25Z",
      "html_url": "https://github.com/bitcoin-core/gui/pull/733#discussion_r1373617709",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/gui/pulls/comments/1373617709"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/gui/pulls/733"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1736,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/gui/pulls/comments/1375318725",
      "pull_request_review_id": 1702850414,
      "id": 1375318725,
      "node_id": "PRRC_kwDOEEET9c5R-bLF",
      "diff_hunk": "@@ -1392,4 +1392,381 @@ bool FundTransaction(CWallet& wallet, CMutableTransaction& tx, CAmount& nFeeRet,\n \n     return true;\n }\n+\n+constexpr int NUM_DENIABILIZATION_OUTPUTS = 2;\n+\n+static unsigned int CalculateDeniabilizationTxSize(const CScript& script, CAmount value, unsigned int numTxIn)\n+{\n+    // Calculation based on the comments and code in GetDustThreshold and CreateTransactionInternal\n+    unsigned int txOutSize = (unsigned int)GetSerializeSize(CTxOut(value, script), PROTOCOL_VERSION);\n+\n+    const size_t txOutCount = NUM_DENIABILIZATION_OUTPUTS;\n+    unsigned int txSize = 10 + GetSizeOfCompactSize(txOutCount); // bytes for output count\n+    txSize += txOutSize * txOutCount;\n+\n+    int witnessversion = 0;\n+    std::vector<unsigned char> witnessprogram;\n+    if (script.IsWitnessProgram(witnessversion, witnessprogram)) {\n+        txSize += (unsigned int)(numTxIn * 67.75f + 0.5f);\n+    } else {\n+        txSize += numTxIn * 148;\n+    }\n+    return txSize;\n+}\n+\n+float CalculateDeniabilizationProbability(unsigned int deniabilization_cycles)\n+{\n+    // 100%, 50%, 25%, 13%, 6%, 3%, 2%, 1%\n+    return powf(0.5f, deniabilization_cycles);\n+}\n+\n+bool IsDeniabilizationWorthwhile(CAmount total_value, CAmount fee_estimate)\n+{\n+    constexpr CAmount value_to_fee_ratio = 10;\n+    return total_value > fee_estimate * value_to_fee_ratio;\n+}\n+\n+CCoinControl SetupDeniabilizationCoinControl(unsigned int confirm_target)\n+{\n+    CCoinControl coin_control;\n+    coin_control.m_avoid_address_reuse = true;\n+    coin_control.m_avoid_partial_spends = true;\n+    coin_control.m_allow_other_inputs = false;\n+    coin_control.m_signal_bip125_rbf = true;\n+    coin_control.m_confirm_target = confirm_target;\n+    // we'll automatically bump the fee if economical ends up not confirming by the next deniabilization cycle\n+    coin_control.m_fee_mode = FeeEstimateMode::ECONOMICAL;\n+    return coin_control;\n+}\n+\n+CFeeRate CalculateDeniabilizationFeeRate(const CWallet& wallet, unsigned int confirm_target)\n+{\n+    CCoinControl coin_control = SetupDeniabilizationCoinControl(confirm_target);\n+\n+    CFeeRate requiredFeeRate = GetRequiredFeeRate(wallet);\n+    FeeCalculation fee_calc;\n+    CFeeRate minFeeRate = GetMinimumFeeRate(wallet, coin_control, &fee_calc);\n+    if (fee_calc.reason == FeeReason::FALLBACK || requiredFeeRate > minFeeRate)\n+        return requiredFeeRate;\n+    return minFeeRate;\n+}\n+\n+static CAmount CalculateDeniabilizationTxFee(const CScript& shared_script, CAmount total_value, unsigned int num_utxos, const CFeeRate& fee_rate)\n+{\n+    Assert(num_utxos > 0);\n+    unsigned int deniabilization_tx_size = CalculateDeniabilizationTxSize(shared_script, total_value, num_utxos);\n+    return fee_rate.GetFee(deniabilization_tx_size);\n+}\n+\n+CAmount CalculateDeniabilizationFeeEstimate(const CScript& shared_script, CAmount total_value, unsigned int num_utxos, unsigned int deniabilization_cycles, const CFeeRate& fee_rate)\n+{\n+    float deniabilizationProbability = CalculateDeniabilizationProbability(deniabilization_cycles);\n+    // convert to integer percent to truncate and check for zero probability\n+    unsigned int deniabilizationProbabilityPercent = deniabilizationProbability * 100;\n+    if (deniabilizationProbabilityPercent == 0) {\n+        return 0;\n+    }\n+\n+    // this cycle will use all the UTXOs, while following cycles will have just one UTXO\n+    CAmount deniabilizationFee = CalculateDeniabilizationTxFee(shared_script, total_value, num_utxos, fee_rate);\n+\n+    // calculate the fees from future deniabilization cycles\n+    CAmount futureDeniabilizationFee = CalculateDeniabilizationFeeEstimate(shared_script, total_value / NUM_DENIABILIZATION_OUTPUTS, 1, deniabilization_cycles + 1, fee_rate) * 2;\n+\n+    // if it's worthwhile to do future deniabilizations then add them to this cycle estimate\n+    if (IsDeniabilizationWorthwhile(total_value, deniabilizationFee + futureDeniabilizationFee)) {\n+        deniabilizationFee += futureDeniabilizationFee;\n+    }\n+    return deniabilizationFee;\n+}\n+\n+std::pair<unsigned int, bool> CalculateDeniabilizationCycles(CWallet& wallet, const COutPoint& outpoint)\n+{\n+    LOCK(wallet.cs_wallet);\n+    auto walletTx = wallet.GetWalletTx(outpoint.hash);\n+    if (!walletTx) {\n+        return std::make_pair(0, false);\n+    }\n+    auto tx = walletTx->tx;\n+\n+    if (tx->IsCoinBase()) {\n+        // this is a block reward tx, so we tag it as such\n+        return std::make_pair(0, true);\n+    }\n+\n+    // an deniabilized coin is one we sent to ourselves\n+    // all txIn should belong to our wallet\n+    if (tx->vin.empty()) {\n+        return std::make_pair(0, false);\n+    }\n+    for (const auto& txIn : tx->vin) {\n+        if (InputIsMine(wallet, txIn) == ISMINE_NO) {\n+            return std::make_pair(0, false);\n+        }\n+    }\n+\n+    // all txOut should belong to our wallet\n+    Assert(outpoint.n < tx->vout.size());\n+    unsigned int n = 0;\n+    for (const auto& txOut : tx->vout) {\n+        if (wallet.IsMine(txOut) == ISMINE_NO) {\n+            Assert(n != outpoint.n);\n+            return std::make_pair(0, false);\n+        }\n+        n++;\n+    }\n+\n+    unsigned int uniqueTxOutCount = 0;\n+    for (const auto& txOut : tx->vout) {\n+        // check if it's a valid destination\n+        CTxDestination txOutDestination;\n+        ExtractDestination(txOut.scriptPubKey, txOutDestination);\n+        if (std::get_if<CNoDestination>(&txOutDestination)) {\n+            continue;\n+        }\n+\n+        // don't count outputs that match any input addresses (eg it's change output)\n+        bool matchesInput = false;\n+        for (const auto& txIn : tx->vin) {\n+            auto prevWalletTx = wallet.GetWalletTx(txIn.prevout.hash);\n+            if (prevWalletTx && prevWalletTx->tx->vout[txIn.prevout.n].scriptPubKey == txOut.scriptPubKey) {\n+                matchesInput = true;\n+                break;\n+            }\n+        }\n+        if (matchesInput) {\n+            continue;\n+        }\n+\n+        uniqueTxOutCount++;\n+    }\n+\n+    // we consider two or more unique outputs an \"deniabilization\" of the coin\n+    unsigned int deniabilizationCycles = uniqueTxOutCount >= 2 ? 1 : 0;\n+\n+    // all txIn and txOut are from our wallet\n+    // however if we have multiple txIn this was either an initial deniabilization of multiple UTXOs or the user manually merged deniabilized UTXOs\n+    // in either case we don't need to recurse into parent transactions and we can return the calculated cycles\n+    if (tx->vin.size() > 1) {\n+        return std::make_pair(deniabilizationCycles, false);\n+    }\n+\n+    const auto& txIn = tx->vin[0];\n+    // now recursively calculate the deniabilization cycles of the input\n+    auto inputStats = CalculateDeniabilizationCycles(wallet, txIn.prevout);\n+    return std::make_pair(inputStats.first + deniabilizationCycles, inputStats.second);\n+};\n+\n+void SpoofTransactionFingerprint(CMutableTransaction& tx, FastRandomContext& rng_fast)\n+{\n+    // Transaction \"fingerprint\" spoofing\n+    struct Fingerprint {\n+        bool standardVersion = false;\n+        bool antiFeeSniping = false;\n+        bool bip69Ordering = false;\n+    };\n+\n+    // wallet fingerprints based on info from variuous sources, see:\n+    // https://github.com/achow101/wallet-fingerprinting/blob/main/fingerprints.md\n+    // https://gitlab.com/1440000bytes/goldfish\n+    // https://ishaana.com/blog/wallet_fingerprinting/\n+    static const Fingerprint s_walletFingerprints[] = {\n+        {true, true, false},   // Core\n+        {true, true, true},    // Electrum\n+        {true, false, false},  // Blue\n+        {false, false, true},  // Trezor\n+        {false, false, false}, // Trust, Ledger\n+    };\n+    constexpr size_t NUM_WALLET_FINGERPRINTS = sizeof(s_walletFingerprints) / sizeof(s_walletFingerprints[0]);\n+\n+    auto fingerprintIndex = rng_fast.randrange(NUM_WALLET_FINGERPRINTS);\n+    const Fingerprint& fingerprint = s_walletFingerprints[fingerprintIndex];\n+\n+    if (fingerprint.standardVersion) {\n+        Assert(tx.nVersion == TX_MAX_STANDARD_VERSION);\n+    } else {\n+        tx.nVersion = 1;\n+    }\n+\n+    if (fingerprint.antiFeeSniping) {\n+        // By default \"Core\" implements anti-fee-sniping (nLockTime == block_height - rng_fast.randrange(100))\n+    } else {\n+        // no anti-fee-sniping\n+        tx.nLockTime = 0;\n+    }\n+\n+    if (fingerprint.bip69Ordering) {\n+        // Sort the inputs and outputs in accordance with BIP69\n+        auto sortInputsBip69 = [](const CTxIn& a, const CTxIn& b) {\n+            // COutPoint operator< does sort in accordance with Bip69, so just use that.\n+            return a.prevout < b.prevout;\n+        };\n+        std::sort(tx.vin.begin(), tx.vin.end(), sortInputsBip69);\n+\n+        auto sortOutputsBip69 = [](const CTxOut& a, const CTxOut& b) {\n+            if (a.nValue == b.nValue) {\n+                // Note: prevector operator< does NOT properly order scriptPubKeys lexicographically. So instead we\n+                // fall-back to using std::memcmp.\n+                const auto& spkA = a.scriptPubKey;\n+                const auto& spkB = b.scriptPubKey;\n+                const int cmp = std::memcmp(spkA.data(), spkB.data(), std::min(spkA.size(), spkB.size()));\n+                return cmp < 0 || (cmp == 0 && spkA.size() < spkB.size());\n+            }\n+            return a.nValue < b.nValue;\n+        };\n+        std::sort(tx.vout.begin(), tx.vout.end(), sortOutputsBip69);\n+    } else {\n+        // By default \"Core\" doesn't perform BIP69 ordering\n+    }\n+}\n+\n+util::Result<CreatedTransactionResult> CreateDeniabilizationTransaction(CWallet& wallet, const std::set<COutPoint>& inputs, const std::optional<OutputType>& opt_output_type, unsigned int confirm_target, unsigned int deniabilization_cycles, bool sign, bool& insufficient_amount)",
      "path": "src/wallet/spend.cpp",
      "position": 251,
      "original_position": 232,
      "commit_id": "8f72d4abe3ab4e4cbbe909694a1fd9d0a8f4a3bf",
      "original_commit_id": "16d50b3699232bfe48b21057e6175ab12417ebe3",
      "in_reply_to_id": 1373616084,
      "user": {
        "login": "denavila",
        "id": 123340139,
        "node_id": "U_kgDOB1oFaw",
        "avatar_url": "https://avatars.githubusercontent.com/u/123340139?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/denavila",
        "html_url": "https://github.com/denavila",
        "followers_url": "https://api.github.com/users/denavila/followers",
        "following_url": "https://api.github.com/users/denavila/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/denavila/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/denavila/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/denavila/subscriptions",
        "organizations_url": "https://api.github.com/users/denavila/orgs",
        "repos_url": "https://api.github.com/users/denavila/repos",
        "events_url": "https://api.github.com/users/denavila/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/denavila/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "The \"inputs\", \"out_output_type\" and \"confirm_target\" are usually passed in as part of CCoinControl. \r\nHowever for deniabilization we create a specifically built CCoinControl, so I didn't want the API user to have to fill one out, just to have the majority of the fields essentially ignored, so that's why I decided to list these individually.\r\nI could make a new class to pass them together though, eg CDeniabilizationControl? \r\nDoes that sound reasonable? ",
      "created_at": "2023-10-28T20:32:22Z",
      "updated_at": "2023-10-28T20:32:22Z",
      "html_url": "https://github.com/bitcoin-core/gui/pull/733#discussion_r1375318725",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/gui/pulls/comments/1375318725"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/gui/pulls/733"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1670,
      "original_line": 1670,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/gui/pulls/comments/1375320278",
      "pull_request_review_id": 1702851558,
      "id": 1375320278,
      "node_id": "PRRC_kwDOEEET9c5R-bjW",
      "diff_hunk": "@@ -388,5 +388,102 @@ Result CommitTransaction(CWallet& wallet, const uint256& txid, CMutableTransacti\n     return Result::OK;\n }\n \n+Result CreateRateBumpDeniabilizationTransaction(CWallet& wallet, const uint256& txid, unsigned int confirm_target, bool sign, bilingual_str& error, CAmount& old_fee, CAmount& new_fee, CTransactionRef& new_tx)",
      "path": "src/wallet/feebumper.cpp",
      "position": 4,
      "original_position": 4,
      "commit_id": "8f72d4abe3ab4e4cbbe909694a1fd9d0a8f4a3bf",
      "original_commit_id": "16d50b3699232bfe48b21057e6175ab12417ebe3",
      "in_reply_to_id": 1373610526,
      "user": {
        "login": "denavila",
        "id": 123340139,
        "node_id": "U_kgDOB1oFaw",
        "avatar_url": "https://avatars.githubusercontent.com/u/123340139?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/denavila",
        "html_url": "https://github.com/denavila",
        "followers_url": "https://api.github.com/users/denavila/followers",
        "following_url": "https://api.github.com/users/denavila/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/denavila/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/denavila/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/denavila/subscriptions",
        "organizations_url": "https://api.github.com/users/denavila/orgs",
        "repos_url": "https://api.github.com/users/denavila/repos",
        "events_url": "https://api.github.com/users/denavila/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/denavila/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "CreateRateBumpDeniabilizationTransaction essentially does the job of CreateRateBumpTransaction and SignTransaction, but specialized for bumping deniabilization transactions. \r\nThis functionality is responsible for the presence of the \"txid\", \"old_fee\", \"new_fee\" and \"sign\" parameters.\r\n\"confirm_target\" takes the place of the \"coin_control\" parameter (since that's all we need), and the \"error\" and \"new_tx\" are needed to communicate the result/error with the caller.\r\nThe reason we need a new API function here is that we need to take the new bump fee from one of the recipients of the old transaction (fSubtractFeeFromAmount), and there didn't seem to be a way to do that via CreateRateBumpTransaction. And generally CreateRateBumpTransaction just does too many other things that we don't need once we know we're bumping a deniabilization transaction.",
      "created_at": "2023-10-28T20:49:43Z",
      "updated_at": "2023-10-28T20:49:43Z",
      "html_url": "https://github.com/bitcoin-core/gui/pull/733#discussion_r1375320278",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/gui/pulls/comments/1375320278"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/gui/pulls/733"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 389,
      "original_line": 389,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/gui/pulls/comments/1375320537",
      "pull_request_review_id": 1702851772,
      "id": 1375320537,
      "node_id": "PRRC_kwDOEEET9c5R-bnZ",
      "diff_hunk": "@@ -391,6 +418,140 @@ void TestGUI(interfaces::Node& node, const std::shared_ptr<CWallet>& wallet)\n \n     // Check removal from wallet\n     QCOMPARE(walletModel.wallet().getAddressReceiveRequests().size(), size_t{0});\n+\n+    // Test the Deniability Dialog\n+\n+    // Validate the main UI elements\n+    QPushButton* startButton = deniabilityDialog.findChild<QPushButton*>(\"startButton\");\n+    QVERIFY(startButton);\n+    QPushButton* stopButton = deniabilityDialog.findChild<QPushButton*>(\"stopButton\");\n+    QVERIFY(stopButton);\n+\n+    QRadioButton* hourlyRadioButton = deniabilityDialog.findChild<QRadioButton*>(\"hourlyRadioButton\");\n+    QVERIFY(hourlyRadioButton);\n+    QRadioButton* dailyRadioButton = deniabilityDialog.findChild<QRadioButton*>(\"dailyRadioButton\");\n+    QVERIFY(dailyRadioButton);\n+    QRadioButton* weeklyRadioButton = deniabilityDialog.findChild<QRadioButton*>(\"weeklyRadioButton\");\n+    QVERIFY(weeklyRadioButton);\n+\n+    BitcoinAmountField* budgetSpinner = deniabilityDialog.findChild<BitcoinAmountField*>(\"budgetSpinner\");\n+    QVERIFY(budgetSpinner);\n+\n+    QTableWidget* tableWidgetCoins = deniabilityDialog.findChild<QTableWidget*>(\"tableWidgetCoins\");\n+    QVERIFY(tableWidgetCoins);\n+\n+    QLabel* statusLabel = deniabilityDialog.findChild<QLabel*>(\"statusLabel\");\n+    QVERIFY(statusLabel);\n+\n+    // Check the initial state\n+    QVERIFY(!startButton->isEnabled());\n+    QVERIFY(!stopButton->isEnabled());\n+    QVERIFY(hourlyRadioButton->isEnabled());\n+    QVERIFY(dailyRadioButton->isEnabled());\n+    QVERIFY(weeklyRadioButton->isEnabled());\n+    // FIXME: AmountSpinBox doesn't correctly intercept isEnabled()\n+    // QVERIFY(budgetSpinner->isEnabled());\n+\n+    QVERIFY(!hourlyRadioButton->isChecked());\n+    QVERIFY(dailyRadioButton->isChecked());\n+    QVERIFY(!weeklyRadioButton->isChecked());\n+    QVERIFY(budgetSpinner->value() == 0);\n+\n+    // update coins to the latest wallet state\n+    deniabilityDialog.updateCoins();\n+\n+    // Validate the wallet supports deniabilization\n+    QVERIFY(deniabilityDialog.walletSupportsDeniabilization());\n+    // Validate a deniabilization candidate was found\n+    QVERIFY(deniabilityDialog.hasDeniabilizationCandidates());\n+\n+    // Validate one coin has been populated in the candidate table\n+    QVERIFY(tableWidgetCoins->rowCount() == 1);\n+    QTableWidgetItem* itemCheck = tableWidgetCoins->item(0, 0);\n+    QVERIFY(itemCheck);\n+    // We expect the candidate to be uncheck (since it's from a block reward)\n+    QVERIFY(itemCheck->checkState() == Qt::Unchecked);\n+    itemCheck->setCheckState(Qt::CheckState::Checked);\n+    Q_EMIT tableWidgetCoins->itemClicked(itemCheck);\n+\n+    // Test the budget spinner enabling the start button\n+    const CAmount budget = 10000;\n+    budgetSpinner->setValue(budget);\n+    QVERIFY(startButton->isEnabled());\n+\n+    // Test starting the deniabilization process\n+    CAmount balance = walletModel.wallet().getBalance();\n+    const uint expectedTxSize = 304; // 2 utxo inputs, 2 txout (LEGACY output type)\n+    CAmount expectedTxFee = walletModel.wallet().getRequiredFee(expectedTxSize);\n+\n+    // We expect to get a confirmation message box and we want to OK it\n+    bool clickedOk = false;\n+    ConfirmMessageBox(&clickedOk, QMessageBox::Ok);\n+    startButton->click();\n+    qApp->processEvents();\n+    // Verify we did get the confirmation message box\n+    QVERIFY(clickedOk);\n+\n+    // Verify only the stop button is enabled\n+    QVERIFY(stopButton->isEnabled());\n+    QVERIFY(!startButton->isEnabled());\n+    QVERIFY(!hourlyRadioButton->isEnabled());\n+    QVERIFY(!dailyRadioButton->isEnabled());\n+    QVERIFY(!weeklyRadioButton->isEnabled());\n+    // FIXME: AmountSpinBox doesn't correctly intercept isEnabled()()\n+    // QVERIFY(!budgetSpinner->isEnabled());\n+\n+    // Verify a deniabilization transaction was processed and the before and after balances match (minus the tx fee)\n+    CAmount balanceAfterTx = walletModel.wallet().getBalance();\n+    QCOMPARE(balance, balanceAfterTx + expectedTxFee);\n+\n+    // Verify the budget was updated correctly\n+    QCOMPARE(budgetSpinner->value(), budget - expectedTxFee);\n+\n+    // Verify status shows we're waiting for the tx to be confirmed\n+    std::string statusTextAfterTx = statusLabel->text().toStdString();\n+    QCOMPARE(statusTextAfterTx, std::string(\"Waiting for the deniabilization transaction to be confirmed...\"));\n+\n+    // Stop the deniabilization processing\n+    stopButton->click();\n+    qApp->processEvents();\n+\n+    // Verify stop is disabled and everything else is re-enabled\n+    QVERIFY(!stopButton->isEnabled());\n+    QVERIFY(startButton->isEnabled());\n+    QVERIFY(hourlyRadioButton->isEnabled());\n+    QVERIFY(dailyRadioButton->isEnabled());\n+    QVERIFY(weeklyRadioButton->isEnabled());\n+    // FIXME: AmountSpinBox doesn't correctly intercept isEnabled()()\n+    // QVERIFY(budgetSpinner->isEnabled());\n+\n+    // Bump the min fee to test fee bumping\n+    wallet->m_min_fee = CFeeRate(10000);\n+    CAmount expectedBumpedTxFee = walletModel.wallet().getRequiredFee(expectedTxSize);\n+\n+    // Restart the deniabilizaiton process\n+    startButton->click();\n+    qApp->processEvents();\n+\n+    CAmount balanceAfterFeeBumpTx = walletModel.wallet().getBalance();\n+    QCOMPARE(balance, balanceAfterFeeBumpTx + expectedBumpedTxFee);\n+\n+    // Verify the budget was updated correctly\n+    QCOMPARE(budgetSpinner->value(), budget - expectedBumpedTxFee);\n+\n+    // mine a block to confirm the transaction\n+    MineBlock(test.m_node, GetScriptForRawPubKey(test.coinbaseKey.GetPubKey()));\n+    {\n+        LOCK(wallet->cs_wallet);\n+        wallet->SetLastBlockProcessed(106, WITH_LOCK(node.context()->chainman->GetMutex(), return node.context()->chainman->ActiveChain().Tip()->GetBlockHash()));",
      "path": "src/qt/test/wallettests.cpp",
      "position": 240,
      "original_position": 240,
      "commit_id": "8f72d4abe3ab4e4cbbe909694a1fd9d0a8f4a3bf",
      "original_commit_id": "16d50b3699232bfe48b21057e6175ab12417ebe3",
      "in_reply_to_id": 1373600315,
      "user": {
        "login": "denavila",
        "id": 123340139,
        "node_id": "U_kgDOB1oFaw",
        "avatar_url": "https://avatars.githubusercontent.com/u/123340139?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/denavila",
        "html_url": "https://github.com/denavila",
        "followers_url": "https://api.github.com/users/denavila/followers",
        "following_url": "https://api.github.com/users/denavila/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/denavila/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/denavila/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/denavila/subscriptions",
        "organizations_url": "https://api.github.com/users/denavila/orgs",
        "repos_url": "https://api.github.com/users/denavila/repos",
        "events_url": "https://api.github.com/users/denavila/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/denavila/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "There was a bug introduced in the fee bumping after the last rebase. Interestingly it didn't get flagged by the compiler ... even though it was an obviously wrong type being assigned to CRecipient struct ... :-O \r\nAt any rate, I fixed it in the latest commit. Please let me know if you're still seeing an issue running the tests.\r\nThanks! ",
      "created_at": "2023-10-28T20:52:56Z",
      "updated_at": "2023-10-28T20:52:56Z",
      "html_url": "https://github.com/bitcoin-core/gui/pull/733#discussion_r1375320537",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/gui/pulls/comments/1375320537"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/gui/pulls/733"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 546,
      "original_line": 546,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/gui/pulls/comments/1375321647",
      "pull_request_review_id": 1702852547,
      "id": 1375321647,
      "node_id": "PRRC_kwDOEEET9c5R-b4v",
      "diff_hunk": "@@ -1392,4 +1392,381 @@ bool FundTransaction(CWallet& wallet, CMutableTransaction& tx, CAmount& nFeeRet,\n \n     return true;\n }\n+\n+constexpr int NUM_DENIABILIZATION_OUTPUTS = 2;\n+\n+static unsigned int CalculateDeniabilizationTxSize(const CScript& script, CAmount value, unsigned int numTxIn)\n+{\n+    // Calculation based on the comments and code in GetDustThreshold and CreateTransactionInternal\n+    unsigned int txOutSize = (unsigned int)GetSerializeSize(CTxOut(value, script), PROTOCOL_VERSION);\n+\n+    const size_t txOutCount = NUM_DENIABILIZATION_OUTPUTS;\n+    unsigned int txSize = 10 + GetSizeOfCompactSize(txOutCount); // bytes for output count\n+    txSize += txOutSize * txOutCount;\n+\n+    int witnessversion = 0;\n+    std::vector<unsigned char> witnessprogram;\n+    if (script.IsWitnessProgram(witnessversion, witnessprogram)) {\n+        txSize += (unsigned int)(numTxIn * 67.75f + 0.5f);\n+    } else {\n+        txSize += numTxIn * 148;\n+    }\n+    return txSize;\n+}\n+\n+float CalculateDeniabilizationProbability(unsigned int deniabilization_cycles)\n+{\n+    // 100%, 50%, 25%, 13%, 6%, 3%, 2%, 1%\n+    return powf(0.5f, deniabilization_cycles);\n+}\n+\n+bool IsDeniabilizationWorthwhile(CAmount total_value, CAmount fee_estimate)\n+{\n+    constexpr CAmount value_to_fee_ratio = 10;\n+    return total_value > fee_estimate * value_to_fee_ratio;\n+}\n+\n+CCoinControl SetupDeniabilizationCoinControl(unsigned int confirm_target)\n+{\n+    CCoinControl coin_control;\n+    coin_control.m_avoid_address_reuse = true;\n+    coin_control.m_avoid_partial_spends = true;\n+    coin_control.m_allow_other_inputs = false;\n+    coin_control.m_signal_bip125_rbf = true;\n+    coin_control.m_confirm_target = confirm_target;\n+    // we'll automatically bump the fee if economical ends up not confirming by the next deniabilization cycle\n+    coin_control.m_fee_mode = FeeEstimateMode::ECONOMICAL;\n+    return coin_control;\n+}\n+\n+CFeeRate CalculateDeniabilizationFeeRate(const CWallet& wallet, unsigned int confirm_target)\n+{\n+    CCoinControl coin_control = SetupDeniabilizationCoinControl(confirm_target);\n+\n+    CFeeRate requiredFeeRate = GetRequiredFeeRate(wallet);\n+    FeeCalculation fee_calc;\n+    CFeeRate minFeeRate = GetMinimumFeeRate(wallet, coin_control, &fee_calc);\n+    if (fee_calc.reason == FeeReason::FALLBACK || requiredFeeRate > minFeeRate)\n+        return requiredFeeRate;\n+    return minFeeRate;\n+}\n+\n+static CAmount CalculateDeniabilizationTxFee(const CScript& shared_script, CAmount total_value, unsigned int num_utxos, const CFeeRate& fee_rate)\n+{\n+    Assert(num_utxos > 0);\n+    unsigned int deniabilization_tx_size = CalculateDeniabilizationTxSize(shared_script, total_value, num_utxos);\n+    return fee_rate.GetFee(deniabilization_tx_size);\n+}\n+\n+CAmount CalculateDeniabilizationFeeEstimate(const CScript& shared_script, CAmount total_value, unsigned int num_utxos, unsigned int deniabilization_cycles, const CFeeRate& fee_rate)\n+{\n+    float deniabilizationProbability = CalculateDeniabilizationProbability(deniabilization_cycles);\n+    // convert to integer percent to truncate and check for zero probability\n+    unsigned int deniabilizationProbabilityPercent = deniabilizationProbability * 100;\n+    if (deniabilizationProbabilityPercent == 0) {\n+        return 0;\n+    }\n+\n+    // this cycle will use all the UTXOs, while following cycles will have just one UTXO\n+    CAmount deniabilizationFee = CalculateDeniabilizationTxFee(shared_script, total_value, num_utxos, fee_rate);\n+\n+    // calculate the fees from future deniabilization cycles\n+    CAmount futureDeniabilizationFee = CalculateDeniabilizationFeeEstimate(shared_script, total_value / NUM_DENIABILIZATION_OUTPUTS, 1, deniabilization_cycles + 1, fee_rate) * 2;\n+\n+    // if it's worthwhile to do future deniabilizations then add them to this cycle estimate\n+    if (IsDeniabilizationWorthwhile(total_value, deniabilizationFee + futureDeniabilizationFee)) {\n+        deniabilizationFee += futureDeniabilizationFee;\n+    }\n+    return deniabilizationFee;\n+}\n+\n+std::pair<unsigned int, bool> CalculateDeniabilizationCycles(CWallet& wallet, const COutPoint& outpoint)\n+{\n+    LOCK(wallet.cs_wallet);\n+    auto walletTx = wallet.GetWalletTx(outpoint.hash);\n+    if (!walletTx) {\n+        return std::make_pair(0, false);\n+    }\n+    auto tx = walletTx->tx;\n+\n+    if (tx->IsCoinBase()) {\n+        // this is a block reward tx, so we tag it as such\n+        return std::make_pair(0, true);\n+    }\n+\n+    // an deniabilized coin is one we sent to ourselves\n+    // all txIn should belong to our wallet\n+    if (tx->vin.empty()) {\n+        return std::make_pair(0, false);\n+    }\n+    for (const auto& txIn : tx->vin) {\n+        if (InputIsMine(wallet, txIn) == ISMINE_NO) {\n+            return std::make_pair(0, false);\n+        }\n+    }\n+\n+    // all txOut should belong to our wallet\n+    Assert(outpoint.n < tx->vout.size());\n+    unsigned int n = 0;\n+    for (const auto& txOut : tx->vout) {\n+        if (wallet.IsMine(txOut) == ISMINE_NO) {\n+            Assert(n != outpoint.n);\n+            return std::make_pair(0, false);\n+        }\n+        n++;\n+    }\n+\n+    unsigned int uniqueTxOutCount = 0;\n+    for (const auto& txOut : tx->vout) {\n+        // check if it's a valid destination\n+        CTxDestination txOutDestination;\n+        ExtractDestination(txOut.scriptPubKey, txOutDestination);\n+        if (std::get_if<CNoDestination>(&txOutDestination)) {\n+            continue;\n+        }\n+\n+        // don't count outputs that match any input addresses (eg it's change output)\n+        bool matchesInput = false;\n+        for (const auto& txIn : tx->vin) {\n+            auto prevWalletTx = wallet.GetWalletTx(txIn.prevout.hash);\n+            if (prevWalletTx && prevWalletTx->tx->vout[txIn.prevout.n].scriptPubKey == txOut.scriptPubKey) {\n+                matchesInput = true;\n+                break;\n+            }\n+        }\n+        if (matchesInput) {\n+            continue;\n+        }\n+\n+        uniqueTxOutCount++;\n+    }\n+\n+    // we consider two or more unique outputs an \"deniabilization\" of the coin\n+    unsigned int deniabilizationCycles = uniqueTxOutCount >= 2 ? 1 : 0;\n+\n+    // all txIn and txOut are from our wallet\n+    // however if we have multiple txIn this was either an initial deniabilization of multiple UTXOs or the user manually merged deniabilized UTXOs\n+    // in either case we don't need to recurse into parent transactions and we can return the calculated cycles\n+    if (tx->vin.size() > 1) {\n+        return std::make_pair(deniabilizationCycles, false);\n+    }\n+\n+    const auto& txIn = tx->vin[0];\n+    // now recursively calculate the deniabilization cycles of the input\n+    auto inputStats = CalculateDeniabilizationCycles(wallet, txIn.prevout);\n+    return std::make_pair(inputStats.first + deniabilizationCycles, inputStats.second);\n+};\n+\n+void SpoofTransactionFingerprint(CMutableTransaction& tx, FastRandomContext& rng_fast)\n+{\n+    // Transaction \"fingerprint\" spoofing\n+    struct Fingerprint {\n+        bool standardVersion = false;\n+        bool antiFeeSniping = false;\n+        bool bip69Ordering = false;\n+    };\n+\n+    // wallet fingerprints based on info from variuous sources, see:\n+    // https://github.com/achow101/wallet-fingerprinting/blob/main/fingerprints.md\n+    // https://gitlab.com/1440000bytes/goldfish\n+    // https://ishaana.com/blog/wallet_fingerprinting/\n+    static const Fingerprint s_walletFingerprints[] = {\n+        {true, true, false},   // Core\n+        {true, true, true},    // Electrum\n+        {true, false, false},  // Blue\n+        {false, false, true},  // Trezor\n+        {false, false, false}, // Trust, Ledger\n+    };\n+    constexpr size_t NUM_WALLET_FINGERPRINTS = sizeof(s_walletFingerprints) / sizeof(s_walletFingerprints[0]);\n+\n+    auto fingerprintIndex = rng_fast.randrange(NUM_WALLET_FINGERPRINTS);\n+    const Fingerprint& fingerprint = s_walletFingerprints[fingerprintIndex];\n+\n+    if (fingerprint.standardVersion) {\n+        Assert(tx.nVersion == TX_MAX_STANDARD_VERSION);\n+    } else {\n+        tx.nVersion = 1;\n+    }\n+\n+    if (fingerprint.antiFeeSniping) {\n+        // By default \"Core\" implements anti-fee-sniping (nLockTime == block_height - rng_fast.randrange(100))\n+    } else {\n+        // no anti-fee-sniping\n+        tx.nLockTime = 0;\n+    }\n+\n+    if (fingerprint.bip69Ordering) {\n+        // Sort the inputs and outputs in accordance with BIP69\n+        auto sortInputsBip69 = [](const CTxIn& a, const CTxIn& b) {\n+            // COutPoint operator< does sort in accordance with Bip69, so just use that.\n+            return a.prevout < b.prevout;\n+        };\n+        std::sort(tx.vin.begin(), tx.vin.end(), sortInputsBip69);\n+\n+        auto sortOutputsBip69 = [](const CTxOut& a, const CTxOut& b) {\n+            if (a.nValue == b.nValue) {\n+                // Note: prevector operator< does NOT properly order scriptPubKeys lexicographically. So instead we\n+                // fall-back to using std::memcmp.\n+                const auto& spkA = a.scriptPubKey;\n+                const auto& spkB = b.scriptPubKey;\n+                const int cmp = std::memcmp(spkA.data(), spkB.data(), std::min(spkA.size(), spkB.size()));\n+                return cmp < 0 || (cmp == 0 && spkA.size() < spkB.size());\n+            }\n+            return a.nValue < b.nValue;\n+        };\n+        std::sort(tx.vout.begin(), tx.vout.end(), sortOutputsBip69);\n+    } else {\n+        // By default \"Core\" doesn't perform BIP69 ordering\n+    }\n+}\n+\n+util::Result<CreatedTransactionResult> CreateDeniabilizationTransaction(CWallet& wallet, const std::set<COutPoint>& inputs, const std::optional<OutputType>& opt_output_type, unsigned int confirm_target, unsigned int deniabilization_cycles, bool sign, bool& insufficient_amount)\n+{\n+    if (inputs.empty()) {\n+        return util::Error{_(\"Inputs must not be empty\")};\n+    }\n+\n+    CCoinControl coin_control = SetupDeniabilizationCoinControl(confirm_target);\n+    // TODO: Do we need to limit number of inputs to OUTPUT_GROUP_MAX_ENTRIES\n+    for (const auto& input : inputs) {\n+        coin_control.Select(input);\n+    }\n+    Assert(coin_control.HasSelected());\n+    CFeeRate deniabilization_fee_rate = CalculateDeniabilizationFeeRate(wallet, confirm_target);\n+    coin_control.m_feerate = deniabilization_fee_rate;\n+\n+    LOCK(wallet.cs_wallet);\n+\n+    FastRandomContext rng_fast;\n+    CoinSelectionParams coin_selection_params{rng_fast};\n+    coin_selection_params.m_avoid_partial_spends = coin_control.m_avoid_partial_spends;\n+    coin_selection_params.m_include_unsafe_inputs = coin_control.m_include_unsafe_inputs;\n+    coin_selection_params.m_effective_feerate = deniabilization_fee_rate;\n+    coin_selection_params.m_long_term_feerate = wallet.m_consolidate_feerate;\n+    coin_selection_params.m_subtract_fee_outputs = true;\n+\n+    auto res_fetch_inputs = FetchSelectedInputs(wallet, coin_control, coin_selection_params);\n+    if (!res_fetch_inputs) {\n+        return util::Error{util::ErrorString(res_fetch_inputs)};\n+    }\n+    PreSelectedInputs preset_inputs = *res_fetch_inputs;\n+    CAmount total_amount = preset_inputs.total_amount;\n+\n+    // validate that all UTXOs share the same address\n+    std::optional<CScript> op_shared_script;\n+    for (const auto& coin : preset_inputs.coins) {\n+        if (!op_shared_script) {\n+            op_shared_script = coin->txout.scriptPubKey;\n+        }\n+        if (!op_shared_script || !(*op_shared_script == coin->txout.scriptPubKey)) {\n+            return util::Error{_(\"Input addresses must all match.\")};\n+        }\n+    }\n+    Assert(op_shared_script);\n+    CScript shared_script = *op_shared_script;\n+\n+    CFeeRate discard_feerate = GetDiscardRate(wallet);\n+    CAmount dust_threshold = GetDustThreshold(CTxOut(total_amount, shared_script), discard_feerate);\n+\n+    // deniabilize the UTXOs by splitting the value randomly\n+    // find a split that leaves enough amount post split to finish the deniabilization process in each new UTXO\n+    CAmount min_post_split_amount = CalculateDeniabilizationFeeEstimate(shared_script, total_amount / NUM_DENIABILIZATION_OUTPUTS, 1, deniabilization_cycles + 1, deniabilization_fee_rate) + dust_threshold;\n+    CAmount estimated_tx_fee = CalculateDeniabilizationTxFee(shared_script, total_amount, preset_inputs.coins.size(), deniabilization_fee_rate);\n+\n+    CAmount total_random_range = total_amount - min_post_split_amount * NUM_DENIABILIZATION_OUTPUTS - estimated_tx_fee;\n+    if (total_random_range < 0) {\n+        insufficient_amount = true;\n+        return util::Error{strprintf(_(\"Insufficient amount (%d) for a deniabilization transaction, min amount (%d), tx fee (%d).\"), total_amount, min_post_split_amount, estimated_tx_fee)};\n+    }\n+\n+    OutputType output_type = wallet.m_default_address_type;\n+    if (opt_output_type) {\n+        output_type = *opt_output_type;\n+    } else {\n+        // if no output type was specified, try to infer it from the source inputs\n+        CTxDestination shared_destination = CNoDestination();\n+        if (ExtractDestination(shared_script, shared_destination)) {\n+            std::optional<OutputType> opt_shared_output_type = OutputTypeFromDestination(shared_destination);\n+            if (opt_shared_output_type) {\n+                output_type = *opt_shared_output_type;\n+            }\n+        }\n+    }\n+\n+    const int num_recipients = NUM_DENIABILIZATION_OUTPUTS;\n+    std::vector<CRecipient> recipients(num_recipients);\n+    std::list<ReserveDestination> reservedests;\n+    constexpr bool reservdest_internal = false; // TODO: Should this be \"true\" or \"false\". What does \"internal\" mean?\n+    for (int recipient_index = 0; recipient_index < num_recipients; recipient_index++) {\n+        bool lastRecipient = recipient_index == (num_recipients - 1);\n+        if (!lastRecipient) {\n+            // all recipients except for the last one,\n+            // calculate a random range based on the remaining total random range and the number of remaining recipients\n+            // then generate a random amount within that range\n+            CAmount random_range = total_random_range / (num_recipients - recipient_index - 1);\n+            CAmount random_amount = 0;\n+            if (random_range > 0) {\n+                random_amount = GetRand<CAmount>(random_range);\n+                Assert(total_random_range >= random_amount);\n+                total_random_range -= random_amount;\n+            }\n+            recipients[recipient_index].nAmount = min_post_split_amount + random_amount;\n+        } else {\n+            // the last recipient takes any leftover random amount and the estimated fee\n+            recipients[recipient_index].nAmount = min_post_split_amount + total_random_range + estimated_tx_fee;\n+        }\n+\n+        // the last recipient pays the tx fees\n+        recipients[recipient_index].fSubtractFeeFromAmount = lastRecipient;\n+\n+        auto& reservedest = reservedests.emplace_back(&wallet, output_type);\n+        CTxDestination dest;\n+        auto op_dest = reservedest.GetReservedDestination(reservdest_internal);\n+        if (!op_dest) {\n+            return util::Error{_(\"Failed to reserve a new address.\") + Untranslated(\" \") + util::ErrorString(op_dest)};\n+        }\n+        dest = *op_dest;\n+        recipients[recipient_index].dest = dest;\n+        if (lastRecipient) {\n+            // we don't expect to get change, but we provide the address to prevent CreateTransactionInternal from generating a change address\n+            coin_control.destChange = dest;\n+        }\n+    }\n+\n+    CAmount recipient_amount = std::accumulate(recipients.cbegin(), recipients.cend(), CAmount{0}, [](CAmount sum, const CRecipient& recipient) { return sum + recipient.nAmount; });",
      "path": "src/wallet/spend.cpp",
      "position": null,
      "original_position": 345,
      "commit_id": "8f72d4abe3ab4e4cbbe909694a1fd9d0a8f4a3bf",
      "original_commit_id": "16d50b3699232bfe48b21057e6175ab12417ebe3",
      "in_reply_to_id": 1373617709,
      "user": {
        "login": "denavila",
        "id": 123340139,
        "node_id": "U_kgDOB1oFaw",
        "avatar_url": "https://avatars.githubusercontent.com/u/123340139?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/denavila",
        "html_url": "https://github.com/denavila",
        "followers_url": "https://api.github.com/users/denavila/followers",
        "following_url": "https://api.github.com/users/denavila/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/denavila/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/denavila/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/denavila/subscriptions",
        "organizations_url": "https://api.github.com/users/denavila/orgs",
        "repos_url": "https://api.github.com/users/denavila/repos",
        "events_url": "https://api.github.com/users/denavila/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/denavila/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Yes, indeed. I split the code into several lines in the latest commit.\r\nThanks!",
      "created_at": "2023-10-28T21:03:19Z",
      "updated_at": "2023-10-28T21:03:19Z",
      "html_url": "https://github.com/bitcoin-core/gui/pull/733#discussion_r1375321647",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/gui/pulls/comments/1375321647"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/gui/pulls/733"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1736,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/gui/pulls/comments/1375449856",
      "pull_request_review_id": 1702973150,
      "id": 1375449856,
      "node_id": "PRRC_kwDOEEET9c5R-7MA",
      "diff_hunk": "@@ -1392,4 +1392,381 @@ bool FundTransaction(CWallet& wallet, CMutableTransaction& tx, CAmount& nFeeRet,\n \n     return true;\n }\n+\n+constexpr int NUM_DENIABILIZATION_OUTPUTS = 2;\n+\n+static unsigned int CalculateDeniabilizationTxSize(const CScript& script, CAmount value, unsigned int numTxIn)\n+{\n+    // Calculation based on the comments and code in GetDustThreshold and CreateTransactionInternal\n+    unsigned int txOutSize = (unsigned int)GetSerializeSize(CTxOut(value, script), PROTOCOL_VERSION);\n+\n+    const size_t txOutCount = NUM_DENIABILIZATION_OUTPUTS;\n+    unsigned int txSize = 10 + GetSizeOfCompactSize(txOutCount); // bytes for output count\n+    txSize += txOutSize * txOutCount;\n+\n+    int witnessversion = 0;\n+    std::vector<unsigned char> witnessprogram;\n+    if (script.IsWitnessProgram(witnessversion, witnessprogram)) {\n+        txSize += (unsigned int)(numTxIn * 67.75f + 0.5f);\n+    } else {\n+        txSize += numTxIn * 148;\n+    }\n+    return txSize;\n+}\n+\n+float CalculateDeniabilizationProbability(unsigned int deniabilization_cycles)\n+{\n+    // 100%, 50%, 25%, 13%, 6%, 3%, 2%, 1%\n+    return powf(0.5f, deniabilization_cycles);\n+}\n+\n+bool IsDeniabilizationWorthwhile(CAmount total_value, CAmount fee_estimate)\n+{\n+    constexpr CAmount value_to_fee_ratio = 10;\n+    return total_value > fee_estimate * value_to_fee_ratio;\n+}\n+\n+CCoinControl SetupDeniabilizationCoinControl(unsigned int confirm_target)\n+{\n+    CCoinControl coin_control;\n+    coin_control.m_avoid_address_reuse = true;\n+    coin_control.m_avoid_partial_spends = true;\n+    coin_control.m_allow_other_inputs = false;\n+    coin_control.m_signal_bip125_rbf = true;\n+    coin_control.m_confirm_target = confirm_target;\n+    // we'll automatically bump the fee if economical ends up not confirming by the next deniabilization cycle\n+    coin_control.m_fee_mode = FeeEstimateMode::ECONOMICAL;\n+    return coin_control;\n+}\n+\n+CFeeRate CalculateDeniabilizationFeeRate(const CWallet& wallet, unsigned int confirm_target)\n+{\n+    CCoinControl coin_control = SetupDeniabilizationCoinControl(confirm_target);\n+\n+    CFeeRate requiredFeeRate = GetRequiredFeeRate(wallet);\n+    FeeCalculation fee_calc;\n+    CFeeRate minFeeRate = GetMinimumFeeRate(wallet, coin_control, &fee_calc);\n+    if (fee_calc.reason == FeeReason::FALLBACK || requiredFeeRate > minFeeRate)\n+        return requiredFeeRate;\n+    return minFeeRate;\n+}\n+\n+static CAmount CalculateDeniabilizationTxFee(const CScript& shared_script, CAmount total_value, unsigned int num_utxos, const CFeeRate& fee_rate)\n+{\n+    Assert(num_utxos > 0);\n+    unsigned int deniabilization_tx_size = CalculateDeniabilizationTxSize(shared_script, total_value, num_utxos);\n+    return fee_rate.GetFee(deniabilization_tx_size);\n+}\n+\n+CAmount CalculateDeniabilizationFeeEstimate(const CScript& shared_script, CAmount total_value, unsigned int num_utxos, unsigned int deniabilization_cycles, const CFeeRate& fee_rate)\n+{\n+    float deniabilizationProbability = CalculateDeniabilizationProbability(deniabilization_cycles);\n+    // convert to integer percent to truncate and check for zero probability\n+    unsigned int deniabilizationProbabilityPercent = deniabilizationProbability * 100;\n+    if (deniabilizationProbabilityPercent == 0) {\n+        return 0;\n+    }\n+\n+    // this cycle will use all the UTXOs, while following cycles will have just one UTXO\n+    CAmount deniabilizationFee = CalculateDeniabilizationTxFee(shared_script, total_value, num_utxos, fee_rate);\n+\n+    // calculate the fees from future deniabilization cycles\n+    CAmount futureDeniabilizationFee = CalculateDeniabilizationFeeEstimate(shared_script, total_value / NUM_DENIABILIZATION_OUTPUTS, 1, deniabilization_cycles + 1, fee_rate) * 2;\n+\n+    // if it's worthwhile to do future deniabilizations then add them to this cycle estimate\n+    if (IsDeniabilizationWorthwhile(total_value, deniabilizationFee + futureDeniabilizationFee)) {\n+        deniabilizationFee += futureDeniabilizationFee;\n+    }\n+    return deniabilizationFee;\n+}\n+\n+std::pair<unsigned int, bool> CalculateDeniabilizationCycles(CWallet& wallet, const COutPoint& outpoint)\n+{\n+    LOCK(wallet.cs_wallet);\n+    auto walletTx = wallet.GetWalletTx(outpoint.hash);\n+    if (!walletTx) {\n+        return std::make_pair(0, false);\n+    }\n+    auto tx = walletTx->tx;\n+\n+    if (tx->IsCoinBase()) {\n+        // this is a block reward tx, so we tag it as such\n+        return std::make_pair(0, true);\n+    }\n+\n+    // an deniabilized coin is one we sent to ourselves\n+    // all txIn should belong to our wallet\n+    if (tx->vin.empty()) {\n+        return std::make_pair(0, false);\n+    }\n+    for (const auto& txIn : tx->vin) {\n+        if (InputIsMine(wallet, txIn) == ISMINE_NO) {\n+            return std::make_pair(0, false);\n+        }\n+    }\n+\n+    // all txOut should belong to our wallet\n+    Assert(outpoint.n < tx->vout.size());\n+    unsigned int n = 0;\n+    for (const auto& txOut : tx->vout) {\n+        if (wallet.IsMine(txOut) == ISMINE_NO) {\n+            Assert(n != outpoint.n);\n+            return std::make_pair(0, false);\n+        }\n+        n++;\n+    }\n+\n+    unsigned int uniqueTxOutCount = 0;\n+    for (const auto& txOut : tx->vout) {\n+        // check if it's a valid destination\n+        CTxDestination txOutDestination;\n+        ExtractDestination(txOut.scriptPubKey, txOutDestination);\n+        if (std::get_if<CNoDestination>(&txOutDestination)) {\n+            continue;\n+        }\n+\n+        // don't count outputs that match any input addresses (eg it's change output)\n+        bool matchesInput = false;\n+        for (const auto& txIn : tx->vin) {\n+            auto prevWalletTx = wallet.GetWalletTx(txIn.prevout.hash);\n+            if (prevWalletTx && prevWalletTx->tx->vout[txIn.prevout.n].scriptPubKey == txOut.scriptPubKey) {\n+                matchesInput = true;\n+                break;\n+            }\n+        }\n+        if (matchesInput) {\n+            continue;\n+        }\n+\n+        uniqueTxOutCount++;\n+    }\n+\n+    // we consider two or more unique outputs an \"deniabilization\" of the coin\n+    unsigned int deniabilizationCycles = uniqueTxOutCount >= 2 ? 1 : 0;\n+\n+    // all txIn and txOut are from our wallet\n+    // however if we have multiple txIn this was either an initial deniabilization of multiple UTXOs or the user manually merged deniabilized UTXOs\n+    // in either case we don't need to recurse into parent transactions and we can return the calculated cycles\n+    if (tx->vin.size() > 1) {\n+        return std::make_pair(deniabilizationCycles, false);\n+    }\n+\n+    const auto& txIn = tx->vin[0];\n+    // now recursively calculate the deniabilization cycles of the input\n+    auto inputStats = CalculateDeniabilizationCycles(wallet, txIn.prevout);\n+    return std::make_pair(inputStats.first + deniabilizationCycles, inputStats.second);\n+};\n+\n+void SpoofTransactionFingerprint(CMutableTransaction& tx, FastRandomContext& rng_fast)\n+{\n+    // Transaction \"fingerprint\" spoofing\n+    struct Fingerprint {\n+        bool standardVersion = false;\n+        bool antiFeeSniping = false;\n+        bool bip69Ordering = false;\n+    };\n+\n+    // wallet fingerprints based on info from variuous sources, see:\n+    // https://github.com/achow101/wallet-fingerprinting/blob/main/fingerprints.md\n+    // https://gitlab.com/1440000bytes/goldfish\n+    // https://ishaana.com/blog/wallet_fingerprinting/\n+    static const Fingerprint s_walletFingerprints[] = {\n+        {true, true, false},   // Core\n+        {true, true, true},    // Electrum\n+        {true, false, false},  // Blue\n+        {false, false, true},  // Trezor\n+        {false, false, false}, // Trust, Ledger\n+    };\n+    constexpr size_t NUM_WALLET_FINGERPRINTS = sizeof(s_walletFingerprints) / sizeof(s_walletFingerprints[0]);\n+\n+    auto fingerprintIndex = rng_fast.randrange(NUM_WALLET_FINGERPRINTS);\n+    const Fingerprint& fingerprint = s_walletFingerprints[fingerprintIndex];\n+\n+    if (fingerprint.standardVersion) {\n+        Assert(tx.nVersion == TX_MAX_STANDARD_VERSION);\n+    } else {\n+        tx.nVersion = 1;\n+    }\n+\n+    if (fingerprint.antiFeeSniping) {\n+        // By default \"Core\" implements anti-fee-sniping (nLockTime == block_height - rng_fast.randrange(100))\n+    } else {\n+        // no anti-fee-sniping\n+        tx.nLockTime = 0;\n+    }\n+\n+    if (fingerprint.bip69Ordering) {\n+        // Sort the inputs and outputs in accordance with BIP69\n+        auto sortInputsBip69 = [](const CTxIn& a, const CTxIn& b) {\n+            // COutPoint operator< does sort in accordance with Bip69, so just use that.\n+            return a.prevout < b.prevout;\n+        };\n+        std::sort(tx.vin.begin(), tx.vin.end(), sortInputsBip69);\n+\n+        auto sortOutputsBip69 = [](const CTxOut& a, const CTxOut& b) {\n+            if (a.nValue == b.nValue) {\n+                // Note: prevector operator< does NOT properly order scriptPubKeys lexicographically. So instead we\n+                // fall-back to using std::memcmp.\n+                const auto& spkA = a.scriptPubKey;\n+                const auto& spkB = b.scriptPubKey;\n+                const int cmp = std::memcmp(spkA.data(), spkB.data(), std::min(spkA.size(), spkB.size()));\n+                return cmp < 0 || (cmp == 0 && spkA.size() < spkB.size());\n+            }\n+            return a.nValue < b.nValue;\n+        };\n+        std::sort(tx.vout.begin(), tx.vout.end(), sortOutputsBip69);\n+    } else {\n+        // By default \"Core\" doesn't perform BIP69 ordering\n+    }\n+}\n+\n+util::Result<CreatedTransactionResult> CreateDeniabilizationTransaction(CWallet& wallet, const std::set<COutPoint>& inputs, const std::optional<OutputType>& opt_output_type, unsigned int confirm_target, unsigned int deniabilization_cycles, bool sign, bool& insufficient_amount)",
      "path": "src/wallet/spend.cpp",
      "position": 251,
      "original_position": 232,
      "commit_id": "8f72d4abe3ab4e4cbbe909694a1fd9d0a8f4a3bf",
      "original_commit_id": "16d50b3699232bfe48b21057e6175ab12417ebe3",
      "in_reply_to_id": 1373616084,
      "user": {
        "login": "katesalazar",
        "id": 52637275,
        "node_id": "MDQ6VXNlcjUyNjM3Mjc1",
        "avatar_url": "https://avatars.githubusercontent.com/u/52637275?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/katesalazar",
        "html_url": "https://github.com/katesalazar",
        "followers_url": "https://api.github.com/users/katesalazar/followers",
        "following_url": "https://api.github.com/users/katesalazar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/katesalazar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/katesalazar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/katesalazar/subscriptions",
        "organizations_url": "https://api.github.com/users/katesalazar/orgs",
        "repos_url": "https://api.github.com/users/katesalazar/repos",
        "events_url": "https://api.github.com/users/katesalazar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/katesalazar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "just by thinking of the possibility seems reasonable enough for me at this point\r\n\r\nfor now make as you feel it's best made\r\n",
      "created_at": "2023-10-29T14:39:09Z",
      "updated_at": "2023-10-29T14:39:10Z",
      "html_url": "https://github.com/bitcoin-core/gui/pull/733#discussion_r1375449856",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/gui/pulls/comments/1375449856"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/gui/pulls/733"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1670,
      "original_line": 1670,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/gui/pulls/comments/1375450500",
      "pull_request_review_id": 1702973669,
      "id": 1375450500,
      "node_id": "PRRC_kwDOEEET9c5R-7WE",
      "diff_hunk": "@@ -1392,4 +1392,384 @@ bool FundTransaction(CWallet& wallet, CMutableTransaction& tx, CAmount& nFeeRet,\n \n     return true;\n }\n+\n+constexpr int NUM_DENIABILIZATION_OUTPUTS = 2;",
      "path": "src/wallet/spend.cpp",
      "position": 8,
      "original_position": 5,
      "commit_id": "8f72d4abe3ab4e4cbbe909694a1fd9d0a8f4a3bf",
      "original_commit_id": "c781cd8863bb12e60ce8905063c8041145db63ac",
      "in_reply_to_id": null,
      "user": {
        "login": "katesalazar",
        "id": 52637275,
        "node_id": "MDQ6VXNlcjUyNjM3Mjc1",
        "avatar_url": "https://avatars.githubusercontent.com/u/52637275?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/katesalazar",
        "html_url": "https://github.com/katesalazar",
        "followers_url": "https://api.github.com/users/katesalazar/followers",
        "following_url": "https://api.github.com/users/katesalazar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/katesalazar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/katesalazar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/katesalazar/subscriptions",
        "organizations_url": "https://api.github.com/users/katesalazar/orgs",
        "repos_url": "https://api.github.com/users/katesalazar/repos",
        "events_url": "https://api.github.com/users/katesalazar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/katesalazar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "why is this hardwired to 2?",
      "created_at": "2023-10-29T14:42:15Z",
      "updated_at": "2023-10-29T14:42:16Z",
      "html_url": "https://github.com/bitcoin-core/gui/pull/733#discussion_r1375450500",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/gui/pulls/comments/1375450500"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/gui/pulls/733"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1427,
      "original_line": 1427,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/gui/pulls/comments/1375450923",
      "pull_request_review_id": 1702974130,
      "id": 1375450923,
      "node_id": "PRRC_kwDOEEET9c5R-7cr",
      "diff_hunk": "@@ -1392,4 +1392,384 @@ bool FundTransaction(CWallet& wallet, CMutableTransaction& tx, CAmount& nFeeRet,\n \n     return true;\n }\n+\n+constexpr int NUM_DENIABILIZATION_OUTPUTS = 2;\n+\n+static unsigned int CalculateDeniabilizationTxSize(const CScript& script, CAmount value, unsigned int numTxIn)\n+{\n+    // Calculation based on the comments and code in GetDustThreshold and CreateTransactionInternal\n+    unsigned int txOutSize = (unsigned int)GetSerializeSize(CTxOut(value, script), PROTOCOL_VERSION);\n+\n+    const size_t txOutCount = NUM_DENIABILIZATION_OUTPUTS;\n+    unsigned int txSize = 10 + GetSizeOfCompactSize(txOutCount); // bytes for output count\n+    txSize += txOutSize * txOutCount;\n+\n+    int witnessversion = 0;\n+    std::vector<unsigned char> witnessprogram;\n+    if (script.IsWitnessProgram(witnessversion, witnessprogram)) {\n+        txSize += (unsigned int)(numTxIn * 67.75f + 0.5f);\n+    } else {\n+        txSize += numTxIn * 148;",
      "path": "src/wallet/spend.cpp",
      "position": null,
      "original_position": 21,
      "commit_id": "8f72d4abe3ab4e4cbbe909694a1fd9d0a8f4a3bf",
      "original_commit_id": "c781cd8863bb12e60ce8905063c8041145db63ac",
      "in_reply_to_id": null,
      "user": {
        "login": "katesalazar",
        "id": 52637275,
        "node_id": "MDQ6VXNlcjUyNjM3Mjc1",
        "avatar_url": "https://avatars.githubusercontent.com/u/52637275?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/katesalazar",
        "html_url": "https://github.com/katesalazar",
        "followers_url": "https://api.github.com/users/katesalazar/followers",
        "following_url": "https://api.github.com/users/katesalazar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/katesalazar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/katesalazar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/katesalazar/subscriptions",
        "organizations_url": "https://api.github.com/users/katesalazar/orgs",
        "repos_url": "https://api.github.com/users/katesalazar/repos",
        "events_url": "https://api.github.com/users/katesalazar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/katesalazar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "why this magic number?\r\nis this the number of legacy and p2sh bytes per txin?\r\ncan't name some constant with that?\r\n",
      "created_at": "2023-10-29T14:45:09Z",
      "updated_at": "2023-10-29T14:45:10Z",
      "html_url": "https://github.com/bitcoin-core/gui/pull/733#discussion_r1375450923",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/gui/pulls/comments/1375450923"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/gui/pulls/733"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1412,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/gui/pulls/comments/1375451033",
      "pull_request_review_id": 1702974253,
      "id": 1375451033,
      "node_id": "PRRC_kwDOEEET9c5R-7eZ",
      "diff_hunk": "@@ -1392,4 +1392,384 @@ bool FundTransaction(CWallet& wallet, CMutableTransaction& tx, CAmount& nFeeRet,\n \n     return true;\n }\n+\n+constexpr int NUM_DENIABILIZATION_OUTPUTS = 2;\n+\n+static unsigned int CalculateDeniabilizationTxSize(const CScript& script, CAmount value, unsigned int numTxIn)\n+{\n+    // Calculation based on the comments and code in GetDustThreshold and CreateTransactionInternal\n+    unsigned int txOutSize = (unsigned int)GetSerializeSize(CTxOut(value, script), PROTOCOL_VERSION);\n+\n+    const size_t txOutCount = NUM_DENIABILIZATION_OUTPUTS;\n+    unsigned int txSize = 10 + GetSizeOfCompactSize(txOutCount); // bytes for output count\n+    txSize += txOutSize * txOutCount;\n+\n+    int witnessversion = 0;\n+    std::vector<unsigned char> witnessprogram;\n+    if (script.IsWitnessProgram(witnessversion, witnessprogram)) {\n+        txSize += (unsigned int)(numTxIn * 67.75f + 0.5f);\n+    } else {\n+        txSize += numTxIn * 148;\n+    }\n+    return txSize;\n+}\n+\n+float CalculateDeniabilizationProbability(unsigned int deniabilization_cycles)\n+{\n+    // 100%, 50%, 25%, 13%, 6%, 3%, 2%, 1%\n+    return powf(0.5f, deniabilization_cycles);\n+}\n+\n+bool IsDeniabilizationWorthwhile(CAmount total_value, CAmount fee_estimate)\n+{\n+    constexpr CAmount value_to_fee_ratio = 10;\n+    return total_value > fee_estimate * value_to_fee_ratio;\n+}\n+\n+CCoinControl SetupDeniabilizationCoinControl(unsigned int confirm_target)\n+{\n+    CCoinControl coin_control;\n+    coin_control.m_avoid_address_reuse = true;\n+    coin_control.m_avoid_partial_spends = true;\n+    coin_control.m_allow_other_inputs = false;\n+    coin_control.m_signal_bip125_rbf = true;\n+    coin_control.m_confirm_target = confirm_target;\n+    // we'll automatically bump the fee if economical ends up not confirming by the next deniabilization cycle\n+    coin_control.m_fee_mode = FeeEstimateMode::ECONOMICAL;\n+    return coin_control;\n+}\n+\n+CFeeRate CalculateDeniabilizationFeeRate(const CWallet& wallet, unsigned int confirm_target)\n+{\n+    CCoinControl coin_control = SetupDeniabilizationCoinControl(confirm_target);\n+\n+    CFeeRate requiredFeeRate = GetRequiredFeeRate(wallet);\n+    FeeCalculation fee_calc;\n+    CFeeRate minFeeRate = GetMinimumFeeRate(wallet, coin_control, &fee_calc);\n+    if (fee_calc.reason == FeeReason::FALLBACK || requiredFeeRate > minFeeRate)\n+        return requiredFeeRate;\n+    return minFeeRate;\n+}\n+\n+static CAmount CalculateDeniabilizationTxFee(const CScript& shared_script, CAmount total_value, unsigned int num_utxos, const CFeeRate& fee_rate)\n+{\n+    Assert(num_utxos > 0);\n+    unsigned int deniabilization_tx_size = CalculateDeniabilizationTxSize(shared_script, total_value, num_utxos);\n+    return fee_rate.GetFee(deniabilization_tx_size);\n+}\n+\n+CAmount CalculateDeniabilizationFeeEstimate(const CScript& shared_script, CAmount total_value, unsigned int num_utxos, unsigned int deniabilization_cycles, const CFeeRate& fee_rate)\n+{\n+    float deniabilizationProbability = CalculateDeniabilizationProbability(deniabilization_cycles);\n+    // convert to integer percent to truncate and check for zero probability\n+    unsigned int deniabilizationProbabilityPercent = deniabilizationProbability * 100;\n+    if (deniabilizationProbabilityPercent == 0) {\n+        return 0;\n+    }\n+\n+    // this cycle will use all the UTXOs, while following cycles will have just one UTXO\n+    CAmount deniabilizationFee = CalculateDeniabilizationTxFee(shared_script, total_value, num_utxos, fee_rate);\n+\n+    // calculate the fees from future deniabilization cycles\n+    CAmount futureDeniabilizationFee = CalculateDeniabilizationFeeEstimate(shared_script, total_value / NUM_DENIABILIZATION_OUTPUTS, 1, deniabilization_cycles + 1, fee_rate) * 2;",
      "path": "src/wallet/spend.cpp",
      "position": null,
      "original_position": 83,
      "commit_id": "8f72d4abe3ab4e4cbbe909694a1fd9d0a8f4a3bf",
      "original_commit_id": "c781cd8863bb12e60ce8905063c8041145db63ac",
      "in_reply_to_id": null,
      "user": {
        "login": "katesalazar",
        "id": 52637275,
        "node_id": "MDQ6VXNlcjUyNjM3Mjc1",
        "avatar_url": "https://avatars.githubusercontent.com/u/52637275?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/katesalazar",
        "html_url": "https://github.com/katesalazar",
        "followers_url": "https://api.github.com/users/katesalazar/followers",
        "following_url": "https://api.github.com/users/katesalazar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/katesalazar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/katesalazar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/katesalazar/subscriptions",
        "organizations_url": "https://api.github.com/users/katesalazar/orgs",
        "repos_url": "https://api.github.com/users/katesalazar/repos",
        "events_url": "https://api.github.com/users/katesalazar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/katesalazar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "why compute fee estimate and then multiply by a hardwired 2?",
      "created_at": "2023-10-29T14:45:55Z",
      "updated_at": "2023-10-29T14:45:55Z",
      "html_url": "https://github.com/bitcoin-core/gui/pull/733#discussion_r1375451033",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/gui/pulls/comments/1375451033"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/gui/pulls/733"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1474,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/gui/pulls/comments/1375451898",
      "pull_request_review_id": 1702974986,
      "id": 1375451898,
      "node_id": "PRRC_kwDOEEET9c5R-7r6",
      "diff_hunk": "@@ -1392,4 +1392,381 @@ bool FundTransaction(CWallet& wallet, CMutableTransaction& tx, CAmount& nFeeRet,\n \n     return true;\n }\n+\n+constexpr int NUM_DENIABILIZATION_OUTPUTS = 2;\n+\n+static unsigned int CalculateDeniabilizationTxSize(const CScript& script, CAmount value, unsigned int numTxIn)\n+{\n+    // Calculation based on the comments and code in GetDustThreshold and CreateTransactionInternal\n+    unsigned int txOutSize = (unsigned int)GetSerializeSize(CTxOut(value, script), PROTOCOL_VERSION);\n+\n+    const size_t txOutCount = NUM_DENIABILIZATION_OUTPUTS;\n+    unsigned int txSize = 10 + GetSizeOfCompactSize(txOutCount); // bytes for output count\n+    txSize += txOutSize * txOutCount;\n+\n+    int witnessversion = 0;\n+    std::vector<unsigned char> witnessprogram;\n+    if (script.IsWitnessProgram(witnessversion, witnessprogram)) {\n+        txSize += (unsigned int)(numTxIn * 67.75f + 0.5f);\n+    } else {\n+        txSize += numTxIn * 148;\n+    }\n+    return txSize;\n+}\n+\n+float CalculateDeniabilizationProbability(unsigned int deniabilization_cycles)\n+{\n+    // 100%, 50%, 25%, 13%, 6%, 3%, 2%, 1%\n+    return powf(0.5f, deniabilization_cycles);\n+}\n+\n+bool IsDeniabilizationWorthwhile(CAmount total_value, CAmount fee_estimate)\n+{\n+    constexpr CAmount value_to_fee_ratio = 10;\n+    return total_value > fee_estimate * value_to_fee_ratio;\n+}\n+\n+CCoinControl SetupDeniabilizationCoinControl(unsigned int confirm_target)\n+{\n+    CCoinControl coin_control;\n+    coin_control.m_avoid_address_reuse = true;\n+    coin_control.m_avoid_partial_spends = true;\n+    coin_control.m_allow_other_inputs = false;\n+    coin_control.m_signal_bip125_rbf = true;\n+    coin_control.m_confirm_target = confirm_target;\n+    // we'll automatically bump the fee if economical ends up not confirming by the next deniabilization cycle\n+    coin_control.m_fee_mode = FeeEstimateMode::ECONOMICAL;\n+    return coin_control;\n+}\n+\n+CFeeRate CalculateDeniabilizationFeeRate(const CWallet& wallet, unsigned int confirm_target)\n+{\n+    CCoinControl coin_control = SetupDeniabilizationCoinControl(confirm_target);\n+\n+    CFeeRate requiredFeeRate = GetRequiredFeeRate(wallet);\n+    FeeCalculation fee_calc;\n+    CFeeRate minFeeRate = GetMinimumFeeRate(wallet, coin_control, &fee_calc);\n+    if (fee_calc.reason == FeeReason::FALLBACK || requiredFeeRate > minFeeRate)\n+        return requiredFeeRate;\n+    return minFeeRate;\n+}\n+\n+static CAmount CalculateDeniabilizationTxFee(const CScript& shared_script, CAmount total_value, unsigned int num_utxos, const CFeeRate& fee_rate)\n+{\n+    Assert(num_utxos > 0);\n+    unsigned int deniabilization_tx_size = CalculateDeniabilizationTxSize(shared_script, total_value, num_utxos);\n+    return fee_rate.GetFee(deniabilization_tx_size);\n+}\n+\n+CAmount CalculateDeniabilizationFeeEstimate(const CScript& shared_script, CAmount total_value, unsigned int num_utxos, unsigned int deniabilization_cycles, const CFeeRate& fee_rate)\n+{\n+    float deniabilizationProbability = CalculateDeniabilizationProbability(deniabilization_cycles);\n+    // convert to integer percent to truncate and check for zero probability\n+    unsigned int deniabilizationProbabilityPercent = deniabilizationProbability * 100;\n+    if (deniabilizationProbabilityPercent == 0) {\n+        return 0;\n+    }\n+\n+    // this cycle will use all the UTXOs, while following cycles will have just one UTXO\n+    CAmount deniabilizationFee = CalculateDeniabilizationTxFee(shared_script, total_value, num_utxos, fee_rate);\n+\n+    // calculate the fees from future deniabilization cycles\n+    CAmount futureDeniabilizationFee = CalculateDeniabilizationFeeEstimate(shared_script, total_value / NUM_DENIABILIZATION_OUTPUTS, 1, deniabilization_cycles + 1, fee_rate) * 2;\n+\n+    // if it's worthwhile to do future deniabilizations then add them to this cycle estimate\n+    if (IsDeniabilizationWorthwhile(total_value, deniabilizationFee + futureDeniabilizationFee)) {\n+        deniabilizationFee += futureDeniabilizationFee;\n+    }\n+    return deniabilizationFee;\n+}\n+\n+std::pair<unsigned int, bool> CalculateDeniabilizationCycles(CWallet& wallet, const COutPoint& outpoint)\n+{\n+    LOCK(wallet.cs_wallet);\n+    auto walletTx = wallet.GetWalletTx(outpoint.hash);\n+    if (!walletTx) {\n+        return std::make_pair(0, false);\n+    }\n+    auto tx = walletTx->tx;\n+\n+    if (tx->IsCoinBase()) {\n+        // this is a block reward tx, so we tag it as such\n+        return std::make_pair(0, true);\n+    }\n+\n+    // an deniabilized coin is one we sent to ourselves\n+    // all txIn should belong to our wallet\n+    if (tx->vin.empty()) {\n+        return std::make_pair(0, false);\n+    }\n+    for (const auto& txIn : tx->vin) {\n+        if (InputIsMine(wallet, txIn) == ISMINE_NO) {\n+            return std::make_pair(0, false);\n+        }\n+    }\n+\n+    // all txOut should belong to our wallet\n+    Assert(outpoint.n < tx->vout.size());\n+    unsigned int n = 0;\n+    for (const auto& txOut : tx->vout) {\n+        if (wallet.IsMine(txOut) == ISMINE_NO) {\n+            Assert(n != outpoint.n);\n+            return std::make_pair(0, false);\n+        }\n+        n++;\n+    }\n+\n+    unsigned int uniqueTxOutCount = 0;\n+    for (const auto& txOut : tx->vout) {\n+        // check if it's a valid destination\n+        CTxDestination txOutDestination;\n+        ExtractDestination(txOut.scriptPubKey, txOutDestination);\n+        if (std::get_if<CNoDestination>(&txOutDestination)) {\n+            continue;\n+        }\n+\n+        // don't count outputs that match any input addresses (eg it's change output)\n+        bool matchesInput = false;\n+        for (const auto& txIn : tx->vin) {\n+            auto prevWalletTx = wallet.GetWalletTx(txIn.prevout.hash);\n+            if (prevWalletTx && prevWalletTx->tx->vout[txIn.prevout.n].scriptPubKey == txOut.scriptPubKey) {\n+                matchesInput = true;\n+                break;\n+            }\n+        }\n+        if (matchesInput) {\n+            continue;\n+        }\n+\n+        uniqueTxOutCount++;\n+    }\n+\n+    // we consider two or more unique outputs an \"deniabilization\" of the coin\n+    unsigned int deniabilizationCycles = uniqueTxOutCount >= 2 ? 1 : 0;\n+\n+    // all txIn and txOut are from our wallet\n+    // however if we have multiple txIn this was either an initial deniabilization of multiple UTXOs or the user manually merged deniabilized UTXOs\n+    // in either case we don't need to recurse into parent transactions and we can return the calculated cycles\n+    if (tx->vin.size() > 1) {\n+        return std::make_pair(deniabilizationCycles, false);\n+    }\n+\n+    const auto& txIn = tx->vin[0];\n+    // now recursively calculate the deniabilization cycles of the input\n+    auto inputStats = CalculateDeniabilizationCycles(wallet, txIn.prevout);\n+    return std::make_pair(inputStats.first + deniabilizationCycles, inputStats.second);\n+};\n+\n+void SpoofTransactionFingerprint(CMutableTransaction& tx, FastRandomContext& rng_fast)\n+{\n+    // Transaction \"fingerprint\" spoofing\n+    struct Fingerprint {\n+        bool standardVersion = false;\n+        bool antiFeeSniping = false;\n+        bool bip69Ordering = false;\n+    };\n+\n+    // wallet fingerprints based on info from variuous sources, see:\n+    // https://github.com/achow101/wallet-fingerprinting/blob/main/fingerprints.md\n+    // https://gitlab.com/1440000bytes/goldfish\n+    // https://ishaana.com/blog/wallet_fingerprinting/\n+    static const Fingerprint s_walletFingerprints[] = {\n+        {true, true, false},   // Core\n+        {true, true, true},    // Electrum\n+        {true, false, false},  // Blue\n+        {false, false, true},  // Trezor\n+        {false, false, false}, // Trust, Ledger\n+    };\n+    constexpr size_t NUM_WALLET_FINGERPRINTS = sizeof(s_walletFingerprints) / sizeof(s_walletFingerprints[0]);\n+\n+    auto fingerprintIndex = rng_fast.randrange(NUM_WALLET_FINGERPRINTS);\n+    const Fingerprint& fingerprint = s_walletFingerprints[fingerprintIndex];\n+\n+    if (fingerprint.standardVersion) {\n+        Assert(tx.nVersion == TX_MAX_STANDARD_VERSION);\n+    } else {\n+        tx.nVersion = 1;\n+    }\n+\n+    if (fingerprint.antiFeeSniping) {\n+        // By default \"Core\" implements anti-fee-sniping (nLockTime == block_height - rng_fast.randrange(100))\n+    } else {\n+        // no anti-fee-sniping\n+        tx.nLockTime = 0;\n+    }\n+\n+    if (fingerprint.bip69Ordering) {\n+        // Sort the inputs and outputs in accordance with BIP69\n+        auto sortInputsBip69 = [](const CTxIn& a, const CTxIn& b) {\n+            // COutPoint operator< does sort in accordance with Bip69, so just use that.\n+            return a.prevout < b.prevout;\n+        };\n+        std::sort(tx.vin.begin(), tx.vin.end(), sortInputsBip69);\n+\n+        auto sortOutputsBip69 = [](const CTxOut& a, const CTxOut& b) {\n+            if (a.nValue == b.nValue) {\n+                // Note: prevector operator< does NOT properly order scriptPubKeys lexicographically. So instead we\n+                // fall-back to using std::memcmp.\n+                const auto& spkA = a.scriptPubKey;\n+                const auto& spkB = b.scriptPubKey;\n+                const int cmp = std::memcmp(spkA.data(), spkB.data(), std::min(spkA.size(), spkB.size()));\n+                return cmp < 0 || (cmp == 0 && spkA.size() < spkB.size());\n+            }\n+            return a.nValue < b.nValue;\n+        };\n+        std::sort(tx.vout.begin(), tx.vout.end(), sortOutputsBip69);\n+    } else {\n+        // By default \"Core\" doesn't perform BIP69 ordering\n+    }\n+}\n+\n+util::Result<CreatedTransactionResult> CreateDeniabilizationTransaction(CWallet& wallet, const std::set<COutPoint>& inputs, const std::optional<OutputType>& opt_output_type, unsigned int confirm_target, unsigned int deniabilization_cycles, bool sign, bool& insufficient_amount)\n+{\n+    if (inputs.empty()) {\n+        return util::Error{_(\"Inputs must not be empty\")};\n+    }\n+\n+    CCoinControl coin_control = SetupDeniabilizationCoinControl(confirm_target);\n+    // TODO: Do we need to limit number of inputs to OUTPUT_GROUP_MAX_ENTRIES\n+    for (const auto& input : inputs) {\n+        coin_control.Select(input);\n+    }\n+    Assert(coin_control.HasSelected());\n+    CFeeRate deniabilization_fee_rate = CalculateDeniabilizationFeeRate(wallet, confirm_target);\n+    coin_control.m_feerate = deniabilization_fee_rate;\n+\n+    LOCK(wallet.cs_wallet);\n+\n+    FastRandomContext rng_fast;\n+    CoinSelectionParams coin_selection_params{rng_fast};\n+    coin_selection_params.m_avoid_partial_spends = coin_control.m_avoid_partial_spends;\n+    coin_selection_params.m_include_unsafe_inputs = coin_control.m_include_unsafe_inputs;\n+    coin_selection_params.m_effective_feerate = deniabilization_fee_rate;\n+    coin_selection_params.m_long_term_feerate = wallet.m_consolidate_feerate;\n+    coin_selection_params.m_subtract_fee_outputs = true;\n+\n+    auto res_fetch_inputs = FetchSelectedInputs(wallet, coin_control, coin_selection_params);\n+    if (!res_fetch_inputs) {\n+        return util::Error{util::ErrorString(res_fetch_inputs)};\n+    }\n+    PreSelectedInputs preset_inputs = *res_fetch_inputs;\n+    CAmount total_amount = preset_inputs.total_amount;\n+\n+    // validate that all UTXOs share the same address\n+    std::optional<CScript> op_shared_script;\n+    for (const auto& coin : preset_inputs.coins) {\n+        if (!op_shared_script) {\n+            op_shared_script = coin->txout.scriptPubKey;\n+        }\n+        if (!op_shared_script || !(*op_shared_script == coin->txout.scriptPubKey)) {\n+            return util::Error{_(\"Input addresses must all match.\")};\n+        }\n+    }\n+    Assert(op_shared_script);\n+    CScript shared_script = *op_shared_script;\n+\n+    CFeeRate discard_feerate = GetDiscardRate(wallet);\n+    CAmount dust_threshold = GetDustThreshold(CTxOut(total_amount, shared_script), discard_feerate);\n+\n+    // deniabilize the UTXOs by splitting the value randomly\n+    // find a split that leaves enough amount post split to finish the deniabilization process in each new UTXO\n+    CAmount min_post_split_amount = CalculateDeniabilizationFeeEstimate(shared_script, total_amount / NUM_DENIABILIZATION_OUTPUTS, 1, deniabilization_cycles + 1, deniabilization_fee_rate) + dust_threshold;\n+    CAmount estimated_tx_fee = CalculateDeniabilizationTxFee(shared_script, total_amount, preset_inputs.coins.size(), deniabilization_fee_rate);\n+\n+    CAmount total_random_range = total_amount - min_post_split_amount * NUM_DENIABILIZATION_OUTPUTS - estimated_tx_fee;\n+    if (total_random_range < 0) {\n+        insufficient_amount = true;\n+        return util::Error{strprintf(_(\"Insufficient amount (%d) for a deniabilization transaction, min amount (%d), tx fee (%d).\"), total_amount, min_post_split_amount, estimated_tx_fee)};\n+    }\n+\n+    OutputType output_type = wallet.m_default_address_type;\n+    if (opt_output_type) {\n+        output_type = *opt_output_type;\n+    } else {\n+        // if no output type was specified, try to infer it from the source inputs\n+        CTxDestination shared_destination = CNoDestination();\n+        if (ExtractDestination(shared_script, shared_destination)) {\n+            std::optional<OutputType> opt_shared_output_type = OutputTypeFromDestination(shared_destination);\n+            if (opt_shared_output_type) {\n+                output_type = *opt_shared_output_type;\n+            }\n+        }\n+    }\n+\n+    const int num_recipients = NUM_DENIABILIZATION_OUTPUTS;\n+    std::vector<CRecipient> recipients(num_recipients);\n+    std::list<ReserveDestination> reservedests;\n+    constexpr bool reservdest_internal = false; // TODO: Should this be \"true\" or \"false\". What does \"internal\" mean?\n+    for (int recipient_index = 0; recipient_index < num_recipients; recipient_index++) {\n+        bool lastRecipient = recipient_index == (num_recipients - 1);\n+        if (!lastRecipient) {\n+            // all recipients except for the last one,\n+            // calculate a random range based on the remaining total random range and the number of remaining recipients\n+            // then generate a random amount within that range\n+            CAmount random_range = total_random_range / (num_recipients - recipient_index - 1);\n+            CAmount random_amount = 0;\n+            if (random_range > 0) {\n+                random_amount = GetRand<CAmount>(random_range);\n+                Assert(total_random_range >= random_amount);\n+                total_random_range -= random_amount;\n+            }\n+            recipients[recipient_index].nAmount = min_post_split_amount + random_amount;\n+        } else {\n+            // the last recipient takes any leftover random amount and the estimated fee\n+            recipients[recipient_index].nAmount = min_post_split_amount + total_random_range + estimated_tx_fee;\n+        }\n+\n+        // the last recipient pays the tx fees\n+        recipients[recipient_index].fSubtractFeeFromAmount = lastRecipient;\n+\n+        auto& reservedest = reservedests.emplace_back(&wallet, output_type);\n+        CTxDestination dest;\n+        auto op_dest = reservedest.GetReservedDestination(reservdest_internal);\n+        if (!op_dest) {\n+            return util::Error{_(\"Failed to reserve a new address.\") + Untranslated(\" \") + util::ErrorString(op_dest)};\n+        }\n+        dest = *op_dest;\n+        recipients[recipient_index].dest = dest;\n+        if (lastRecipient) {\n+            // we don't expect to get change, but we provide the address to prevent CreateTransactionInternal from generating a change address\n+            coin_control.destChange = dest;\n+        }\n+    }\n+\n+    CAmount recipient_amount = std::accumulate(recipients.cbegin(), recipients.cend(), CAmount{0}, [](CAmount sum, const CRecipient& recipient) { return sum + recipient.nAmount; });",
      "path": "src/wallet/spend.cpp",
      "position": null,
      "original_position": 345,
      "commit_id": "8f72d4abe3ab4e4cbbe909694a1fd9d0a8f4a3bf",
      "original_commit_id": "16d50b3699232bfe48b21057e6175ab12417ebe3",
      "in_reply_to_id": 1373617709,
      "user": {
        "login": "katesalazar",
        "id": 52637275,
        "node_id": "MDQ6VXNlcjUyNjM3Mjc1",
        "avatar_url": "https://avatars.githubusercontent.com/u/52637275?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/katesalazar",
        "html_url": "https://github.com/katesalazar",
        "followers_url": "https://api.github.com/users/katesalazar/followers",
        "following_url": "https://api.github.com/users/katesalazar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/katesalazar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/katesalazar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/katesalazar/subscriptions",
        "organizations_url": "https://api.github.com/users/katesalazar/orgs",
        "repos_url": "https://api.github.com/users/katesalazar/repos",
        "events_url": "https://api.github.com/users/katesalazar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/katesalazar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I hate that indent standard though, and yet I think now it's a bit better than before. Thanks",
      "created_at": "2023-10-29T14:50:30Z",
      "updated_at": "2023-10-29T14:50:30Z",
      "html_url": "https://github.com/bitcoin-core/gui/pull/733#discussion_r1375451898",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/gui/pulls/comments/1375451898"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/gui/pulls/733"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1736,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/gui/pulls/comments/1375571803",
      "pull_request_review_id": 1703109392,
      "id": 1375571803,
      "node_id": "PRRC_kwDOEEET9c5R_Y9b",
      "diff_hunk": "@@ -1392,4 +1392,384 @@ bool FundTransaction(CWallet& wallet, CMutableTransaction& tx, CAmount& nFeeRet,\n \n     return true;\n }\n+\n+constexpr int NUM_DENIABILIZATION_OUTPUTS = 2;",
      "path": "src/wallet/spend.cpp",
      "position": 8,
      "original_position": 5,
      "commit_id": "8f72d4abe3ab4e4cbbe909694a1fd9d0a8f4a3bf",
      "original_commit_id": "c781cd8863bb12e60ce8905063c8041145db63ac",
      "in_reply_to_id": 1375450500,
      "user": {
        "login": "denavila",
        "id": 123340139,
        "node_id": "U_kgDOB1oFaw",
        "avatar_url": "https://avatars.githubusercontent.com/u/123340139?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/denavila",
        "html_url": "https://github.com/denavila",
        "followers_url": "https://api.github.com/users/denavila/followers",
        "following_url": "https://api.github.com/users/denavila/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/denavila/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/denavila/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/denavila/subscriptions",
        "organizations_url": "https://api.github.com/users/denavila/orgs",
        "repos_url": "https://api.github.com/users/denavila/repos",
        "events_url": "https://api.github.com/users/denavila/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/denavila/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "2 outputs is a common spend transaction and we're trying to mimic that. \r\nAnother concern with a larger output count is that the number of deniabilization chunks grows much larger with each \"cycle\", and thus becomes more expensive to perform further cycles.\r\nIn the end 2 looked like the sweet spot, but I made the constant just in case we want to play with other output counts in the future.\r\nI'll add comments in the code to that effect so that it's more obvious.\r\nThanks!",
      "created_at": "2023-10-30T01:02:13Z",
      "updated_at": "2023-10-30T01:02:13Z",
      "html_url": "https://github.com/bitcoin-core/gui/pull/733#discussion_r1375571803",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/gui/pulls/comments/1375571803"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/gui/pulls/733"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1427,
      "original_line": 1427,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/gui/pulls/comments/1375574194",
      "pull_request_review_id": 1703112750,
      "id": 1375574194,
      "node_id": "PRRC_kwDOEEET9c5R_Ziy",
      "diff_hunk": "@@ -1392,4 +1392,384 @@ bool FundTransaction(CWallet& wallet, CMutableTransaction& tx, CAmount& nFeeRet,\n \n     return true;\n }\n+\n+constexpr int NUM_DENIABILIZATION_OUTPUTS = 2;\n+\n+static unsigned int CalculateDeniabilizationTxSize(const CScript& script, CAmount value, unsigned int numTxIn)\n+{\n+    // Calculation based on the comments and code in GetDustThreshold and CreateTransactionInternal\n+    unsigned int txOutSize = (unsigned int)GetSerializeSize(CTxOut(value, script), PROTOCOL_VERSION);\n+\n+    const size_t txOutCount = NUM_DENIABILIZATION_OUTPUTS;\n+    unsigned int txSize = 10 + GetSizeOfCompactSize(txOutCount); // bytes for output count\n+    txSize += txOutSize * txOutCount;\n+\n+    int witnessversion = 0;\n+    std::vector<unsigned char> witnessprogram;\n+    if (script.IsWitnessProgram(witnessversion, witnessprogram)) {\n+        txSize += (unsigned int)(numTxIn * 67.75f + 0.5f);\n+    } else {\n+        txSize += numTxIn * 148;",
      "path": "src/wallet/spend.cpp",
      "position": null,
      "original_position": 21,
      "commit_id": "8f72d4abe3ab4e4cbbe909694a1fd9d0a8f4a3bf",
      "original_commit_id": "c781cd8863bb12e60ce8905063c8041145db63ac",
      "in_reply_to_id": 1375450923,
      "user": {
        "login": "denavila",
        "id": 123340139,
        "node_id": "U_kgDOB1oFaw",
        "avatar_url": "https://avatars.githubusercontent.com/u/123340139?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/denavila",
        "html_url": "https://github.com/denavila",
        "followers_url": "https://api.github.com/users/denavila/followers",
        "following_url": "https://api.github.com/users/denavila/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/denavila/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/denavila/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/denavila/subscriptions",
        "organizations_url": "https://api.github.com/users/denavila/orgs",
        "repos_url": "https://api.github.com/users/denavila/repos",
        "events_url": "https://api.github.com/users/denavila/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/denavila/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Yes, these are legacy vs Segwit tx size calculation, I think I found the code in GetDustThreshold. I'll see if we have named constants for some of those.",
      "created_at": "2023-10-30T01:08:17Z",
      "updated_at": "2023-10-30T01:08:18Z",
      "html_url": "https://github.com/bitcoin-core/gui/pull/733#discussion_r1375574194",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/gui/pulls/comments/1375574194"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/gui/pulls/733"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1412,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/gui/pulls/comments/1375575224",
      "pull_request_review_id": 1703114144,
      "id": 1375575224,
      "node_id": "PRRC_kwDOEEET9c5R_Zy4",
      "diff_hunk": "@@ -1392,4 +1392,384 @@ bool FundTransaction(CWallet& wallet, CMutableTransaction& tx, CAmount& nFeeRet,\n \n     return true;\n }\n+\n+constexpr int NUM_DENIABILIZATION_OUTPUTS = 2;\n+\n+static unsigned int CalculateDeniabilizationTxSize(const CScript& script, CAmount value, unsigned int numTxIn)\n+{\n+    // Calculation based on the comments and code in GetDustThreshold and CreateTransactionInternal\n+    unsigned int txOutSize = (unsigned int)GetSerializeSize(CTxOut(value, script), PROTOCOL_VERSION);\n+\n+    const size_t txOutCount = NUM_DENIABILIZATION_OUTPUTS;\n+    unsigned int txSize = 10 + GetSizeOfCompactSize(txOutCount); // bytes for output count\n+    txSize += txOutSize * txOutCount;\n+\n+    int witnessversion = 0;\n+    std::vector<unsigned char> witnessprogram;\n+    if (script.IsWitnessProgram(witnessversion, witnessprogram)) {\n+        txSize += (unsigned int)(numTxIn * 67.75f + 0.5f);\n+    } else {\n+        txSize += numTxIn * 148;\n+    }\n+    return txSize;\n+}\n+\n+float CalculateDeniabilizationProbability(unsigned int deniabilization_cycles)\n+{\n+    // 100%, 50%, 25%, 13%, 6%, 3%, 2%, 1%\n+    return powf(0.5f, deniabilization_cycles);\n+}\n+\n+bool IsDeniabilizationWorthwhile(CAmount total_value, CAmount fee_estimate)\n+{\n+    constexpr CAmount value_to_fee_ratio = 10;\n+    return total_value > fee_estimate * value_to_fee_ratio;\n+}\n+\n+CCoinControl SetupDeniabilizationCoinControl(unsigned int confirm_target)\n+{\n+    CCoinControl coin_control;\n+    coin_control.m_avoid_address_reuse = true;\n+    coin_control.m_avoid_partial_spends = true;\n+    coin_control.m_allow_other_inputs = false;\n+    coin_control.m_signal_bip125_rbf = true;\n+    coin_control.m_confirm_target = confirm_target;\n+    // we'll automatically bump the fee if economical ends up not confirming by the next deniabilization cycle\n+    coin_control.m_fee_mode = FeeEstimateMode::ECONOMICAL;\n+    return coin_control;\n+}\n+\n+CFeeRate CalculateDeniabilizationFeeRate(const CWallet& wallet, unsigned int confirm_target)\n+{\n+    CCoinControl coin_control = SetupDeniabilizationCoinControl(confirm_target);\n+\n+    CFeeRate requiredFeeRate = GetRequiredFeeRate(wallet);\n+    FeeCalculation fee_calc;\n+    CFeeRate minFeeRate = GetMinimumFeeRate(wallet, coin_control, &fee_calc);\n+    if (fee_calc.reason == FeeReason::FALLBACK || requiredFeeRate > minFeeRate)\n+        return requiredFeeRate;\n+    return minFeeRate;\n+}\n+\n+static CAmount CalculateDeniabilizationTxFee(const CScript& shared_script, CAmount total_value, unsigned int num_utxos, const CFeeRate& fee_rate)\n+{\n+    Assert(num_utxos > 0);\n+    unsigned int deniabilization_tx_size = CalculateDeniabilizationTxSize(shared_script, total_value, num_utxos);\n+    return fee_rate.GetFee(deniabilization_tx_size);\n+}\n+\n+CAmount CalculateDeniabilizationFeeEstimate(const CScript& shared_script, CAmount total_value, unsigned int num_utxos, unsigned int deniabilization_cycles, const CFeeRate& fee_rate)\n+{\n+    float deniabilizationProbability = CalculateDeniabilizationProbability(deniabilization_cycles);\n+    // convert to integer percent to truncate and check for zero probability\n+    unsigned int deniabilizationProbabilityPercent = deniabilizationProbability * 100;\n+    if (deniabilizationProbabilityPercent == 0) {\n+        return 0;\n+    }\n+\n+    // this cycle will use all the UTXOs, while following cycles will have just one UTXO\n+    CAmount deniabilizationFee = CalculateDeniabilizationTxFee(shared_script, total_value, num_utxos, fee_rate);\n+\n+    // calculate the fees from future deniabilization cycles\n+    CAmount futureDeniabilizationFee = CalculateDeniabilizationFeeEstimate(shared_script, total_value / NUM_DENIABILIZATION_OUTPUTS, 1, deniabilization_cycles + 1, fee_rate) * 2;",
      "path": "src/wallet/spend.cpp",
      "position": null,
      "original_position": 83,
      "commit_id": "8f72d4abe3ab4e4cbbe909694a1fd9d0a8f4a3bf",
      "original_commit_id": "c781cd8863bb12e60ce8905063c8041145db63ac",
      "in_reply_to_id": 1375451033,
      "user": {
        "login": "denavila",
        "id": 123340139,
        "node_id": "U_kgDOB1oFaw",
        "avatar_url": "https://avatars.githubusercontent.com/u/123340139?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/denavila",
        "html_url": "https://github.com/denavila",
        "followers_url": "https://api.github.com/users/denavila/followers",
        "following_url": "https://api.github.com/users/denavila/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/denavila/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/denavila/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/denavila/subscriptions",
        "organizations_url": "https://api.github.com/users/denavila/orgs",
        "repos_url": "https://api.github.com/users/denavila/repos",
        "events_url": "https://api.github.com/users/denavila/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/denavila/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Oh, that 2 probably needs to be NUM_DENIABILIZATION_OUTPUTS. Basically we calculate the future cycle cost for each of the chunks we split into. Each chunk should cost the same if the number of splits is the same, so we can calculate one chunk and multiply by the number of splits.\r\nThanks for spotting that. I'll fix it.",
      "created_at": "2023-10-30T01:11:56Z",
      "updated_at": "2023-10-30T01:11:57Z",
      "html_url": "https://github.com/bitcoin-core/gui/pull/733#discussion_r1375575224",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/gui/pulls/comments/1375575224"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/gui/pulls/733"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1474,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/gui/pulls/comments/1376523133",
      "pull_request_review_id": 1704625827,
      "id": 1376523133,
      "node_id": "PRRC_kwDOEEET9c5SDBN9",
      "diff_hunk": "@@ -1392,4 +1392,384 @@ bool FundTransaction(CWallet& wallet, CMutableTransaction& tx, CAmount& nFeeRet,\n \n     return true;\n }\n+\n+constexpr int NUM_DENIABILIZATION_OUTPUTS = 2;\n+\n+static unsigned int CalculateDeniabilizationTxSize(const CScript& script, CAmount value, unsigned int numTxIn)\n+{\n+    // Calculation based on the comments and code in GetDustThreshold and CreateTransactionInternal\n+    unsigned int txOutSize = (unsigned int)GetSerializeSize(CTxOut(value, script), PROTOCOL_VERSION);\n+\n+    const size_t txOutCount = NUM_DENIABILIZATION_OUTPUTS;\n+    unsigned int txSize = 10 + GetSizeOfCompactSize(txOutCount); // bytes for output count\n+    txSize += txOutSize * txOutCount;\n+\n+    int witnessversion = 0;\n+    std::vector<unsigned char> witnessprogram;\n+    if (script.IsWitnessProgram(witnessversion, witnessprogram)) {\n+        txSize += (unsigned int)(numTxIn * 67.75f + 0.5f);\n+    } else {\n+        txSize += numTxIn * 148;\n+    }\n+    return txSize;\n+}\n+\n+float CalculateDeniabilizationProbability(unsigned int deniabilization_cycles)\n+{\n+    // 100%, 50%, 25%, 13%, 6%, 3%, 2%, 1%\n+    return powf(0.5f, deniabilization_cycles);\n+}\n+\n+bool IsDeniabilizationWorthwhile(CAmount total_value, CAmount fee_estimate)\n+{\n+    constexpr CAmount value_to_fee_ratio = 10;\n+    return total_value > fee_estimate * value_to_fee_ratio;\n+}\n+\n+CCoinControl SetupDeniabilizationCoinControl(unsigned int confirm_target)\n+{\n+    CCoinControl coin_control;\n+    coin_control.m_avoid_address_reuse = true;\n+    coin_control.m_avoid_partial_spends = true;\n+    coin_control.m_allow_other_inputs = false;\n+    coin_control.m_signal_bip125_rbf = true;\n+    coin_control.m_confirm_target = confirm_target;\n+    // we'll automatically bump the fee if economical ends up not confirming by the next deniabilization cycle\n+    coin_control.m_fee_mode = FeeEstimateMode::ECONOMICAL;\n+    return coin_control;\n+}\n+\n+CFeeRate CalculateDeniabilizationFeeRate(const CWallet& wallet, unsigned int confirm_target)\n+{\n+    CCoinControl coin_control = SetupDeniabilizationCoinControl(confirm_target);\n+\n+    CFeeRate requiredFeeRate = GetRequiredFeeRate(wallet);\n+    FeeCalculation fee_calc;\n+    CFeeRate minFeeRate = GetMinimumFeeRate(wallet, coin_control, &fee_calc);\n+    if (fee_calc.reason == FeeReason::FALLBACK || requiredFeeRate > minFeeRate)\n+        return requiredFeeRate;\n+    return minFeeRate;\n+}\n+\n+static CAmount CalculateDeniabilizationTxFee(const CScript& shared_script, CAmount total_value, unsigned int num_utxos, const CFeeRate& fee_rate)\n+{\n+    Assert(num_utxos > 0);\n+    unsigned int deniabilization_tx_size = CalculateDeniabilizationTxSize(shared_script, total_value, num_utxos);\n+    return fee_rate.GetFee(deniabilization_tx_size);\n+}\n+\n+CAmount CalculateDeniabilizationFeeEstimate(const CScript& shared_script, CAmount total_value, unsigned int num_utxos, unsigned int deniabilization_cycles, const CFeeRate& fee_rate)\n+{\n+    float deniabilizationProbability = CalculateDeniabilizationProbability(deniabilization_cycles);\n+    // convert to integer percent to truncate and check for zero probability\n+    unsigned int deniabilizationProbabilityPercent = deniabilizationProbability * 100;\n+    if (deniabilizationProbabilityPercent == 0) {\n+        return 0;\n+    }\n+\n+    // this cycle will use all the UTXOs, while following cycles will have just one UTXO\n+    CAmount deniabilizationFee = CalculateDeniabilizationTxFee(shared_script, total_value, num_utxos, fee_rate);\n+\n+    // calculate the fees from future deniabilization cycles\n+    CAmount futureDeniabilizationFee = CalculateDeniabilizationFeeEstimate(shared_script, total_value / NUM_DENIABILIZATION_OUTPUTS, 1, deniabilization_cycles + 1, fee_rate) * 2;",
      "path": "src/wallet/spend.cpp",
      "position": null,
      "original_position": 83,
      "commit_id": "8f72d4abe3ab4e4cbbe909694a1fd9d0a8f4a3bf",
      "original_commit_id": "c781cd8863bb12e60ce8905063c8041145db63ac",
      "in_reply_to_id": 1375451033,
      "user": {
        "login": "katesalazar",
        "id": 52637275,
        "node_id": "MDQ6VXNlcjUyNjM3Mjc1",
        "avatar_url": "https://avatars.githubusercontent.com/u/52637275?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/katesalazar",
        "html_url": "https://github.com/katesalazar",
        "followers_url": "https://api.github.com/users/katesalazar/followers",
        "following_url": "https://api.github.com/users/katesalazar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/katesalazar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/katesalazar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/katesalazar/subscriptions",
        "organizations_url": "https://api.github.com/users/katesalazar/orgs",
        "repos_url": "https://api.github.com/users/katesalazar/repos",
        "events_url": "https://api.github.com/users/katesalazar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/katesalazar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "happpy to help",
      "created_at": "2023-10-30T16:42:54Z",
      "updated_at": "2023-10-30T16:42:55Z",
      "html_url": "https://github.com/bitcoin-core/gui/pull/733#discussion_r1376523133",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/gui/pulls/comments/1376523133"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/gui/pulls/733"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1474,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/gui/pulls/comments/1376527605",
      "pull_request_review_id": 1704632821,
      "id": 1376527605,
      "node_id": "PRRC_kwDOEEET9c5SDCT1",
      "diff_hunk": "@@ -1392,4 +1392,384 @@ bool FundTransaction(CWallet& wallet, CMutableTransaction& tx, CAmount& nFeeRet,\n \n     return true;\n }\n+\n+constexpr int NUM_DENIABILIZATION_OUTPUTS = 2;\n+\n+static unsigned int CalculateDeniabilizationTxSize(const CScript& script, CAmount value, unsigned int numTxIn)\n+{\n+    // Calculation based on the comments and code in GetDustThreshold and CreateTransactionInternal\n+    unsigned int txOutSize = (unsigned int)GetSerializeSize(CTxOut(value, script), PROTOCOL_VERSION);\n+\n+    const size_t txOutCount = NUM_DENIABILIZATION_OUTPUTS;\n+    unsigned int txSize = 10 + GetSizeOfCompactSize(txOutCount); // bytes for output count\n+    txSize += txOutSize * txOutCount;\n+\n+    int witnessversion = 0;\n+    std::vector<unsigned char> witnessprogram;\n+    if (script.IsWitnessProgram(witnessversion, witnessprogram)) {\n+        txSize += (unsigned int)(numTxIn * 67.75f + 0.5f);\n+    } else {\n+        txSize += numTxIn * 148;",
      "path": "src/wallet/spend.cpp",
      "position": null,
      "original_position": 21,
      "commit_id": "8f72d4abe3ab4e4cbbe909694a1fd9d0a8f4a3bf",
      "original_commit_id": "c781cd8863bb12e60ce8905063c8041145db63ac",
      "in_reply_to_id": 1375450923,
      "user": {
        "login": "katesalazar",
        "id": 52637275,
        "node_id": "MDQ6VXNlcjUyNjM3Mjc1",
        "avatar_url": "https://avatars.githubusercontent.com/u/52637275?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/katesalazar",
        "html_url": "https://github.com/katesalazar",
        "followers_url": "https://api.github.com/users/katesalazar/followers",
        "following_url": "https://api.github.com/users/katesalazar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/katesalazar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/katesalazar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/katesalazar/subscriptions",
        "organizations_url": "https://api.github.com/users/katesalazar/orgs",
        "repos_url": "https://api.github.com/users/katesalazar/repos",
        "events_url": "https://api.github.com/users/katesalazar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/katesalazar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "and/or simple one line comments could help clarify,\r\nI feel like named constant for magic number is a better strategy than commenting,\r\nbut maintainer should take final choice :thinking:",
      "created_at": "2023-10-30T16:46:28Z",
      "updated_at": "2023-10-30T16:46:28Z",
      "html_url": "https://github.com/bitcoin-core/gui/pull/733#discussion_r1376527605",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/gui/pulls/comments/1376527605"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/gui/pulls/733"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1412,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/gui/pulls/comments/1376531693",
      "pull_request_review_id": 1704638992,
      "id": 1376531693,
      "node_id": "PRRC_kwDOEEET9c5SDDTt",
      "diff_hunk": "@@ -1392,4 +1392,384 @@ bool FundTransaction(CWallet& wallet, CMutableTransaction& tx, CAmount& nFeeRet,\n \n     return true;\n }\n+\n+constexpr int NUM_DENIABILIZATION_OUTPUTS = 2;",
      "path": "src/wallet/spend.cpp",
      "position": 8,
      "original_position": 5,
      "commit_id": "8f72d4abe3ab4e4cbbe909694a1fd9d0a8f4a3bf",
      "original_commit_id": "c781cd8863bb12e60ce8905063c8041145db63ac",
      "in_reply_to_id": 1375450500,
      "user": {
        "login": "katesalazar",
        "id": 52637275,
        "node_id": "MDQ6VXNlcjUyNjM3Mjc1",
        "avatar_url": "https://avatars.githubusercontent.com/u/52637275?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/katesalazar",
        "html_url": "https://github.com/katesalazar",
        "followers_url": "https://api.github.com/users/katesalazar/followers",
        "following_url": "https://api.github.com/users/katesalazar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/katesalazar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/katesalazar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/katesalazar/subscriptions",
        "organizations_url": "https://api.github.com/users/katesalazar/orgs",
        "repos_url": "https://api.github.com/users/katesalazar/repos",
        "events_url": "https://api.github.com/users/katesalazar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/katesalazar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Maybe commenting the constant helps,\r\nmaybe best commented in some function,\r\nat the extremely minimum least I think such intrincacies should be commented in the commit message introducing either the constant or whatever function",
      "created_at": "2023-10-30T16:49:34Z",
      "updated_at": "2023-10-30T16:49:35Z",
      "html_url": "https://github.com/bitcoin-core/gui/pull/733#discussion_r1376531693",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/gui/pulls/comments/1376531693"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/gui/pulls/733"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1427,
      "original_line": 1427,
      "side": "RIGHT"
    }
  ]
}