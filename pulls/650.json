{
  "type": "pull",
  "pull": {
    "url": "https://api.github.com/repos/bitcoin-core/gui/pulls/650",
    "id": 1020574995,
    "node_id": "PR_kwDOEEET9c481L0T",
    "html_url": "https://github.com/bitcoin-core/gui/pull/650",
    "diff_url": "https://github.com/bitcoin-core/gui/pull/650.diff",
    "patch_url": "https://github.com/bitcoin-core/gui/pull/650.patch",
    "issue_url": "https://api.github.com/repos/bitcoin-core/gui/issues/650",
    "commits_url": "https://api.github.com/repos/bitcoin-core/gui/pulls/650/commits",
    "review_comments_url": "https://api.github.com/repos/bitcoin-core/gui/pulls/650/comments",
    "review_comment_url": "https://api.github.com/repos/bitcoin-core/gui/pulls/comments%7B/number%7D",
    "comments_url": "https://api.github.com/repos/bitcoin-core/gui/issues/650/comments",
    "statuses_url": "https://api.github.com/repos/bitcoin-core/gui/statuses/b2b00af1d37dd69c3e64d905984e68ac6a6b2d8f",
    "number": 650,
    "state": "closed",
    "locked": true,
    "maintainer_can_modify": false,
    "title": "Add Import to Wallet GUI",
    "user": {
      "login": "KolbyML",
      "id": 31669092,
      "node_id": "MDQ6VXNlcjMxNjY5MDky",
      "avatar_url": "https://avatars.githubusercontent.com/u/31669092?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/KolbyML",
      "html_url": "https://github.com/KolbyML",
      "followers_url": "https://api.github.com/users/KolbyML/followers",
      "following_url": "https://api.github.com/users/KolbyML/following%7B/other_user%7D",
      "gists_url": "https://api.github.com/users/KolbyML/gists%7B/gist_id%7D",
      "starred_url": "https://api.github.com/users/KolbyML/starred%7B/owner%7D%7B/repo%7D",
      "subscriptions_url": "https://api.github.com/users/KolbyML/subscriptions",
      "organizations_url": "https://api.github.com/users/KolbyML/orgs",
      "repos_url": "https://api.github.com/users/KolbyML/repos",
      "events_url": "https://api.github.com/users/KolbyML/events%7B/privacy%7D",
      "received_events_url": "https://api.github.com/users/KolbyML/received_events",
      "type": "User",
      "site_admin": false,
      "patch_url": null
    },
    "body": "resolves #19 \r\n\r\nThis PR does a few things\r\n- Refactors importmulti and importdescripters RPC code\r\n- Adds functions to interfaces\r\n- Adds GUI's for importpubkey, importprivkey, importaddress, importmulti, and importdescriptors RPCs\r\n- Adds QT Tests for all 5 import GUI's\r\n\r\n#### Things to get this merged\r\n- [ ] get the refactor merge on https://github.com/bitcoin/bitcoin/pull/26840\r\n- [ ] after that is done I will split the GUI PR into (importpubkey, importprivkey, importaddress), importmulti, importdescriptors each PR will have its respective tests. I will rebase to remove the commit for the refactor in those PR's it is in this PR so people can test. This is for easier code review\r\n\r\nThe dialogs are located under File -> Import to Wallet...\r\nThe options vary based on what is supported with your specific wallet type.\r\n\r\n| Dialogs are Located  |  Import Public Key Dialog  |\r\n|---|---|\r\n| ![image](https://user-images.githubusercontent.com/31669092/183477017-0423b0db-f84c-4729-9a73-b47544d88aaf.png)  | ![image](https://user-images.githubusercontent.com/31669092/183477129-0c212955-bbf3-4bc9-8089-cf2c1da7644d.png)  |\r\n\r\n| Import Private Key Dialog  | Import Address Dialog  |\r\n|---|---|\r\n|![image](https://user-images.githubusercontent.com/31669092/183477391-84ea6224-e7f5-4fba-a830-2e7fe3effcec.png)   |  ![image](https://user-images.githubusercontent.com/31669092/183477525-c3ba8cdc-ae0f-4113-8e0b-86db548f1e33.png) |\r\n\r\n| Import Multi Dialog scriptPubKey Tab  | Import Multi Dialog Descriptor Tab  |\r\n|---|---|\r\n| ![image](https://user-images.githubusercontent.com/31669092/183477928-232be9c4-fd64-4a20-91ba-00ebe41d66a6.png)  | ![image](https://user-images.githubusercontent.com/31669092/183478127-0b3c8aed-54d9-4fb4-a583-0a6bb5a46d28.png)  |\r\n\r\n|  Import Descriptors Dialog  |\r\n|---|\r\n|  ![image](https://user-images.githubusercontent.com/31669092/183478374-7f9c174d-0067-4812-9556-9e34e813b362.png) |\r\n\r\nFor Range before I had a lineedit with placeholders begin and end, @achow101 suggested I used QSpinBox, but it doesn't have placeholder text. So Currently if both are default value it counts as no input. It would look very nice if I implemented a custom QAbstractSpinBox with placeholder text, but I am not sure if it is overkill for this PR.",
    "labels": [
      {
        "id": 2145506980,
        "node_id": "MDU6TGFiZWwyMTQ1NTA2OTgw",
        "url": "https://api.github.com/repos/bitcoin-core/gui/labels/Needs%20rebase",
        "name": "Needs rebase",
        "description": "",
        "color": "cccccc",
        "default": false
      },
      {
        "id": 2335257565,
        "node_id": "MDU6TGFiZWwyMzM1MjU3NTY1",
        "url": "https://api.github.com/repos/bitcoin-core/gui/labels/Up%20for%20grabs",
        "name": "Up for grabs",
        "description": "",
        "color": "99a810",
        "default": false
      },
      {
        "id": 2927906211,
        "node_id": "MDU6TGFiZWwyOTI3OTA2MjEx",
        "url": "https://api.github.com/repos/bitcoin-core/gui/labels/Wallet",
        "name": "Wallet",
        "description": "",
        "color": "08a781",
        "default": false
      },
      {
        "id": 5353934559,
        "node_id": "LA_kwDOEEET9c8AAAABPx6O3w",
        "url": "https://api.github.com/repos/bitcoin-core/gui/labels/CI%20failed",
        "name": "CI failed",
        "color": "ededed",
        "default": false
      }
    ],
    "created_at": "2022-08-08T17:43:21Z",
    "updated_at": "2025-03-22T07:40:36Z",
    "closed_at": "2024-03-20T00:37:27Z",
    "mergeable": false,
    "mergeable_state": "dirty",
    "merged": false,
    "merge_commit_sha": "7ec595ff2e22059396d8c443ff8df52f11bb0269",
    "assignees": [],
    "requested_reviewers": [],
    "requested_teams": [],
    "rebaseable": false,
    "head": {
      "label": "KolbyML:import-gui-k",
      "ref": "import-gui-k",
      "sha": "b2b00af1d37dd69c3e64d905984e68ac6a6b2d8f",
      "user": {
        "login": "KolbyML",
        "id": 31669092,
        "node_id": "MDQ6VXNlcjMxNjY5MDky",
        "avatar_url": "https://avatars.githubusercontent.com/u/31669092?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/KolbyML",
        "html_url": "https://github.com/KolbyML",
        "followers_url": "https://api.github.com/users/KolbyML/followers",
        "following_url": "https://api.github.com/users/KolbyML/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/KolbyML/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/KolbyML/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/KolbyML/subscriptions",
        "organizations_url": "https://api.github.com/users/KolbyML/orgs",
        "repos_url": "https://api.github.com/users/KolbyML/repos",
        "events_url": "https://api.github.com/users/KolbyML/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/KolbyML/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "repo": {
        "id": 522632822,
        "node_id": "R_kgDOHya-dg",
        "name": "gui",
        "full_name": "KolbyML/gui",
        "owner": {
          "login": "KolbyML",
          "id": 31669092,
          "node_id": "MDQ6VXNlcjMxNjY5MDky",
          "avatar_url": "https://avatars.githubusercontent.com/u/31669092?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/KolbyML",
          "html_url": "https://github.com/KolbyML",
          "followers_url": "https://api.github.com/users/KolbyML/followers",
          "following_url": "https://api.github.com/users/KolbyML/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/KolbyML/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/KolbyML/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/KolbyML/subscriptions",
          "organizations_url": "https://api.github.com/users/KolbyML/orgs",
          "repos_url": "https://api.github.com/users/KolbyML/repos",
          "events_url": "https://api.github.com/users/KolbyML/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/KolbyML/received_events",
          "type": "User",
          "site_admin": false,
          "patch_url": null
        },
        "private": false,
        "html_url": "https://github.com/KolbyML/gui",
        "description": "Bitcoin Core GUI staging repository",
        "fork": true,
        "url": "https://api.github.com/repos/KolbyML/gui",
        "archive_url": "https://api.github.com/repos/KolbyML/gui/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/KolbyML/gui/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/KolbyML/gui/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/KolbyML/gui/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/KolbyML/gui/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/KolbyML/gui/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/KolbyML/gui/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/KolbyML/gui/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/KolbyML/gui/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/KolbyML/gui/contributors",
        "deployments_url": "https://api.github.com/repos/KolbyML/gui/deployments",
        "downloads_url": "https://api.github.com/repos/KolbyML/gui/downloads",
        "events_url": "https://api.github.com/repos/KolbyML/gui/events",
        "forks_url": "https://api.github.com/repos/KolbyML/gui/forks",
        "git_commits_url": "https://api.github.com/repos/KolbyML/gui/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/KolbyML/gui/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/KolbyML/gui/git/tags%7B/sha%7D",
        "git_url": "git://github.com/KolbyML/gui.git",
        "issue_comment_url": "https://api.github.com/repos/KolbyML/gui/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/KolbyML/gui/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/KolbyML/gui/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/KolbyML/gui/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/KolbyML/gui/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/KolbyML/gui/languages",
        "merges_url": "https://api.github.com/repos/KolbyML/gui/merges",
        "milestones_url": "https://api.github.com/repos/KolbyML/gui/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/KolbyML/gui/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/KolbyML/gui/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/KolbyML/gui/releases%7B/id%7D",
        "ssh_url": "git@github.com:KolbyML/gui.git",
        "stargazers_url": "https://api.github.com/repos/KolbyML/gui/stargazers",
        "statuses_url": "https://api.github.com/repos/KolbyML/gui/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/KolbyML/gui/subscribers",
        "subscription_url": "https://api.github.com/repos/KolbyML/gui/subscription",
        "tags_url": "https://api.github.com/repos/KolbyML/gui/tags",
        "teams_url": "https://api.github.com/repos/KolbyML/gui/teams",
        "trees_url": "https://api.github.com/repos/KolbyML/gui/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/KolbyML/gui.git",
        "hooks_url": "https://api.github.com/repos/KolbyML/gui/hooks",
        "svn_url": "https://github.com/KolbyML/gui",
        "homepage": "https://github.com/bitcoin/bitcoin",
        "language": "C++",
        "forks_count": 0,
        "stargazers_count": 0,
        "watchers_count": 0,
        "size": 146642,
        "default_branch": "master",
        "open_issues_count": 0,
        "is_template": false,
        "topics": [],
        "has_issues": false,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": true,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2023-05-18T18:36:55Z",
        "created_at": "2022-08-08T16:48:44Z",
        "updated_at": "2023-01-25T15:04:20Z",
        "allow_forking": true,
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "base": {
      "label": "bitcoin-core:master",
      "ref": "master",
      "sha": "6cc136bbd36f859a16e469bb5c016d06c19bcd50",
      "user": {
        "login": "bitcoin-core",
        "id": 13464320,
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjEzNDY0MzIw",
        "avatar_url": "https://avatars.githubusercontent.com/u/13464320?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitcoin-core",
        "html_url": "https://github.com/bitcoin-core",
        "followers_url": "https://api.github.com/users/bitcoin-core/followers",
        "following_url": "https://api.github.com/users/bitcoin-core/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bitcoin-core/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bitcoin-core/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bitcoin-core/subscriptions",
        "organizations_url": "https://api.github.com/users/bitcoin-core/orgs",
        "repos_url": "https://api.github.com/users/bitcoin-core/repos",
        "events_url": "https://api.github.com/users/bitcoin-core/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bitcoin-core/received_events",
        "type": "Organization",
        "site_admin": false,
        "patch_url": null
      },
      "repo": {
        "id": 272700405,
        "node_id": "MDEwOlJlcG9zaXRvcnkyNzI3MDA0MDU=",
        "name": "gui",
        "full_name": "bitcoin-core/gui",
        "owner": {
          "login": "bitcoin-core",
          "id": 13464320,
          "node_id": "MDEyOk9yZ2FuaXphdGlvbjEzNDY0MzIw",
          "avatar_url": "https://avatars.githubusercontent.com/u/13464320?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/bitcoin-core",
          "html_url": "https://github.com/bitcoin-core",
          "followers_url": "https://api.github.com/users/bitcoin-core/followers",
          "following_url": "https://api.github.com/users/bitcoin-core/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/bitcoin-core/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/bitcoin-core/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/bitcoin-core/subscriptions",
          "organizations_url": "https://api.github.com/users/bitcoin-core/orgs",
          "repos_url": "https://api.github.com/users/bitcoin-core/repos",
          "events_url": "https://api.github.com/users/bitcoin-core/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/bitcoin-core/received_events",
          "type": "Organization",
          "site_admin": false,
          "patch_url": null
        },
        "private": false,
        "html_url": "https://github.com/bitcoin-core/gui",
        "description": "Bitcoin Core GUI staging repository",
        "fork": false,
        "url": "https://api.github.com/repos/bitcoin-core/gui",
        "archive_url": "https://api.github.com/repos/bitcoin-core/gui/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/bitcoin-core/gui/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/bitcoin-core/gui/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/bitcoin-core/gui/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/bitcoin-core/gui/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/bitcoin-core/gui/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/bitcoin-core/gui/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/bitcoin-core/gui/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/bitcoin-core/gui/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/bitcoin-core/gui/contributors",
        "deployments_url": "https://api.github.com/repos/bitcoin-core/gui/deployments",
        "downloads_url": "https://api.github.com/repos/bitcoin-core/gui/downloads",
        "events_url": "https://api.github.com/repos/bitcoin-core/gui/events",
        "forks_url": "https://api.github.com/repos/bitcoin-core/gui/forks",
        "git_commits_url": "https://api.github.com/repos/bitcoin-core/gui/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/bitcoin-core/gui/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/bitcoin-core/gui/git/tags%7B/sha%7D",
        "git_url": "git://github.com/bitcoin-core/gui.git",
        "issue_comment_url": "https://api.github.com/repos/bitcoin-core/gui/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/bitcoin-core/gui/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/bitcoin-core/gui/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/bitcoin-core/gui/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/bitcoin-core/gui/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/bitcoin-core/gui/languages",
        "merges_url": "https://api.github.com/repos/bitcoin-core/gui/merges",
        "milestones_url": "https://api.github.com/repos/bitcoin-core/gui/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/bitcoin-core/gui/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/bitcoin-core/gui/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/bitcoin-core/gui/releases%7B/id%7D",
        "ssh_url": "git@github.com:bitcoin-core/gui.git",
        "stargazers_url": "https://api.github.com/repos/bitcoin-core/gui/stargazers",
        "statuses_url": "https://api.github.com/repos/bitcoin-core/gui/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/bitcoin-core/gui/subscribers",
        "subscription_url": "https://api.github.com/repos/bitcoin-core/gui/subscription",
        "tags_url": "https://api.github.com/repos/bitcoin-core/gui/tags",
        "teams_url": "https://api.github.com/repos/bitcoin-core/gui/teams",
        "trees_url": "https://api.github.com/repos/bitcoin-core/gui/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/bitcoin-core/gui.git",
        "hooks_url": "https://api.github.com/repos/bitcoin-core/gui/hooks",
        "svn_url": "https://github.com/bitcoin-core/gui",
        "homepage": "https://github.com/bitcoin/bitcoin",
        "language": "C++",
        "forks_count": 287,
        "stargazers_count": 634,
        "watchers_count": 634,
        "size": 168124,
        "default_branch": "master",
        "open_issues_count": 151,
        "is_template": false,
        "topics": [],
        "has_issues": true,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": true,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2025-03-22T03:12:30Z",
        "created_at": "2020-06-16T12:20:07Z",
        "updated_at": "2025-03-22T03:12:34Z",
        "allow_forking": true,
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin-core/gui/pulls/650"
      }
    },
    "author_association": "CONTRIBUTOR",
    "draft": true,
    "additions": 4395,
    "deletions": 626,
    "changed_files": 31,
    "commits": 7,
    "review_comments": 40,
    "comments": 14
  },
  "events": [
    {
      "event": "mentioned",
      "id": 7149081452,
      "node_id": "MEE_lADOEEET9c5PZ5y9zwAAAAGqHlNs",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/7149081452",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-08T17:43:22Z"
    },
    {
      "event": "subscribed",
      "id": 7149081457,
      "node_id": "SE_lADOEEET9c5PZ5y9zwAAAAGqHlNx",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/7149081457",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-08T17:43:22Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7149271471,
      "node_id": "HRFPE_lADOEEET9c5PZ5y9zwAAAAGqITmv",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/7149271471",
      "actor": {
        "login": "KolbyML",
        "id": 31669092,
        "node_id": "MDQ6VXNlcjMxNjY5MDky",
        "avatar_url": "https://avatars.githubusercontent.com/u/31669092?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/KolbyML",
        "html_url": "https://github.com/KolbyML",
        "followers_url": "https://api.github.com/users/KolbyML/followers",
        "following_url": "https://api.github.com/users/KolbyML/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/KolbyML/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/KolbyML/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/KolbyML/subscriptions",
        "organizations_url": "https://api.github.com/users/KolbyML/orgs",
        "repos_url": "https://api.github.com/users/KolbyML/repos",
        "events_url": "https://api.github.com/users/KolbyML/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/KolbyML/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "407e5254dc264b6990d1bc71f950364ddcfb0ec1",
      "commit_url": "https://api.github.com/repos/KolbyML/gui/commits/407e5254dc264b6990d1bc71f950364ddcfb0ec1",
      "created_at": "2022-08-08T18:13:26Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7149338097,
      "node_id": "HRFPE_lADOEEET9c5PZ5y9zwAAAAGqIj3x",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/7149338097",
      "actor": {
        "login": "KolbyML",
        "id": 31669092,
        "node_id": "MDQ6VXNlcjMxNjY5MDky",
        "avatar_url": "https://avatars.githubusercontent.com/u/31669092?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/KolbyML",
        "html_url": "https://github.com/KolbyML",
        "followers_url": "https://api.github.com/users/KolbyML/followers",
        "following_url": "https://api.github.com/users/KolbyML/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/KolbyML/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/KolbyML/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/KolbyML/subscriptions",
        "organizations_url": "https://api.github.com/users/KolbyML/orgs",
        "repos_url": "https://api.github.com/users/KolbyML/repos",
        "events_url": "https://api.github.com/users/KolbyML/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/KolbyML/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "03fef89994df52e9ddeff0258f31ff21b3addb4b",
      "commit_url": "https://api.github.com/repos/KolbyML/gui/commits/03fef89994df52e9ddeff0258f31ff21b3addb4b",
      "created_at": "2022-08-08T18:23:28Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7149583149,
      "node_id": "HRFPE_lADOEEET9c5PZ5y9zwAAAAGqJfst",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/7149583149",
      "actor": {
        "login": "KolbyML",
        "id": 31669092,
        "node_id": "MDQ6VXNlcjMxNjY5MDky",
        "avatar_url": "https://avatars.githubusercontent.com/u/31669092?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/KolbyML",
        "html_url": "https://github.com/KolbyML",
        "followers_url": "https://api.github.com/users/KolbyML/followers",
        "following_url": "https://api.github.com/users/KolbyML/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/KolbyML/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/KolbyML/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/KolbyML/subscriptions",
        "organizations_url": "https://api.github.com/users/KolbyML/orgs",
        "repos_url": "https://api.github.com/users/KolbyML/repos",
        "events_url": "https://api.github.com/users/KolbyML/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/KolbyML/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "c71f418f18000f537871f57a42ec76e0a25941e9",
      "commit_url": "https://api.github.com/repos/KolbyML/gui/commits/c71f418f18000f537871f57a42ec76e0a25941e9",
      "created_at": "2022-08-08T19:00:57Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7150091459,
      "node_id": "HRFPE_lADOEEET9c5PZ5y9zwAAAAGqLbzD",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/7150091459",
      "actor": {
        "login": "KolbyML",
        "id": 31669092,
        "node_id": "MDQ6VXNlcjMxNjY5MDky",
        "avatar_url": "https://avatars.githubusercontent.com/u/31669092?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/KolbyML",
        "html_url": "https://github.com/KolbyML",
        "followers_url": "https://api.github.com/users/KolbyML/followers",
        "following_url": "https://api.github.com/users/KolbyML/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/KolbyML/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/KolbyML/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/KolbyML/subscriptions",
        "organizations_url": "https://api.github.com/users/KolbyML/orgs",
        "repos_url": "https://api.github.com/users/KolbyML/repos",
        "events_url": "https://api.github.com/users/KolbyML/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/KolbyML/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "adf1a83caf37b04bfd6c86179b7121ca62d14055",
      "commit_url": "https://api.github.com/repos/KolbyML/gui/commits/adf1a83caf37b04bfd6c86179b7121ca62d14055",
      "created_at": "2022-08-08T20:21:57Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7150214543,
      "node_id": "HRFPE_lADOEEET9c5PZ5y9zwAAAAGqL52P",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/7150214543",
      "actor": {
        "login": "KolbyML",
        "id": 31669092,
        "node_id": "MDQ6VXNlcjMxNjY5MDky",
        "avatar_url": "https://avatars.githubusercontent.com/u/31669092?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/KolbyML",
        "html_url": "https://github.com/KolbyML",
        "followers_url": "https://api.github.com/users/KolbyML/followers",
        "following_url": "https://api.github.com/users/KolbyML/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/KolbyML/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/KolbyML/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/KolbyML/subscriptions",
        "organizations_url": "https://api.github.com/users/KolbyML/orgs",
        "repos_url": "https://api.github.com/users/KolbyML/repos",
        "events_url": "https://api.github.com/users/KolbyML/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/KolbyML/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "46fea2598202b093c2035276b232e0f94c7e869f",
      "commit_url": "https://api.github.com/repos/KolbyML/gui/commits/46fea2598202b093c2035276b232e0f94c7e869f",
      "created_at": "2022-08-08T20:43:14Z"
    },
    {
      "event": "reviewed",
      "id": 1065661283,
      "node_id": "PRR_kwDOEEET9c4_hLNj",
      "url": null,
      "actor": null,
      "commit_id": "46fea2598202b093c2035276b232e0f94c7e869f",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "While the imports mostly work, I noticed that there is no feedback when it is successful. What I expected to happen was a dialog indicating success, and then the import dialog would close itself too.\r\n\r\nI think you should also look into adapting a couple of the importmulti tests to be GUI unit tests that can test these new dialogs. It would be very helpful to have some automated testing of all of the things here rather than trying to do it by hand.\r\n\r\nNote: @KolbyML is my Summer of Bitcoin mentee.",
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin-core/gui/pull/650#pullrequestreview-1065661283",
      "submitted_at": "2022-08-08T20:56:15Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin-core/gui/pulls/650"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7150286182,
      "node_id": "HRFPE_lADOEEET9c5PZ5y9zwAAAAGqMLVm",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/7150286182",
      "actor": {
        "login": "KolbyML",
        "id": 31669092,
        "node_id": "MDQ6VXNlcjMxNjY5MDky",
        "avatar_url": "https://avatars.githubusercontent.com/u/31669092?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/KolbyML",
        "html_url": "https://github.com/KolbyML",
        "followers_url": "https://api.github.com/users/KolbyML/followers",
        "following_url": "https://api.github.com/users/KolbyML/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/KolbyML/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/KolbyML/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/KolbyML/subscriptions",
        "organizations_url": "https://api.github.com/users/KolbyML/orgs",
        "repos_url": "https://api.github.com/users/KolbyML/repos",
        "events_url": "https://api.github.com/users/KolbyML/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/KolbyML/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "eafb2c87892f7e5405d191d2d0ea6faec3077189",
      "commit_url": "https://api.github.com/repos/KolbyML/gui/commits/eafb2c87892f7e5405d191d2d0ea6faec3077189",
      "created_at": "2022-08-08T20:56:38Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7150359809,
      "node_id": "HRFPE_lADOEEET9c5PZ5y9zwAAAAGqMdUB",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/7150359809",
      "actor": {
        "login": "KolbyML",
        "id": 31669092,
        "node_id": "MDQ6VXNlcjMxNjY5MDky",
        "avatar_url": "https://avatars.githubusercontent.com/u/31669092?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/KolbyML",
        "html_url": "https://github.com/KolbyML",
        "followers_url": "https://api.github.com/users/KolbyML/followers",
        "following_url": "https://api.github.com/users/KolbyML/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/KolbyML/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/KolbyML/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/KolbyML/subscriptions",
        "organizations_url": "https://api.github.com/users/KolbyML/orgs",
        "repos_url": "https://api.github.com/users/KolbyML/repos",
        "events_url": "https://api.github.com/users/KolbyML/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/KolbyML/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "21704471708c0d86163cfa47f8708e486d53e89c",
      "commit_url": "https://api.github.com/repos/KolbyML/gui/commits/21704471708c0d86163cfa47f8708e486d53e89c",
      "created_at": "2022-08-08T21:09:33Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7150576682,
      "node_id": "HRFPE_lADOEEET9c5PZ5y9zwAAAAGqNSQq",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/7150576682",
      "actor": {
        "login": "KolbyML",
        "id": 31669092,
        "node_id": "MDQ6VXNlcjMxNjY5MDky",
        "avatar_url": "https://avatars.githubusercontent.com/u/31669092?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/KolbyML",
        "html_url": "https://github.com/KolbyML",
        "followers_url": "https://api.github.com/users/KolbyML/followers",
        "following_url": "https://api.github.com/users/KolbyML/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/KolbyML/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/KolbyML/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/KolbyML/subscriptions",
        "organizations_url": "https://api.github.com/users/KolbyML/orgs",
        "repos_url": "https://api.github.com/users/KolbyML/repos",
        "events_url": "https://api.github.com/users/KolbyML/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/KolbyML/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "815a9bc1a43411c4dfcfbc54d171628d5088d8d2",
      "commit_url": "https://api.github.com/repos/KolbyML/gui/commits/815a9bc1a43411c4dfcfbc54d171628d5088d8d2",
      "created_at": "2022-08-08T21:50:04Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7150583550,
      "node_id": "HRFPE_lADOEEET9c5PZ5y9zwAAAAGqNT7-",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/7150583550",
      "actor": {
        "login": "KolbyML",
        "id": 31669092,
        "node_id": "MDQ6VXNlcjMxNjY5MDky",
        "avatar_url": "https://avatars.githubusercontent.com/u/31669092?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/KolbyML",
        "html_url": "https://github.com/KolbyML",
        "followers_url": "https://api.github.com/users/KolbyML/followers",
        "following_url": "https://api.github.com/users/KolbyML/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/KolbyML/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/KolbyML/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/KolbyML/subscriptions",
        "organizations_url": "https://api.github.com/users/KolbyML/orgs",
        "repos_url": "https://api.github.com/users/KolbyML/repos",
        "events_url": "https://api.github.com/users/KolbyML/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/KolbyML/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "e9cde2479dcaddbc4b585e3f9be087d3c20dc441",
      "commit_url": "https://api.github.com/repos/KolbyML/gui/commits/e9cde2479dcaddbc4b585e3f9be087d3c20dc441",
      "created_at": "2022-08-08T21:51:22Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7150733876,
      "node_id": "HRFPE_lADOEEET9c5PZ5y9zwAAAAGqN4o0",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/7150733876",
      "actor": {
        "login": "KolbyML",
        "id": 31669092,
        "node_id": "MDQ6VXNlcjMxNjY5MDky",
        "avatar_url": "https://avatars.githubusercontent.com/u/31669092?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/KolbyML",
        "html_url": "https://github.com/KolbyML",
        "followers_url": "https://api.github.com/users/KolbyML/followers",
        "following_url": "https://api.github.com/users/KolbyML/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/KolbyML/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/KolbyML/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/KolbyML/subscriptions",
        "organizations_url": "https://api.github.com/users/KolbyML/orgs",
        "repos_url": "https://api.github.com/users/KolbyML/repos",
        "events_url": "https://api.github.com/users/KolbyML/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/KolbyML/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "996ee74d2c5fa7169b32e69fc36f64247c226c51",
      "commit_url": "https://api.github.com/repos/KolbyML/gui/commits/996ee74d2c5fa7169b32e69fc36f64247c226c51",
      "created_at": "2022-08-08T22:23:01Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7150812769,
      "node_id": "HRFPE_lADOEEET9c5PZ5y9zwAAAAGqOL5h",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/7150812769",
      "actor": {
        "login": "KolbyML",
        "id": 31669092,
        "node_id": "MDQ6VXNlcjMxNjY5MDky",
        "avatar_url": "https://avatars.githubusercontent.com/u/31669092?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/KolbyML",
        "html_url": "https://github.com/KolbyML",
        "followers_url": "https://api.github.com/users/KolbyML/followers",
        "following_url": "https://api.github.com/users/KolbyML/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/KolbyML/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/KolbyML/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/KolbyML/subscriptions",
        "organizations_url": "https://api.github.com/users/KolbyML/orgs",
        "repos_url": "https://api.github.com/users/KolbyML/repos",
        "events_url": "https://api.github.com/users/KolbyML/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/KolbyML/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "36718ca0e8698e0d3812385a5718335cad2740ba",
      "commit_url": "https://api.github.com/repos/KolbyML/gui/commits/36718ca0e8698e0d3812385a5718335cad2740ba",
      "created_at": "2022-08-08T22:39:04Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7150893568,
      "node_id": "HRFPE_lADOEEET9c5PZ5y9zwAAAAGqOfoA",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/7150893568",
      "actor": {
        "login": "KolbyML",
        "id": 31669092,
        "node_id": "MDQ6VXNlcjMxNjY5MDky",
        "avatar_url": "https://avatars.githubusercontent.com/u/31669092?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/KolbyML",
        "html_url": "https://github.com/KolbyML",
        "followers_url": "https://api.github.com/users/KolbyML/followers",
        "following_url": "https://api.github.com/users/KolbyML/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/KolbyML/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/KolbyML/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/KolbyML/subscriptions",
        "organizations_url": "https://api.github.com/users/KolbyML/orgs",
        "repos_url": "https://api.github.com/users/KolbyML/repos",
        "events_url": "https://api.github.com/users/KolbyML/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/KolbyML/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "171e3ec8920eb95fdd1ca9a64cb7f12084b03a0d",
      "commit_url": "https://api.github.com/repos/KolbyML/gui/commits/171e3ec8920eb95fdd1ca9a64cb7f12084b03a0d",
      "created_at": "2022-08-08T22:58:58Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7158036169,
      "node_id": "HRFPE_lADOEEET9c5PZ5y9zwAAAAGqpvbJ",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/7158036169",
      "actor": {
        "login": "KolbyML",
        "id": 31669092,
        "node_id": "MDQ6VXNlcjMxNjY5MDky",
        "avatar_url": "https://avatars.githubusercontent.com/u/31669092?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/KolbyML",
        "html_url": "https://github.com/KolbyML",
        "followers_url": "https://api.github.com/users/KolbyML/followers",
        "following_url": "https://api.github.com/users/KolbyML/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/KolbyML/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/KolbyML/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/KolbyML/subscriptions",
        "organizations_url": "https://api.github.com/users/KolbyML/orgs",
        "repos_url": "https://api.github.com/users/KolbyML/repos",
        "events_url": "https://api.github.com/users/KolbyML/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/KolbyML/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "bf78e6b58c811c3bc52d18908c254f30e57537af",
      "commit_url": "https://api.github.com/repos/KolbyML/gui/commits/bf78e6b58c811c3bc52d18908c254f30e57537af",
      "created_at": "2022-08-09T18:42:49Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7158046441,
      "node_id": "HRFPE_lADOEEET9c5PZ5y9zwAAAAGqpx7p",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/7158046441",
      "actor": {
        "login": "KolbyML",
        "id": 31669092,
        "node_id": "MDQ6VXNlcjMxNjY5MDky",
        "avatar_url": "https://avatars.githubusercontent.com/u/31669092?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/KolbyML",
        "html_url": "https://github.com/KolbyML",
        "followers_url": "https://api.github.com/users/KolbyML/followers",
        "following_url": "https://api.github.com/users/KolbyML/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/KolbyML/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/KolbyML/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/KolbyML/subscriptions",
        "organizations_url": "https://api.github.com/users/KolbyML/orgs",
        "repos_url": "https://api.github.com/users/KolbyML/repos",
        "events_url": "https://api.github.com/users/KolbyML/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/KolbyML/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "a7f3c84216a5db3b7561fb23583f733ef344bcbe",
      "commit_url": "https://api.github.com/repos/KolbyML/gui/commits/a7f3c84216a5db3b7561fb23583f733ef344bcbe",
      "created_at": "2022-08-09T18:44:32Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7158056289,
      "node_id": "HRFPE_lADOEEET9c5PZ5y9zwAAAAGqp0Vh",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/7158056289",
      "actor": {
        "login": "KolbyML",
        "id": 31669092,
        "node_id": "MDQ6VXNlcjMxNjY5MDky",
        "avatar_url": "https://avatars.githubusercontent.com/u/31669092?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/KolbyML",
        "html_url": "https://github.com/KolbyML",
        "followers_url": "https://api.github.com/users/KolbyML/followers",
        "following_url": "https://api.github.com/users/KolbyML/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/KolbyML/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/KolbyML/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/KolbyML/subscriptions",
        "organizations_url": "https://api.github.com/users/KolbyML/orgs",
        "repos_url": "https://api.github.com/users/KolbyML/repos",
        "events_url": "https://api.github.com/users/KolbyML/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/KolbyML/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "4511a1597ce18e7a14b70378087b9fad06f45ee0",
      "commit_url": "https://api.github.com/repos/KolbyML/gui/commits/4511a1597ce18e7a14b70378087b9fad06f45ee0",
      "created_at": "2022-08-09T18:46:11Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7158071257,
      "node_id": "HRFPE_lADOEEET9c5PZ5y9zwAAAAGqp3_Z",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/7158071257",
      "actor": {
        "login": "KolbyML",
        "id": 31669092,
        "node_id": "MDQ6VXNlcjMxNjY5MDky",
        "avatar_url": "https://avatars.githubusercontent.com/u/31669092?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/KolbyML",
        "html_url": "https://github.com/KolbyML",
        "followers_url": "https://api.github.com/users/KolbyML/followers",
        "following_url": "https://api.github.com/users/KolbyML/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/KolbyML/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/KolbyML/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/KolbyML/subscriptions",
        "organizations_url": "https://api.github.com/users/KolbyML/orgs",
        "repos_url": "https://api.github.com/users/KolbyML/repos",
        "events_url": "https://api.github.com/users/KolbyML/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/KolbyML/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "ec80b0e6632e3941b439de12c7df715a27c21a1b",
      "commit_url": "https://api.github.com/repos/KolbyML/gui/commits/ec80b0e6632e3941b439de12c7df715a27c21a1b",
      "created_at": "2022-08-09T18:48:33Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7158102128,
      "node_id": "HRFPE_lADOEEET9c5PZ5y9zwAAAAGqp_hw",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/7158102128",
      "actor": {
        "login": "KolbyML",
        "id": 31669092,
        "node_id": "MDQ6VXNlcjMxNjY5MDky",
        "avatar_url": "https://avatars.githubusercontent.com/u/31669092?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/KolbyML",
        "html_url": "https://github.com/KolbyML",
        "followers_url": "https://api.github.com/users/KolbyML/followers",
        "following_url": "https://api.github.com/users/KolbyML/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/KolbyML/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/KolbyML/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/KolbyML/subscriptions",
        "organizations_url": "https://api.github.com/users/KolbyML/orgs",
        "repos_url": "https://api.github.com/users/KolbyML/repos",
        "events_url": "https://api.github.com/users/KolbyML/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/KolbyML/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "4c519dc1e8f87720b787409c26e5bc818bfd1f5e",
      "commit_url": "https://api.github.com/repos/KolbyML/gui/commits/4c519dc1e8f87720b787409c26e5bc818bfd1f5e",
      "created_at": "2022-08-09T18:53:41Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7158292714,
      "node_id": "HRFPE_lADOEEET9c5PZ5y9zwAAAAGqquDq",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/7158292714",
      "actor": {
        "login": "KolbyML",
        "id": 31669092,
        "node_id": "MDQ6VXNlcjMxNjY5MDky",
        "avatar_url": "https://avatars.githubusercontent.com/u/31669092?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/KolbyML",
        "html_url": "https://github.com/KolbyML",
        "followers_url": "https://api.github.com/users/KolbyML/followers",
        "following_url": "https://api.github.com/users/KolbyML/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/KolbyML/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/KolbyML/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/KolbyML/subscriptions",
        "organizations_url": "https://api.github.com/users/KolbyML/orgs",
        "repos_url": "https://api.github.com/users/KolbyML/repos",
        "events_url": "https://api.github.com/users/KolbyML/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/KolbyML/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "2c7956eb3ff1b14c7b31e4daefa9efdb52951ccb",
      "commit_url": "https://api.github.com/repos/KolbyML/gui/commits/2c7956eb3ff1b14c7b31e4daefa9efdb52951ccb",
      "created_at": "2022-08-09T19:25:55Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7158469174,
      "node_id": "HRFPE_lADOEEET9c5PZ5y9zwAAAAGqrZI2",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/7158469174",
      "actor": {
        "login": "KolbyML",
        "id": 31669092,
        "node_id": "MDQ6VXNlcjMxNjY5MDky",
        "avatar_url": "https://avatars.githubusercontent.com/u/31669092?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/KolbyML",
        "html_url": "https://github.com/KolbyML",
        "followers_url": "https://api.github.com/users/KolbyML/followers",
        "following_url": "https://api.github.com/users/KolbyML/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/KolbyML/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/KolbyML/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/KolbyML/subscriptions",
        "organizations_url": "https://api.github.com/users/KolbyML/orgs",
        "repos_url": "https://api.github.com/users/KolbyML/repos",
        "events_url": "https://api.github.com/users/KolbyML/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/KolbyML/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "b84777443f7557d23d2f82997f35b7dbe4ccb3f8",
      "commit_url": "https://api.github.com/repos/KolbyML/gui/commits/b84777443f7557d23d2f82997f35b7dbe4ccb3f8",
      "created_at": "2022-08-09T19:56:32Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7158646407,
      "node_id": "HRFPE_lADOEEET9c5PZ5y9zwAAAAGqsEaH",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/7158646407",
      "actor": {
        "login": "KolbyML",
        "id": 31669092,
        "node_id": "MDQ6VXNlcjMxNjY5MDky",
        "avatar_url": "https://avatars.githubusercontent.com/u/31669092?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/KolbyML",
        "html_url": "https://github.com/KolbyML",
        "followers_url": "https://api.github.com/users/KolbyML/followers",
        "following_url": "https://api.github.com/users/KolbyML/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/KolbyML/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/KolbyML/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/KolbyML/subscriptions",
        "organizations_url": "https://api.github.com/users/KolbyML/orgs",
        "repos_url": "https://api.github.com/users/KolbyML/repos",
        "events_url": "https://api.github.com/users/KolbyML/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/KolbyML/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "b57af38e6216882296e219b570e694a2c7f8f352",
      "commit_url": "https://api.github.com/repos/KolbyML/gui/commits/b57af38e6216882296e219b570e694a2c7f8f352",
      "created_at": "2022-08-09T20:27:19Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7158652992,
      "node_id": "HRFPE_lADOEEET9c5PZ5y9zwAAAAGqsGBA",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/7158652992",
      "actor": {
        "login": "KolbyML",
        "id": 31669092,
        "node_id": "MDQ6VXNlcjMxNjY5MDky",
        "avatar_url": "https://avatars.githubusercontent.com/u/31669092?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/KolbyML",
        "html_url": "https://github.com/KolbyML",
        "followers_url": "https://api.github.com/users/KolbyML/followers",
        "following_url": "https://api.github.com/users/KolbyML/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/KolbyML/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/KolbyML/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/KolbyML/subscriptions",
        "organizations_url": "https://api.github.com/users/KolbyML/orgs",
        "repos_url": "https://api.github.com/users/KolbyML/repos",
        "events_url": "https://api.github.com/users/KolbyML/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/KolbyML/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "9ccfec50317103c99091c663f4bd0ecac68120d9",
      "commit_url": "https://api.github.com/repos/KolbyML/gui/commits/9ccfec50317103c99091c663f4bd0ecac68120d9",
      "created_at": "2022-08-09T20:28:26Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7158775914,
      "node_id": "HRFPE_lADOEEET9c5PZ5y9zwAAAAGqskBq",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/7158775914",
      "actor": {
        "login": "KolbyML",
        "id": 31669092,
        "node_id": "MDQ6VXNlcjMxNjY5MDky",
        "avatar_url": "https://avatars.githubusercontent.com/u/31669092?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/KolbyML",
        "html_url": "https://github.com/KolbyML",
        "followers_url": "https://api.github.com/users/KolbyML/followers",
        "following_url": "https://api.github.com/users/KolbyML/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/KolbyML/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/KolbyML/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/KolbyML/subscriptions",
        "organizations_url": "https://api.github.com/users/KolbyML/orgs",
        "repos_url": "https://api.github.com/users/KolbyML/repos",
        "events_url": "https://api.github.com/users/KolbyML/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/KolbyML/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "aaa73dae202ddfecf2c14e63061d6dfcea3d32f9",
      "commit_url": "https://api.github.com/repos/KolbyML/gui/commits/aaa73dae202ddfecf2c14e63061d6dfcea3d32f9",
      "created_at": "2022-08-09T20:49:52Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7158961110,
      "node_id": "HRFPE_lADOEEET9c5PZ5y9zwAAAAGqtRPW",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/7158961110",
      "actor": {
        "login": "KolbyML",
        "id": 31669092,
        "node_id": "MDQ6VXNlcjMxNjY5MDky",
        "avatar_url": "https://avatars.githubusercontent.com/u/31669092?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/KolbyML",
        "html_url": "https://github.com/KolbyML",
        "followers_url": "https://api.github.com/users/KolbyML/followers",
        "following_url": "https://api.github.com/users/KolbyML/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/KolbyML/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/KolbyML/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/KolbyML/subscriptions",
        "organizations_url": "https://api.github.com/users/KolbyML/orgs",
        "repos_url": "https://api.github.com/users/KolbyML/repos",
        "events_url": "https://api.github.com/users/KolbyML/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/KolbyML/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "91ab27a4e43eeab4bfccb4007e2c2bda0c55ca13",
      "commit_url": "https://api.github.com/repos/KolbyML/gui/commits/91ab27a4e43eeab4bfccb4007e2c2bda0c55ca13",
      "created_at": "2022-08-09T21:25:45Z"
    },
    {
      "event": "commented",
      "id": 1209915707,
      "node_id": "IC_kwDOEEET9c5IHdk7",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/comments/1209915707",
      "actor": {
        "login": "w0xlt",
        "id": 94266259,
        "node_id": "U_kgDOBZ5jkw",
        "avatar_url": "https://avatars.githubusercontent.com/u/94266259?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/w0xlt",
        "html_url": "https://github.com/w0xlt",
        "followers_url": "https://api.github.com/users/w0xlt/followers",
        "following_url": "https://api.github.com/users/w0xlt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/w0xlt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/w0xlt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/w0xlt/subscriptions",
        "organizations_url": "https://api.github.com/users/w0xlt/orgs",
        "repos_url": "https://api.github.com/users/w0xlt/repos",
        "events_url": "https://api.github.com/users/w0xlt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/w0xlt/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-09T21:30:59Z",
      "updated_at": "2022-08-09T21:30:59Z",
      "author_association": "CONTRIBUTOR",
      "body": "Concept ACK.\r\nPerhaps it would be better to split each menu item into its own PR.",
      "user": {
        "login": "w0xlt",
        "id": 94266259,
        "node_id": "U_kgDOBZ5jkw",
        "avatar_url": "https://avatars.githubusercontent.com/u/94266259?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/w0xlt",
        "html_url": "https://github.com/w0xlt",
        "followers_url": "https://api.github.com/users/w0xlt/followers",
        "following_url": "https://api.github.com/users/w0xlt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/w0xlt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/w0xlt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/w0xlt/subscriptions",
        "organizations_url": "https://api.github.com/users/w0xlt/orgs",
        "repos_url": "https://api.github.com/users/w0xlt/repos",
        "events_url": "https://api.github.com/users/w0xlt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/w0xlt/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin-core/gui/pull/650#issuecomment-1209915707",
      "issue_url": "https://api.github.com/repos/bitcoin-core/gui/issues/650"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7159010592,
      "node_id": "HRFPE_lADOEEET9c5PZ5y9zwAAAAGqtdUg",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/7159010592",
      "actor": {
        "login": "KolbyML",
        "id": 31669092,
        "node_id": "MDQ6VXNlcjMxNjY5MDky",
        "avatar_url": "https://avatars.githubusercontent.com/u/31669092?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/KolbyML",
        "html_url": "https://github.com/KolbyML",
        "followers_url": "https://api.github.com/users/KolbyML/followers",
        "following_url": "https://api.github.com/users/KolbyML/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/KolbyML/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/KolbyML/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/KolbyML/subscriptions",
        "organizations_url": "https://api.github.com/users/KolbyML/orgs",
        "repos_url": "https://api.github.com/users/KolbyML/repos",
        "events_url": "https://api.github.com/users/KolbyML/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/KolbyML/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "0892be4db68661880fb786378568d25d5b10ef23",
      "commit_url": "https://api.github.com/repos/KolbyML/gui/commits/0892be4db68661880fb786378568d25d5b10ef23",
      "created_at": "2022-08-09T21:36:02Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7159347799,
      "node_id": "HRFPE_lADOEEET9c5PZ5y9zwAAAAGquvpX",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/7159347799",
      "actor": {
        "login": "KolbyML",
        "id": 31669092,
        "node_id": "MDQ6VXNlcjMxNjY5MDky",
        "avatar_url": "https://avatars.githubusercontent.com/u/31669092?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/KolbyML",
        "html_url": "https://github.com/KolbyML",
        "followers_url": "https://api.github.com/users/KolbyML/followers",
        "following_url": "https://api.github.com/users/KolbyML/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/KolbyML/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/KolbyML/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/KolbyML/subscriptions",
        "organizations_url": "https://api.github.com/users/KolbyML/orgs",
        "repos_url": "https://api.github.com/users/KolbyML/repos",
        "events_url": "https://api.github.com/users/KolbyML/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/KolbyML/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "bc90775979ba6be7e204a8560f1c5859f4c95290",
      "commit_url": "https://api.github.com/repos/KolbyML/gui/commits/bc90775979ba6be7e204a8560f1c5859f4c95290",
      "created_at": "2022-08-09T23:01:38Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7159351604,
      "node_id": "HRFPE_lADOEEET9c5PZ5y9zwAAAAGquwk0",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/7159351604",
      "actor": {
        "login": "KolbyML",
        "id": 31669092,
        "node_id": "MDQ6VXNlcjMxNjY5MDky",
        "avatar_url": "https://avatars.githubusercontent.com/u/31669092?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/KolbyML",
        "html_url": "https://github.com/KolbyML",
        "followers_url": "https://api.github.com/users/KolbyML/followers",
        "following_url": "https://api.github.com/users/KolbyML/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/KolbyML/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/KolbyML/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/KolbyML/subscriptions",
        "organizations_url": "https://api.github.com/users/KolbyML/orgs",
        "repos_url": "https://api.github.com/users/KolbyML/repos",
        "events_url": "https://api.github.com/users/KolbyML/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/KolbyML/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "3662ce85c495b05798e9d84c9d1f9e42a90c145d",
      "commit_url": "https://api.github.com/repos/KolbyML/gui/commits/3662ce85c495b05798e9d84c9d1f9e42a90c145d",
      "created_at": "2022-08-09T23:02:46Z"
    },
    {
      "event": "reviewed",
      "id": 1067481148,
      "node_id": "PRR_kwDOEEET9c4_oHg8",
      "url": null,
      "actor": null,
      "commit_id": "3662ce85c495b05798e9d84c9d1f9e42a90c145d",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Awesome first contribution @KolbyML, you're taking a big swing here! Concept ACK on adding this feature.\r\n\r\nFirst, I would second @w0xlt suggestion of breaking each import into it's own PR, this makes the changes digestible for reviewers.\r\n\r\nSecond, please note that any changes to the code outside of `src/qt` (excluding necessary build changes to build any new ui files) cannot be merged from this repo. Any refactoring changes to code outside of `src/qt` you want to propose in order to make this gui feature work should be opened up in the main repo: https://github.com/bitcoin/bitcoin",
      "user": {
        "login": "jarolrod",
        "id": 23396902,
        "node_id": "MDQ6VXNlcjIzMzk2OTAy",
        "avatar_url": "https://avatars.githubusercontent.com/u/23396902?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jarolrod",
        "html_url": "https://github.com/jarolrod",
        "followers_url": "https://api.github.com/users/jarolrod/followers",
        "following_url": "https://api.github.com/users/jarolrod/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jarolrod/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jarolrod/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jarolrod/subscriptions",
        "organizations_url": "https://api.github.com/users/jarolrod/orgs",
        "repos_url": "https://api.github.com/users/jarolrod/repos",
        "events_url": "https://api.github.com/users/jarolrod/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jarolrod/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin-core/gui/pull/650#pullrequestreview-1067481148",
      "submitted_at": "2022-08-09T23:10:28Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin-core/gui/pulls/650"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7159644247,
      "node_id": "HRFPE_lADOEEET9c5PZ5y9zwAAAAGqv4BX",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/7159644247",
      "actor": {
        "login": "KolbyML",
        "id": 31669092,
        "node_id": "MDQ6VXNlcjMxNjY5MDky",
        "avatar_url": "https://avatars.githubusercontent.com/u/31669092?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/KolbyML",
        "html_url": "https://github.com/KolbyML",
        "followers_url": "https://api.github.com/users/KolbyML/followers",
        "following_url": "https://api.github.com/users/KolbyML/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/KolbyML/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/KolbyML/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/KolbyML/subscriptions",
        "organizations_url": "https://api.github.com/users/KolbyML/orgs",
        "repos_url": "https://api.github.com/users/KolbyML/repos",
        "events_url": "https://api.github.com/users/KolbyML/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/KolbyML/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "bacb2dbdd4dd351ddad4529015de12ec6f8d2aab",
      "commit_url": "https://api.github.com/repos/KolbyML/gui/commits/bacb2dbdd4dd351ddad4529015de12ec6f8d2aab",
      "created_at": "2022-08-10T00:41:00Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7159654155,
      "node_id": "HRFPE_lADOEEET9c5PZ5y9zwAAAAGqv6cL",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/7159654155",
      "actor": {
        "login": "KolbyML",
        "id": 31669092,
        "node_id": "MDQ6VXNlcjMxNjY5MDky",
        "avatar_url": "https://avatars.githubusercontent.com/u/31669092?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/KolbyML",
        "html_url": "https://github.com/KolbyML",
        "followers_url": "https://api.github.com/users/KolbyML/followers",
        "following_url": "https://api.github.com/users/KolbyML/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/KolbyML/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/KolbyML/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/KolbyML/subscriptions",
        "organizations_url": "https://api.github.com/users/KolbyML/orgs",
        "repos_url": "https://api.github.com/users/KolbyML/repos",
        "events_url": "https://api.github.com/users/KolbyML/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/KolbyML/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "d64f79ff5bed1138fac5c2810b5cc025407dff5e",
      "commit_url": "https://api.github.com/repos/KolbyML/gui/commits/d64f79ff5bed1138fac5c2810b5cc025407dff5e",
      "created_at": "2022-08-10T00:44:44Z"
    },
    {
      "event": "reviewed",
      "id": 1067582678,
      "node_id": "PRR_kwDOEEET9c4_ogTW",
      "url": null,
      "actor": null,
      "commit_id": "d64f79ff5bed1138fac5c2810b5cc025407dff5e",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Import Public Key & Address: This doesn't work as one would expect, and only makes sense as part of a larger entire-wallet watch-import. So too low-level for a GUI feature.\r\n\r\nImport Private Key: This is a footgun. Instead, we should only support sweeping (as a basic end-user option) - and probably via the Receive tab.\r\n\r\nImport Multi & Descriptors: Seems a bit weird in the GUI. What does \"multi\" mean here? But maybe this could be an advanced feature similar to coin control... (hidden by default)",
      "user": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin-core/gui/pull/650#pullrequestreview-1067582678",
      "submitted_at": "2022-08-10T02:40:42Z",
      "state": "CHANGES_REQUESTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin-core/gui/pulls/650"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7160094820,
      "node_id": "HRFPE_lADOEEET9c5PZ5y9zwAAAAGqxmBk",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/7160094820",
      "actor": {
        "login": "KolbyML",
        "id": 31669092,
        "node_id": "MDQ6VXNlcjMxNjY5MDky",
        "avatar_url": "https://avatars.githubusercontent.com/u/31669092?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/KolbyML",
        "html_url": "https://github.com/KolbyML",
        "followers_url": "https://api.github.com/users/KolbyML/followers",
        "following_url": "https://api.github.com/users/KolbyML/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/KolbyML/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/KolbyML/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/KolbyML/subscriptions",
        "organizations_url": "https://api.github.com/users/KolbyML/orgs",
        "repos_url": "https://api.github.com/users/KolbyML/repos",
        "events_url": "https://api.github.com/users/KolbyML/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/KolbyML/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "a225a05442cb4bf27c1f41b38f0f8db78bb3eefd",
      "commit_url": "https://api.github.com/repos/KolbyML/gui/commits/a225a05442cb4bf27c1f41b38f0f8db78bb3eefd",
      "created_at": "2022-08-10T03:08:10Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7160266195,
      "node_id": "HRFPE_lADOEEET9c5PZ5y9zwAAAAGqyP3T",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/7160266195",
      "actor": {
        "login": "KolbyML",
        "id": 31669092,
        "node_id": "MDQ6VXNlcjMxNjY5MDky",
        "avatar_url": "https://avatars.githubusercontent.com/u/31669092?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/KolbyML",
        "html_url": "https://github.com/KolbyML",
        "followers_url": "https://api.github.com/users/KolbyML/followers",
        "following_url": "https://api.github.com/users/KolbyML/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/KolbyML/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/KolbyML/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/KolbyML/subscriptions",
        "organizations_url": "https://api.github.com/users/KolbyML/orgs",
        "repos_url": "https://api.github.com/users/KolbyML/repos",
        "events_url": "https://api.github.com/users/KolbyML/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/KolbyML/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "ac6b5c519b469859971d1198fbc2826ffd7531e0",
      "commit_url": "https://api.github.com/repos/KolbyML/gui/commits/ac6b5c519b469859971d1198fbc2826ffd7531e0",
      "created_at": "2022-08-10T03:45:45Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7160270931,
      "node_id": "HRFPE_lADOEEET9c5PZ5y9zwAAAAGqyRBT",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/7160270931",
      "actor": {
        "login": "KolbyML",
        "id": 31669092,
        "node_id": "MDQ6VXNlcjMxNjY5MDky",
        "avatar_url": "https://avatars.githubusercontent.com/u/31669092?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/KolbyML",
        "html_url": "https://github.com/KolbyML",
        "followers_url": "https://api.github.com/users/KolbyML/followers",
        "following_url": "https://api.github.com/users/KolbyML/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/KolbyML/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/KolbyML/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/KolbyML/subscriptions",
        "organizations_url": "https://api.github.com/users/KolbyML/orgs",
        "repos_url": "https://api.github.com/users/KolbyML/repos",
        "events_url": "https://api.github.com/users/KolbyML/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/KolbyML/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "c5a9abfe16c405bdcfc9dfbd362f5373645d385c",
      "commit_url": "https://api.github.com/repos/KolbyML/gui/commits/c5a9abfe16c405bdcfc9dfbd362f5373645d385c",
      "created_at": "2022-08-10T03:47:27Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7160300495,
      "node_id": "HRFPE_lADOEEET9c5PZ5y9zwAAAAGqyYPP",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/7160300495",
      "actor": {
        "login": "KolbyML",
        "id": 31669092,
        "node_id": "MDQ6VXNlcjMxNjY5MDky",
        "avatar_url": "https://avatars.githubusercontent.com/u/31669092?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/KolbyML",
        "html_url": "https://github.com/KolbyML",
        "followers_url": "https://api.github.com/users/KolbyML/followers",
        "following_url": "https://api.github.com/users/KolbyML/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/KolbyML/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/KolbyML/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/KolbyML/subscriptions",
        "organizations_url": "https://api.github.com/users/KolbyML/orgs",
        "repos_url": "https://api.github.com/users/KolbyML/repos",
        "events_url": "https://api.github.com/users/KolbyML/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/KolbyML/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "dcc198e23b1901da2267543950cb1772c1ee38d8",
      "commit_url": "https://api.github.com/repos/KolbyML/gui/commits/dcc198e23b1901da2267543950cb1772c1ee38d8",
      "created_at": "2022-08-10T03:57:50Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7160313619,
      "node_id": "HRFPE_lADOEEET9c5PZ5y9zwAAAAGqybcT",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/7160313619",
      "actor": {
        "login": "KolbyML",
        "id": 31669092,
        "node_id": "MDQ6VXNlcjMxNjY5MDky",
        "avatar_url": "https://avatars.githubusercontent.com/u/31669092?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/KolbyML",
        "html_url": "https://github.com/KolbyML",
        "followers_url": "https://api.github.com/users/KolbyML/followers",
        "following_url": "https://api.github.com/users/KolbyML/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/KolbyML/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/KolbyML/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/KolbyML/subscriptions",
        "organizations_url": "https://api.github.com/users/KolbyML/orgs",
        "repos_url": "https://api.github.com/users/KolbyML/repos",
        "events_url": "https://api.github.com/users/KolbyML/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/KolbyML/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "aadd582a5faaa834b9016470901bcc4145ed58dc",
      "commit_url": "https://api.github.com/repos/KolbyML/gui/commits/aadd582a5faaa834b9016470901bcc4145ed58dc",
      "created_at": "2022-08-10T04:02:00Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7160330148,
      "node_id": "HRFPE_lADOEEET9c5PZ5y9zwAAAAGqyfek",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/7160330148",
      "actor": {
        "login": "KolbyML",
        "id": 31669092,
        "node_id": "MDQ6VXNlcjMxNjY5MDky",
        "avatar_url": "https://avatars.githubusercontent.com/u/31669092?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/KolbyML",
        "html_url": "https://github.com/KolbyML",
        "followers_url": "https://api.github.com/users/KolbyML/followers",
        "following_url": "https://api.github.com/users/KolbyML/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/KolbyML/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/KolbyML/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/KolbyML/subscriptions",
        "organizations_url": "https://api.github.com/users/KolbyML/orgs",
        "repos_url": "https://api.github.com/users/KolbyML/repos",
        "events_url": "https://api.github.com/users/KolbyML/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/KolbyML/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "8a9cf0097c3ad5b7cf5c175963c4b34622457105",
      "commit_url": "https://api.github.com/repos/KolbyML/gui/commits/8a9cf0097c3ad5b7cf5c175963c4b34622457105",
      "created_at": "2022-08-10T04:06:06Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7160339496,
      "node_id": "HRFPE_lADOEEET9c5PZ5y9zwAAAAGqyhwo",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/7160339496",
      "actor": {
        "login": "KolbyML",
        "id": 31669092,
        "node_id": "MDQ6VXNlcjMxNjY5MDky",
        "avatar_url": "https://avatars.githubusercontent.com/u/31669092?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/KolbyML",
        "html_url": "https://github.com/KolbyML",
        "followers_url": "https://api.github.com/users/KolbyML/followers",
        "following_url": "https://api.github.com/users/KolbyML/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/KolbyML/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/KolbyML/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/KolbyML/subscriptions",
        "organizations_url": "https://api.github.com/users/KolbyML/orgs",
        "repos_url": "https://api.github.com/users/KolbyML/repos",
        "events_url": "https://api.github.com/users/KolbyML/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/KolbyML/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "194b79ba66a895d4bfcc76909e89e9823158a6fa",
      "commit_url": "https://api.github.com/repos/KolbyML/gui/commits/194b79ba66a895d4bfcc76909e89e9823158a6fa",
      "created_at": "2022-08-10T04:08:45Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7165317175,
      "node_id": "HRFPE_lADOEEET9c5PZ5y9zwAAAAGrFhA3",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/7165317175",
      "actor": {
        "login": "KolbyML",
        "id": 31669092,
        "node_id": "MDQ6VXNlcjMxNjY5MDky",
        "avatar_url": "https://avatars.githubusercontent.com/u/31669092?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/KolbyML",
        "html_url": "https://github.com/KolbyML",
        "followers_url": "https://api.github.com/users/KolbyML/followers",
        "following_url": "https://api.github.com/users/KolbyML/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/KolbyML/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/KolbyML/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/KolbyML/subscriptions",
        "organizations_url": "https://api.github.com/users/KolbyML/orgs",
        "repos_url": "https://api.github.com/users/KolbyML/repos",
        "events_url": "https://api.github.com/users/KolbyML/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/KolbyML/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "bbc8818f6368027f38852d127a6af89cf9ee6a41",
      "commit_url": "https://api.github.com/repos/KolbyML/gui/commits/bbc8818f6368027f38852d127a6af89cf9ee6a41",
      "created_at": "2022-08-10T16:13:26Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7165456164,
      "node_id": "HRFPE_lADOEEET9c5PZ5y9zwAAAAGrGC8k",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/7165456164",
      "actor": {
        "login": "KolbyML",
        "id": 31669092,
        "node_id": "MDQ6VXNlcjMxNjY5MDky",
        "avatar_url": "https://avatars.githubusercontent.com/u/31669092?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/KolbyML",
        "html_url": "https://github.com/KolbyML",
        "followers_url": "https://api.github.com/users/KolbyML/followers",
        "following_url": "https://api.github.com/users/KolbyML/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/KolbyML/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/KolbyML/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/KolbyML/subscriptions",
        "organizations_url": "https://api.github.com/users/KolbyML/orgs",
        "repos_url": "https://api.github.com/users/KolbyML/repos",
        "events_url": "https://api.github.com/users/KolbyML/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/KolbyML/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "ccb53a5c0039eb19136b0e8a4aa5c2f64553caa7",
      "commit_url": "https://api.github.com/repos/KolbyML/gui/commits/ccb53a5c0039eb19136b0e8a4aa5c2f64553caa7",
      "created_at": "2022-08-10T16:33:43Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7165504973,
      "node_id": "HRFPE_lADOEEET9c5PZ5y9zwAAAAGrGO3N",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/7165504973",
      "actor": {
        "login": "KolbyML",
        "id": 31669092,
        "node_id": "MDQ6VXNlcjMxNjY5MDky",
        "avatar_url": "https://avatars.githubusercontent.com/u/31669092?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/KolbyML",
        "html_url": "https://github.com/KolbyML",
        "followers_url": "https://api.github.com/users/KolbyML/followers",
        "following_url": "https://api.github.com/users/KolbyML/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/KolbyML/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/KolbyML/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/KolbyML/subscriptions",
        "organizations_url": "https://api.github.com/users/KolbyML/orgs",
        "repos_url": "https://api.github.com/users/KolbyML/repos",
        "events_url": "https://api.github.com/users/KolbyML/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/KolbyML/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "043a5c7d64d422bb9e706d60c79b3869e3da0185",
      "commit_url": "https://api.github.com/repos/KolbyML/gui/commits/043a5c7d64d422bb9e706d60c79b3869e3da0185",
      "created_at": "2022-08-10T16:41:12Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7165528818,
      "node_id": "HRFPE_lADOEEET9c5PZ5y9zwAAAAGrGUry",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/7165528818",
      "actor": {
        "login": "KolbyML",
        "id": 31669092,
        "node_id": "MDQ6VXNlcjMxNjY5MDky",
        "avatar_url": "https://avatars.githubusercontent.com/u/31669092?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/KolbyML",
        "html_url": "https://github.com/KolbyML",
        "followers_url": "https://api.github.com/users/KolbyML/followers",
        "following_url": "https://api.github.com/users/KolbyML/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/KolbyML/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/KolbyML/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/KolbyML/subscriptions",
        "organizations_url": "https://api.github.com/users/KolbyML/orgs",
        "repos_url": "https://api.github.com/users/KolbyML/repos",
        "events_url": "https://api.github.com/users/KolbyML/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/KolbyML/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "6229d825ff067ee3740ce329de637167d9cb765a",
      "commit_url": "https://api.github.com/repos/KolbyML/gui/commits/6229d825ff067ee3740ce329de637167d9cb765a",
      "created_at": "2022-08-10T16:45:00Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7165583316,
      "node_id": "HRFPE_lADOEEET9c5PZ5y9zwAAAAGrGh_U",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/7165583316",
      "actor": {
        "login": "KolbyML",
        "id": 31669092,
        "node_id": "MDQ6VXNlcjMxNjY5MDky",
        "avatar_url": "https://avatars.githubusercontent.com/u/31669092?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/KolbyML",
        "html_url": "https://github.com/KolbyML",
        "followers_url": "https://api.github.com/users/KolbyML/followers",
        "following_url": "https://api.github.com/users/KolbyML/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/KolbyML/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/KolbyML/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/KolbyML/subscriptions",
        "organizations_url": "https://api.github.com/users/KolbyML/orgs",
        "repos_url": "https://api.github.com/users/KolbyML/repos",
        "events_url": "https://api.github.com/users/KolbyML/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/KolbyML/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "524360af9d4421d5791db88e48d1a46fe092e6d3",
      "commit_url": "https://api.github.com/repos/KolbyML/gui/commits/524360af9d4421d5791db88e48d1a46fe092e6d3",
      "created_at": "2022-08-10T16:53:12Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7166172842,
      "node_id": "HRFPE_lADOEEET9c5PZ5y9zwAAAAGrIx6q",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/7166172842",
      "actor": {
        "login": "KolbyML",
        "id": 31669092,
        "node_id": "MDQ6VXNlcjMxNjY5MDky",
        "avatar_url": "https://avatars.githubusercontent.com/u/31669092?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/KolbyML",
        "html_url": "https://github.com/KolbyML",
        "followers_url": "https://api.github.com/users/KolbyML/followers",
        "following_url": "https://api.github.com/users/KolbyML/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/KolbyML/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/KolbyML/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/KolbyML/subscriptions",
        "organizations_url": "https://api.github.com/users/KolbyML/orgs",
        "repos_url": "https://api.github.com/users/KolbyML/repos",
        "events_url": "https://api.github.com/users/KolbyML/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/KolbyML/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "12134f80bee5e962545f671c097b5d0f35d1d8ab",
      "commit_url": "https://api.github.com/repos/KolbyML/gui/commits/12134f80bee5e962545f671c097b5d0f35d1d8ab",
      "created_at": "2022-08-10T18:23:25Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7166745290,
      "node_id": "HRFPE_lADOEEET9c5PZ5y9zwAAAAGrK9rK",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/7166745290",
      "actor": {
        "login": "KolbyML",
        "id": 31669092,
        "node_id": "MDQ6VXNlcjMxNjY5MDky",
        "avatar_url": "https://avatars.githubusercontent.com/u/31669092?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/KolbyML",
        "html_url": "https://github.com/KolbyML",
        "followers_url": "https://api.github.com/users/KolbyML/followers",
        "following_url": "https://api.github.com/users/KolbyML/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/KolbyML/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/KolbyML/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/KolbyML/subscriptions",
        "organizations_url": "https://api.github.com/users/KolbyML/orgs",
        "repos_url": "https://api.github.com/users/KolbyML/repos",
        "events_url": "https://api.github.com/users/KolbyML/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/KolbyML/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "608dc637f733f05ca33407e5a3191d7f9bdbb91a",
      "commit_url": "https://api.github.com/repos/KolbyML/gui/commits/608dc637f733f05ca33407e5a3191d7f9bdbb91a",
      "created_at": "2022-08-10T19:45:14Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7166793470,
      "node_id": "HRFPE_lADOEEET9c5PZ5y9zwAAAAGrLJb-",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/7166793470",
      "actor": {
        "login": "KolbyML",
        "id": 31669092,
        "node_id": "MDQ6VXNlcjMxNjY5MDky",
        "avatar_url": "https://avatars.githubusercontent.com/u/31669092?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/KolbyML",
        "html_url": "https://github.com/KolbyML",
        "followers_url": "https://api.github.com/users/KolbyML/followers",
        "following_url": "https://api.github.com/users/KolbyML/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/KolbyML/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/KolbyML/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/KolbyML/subscriptions",
        "organizations_url": "https://api.github.com/users/KolbyML/orgs",
        "repos_url": "https://api.github.com/users/KolbyML/repos",
        "events_url": "https://api.github.com/users/KolbyML/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/KolbyML/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "6863c9c1c66f44bb5c597a93ba3b3e81257c5878",
      "commit_url": "https://api.github.com/repos/KolbyML/gui/commits/6863c9c1c66f44bb5c597a93ba3b3e81257c5878",
      "created_at": "2022-08-10T19:53:31Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7166808118,
      "node_id": "HRFPE_lADOEEET9c5PZ5y9zwAAAAGrLNA2",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/7166808118",
      "actor": {
        "login": "KolbyML",
        "id": 31669092,
        "node_id": "MDQ6VXNlcjMxNjY5MDky",
        "avatar_url": "https://avatars.githubusercontent.com/u/31669092?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/KolbyML",
        "html_url": "https://github.com/KolbyML",
        "followers_url": "https://api.github.com/users/KolbyML/followers",
        "following_url": "https://api.github.com/users/KolbyML/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/KolbyML/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/KolbyML/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/KolbyML/subscriptions",
        "organizations_url": "https://api.github.com/users/KolbyML/orgs",
        "repos_url": "https://api.github.com/users/KolbyML/repos",
        "events_url": "https://api.github.com/users/KolbyML/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/KolbyML/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "8ccccc67e63a146027e1803f9d1716b655816135",
      "commit_url": "https://api.github.com/repos/KolbyML/gui/commits/8ccccc67e63a146027e1803f9d1716b655816135",
      "created_at": "2022-08-10T19:56:12Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7168810774,
      "node_id": "HRFPE_lADOEEET9c5PZ5y9zwAAAAGrS18W",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/7168810774",
      "actor": {
        "login": "KolbyML",
        "id": 31669092,
        "node_id": "MDQ6VXNlcjMxNjY5MDky",
        "avatar_url": "https://avatars.githubusercontent.com/u/31669092?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/KolbyML",
        "html_url": "https://github.com/KolbyML",
        "followers_url": "https://api.github.com/users/KolbyML/followers",
        "following_url": "https://api.github.com/users/KolbyML/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/KolbyML/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/KolbyML/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/KolbyML/subscriptions",
        "organizations_url": "https://api.github.com/users/KolbyML/orgs",
        "repos_url": "https://api.github.com/users/KolbyML/repos",
        "events_url": "https://api.github.com/users/KolbyML/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/KolbyML/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "52940c6ec1d5a66babe4f44061ce83927c5f046b",
      "commit_url": "https://api.github.com/repos/KolbyML/gui/commits/52940c6ec1d5a66babe4f44061ce83927c5f046b",
      "created_at": "2022-08-11T05:26:35Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7169122677,
      "node_id": "HRFPE_lADOEEET9c5PZ5y9zwAAAAGrUCF1",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/7169122677",
      "actor": {
        "login": "KolbyML",
        "id": 31669092,
        "node_id": "MDQ6VXNlcjMxNjY5MDky",
        "avatar_url": "https://avatars.githubusercontent.com/u/31669092?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/KolbyML",
        "html_url": "https://github.com/KolbyML",
        "followers_url": "https://api.github.com/users/KolbyML/followers",
        "following_url": "https://api.github.com/users/KolbyML/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/KolbyML/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/KolbyML/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/KolbyML/subscriptions",
        "organizations_url": "https://api.github.com/users/KolbyML/orgs",
        "repos_url": "https://api.github.com/users/KolbyML/repos",
        "events_url": "https://api.github.com/users/KolbyML/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/KolbyML/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "f8a5577ffd9694b224a928d2d5feeceaf1f2b602",
      "commit_url": "https://api.github.com/repos/KolbyML/gui/commits/f8a5577ffd9694b224a928d2d5feeceaf1f2b602",
      "created_at": "2022-08-11T06:49:03Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7175751087,
      "node_id": "HRFPE_lADOEEET9c5PZ5y9zwAAAAGrtUWv",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/7175751087",
      "actor": {
        "login": "KolbyML",
        "id": 31669092,
        "node_id": "MDQ6VXNlcjMxNjY5MDky",
        "avatar_url": "https://avatars.githubusercontent.com/u/31669092?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/KolbyML",
        "html_url": "https://github.com/KolbyML",
        "followers_url": "https://api.github.com/users/KolbyML/followers",
        "following_url": "https://api.github.com/users/KolbyML/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/KolbyML/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/KolbyML/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/KolbyML/subscriptions",
        "organizations_url": "https://api.github.com/users/KolbyML/orgs",
        "repos_url": "https://api.github.com/users/KolbyML/repos",
        "events_url": "https://api.github.com/users/KolbyML/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/KolbyML/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "705670f52f7dc7bd7dcf2c3e3d54140261951a7d",
      "commit_url": "https://api.github.com/repos/KolbyML/gui/commits/705670f52f7dc7bd7dcf2c3e3d54140261951a7d",
      "created_at": "2022-08-12T00:41:07Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7175759271,
      "node_id": "HRFPE_lADOEEET9c5PZ5y9zwAAAAGrtWWn",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/7175759271",
      "actor": {
        "login": "KolbyML",
        "id": 31669092,
        "node_id": "MDQ6VXNlcjMxNjY5MDky",
        "avatar_url": "https://avatars.githubusercontent.com/u/31669092?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/KolbyML",
        "html_url": "https://github.com/KolbyML",
        "followers_url": "https://api.github.com/users/KolbyML/followers",
        "following_url": "https://api.github.com/users/KolbyML/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/KolbyML/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/KolbyML/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/KolbyML/subscriptions",
        "organizations_url": "https://api.github.com/users/KolbyML/orgs",
        "repos_url": "https://api.github.com/users/KolbyML/repos",
        "events_url": "https://api.github.com/users/KolbyML/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/KolbyML/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "6c5de22683f2092fddcbbc74b28fcd613f7179a6",
      "commit_url": "https://api.github.com/repos/KolbyML/gui/commits/6c5de22683f2092fddcbbc74b28fcd613f7179a6",
      "created_at": "2022-08-12T00:44:04Z"
    },
    {
      "event": "renamed",
      "id": 7190524263,
      "node_id": "RTE_lADOEEET9c5PZ5y9zwAAAAGslrFn",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/7190524263",
      "actor": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-15T18:10:53Z",
      "rename": {
        "from": "qt, refactor: Add Import to Wallet GUI",
        "to": "Add Import to Wallet GUI"
      }
    },
    {
      "event": "labeled",
      "id": 7190525033,
      "node_id": "LE_lADOEEET9c5PZ5y9zwAAAAGslrRp",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/7190525033",
      "actor": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-15T18:11:00Z",
      "label": {
        "name": "Wallet",
        "color": "08a781"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7198157010,
      "node_id": "HRFPE_lADOEEET9c5PZ5y9zwAAAAGtCyjS",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/7198157010",
      "actor": {
        "login": "KolbyML",
        "id": 31669092,
        "node_id": "MDQ6VXNlcjMxNjY5MDky",
        "avatar_url": "https://avatars.githubusercontent.com/u/31669092?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/KolbyML",
        "html_url": "https://github.com/KolbyML",
        "followers_url": "https://api.github.com/users/KolbyML/followers",
        "following_url": "https://api.github.com/users/KolbyML/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/KolbyML/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/KolbyML/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/KolbyML/subscriptions",
        "organizations_url": "https://api.github.com/users/KolbyML/orgs",
        "repos_url": "https://api.github.com/users/KolbyML/repos",
        "events_url": "https://api.github.com/users/KolbyML/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/KolbyML/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "d083377a2871394b09724186375b23b3182bf896",
      "commit_url": "https://api.github.com/repos/KolbyML/gui/commits/d083377a2871394b09724186375b23b3182bf896",
      "created_at": "2022-08-16T15:08:28Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7200737062,
      "node_id": "HRFPE_lADOEEET9c5PZ5y9zwAAAAGtMocm",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/7200737062",
      "actor": {
        "login": "KolbyML",
        "id": 31669092,
        "node_id": "MDQ6VXNlcjMxNjY5MDky",
        "avatar_url": "https://avatars.githubusercontent.com/u/31669092?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/KolbyML",
        "html_url": "https://github.com/KolbyML",
        "followers_url": "https://api.github.com/users/KolbyML/followers",
        "following_url": "https://api.github.com/users/KolbyML/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/KolbyML/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/KolbyML/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/KolbyML/subscriptions",
        "organizations_url": "https://api.github.com/users/KolbyML/orgs",
        "repos_url": "https://api.github.com/users/KolbyML/repos",
        "events_url": "https://api.github.com/users/KolbyML/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/KolbyML/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "83bf0e237a0ec4f712405409bbedb340879ce5a1",
      "commit_url": "https://api.github.com/repos/KolbyML/gui/commits/83bf0e237a0ec4f712405409bbedb340879ce5a1",
      "created_at": "2022-08-16T21:36:09Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7201496023,
      "node_id": "HRFPE_lADOEEET9c5PZ5y9zwAAAAGtPhvX",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/7201496023",
      "actor": {
        "login": "KolbyML",
        "id": 31669092,
        "node_id": "MDQ6VXNlcjMxNjY5MDky",
        "avatar_url": "https://avatars.githubusercontent.com/u/31669092?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/KolbyML",
        "html_url": "https://github.com/KolbyML",
        "followers_url": "https://api.github.com/users/KolbyML/followers",
        "following_url": "https://api.github.com/users/KolbyML/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/KolbyML/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/KolbyML/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/KolbyML/subscriptions",
        "organizations_url": "https://api.github.com/users/KolbyML/orgs",
        "repos_url": "https://api.github.com/users/KolbyML/repos",
        "events_url": "https://api.github.com/users/KolbyML/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/KolbyML/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "a11d6172a60eca4006cdc1fccbbab4aa56af8089",
      "commit_url": "https://api.github.com/repos/KolbyML/gui/commits/a11d6172a60eca4006cdc1fccbbab4aa56af8089",
      "created_at": "2022-08-17T01:07:47Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7207552113,
      "node_id": "HRFPE_lADOEEET9c5PZ5y9zwAAAAGtmoRx",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/7207552113",
      "actor": {
        "login": "KolbyML",
        "id": 31669092,
        "node_id": "MDQ6VXNlcjMxNjY5MDky",
        "avatar_url": "https://avatars.githubusercontent.com/u/31669092?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/KolbyML",
        "html_url": "https://github.com/KolbyML",
        "followers_url": "https://api.github.com/users/KolbyML/followers",
        "following_url": "https://api.github.com/users/KolbyML/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/KolbyML/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/KolbyML/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/KolbyML/subscriptions",
        "organizations_url": "https://api.github.com/users/KolbyML/orgs",
        "repos_url": "https://api.github.com/users/KolbyML/repos",
        "events_url": "https://api.github.com/users/KolbyML/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/KolbyML/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "ada1444fa1e98faf90f620c52c48b0524f6a1035",
      "commit_url": "https://api.github.com/repos/KolbyML/gui/commits/ada1444fa1e98faf90f620c52c48b0524f6a1035",
      "created_at": "2022-08-17T16:27:04Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7207602710,
      "node_id": "HRFPE_lADOEEET9c5PZ5y9zwAAAAGtm0oW",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/7207602710",
      "actor": {
        "login": "KolbyML",
        "id": 31669092,
        "node_id": "MDQ6VXNlcjMxNjY5MDky",
        "avatar_url": "https://avatars.githubusercontent.com/u/31669092?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/KolbyML",
        "html_url": "https://github.com/KolbyML",
        "followers_url": "https://api.github.com/users/KolbyML/followers",
        "following_url": "https://api.github.com/users/KolbyML/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/KolbyML/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/KolbyML/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/KolbyML/subscriptions",
        "organizations_url": "https://api.github.com/users/KolbyML/orgs",
        "repos_url": "https://api.github.com/users/KolbyML/repos",
        "events_url": "https://api.github.com/users/KolbyML/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/KolbyML/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "a50db2b35dbf7393b1f17d98ae0c881ca0d7c092",
      "commit_url": "https://api.github.com/repos/KolbyML/gui/commits/a50db2b35dbf7393b1f17d98ae0c881ca0d7c092",
      "created_at": "2022-08-17T16:34:18Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7207614455,
      "node_id": "HRFPE_lADOEEET9c5PZ5y9zwAAAAGtm3f3",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/7207614455",
      "actor": {
        "login": "KolbyML",
        "id": 31669092,
        "node_id": "MDQ6VXNlcjMxNjY5MDky",
        "avatar_url": "https://avatars.githubusercontent.com/u/31669092?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/KolbyML",
        "html_url": "https://github.com/KolbyML",
        "followers_url": "https://api.github.com/users/KolbyML/followers",
        "following_url": "https://api.github.com/users/KolbyML/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/KolbyML/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/KolbyML/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/KolbyML/subscriptions",
        "organizations_url": "https://api.github.com/users/KolbyML/orgs",
        "repos_url": "https://api.github.com/users/KolbyML/repos",
        "events_url": "https://api.github.com/users/KolbyML/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/KolbyML/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "1b8f3af9e6d7f7ac7e26958f253dfcca223bc8dd",
      "commit_url": "https://api.github.com/repos/KolbyML/gui/commits/1b8f3af9e6d7f7ac7e26958f253dfcca223bc8dd",
      "created_at": "2022-08-17T16:36:03Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7207641960,
      "node_id": "HRFPE_lADOEEET9c5PZ5y9zwAAAAGtm-No",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/7207641960",
      "actor": {
        "login": "KolbyML",
        "id": 31669092,
        "node_id": "MDQ6VXNlcjMxNjY5MDky",
        "avatar_url": "https://avatars.githubusercontent.com/u/31669092?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/KolbyML",
        "html_url": "https://github.com/KolbyML",
        "followers_url": "https://api.github.com/users/KolbyML/followers",
        "following_url": "https://api.github.com/users/KolbyML/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/KolbyML/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/KolbyML/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/KolbyML/subscriptions",
        "organizations_url": "https://api.github.com/users/KolbyML/orgs",
        "repos_url": "https://api.github.com/users/KolbyML/repos",
        "events_url": "https://api.github.com/users/KolbyML/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/KolbyML/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "d0c7a198f38a58340750b6fbbb4e8b20b7dea220",
      "commit_url": "https://api.github.com/repos/KolbyML/gui/commits/d0c7a198f38a58340750b6fbbb4e8b20b7dea220",
      "created_at": "2022-08-17T16:40:20Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7207657190,
      "node_id": "HRFPE_lADOEEET9c5PZ5y9zwAAAAGtnB7m",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/7207657190",
      "actor": {
        "login": "KolbyML",
        "id": 31669092,
        "node_id": "MDQ6VXNlcjMxNjY5MDky",
        "avatar_url": "https://avatars.githubusercontent.com/u/31669092?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/KolbyML",
        "html_url": "https://github.com/KolbyML",
        "followers_url": "https://api.github.com/users/KolbyML/followers",
        "following_url": "https://api.github.com/users/KolbyML/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/KolbyML/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/KolbyML/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/KolbyML/subscriptions",
        "organizations_url": "https://api.github.com/users/KolbyML/orgs",
        "repos_url": "https://api.github.com/users/KolbyML/repos",
        "events_url": "https://api.github.com/users/KolbyML/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/KolbyML/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "e937faeae256938b2c6dfb8976033790ac67e371",
      "commit_url": "https://api.github.com/repos/KolbyML/gui/commits/e937faeae256938b2c6dfb8976033790ac67e371",
      "created_at": "2022-08-17T16:42:37Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7207663747,
      "node_id": "HRFPE_lADOEEET9c5PZ5y9zwAAAAGtnDiD",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/7207663747",
      "actor": {
        "login": "KolbyML",
        "id": 31669092,
        "node_id": "MDQ6VXNlcjMxNjY5MDky",
        "avatar_url": "https://avatars.githubusercontent.com/u/31669092?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/KolbyML",
        "html_url": "https://github.com/KolbyML",
        "followers_url": "https://api.github.com/users/KolbyML/followers",
        "following_url": "https://api.github.com/users/KolbyML/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/KolbyML/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/KolbyML/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/KolbyML/subscriptions",
        "organizations_url": "https://api.github.com/users/KolbyML/orgs",
        "repos_url": "https://api.github.com/users/KolbyML/repos",
        "events_url": "https://api.github.com/users/KolbyML/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/KolbyML/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "a4f64a81d6aa4cf4657e7d7d8c3917ba73f9e26a",
      "commit_url": "https://api.github.com/repos/KolbyML/gui/commits/a4f64a81d6aa4cf4657e7d7d8c3917ba73f9e26a",
      "created_at": "2022-08-17T16:43:41Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7208110228,
      "node_id": "HRFPE_lADOEEET9c5PZ5y9zwAAAAGtowiU",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/7208110228",
      "actor": {
        "login": "KolbyML",
        "id": 31669092,
        "node_id": "MDQ6VXNlcjMxNjY5MDky",
        "avatar_url": "https://avatars.githubusercontent.com/u/31669092?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/KolbyML",
        "html_url": "https://github.com/KolbyML",
        "followers_url": "https://api.github.com/users/KolbyML/followers",
        "following_url": "https://api.github.com/users/KolbyML/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/KolbyML/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/KolbyML/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/KolbyML/subscriptions",
        "organizations_url": "https://api.github.com/users/KolbyML/orgs",
        "repos_url": "https://api.github.com/users/KolbyML/repos",
        "events_url": "https://api.github.com/users/KolbyML/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/KolbyML/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "307968c3d8c0e89c117361c607c04e261048b553",
      "commit_url": "https://api.github.com/repos/KolbyML/gui/commits/307968c3d8c0e89c117361c607c04e261048b553",
      "created_at": "2022-08-17T17:52:38Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7208117798,
      "node_id": "HRFPE_lADOEEET9c5PZ5y9zwAAAAGtoyYm",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/7208117798",
      "actor": {
        "login": "KolbyML",
        "id": 31669092,
        "node_id": "MDQ6VXNlcjMxNjY5MDky",
        "avatar_url": "https://avatars.githubusercontent.com/u/31669092?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/KolbyML",
        "html_url": "https://github.com/KolbyML",
        "followers_url": "https://api.github.com/users/KolbyML/followers",
        "following_url": "https://api.github.com/users/KolbyML/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/KolbyML/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/KolbyML/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/KolbyML/subscriptions",
        "organizations_url": "https://api.github.com/users/KolbyML/orgs",
        "repos_url": "https://api.github.com/users/KolbyML/repos",
        "events_url": "https://api.github.com/users/KolbyML/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/KolbyML/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "657c8c83fdfb850493179a59bcd794e997d2ce46",
      "commit_url": "https://api.github.com/repos/KolbyML/gui/commits/657c8c83fdfb850493179a59bcd794e997d2ce46",
      "created_at": "2022-08-17T17:53:42Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7208121937,
      "node_id": "HRFPE_lADOEEET9c5PZ5y9zwAAAAGtozZR",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/7208121937",
      "actor": {
        "login": "KolbyML",
        "id": 31669092,
        "node_id": "MDQ6VXNlcjMxNjY5MDky",
        "avatar_url": "https://avatars.githubusercontent.com/u/31669092?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/KolbyML",
        "html_url": "https://github.com/KolbyML",
        "followers_url": "https://api.github.com/users/KolbyML/followers",
        "following_url": "https://api.github.com/users/KolbyML/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/KolbyML/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/KolbyML/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/KolbyML/subscriptions",
        "organizations_url": "https://api.github.com/users/KolbyML/orgs",
        "repos_url": "https://api.github.com/users/KolbyML/repos",
        "events_url": "https://api.github.com/users/KolbyML/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/KolbyML/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "9519ba7d3293414170e4fade2acd22e266ac8035",
      "commit_url": "https://api.github.com/repos/KolbyML/gui/commits/9519ba7d3293414170e4fade2acd22e266ac8035",
      "created_at": "2022-08-17T17:54:17Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7208126283,
      "node_id": "HRFPE_lADOEEET9c5PZ5y9zwAAAAGto0dL",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/7208126283",
      "actor": {
        "login": "KolbyML",
        "id": 31669092,
        "node_id": "MDQ6VXNlcjMxNjY5MDky",
        "avatar_url": "https://avatars.githubusercontent.com/u/31669092?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/KolbyML",
        "html_url": "https://github.com/KolbyML",
        "followers_url": "https://api.github.com/users/KolbyML/followers",
        "following_url": "https://api.github.com/users/KolbyML/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/KolbyML/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/KolbyML/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/KolbyML/subscriptions",
        "organizations_url": "https://api.github.com/users/KolbyML/orgs",
        "repos_url": "https://api.github.com/users/KolbyML/repos",
        "events_url": "https://api.github.com/users/KolbyML/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/KolbyML/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "0e9d90583e3ee9d444a126ffdfa0ac67c6692fbc",
      "commit_url": "https://api.github.com/repos/KolbyML/gui/commits/0e9d90583e3ee9d444a126ffdfa0ac67c6692fbc",
      "created_at": "2022-08-17T17:54:51Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7218839931,
      "node_id": "HRFPE_lADOEEET9c5PZ5y9zwAAAAGuRsF7",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/7218839931",
      "actor": {
        "login": "KolbyML",
        "id": 31669092,
        "node_id": "MDQ6VXNlcjMxNjY5MDky",
        "avatar_url": "https://avatars.githubusercontent.com/u/31669092?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/KolbyML",
        "html_url": "https://github.com/KolbyML",
        "followers_url": "https://api.github.com/users/KolbyML/followers",
        "following_url": "https://api.github.com/users/KolbyML/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/KolbyML/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/KolbyML/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/KolbyML/subscriptions",
        "organizations_url": "https://api.github.com/users/KolbyML/orgs",
        "repos_url": "https://api.github.com/users/KolbyML/repos",
        "events_url": "https://api.github.com/users/KolbyML/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/KolbyML/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "b7cdc8414225df96906a171cc46ba38f58e2846f",
      "commit_url": "https://api.github.com/repos/KolbyML/gui/commits/b7cdc8414225df96906a171cc46ba38f58e2846f",
      "created_at": "2022-08-19T02:29:04Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7218867406,
      "node_id": "HRFPE_lADOEEET9c5PZ5y9zwAAAAGuRyzO",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/7218867406",
      "actor": {
        "login": "KolbyML",
        "id": 31669092,
        "node_id": "MDQ6VXNlcjMxNjY5MDky",
        "avatar_url": "https://avatars.githubusercontent.com/u/31669092?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/KolbyML",
        "html_url": "https://github.com/KolbyML",
        "followers_url": "https://api.github.com/users/KolbyML/followers",
        "following_url": "https://api.github.com/users/KolbyML/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/KolbyML/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/KolbyML/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/KolbyML/subscriptions",
        "organizations_url": "https://api.github.com/users/KolbyML/orgs",
        "repos_url": "https://api.github.com/users/KolbyML/repos",
        "events_url": "https://api.github.com/users/KolbyML/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/KolbyML/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "7138fa36dad71cc77969e36fcad13cc728df3fa0",
      "commit_url": "https://api.github.com/repos/KolbyML/gui/commits/7138fa36dad71cc77969e36fcad13cc728df3fa0",
      "created_at": "2022-08-19T02:37:26Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7219004943,
      "node_id": "HRFPE_lADOEEET9c5PZ5y9zwAAAAGuSUYP",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/7219004943",
      "actor": {
        "login": "KolbyML",
        "id": 31669092,
        "node_id": "MDQ6VXNlcjMxNjY5MDky",
        "avatar_url": "https://avatars.githubusercontent.com/u/31669092?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/KolbyML",
        "html_url": "https://github.com/KolbyML",
        "followers_url": "https://api.github.com/users/KolbyML/followers",
        "following_url": "https://api.github.com/users/KolbyML/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/KolbyML/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/KolbyML/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/KolbyML/subscriptions",
        "organizations_url": "https://api.github.com/users/KolbyML/orgs",
        "repos_url": "https://api.github.com/users/KolbyML/repos",
        "events_url": "https://api.github.com/users/KolbyML/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/KolbyML/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "a7d9ac0670179522b061e1b4e71008507f0a8e96",
      "commit_url": "https://api.github.com/repos/KolbyML/gui/commits/a7d9ac0670179522b061e1b4e71008507f0a8e96",
      "created_at": "2022-08-19T03:21:23Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7219022421,
      "node_id": "HRFPE_lADOEEET9c5PZ5y9zwAAAAGuSYpV",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/7219022421",
      "actor": {
        "login": "KolbyML",
        "id": 31669092,
        "node_id": "MDQ6VXNlcjMxNjY5MDky",
        "avatar_url": "https://avatars.githubusercontent.com/u/31669092?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/KolbyML",
        "html_url": "https://github.com/KolbyML",
        "followers_url": "https://api.github.com/users/KolbyML/followers",
        "following_url": "https://api.github.com/users/KolbyML/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/KolbyML/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/KolbyML/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/KolbyML/subscriptions",
        "organizations_url": "https://api.github.com/users/KolbyML/orgs",
        "repos_url": "https://api.github.com/users/KolbyML/repos",
        "events_url": "https://api.github.com/users/KolbyML/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/KolbyML/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "a2d86a34c37f59b20754fae8aaa12f5b10ebff43",
      "commit_url": "https://api.github.com/repos/KolbyML/gui/commits/a2d86a34c37f59b20754fae8aaa12f5b10ebff43",
      "created_at": "2022-08-19T03:27:08Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7219168048,
      "node_id": "HRFPE_lADOEEET9c5PZ5y9zwAAAAGuS8Mw",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/7219168048",
      "actor": {
        "login": "KolbyML",
        "id": 31669092,
        "node_id": "MDQ6VXNlcjMxNjY5MDky",
        "avatar_url": "https://avatars.githubusercontent.com/u/31669092?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/KolbyML",
        "html_url": "https://github.com/KolbyML",
        "followers_url": "https://api.github.com/users/KolbyML/followers",
        "following_url": "https://api.github.com/users/KolbyML/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/KolbyML/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/KolbyML/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/KolbyML/subscriptions",
        "organizations_url": "https://api.github.com/users/KolbyML/orgs",
        "repos_url": "https://api.github.com/users/KolbyML/repos",
        "events_url": "https://api.github.com/users/KolbyML/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/KolbyML/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "abb378e27c911853b2d224947da2d3e30470bb34",
      "commit_url": "https://api.github.com/repos/KolbyML/gui/commits/abb378e27c911853b2d224947da2d3e30470bb34",
      "created_at": "2022-08-19T04:14:14Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7219171678,
      "node_id": "HRFPE_lADOEEET9c5PZ5y9zwAAAAGuS9Fe",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/7219171678",
      "actor": {
        "login": "KolbyML",
        "id": 31669092,
        "node_id": "MDQ6VXNlcjMxNjY5MDky",
        "avatar_url": "https://avatars.githubusercontent.com/u/31669092?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/KolbyML",
        "html_url": "https://github.com/KolbyML",
        "followers_url": "https://api.github.com/users/KolbyML/followers",
        "following_url": "https://api.github.com/users/KolbyML/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/KolbyML/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/KolbyML/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/KolbyML/subscriptions",
        "organizations_url": "https://api.github.com/users/KolbyML/orgs",
        "repos_url": "https://api.github.com/users/KolbyML/repos",
        "events_url": "https://api.github.com/users/KolbyML/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/KolbyML/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "8eac7e0845b7685bebdb59999728413b3801871f",
      "commit_url": "https://api.github.com/repos/KolbyML/gui/commits/8eac7e0845b7685bebdb59999728413b3801871f",
      "created_at": "2022-08-19T04:15:18Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7219254565,
      "node_id": "HRFPE_lADOEEET9c5PZ5y9zwAAAAGuTRUl",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/7219254565",
      "actor": {
        "login": "KolbyML",
        "id": 31669092,
        "node_id": "MDQ6VXNlcjMxNjY5MDky",
        "avatar_url": "https://avatars.githubusercontent.com/u/31669092?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/KolbyML",
        "html_url": "https://github.com/KolbyML",
        "followers_url": "https://api.github.com/users/KolbyML/followers",
        "following_url": "https://api.github.com/users/KolbyML/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/KolbyML/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/KolbyML/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/KolbyML/subscriptions",
        "organizations_url": "https://api.github.com/users/KolbyML/orgs",
        "repos_url": "https://api.github.com/users/KolbyML/repos",
        "events_url": "https://api.github.com/users/KolbyML/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/KolbyML/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "9a6718eff7a88ace994faa37c6af4bdb6a062923",
      "commit_url": "https://api.github.com/repos/KolbyML/gui/commits/9a6718eff7a88ace994faa37c6af4bdb6a062923",
      "created_at": "2022-08-19T04:40:28Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7219274904,
      "node_id": "HRFPE_lADOEEET9c5PZ5y9zwAAAAGuTWSY",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/7219274904",
      "actor": {
        "login": "KolbyML",
        "id": 31669092,
        "node_id": "MDQ6VXNlcjMxNjY5MDky",
        "avatar_url": "https://avatars.githubusercontent.com/u/31669092?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/KolbyML",
        "html_url": "https://github.com/KolbyML",
        "followers_url": "https://api.github.com/users/KolbyML/followers",
        "following_url": "https://api.github.com/users/KolbyML/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/KolbyML/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/KolbyML/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/KolbyML/subscriptions",
        "organizations_url": "https://api.github.com/users/KolbyML/orgs",
        "repos_url": "https://api.github.com/users/KolbyML/repos",
        "events_url": "https://api.github.com/users/KolbyML/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/KolbyML/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "4d30e0a0ce1f10852f83be20858d1537afbf042b",
      "commit_url": "https://api.github.com/repos/KolbyML/gui/commits/4d30e0a0ce1f10852f83be20858d1537afbf042b",
      "created_at": "2022-08-19T04:45:51Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7219292332,
      "node_id": "HRFPE_lADOEEET9c5PZ5y9zwAAAAGuTais",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/7219292332",
      "actor": {
        "login": "KolbyML",
        "id": 31669092,
        "node_id": "MDQ6VXNlcjMxNjY5MDky",
        "avatar_url": "https://avatars.githubusercontent.com/u/31669092?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/KolbyML",
        "html_url": "https://github.com/KolbyML",
        "followers_url": "https://api.github.com/users/KolbyML/followers",
        "following_url": "https://api.github.com/users/KolbyML/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/KolbyML/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/KolbyML/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/KolbyML/subscriptions",
        "organizations_url": "https://api.github.com/users/KolbyML/orgs",
        "repos_url": "https://api.github.com/users/KolbyML/repos",
        "events_url": "https://api.github.com/users/KolbyML/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/KolbyML/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "400a6de3964aa99f8e77c3e40578e254c4a61cdb",
      "commit_url": "https://api.github.com/repos/KolbyML/gui/commits/400a6de3964aa99f8e77c3e40578e254c4a61cdb",
      "created_at": "2022-08-19T04:51:45Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7219568035,
      "node_id": "HRFPE_lADOEEET9c5PZ5y9zwAAAAGuUd2j",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/7219568035",
      "actor": {
        "login": "KolbyML",
        "id": 31669092,
        "node_id": "MDQ6VXNlcjMxNjY5MDky",
        "avatar_url": "https://avatars.githubusercontent.com/u/31669092?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/KolbyML",
        "html_url": "https://github.com/KolbyML",
        "followers_url": "https://api.github.com/users/KolbyML/followers",
        "following_url": "https://api.github.com/users/KolbyML/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/KolbyML/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/KolbyML/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/KolbyML/subscriptions",
        "organizations_url": "https://api.github.com/users/KolbyML/orgs",
        "repos_url": "https://api.github.com/users/KolbyML/repos",
        "events_url": "https://api.github.com/users/KolbyML/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/KolbyML/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "4ce39ee6e660e01af74d1017213aa72c0286349d",
      "commit_url": "https://api.github.com/repos/KolbyML/gui/commits/4ce39ee6e660e01af74d1017213aa72c0286349d",
      "created_at": "2022-08-19T06:07:59Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7219628423,
      "node_id": "HRFPE_lADOEEET9c5PZ5y9zwAAAAGuUsmH",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/7219628423",
      "actor": {
        "login": "KolbyML",
        "id": 31669092,
        "node_id": "MDQ6VXNlcjMxNjY5MDky",
        "avatar_url": "https://avatars.githubusercontent.com/u/31669092?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/KolbyML",
        "html_url": "https://github.com/KolbyML",
        "followers_url": "https://api.github.com/users/KolbyML/followers",
        "following_url": "https://api.github.com/users/KolbyML/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/KolbyML/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/KolbyML/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/KolbyML/subscriptions",
        "organizations_url": "https://api.github.com/users/KolbyML/orgs",
        "repos_url": "https://api.github.com/users/KolbyML/repos",
        "events_url": "https://api.github.com/users/KolbyML/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/KolbyML/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "aa43f09a0c266d34c6cd9f09c1254ffedc3c287a",
      "commit_url": "https://api.github.com/repos/KolbyML/gui/commits/aa43f09a0c266d34c6cd9f09c1254ffedc3c287a",
      "created_at": "2022-08-19T06:21:38Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7219740137,
      "node_id": "HRFPE_lADOEEET9c5PZ5y9zwAAAAGuVH3p",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/7219740137",
      "actor": {
        "login": "KolbyML",
        "id": 31669092,
        "node_id": "MDQ6VXNlcjMxNjY5MDky",
        "avatar_url": "https://avatars.githubusercontent.com/u/31669092?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/KolbyML",
        "html_url": "https://github.com/KolbyML",
        "followers_url": "https://api.github.com/users/KolbyML/followers",
        "following_url": "https://api.github.com/users/KolbyML/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/KolbyML/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/KolbyML/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/KolbyML/subscriptions",
        "organizations_url": "https://api.github.com/users/KolbyML/orgs",
        "repos_url": "https://api.github.com/users/KolbyML/repos",
        "events_url": "https://api.github.com/users/KolbyML/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/KolbyML/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "b18fdc61cf2e85ad8b0bb7e23866c5a50d8e2748",
      "commit_url": "https://api.github.com/repos/KolbyML/gui/commits/b18fdc61cf2e85ad8b0bb7e23866c5a50d8e2748",
      "created_at": "2022-08-19T06:45:14Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7219875614,
      "node_id": "HRFPE_lADOEEET9c5PZ5y9zwAAAAGuVo8e",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/7219875614",
      "actor": {
        "login": "KolbyML",
        "id": 31669092,
        "node_id": "MDQ6VXNlcjMxNjY5MDky",
        "avatar_url": "https://avatars.githubusercontent.com/u/31669092?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/KolbyML",
        "html_url": "https://github.com/KolbyML",
        "followers_url": "https://api.github.com/users/KolbyML/followers",
        "following_url": "https://api.github.com/users/KolbyML/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/KolbyML/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/KolbyML/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/KolbyML/subscriptions",
        "organizations_url": "https://api.github.com/users/KolbyML/orgs",
        "repos_url": "https://api.github.com/users/KolbyML/repos",
        "events_url": "https://api.github.com/users/KolbyML/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/KolbyML/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "7d4558f2ffc58c0127eddae5b81f19fcf925449d",
      "commit_url": "https://api.github.com/repos/KolbyML/gui/commits/7d4558f2ffc58c0127eddae5b81f19fcf925449d",
      "created_at": "2022-08-19T07:11:10Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7219933175,
      "node_id": "HRFPE_lADOEEET9c5PZ5y9zwAAAAGuV2_3",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/7219933175",
      "actor": {
        "login": "KolbyML",
        "id": 31669092,
        "node_id": "MDQ6VXNlcjMxNjY5MDky",
        "avatar_url": "https://avatars.githubusercontent.com/u/31669092?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/KolbyML",
        "html_url": "https://github.com/KolbyML",
        "followers_url": "https://api.github.com/users/KolbyML/followers",
        "following_url": "https://api.github.com/users/KolbyML/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/KolbyML/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/KolbyML/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/KolbyML/subscriptions",
        "organizations_url": "https://api.github.com/users/KolbyML/orgs",
        "repos_url": "https://api.github.com/users/KolbyML/repos",
        "events_url": "https://api.github.com/users/KolbyML/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/KolbyML/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "55e0c72b45f045f1bf5224f46e1168f89c1b6caf",
      "commit_url": "https://api.github.com/repos/KolbyML/gui/commits/55e0c72b45f045f1bf5224f46e1168f89c1b6caf",
      "created_at": "2022-08-19T07:21:27Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7219937121,
      "node_id": "HRFPE_lADOEEET9c5PZ5y9zwAAAAGuV39h",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/7219937121",
      "actor": {
        "login": "KolbyML",
        "id": 31669092,
        "node_id": "MDQ6VXNlcjMxNjY5MDky",
        "avatar_url": "https://avatars.githubusercontent.com/u/31669092?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/KolbyML",
        "html_url": "https://github.com/KolbyML",
        "followers_url": "https://api.github.com/users/KolbyML/followers",
        "following_url": "https://api.github.com/users/KolbyML/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/KolbyML/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/KolbyML/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/KolbyML/subscriptions",
        "organizations_url": "https://api.github.com/users/KolbyML/orgs",
        "repos_url": "https://api.github.com/users/KolbyML/repos",
        "events_url": "https://api.github.com/users/KolbyML/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/KolbyML/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "2ca2b327361c316c7ba1f32d705d6979fa7b04fd",
      "commit_url": "https://api.github.com/repos/KolbyML/gui/commits/2ca2b327361c316c7ba1f32d705d6979fa7b04fd",
      "created_at": "2022-08-19T07:22:08Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7219981309,
      "node_id": "HRFPE_lADOEEET9c5PZ5y9zwAAAAGuWCv9",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/7219981309",
      "actor": {
        "login": "KolbyML",
        "id": 31669092,
        "node_id": "MDQ6VXNlcjMxNjY5MDky",
        "avatar_url": "https://avatars.githubusercontent.com/u/31669092?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/KolbyML",
        "html_url": "https://github.com/KolbyML",
        "followers_url": "https://api.github.com/users/KolbyML/followers",
        "following_url": "https://api.github.com/users/KolbyML/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/KolbyML/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/KolbyML/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/KolbyML/subscriptions",
        "organizations_url": "https://api.github.com/users/KolbyML/orgs",
        "repos_url": "https://api.github.com/users/KolbyML/repos",
        "events_url": "https://api.github.com/users/KolbyML/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/KolbyML/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "f16891826ee9ae3c8699e98b0ee70ddfd8377ffe",
      "commit_url": "https://api.github.com/repos/KolbyML/gui/commits/f16891826ee9ae3c8699e98b0ee70ddfd8377ffe",
      "created_at": "2022-08-19T07:29:30Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7225475649,
      "node_id": "HRFPE_lADOEEET9c5PZ5y9zwAAAAGurAJB",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/7225475649",
      "actor": {
        "login": "KolbyML",
        "id": 31669092,
        "node_id": "MDQ6VXNlcjMxNjY5MDky",
        "avatar_url": "https://avatars.githubusercontent.com/u/31669092?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/KolbyML",
        "html_url": "https://github.com/KolbyML",
        "followers_url": "https://api.github.com/users/KolbyML/followers",
        "following_url": "https://api.github.com/users/KolbyML/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/KolbyML/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/KolbyML/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/KolbyML/subscriptions",
        "organizations_url": "https://api.github.com/users/KolbyML/orgs",
        "repos_url": "https://api.github.com/users/KolbyML/repos",
        "events_url": "https://api.github.com/users/KolbyML/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/KolbyML/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "672b26aa76b1af691657660a12aa55f6de2c194d",
      "commit_url": "https://api.github.com/repos/KolbyML/gui/commits/672b26aa76b1af691657660a12aa55f6de2c194d",
      "created_at": "2022-08-19T23:37:02Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7225478676,
      "node_id": "HRFPE_lADOEEET9c5PZ5y9zwAAAAGurA4U",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/7225478676",
      "actor": {
        "login": "KolbyML",
        "id": 31669092,
        "node_id": "MDQ6VXNlcjMxNjY5MDky",
        "avatar_url": "https://avatars.githubusercontent.com/u/31669092?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/KolbyML",
        "html_url": "https://github.com/KolbyML",
        "followers_url": "https://api.github.com/users/KolbyML/followers",
        "following_url": "https://api.github.com/users/KolbyML/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/KolbyML/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/KolbyML/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/KolbyML/subscriptions",
        "organizations_url": "https://api.github.com/users/KolbyML/orgs",
        "repos_url": "https://api.github.com/users/KolbyML/repos",
        "events_url": "https://api.github.com/users/KolbyML/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/KolbyML/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "37ae8ab22e4db362ba45b95799369d48e6da1739",
      "commit_url": "https://api.github.com/repos/KolbyML/gui/commits/37ae8ab22e4db362ba45b95799369d48e6da1739",
      "created_at": "2022-08-19T23:38:35Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7225606397,
      "node_id": "HRFPE_lADOEEET9c5PZ5y9zwAAAAGurgD9",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/7225606397",
      "actor": {
        "login": "KolbyML",
        "id": 31669092,
        "node_id": "MDQ6VXNlcjMxNjY5MDky",
        "avatar_url": "https://avatars.githubusercontent.com/u/31669092?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/KolbyML",
        "html_url": "https://github.com/KolbyML",
        "followers_url": "https://api.github.com/users/KolbyML/followers",
        "following_url": "https://api.github.com/users/KolbyML/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/KolbyML/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/KolbyML/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/KolbyML/subscriptions",
        "organizations_url": "https://api.github.com/users/KolbyML/orgs",
        "repos_url": "https://api.github.com/users/KolbyML/repos",
        "events_url": "https://api.github.com/users/KolbyML/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/KolbyML/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "9daf3b528d3ec578e3d8f0e5169f1ce8191e68e0",
      "commit_url": "https://api.github.com/repos/KolbyML/gui/commits/9daf3b528d3ec578e3d8f0e5169f1ce8191e68e0",
      "created_at": "2022-08-20T00:40:13Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7225868563,
      "node_id": "HRFPE_lADOEEET9c5PZ5y9zwAAAAGusgET",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/7225868563",
      "actor": {
        "login": "KolbyML",
        "id": 31669092,
        "node_id": "MDQ6VXNlcjMxNjY5MDky",
        "avatar_url": "https://avatars.githubusercontent.com/u/31669092?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/KolbyML",
        "html_url": "https://github.com/KolbyML",
        "followers_url": "https://api.github.com/users/KolbyML/followers",
        "following_url": "https://api.github.com/users/KolbyML/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/KolbyML/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/KolbyML/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/KolbyML/subscriptions",
        "organizations_url": "https://api.github.com/users/KolbyML/orgs",
        "repos_url": "https://api.github.com/users/KolbyML/repos",
        "events_url": "https://api.github.com/users/KolbyML/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/KolbyML/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "77b39b897e638f8978c7a34a0770fd8c75614cd0",
      "commit_url": "https://api.github.com/repos/KolbyML/gui/commits/77b39b897e638f8978c7a34a0770fd8c75614cd0",
      "created_at": "2022-08-20T04:56:41Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7225887977,
      "node_id": "HRFPE_lADOEEET9c5PZ5y9zwAAAAGuskzp",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/7225887977",
      "actor": {
        "login": "KolbyML",
        "id": 31669092,
        "node_id": "MDQ6VXNlcjMxNjY5MDky",
        "avatar_url": "https://avatars.githubusercontent.com/u/31669092?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/KolbyML",
        "html_url": "https://github.com/KolbyML",
        "followers_url": "https://api.github.com/users/KolbyML/followers",
        "following_url": "https://api.github.com/users/KolbyML/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/KolbyML/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/KolbyML/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/KolbyML/subscriptions",
        "organizations_url": "https://api.github.com/users/KolbyML/orgs",
        "repos_url": "https://api.github.com/users/KolbyML/repos",
        "events_url": "https://api.github.com/users/KolbyML/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/KolbyML/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "8442bc908224a8048508259003a1e7f3a6a36a39",
      "commit_url": "https://api.github.com/repos/KolbyML/gui/commits/8442bc908224a8048508259003a1e7f3a6a36a39",
      "created_at": "2022-08-20T05:22:11Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7225951180,
      "node_id": "HRFPE_lADOEEET9c5PZ5y9zwAAAAGus0PM",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/7225951180",
      "actor": {
        "login": "KolbyML",
        "id": 31669092,
        "node_id": "MDQ6VXNlcjMxNjY5MDky",
        "avatar_url": "https://avatars.githubusercontent.com/u/31669092?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/KolbyML",
        "html_url": "https://github.com/KolbyML",
        "followers_url": "https://api.github.com/users/KolbyML/followers",
        "following_url": "https://api.github.com/users/KolbyML/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/KolbyML/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/KolbyML/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/KolbyML/subscriptions",
        "organizations_url": "https://api.github.com/users/KolbyML/orgs",
        "repos_url": "https://api.github.com/users/KolbyML/repos",
        "events_url": "https://api.github.com/users/KolbyML/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/KolbyML/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "48ed2f7321a376de5990d363d534d2da29473c65",
      "commit_url": "https://api.github.com/repos/KolbyML/gui/commits/48ed2f7321a376de5990d363d534d2da29473c65",
      "created_at": "2022-08-20T06:41:09Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7225953766,
      "node_id": "HRFPE_lADOEEET9c5PZ5y9zwAAAAGus03m",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/7225953766",
      "actor": {
        "login": "KolbyML",
        "id": 31669092,
        "node_id": "MDQ6VXNlcjMxNjY5MDky",
        "avatar_url": "https://avatars.githubusercontent.com/u/31669092?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/KolbyML",
        "html_url": "https://github.com/KolbyML",
        "followers_url": "https://api.github.com/users/KolbyML/followers",
        "following_url": "https://api.github.com/users/KolbyML/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/KolbyML/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/KolbyML/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/KolbyML/subscriptions",
        "organizations_url": "https://api.github.com/users/KolbyML/orgs",
        "repos_url": "https://api.github.com/users/KolbyML/repos",
        "events_url": "https://api.github.com/users/KolbyML/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/KolbyML/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "06a054823ca85712955d52a11d18db319832c387",
      "commit_url": "https://api.github.com/repos/KolbyML/gui/commits/06a054823ca85712955d52a11d18db319832c387",
      "created_at": "2022-08-20T06:44:30Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7225957524,
      "node_id": "HRFPE_lADOEEET9c5PZ5y9zwAAAAGus1yU",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/7225957524",
      "actor": {
        "login": "KolbyML",
        "id": 31669092,
        "node_id": "MDQ6VXNlcjMxNjY5MDky",
        "avatar_url": "https://avatars.githubusercontent.com/u/31669092?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/KolbyML",
        "html_url": "https://github.com/KolbyML",
        "followers_url": "https://api.github.com/users/KolbyML/followers",
        "following_url": "https://api.github.com/users/KolbyML/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/KolbyML/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/KolbyML/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/KolbyML/subscriptions",
        "organizations_url": "https://api.github.com/users/KolbyML/orgs",
        "repos_url": "https://api.github.com/users/KolbyML/repos",
        "events_url": "https://api.github.com/users/KolbyML/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/KolbyML/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "e38811712a17265a08eeccba73315ea6a2f21feb",
      "commit_url": "https://api.github.com/repos/KolbyML/gui/commits/e38811712a17265a08eeccba73315ea6a2f21feb",
      "created_at": "2022-08-20T06:48:39Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7225962341,
      "node_id": "HRFPE_lADOEEET9c5PZ5y9zwAAAAGus29l",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/7225962341",
      "actor": {
        "login": "KolbyML",
        "id": 31669092,
        "node_id": "MDQ6VXNlcjMxNjY5MDky",
        "avatar_url": "https://avatars.githubusercontent.com/u/31669092?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/KolbyML",
        "html_url": "https://github.com/KolbyML",
        "followers_url": "https://api.github.com/users/KolbyML/followers",
        "following_url": "https://api.github.com/users/KolbyML/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/KolbyML/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/KolbyML/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/KolbyML/subscriptions",
        "organizations_url": "https://api.github.com/users/KolbyML/orgs",
        "repos_url": "https://api.github.com/users/KolbyML/repos",
        "events_url": "https://api.github.com/users/KolbyML/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/KolbyML/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "d858328605fa9976d3f60f3be1cdef35c959e1d5",
      "commit_url": "https://api.github.com/repos/KolbyML/gui/commits/d858328605fa9976d3f60f3be1cdef35c959e1d5",
      "created_at": "2022-08-20T06:54:44Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7225963870,
      "node_id": "HRFPE_lADOEEET9c5PZ5y9zwAAAAGus3Ve",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/7225963870",
      "actor": {
        "login": "KolbyML",
        "id": 31669092,
        "node_id": "MDQ6VXNlcjMxNjY5MDky",
        "avatar_url": "https://avatars.githubusercontent.com/u/31669092?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/KolbyML",
        "html_url": "https://github.com/KolbyML",
        "followers_url": "https://api.github.com/users/KolbyML/followers",
        "following_url": "https://api.github.com/users/KolbyML/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/KolbyML/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/KolbyML/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/KolbyML/subscriptions",
        "organizations_url": "https://api.github.com/users/KolbyML/orgs",
        "repos_url": "https://api.github.com/users/KolbyML/repos",
        "events_url": "https://api.github.com/users/KolbyML/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/KolbyML/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "f491a7fc485937cf00134ed600553cf7af61f5dd",
      "commit_url": "https://api.github.com/repos/KolbyML/gui/commits/f491a7fc485937cf00134ed600553cf7af61f5dd",
      "created_at": "2022-08-20T06:56:39Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7225978897,
      "node_id": "HRFPE_lADOEEET9c5PZ5y9zwAAAAGus7AR",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/7225978897",
      "actor": {
        "login": "KolbyML",
        "id": 31669092,
        "node_id": "MDQ6VXNlcjMxNjY5MDky",
        "avatar_url": "https://avatars.githubusercontent.com/u/31669092?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/KolbyML",
        "html_url": "https://github.com/KolbyML",
        "followers_url": "https://api.github.com/users/KolbyML/followers",
        "following_url": "https://api.github.com/users/KolbyML/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/KolbyML/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/KolbyML/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/KolbyML/subscriptions",
        "organizations_url": "https://api.github.com/users/KolbyML/orgs",
        "repos_url": "https://api.github.com/users/KolbyML/repos",
        "events_url": "https://api.github.com/users/KolbyML/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/KolbyML/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "ae28afb85499530109bd74dacb2f85f530eac0c6",
      "commit_url": "https://api.github.com/repos/KolbyML/gui/commits/ae28afb85499530109bd74dacb2f85f530eac0c6",
      "created_at": "2022-08-20T07:15:07Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7225980667,
      "node_id": "HRFPE_lADOEEET9c5PZ5y9zwAAAAGus7b7",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/7225980667",
      "actor": {
        "login": "KolbyML",
        "id": 31669092,
        "node_id": "MDQ6VXNlcjMxNjY5MDky",
        "avatar_url": "https://avatars.githubusercontent.com/u/31669092?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/KolbyML",
        "html_url": "https://github.com/KolbyML",
        "followers_url": "https://api.github.com/users/KolbyML/followers",
        "following_url": "https://api.github.com/users/KolbyML/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/KolbyML/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/KolbyML/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/KolbyML/subscriptions",
        "organizations_url": "https://api.github.com/users/KolbyML/orgs",
        "repos_url": "https://api.github.com/users/KolbyML/repos",
        "events_url": "https://api.github.com/users/KolbyML/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/KolbyML/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "b29b69a27cdd56e216ae04c454104319b0726e6e",
      "commit_url": "https://api.github.com/repos/KolbyML/gui/commits/b29b69a27cdd56e216ae04c454104319b0726e6e",
      "created_at": "2022-08-20T07:17:24Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7226560930,
      "node_id": "HRFPE_lADOEEET9c5PZ5y9zwAAAAGuvJGi",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/7226560930",
      "actor": {
        "login": "KolbyML",
        "id": 31669092,
        "node_id": "MDQ6VXNlcjMxNjY5MDky",
        "avatar_url": "https://avatars.githubusercontent.com/u/31669092?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/KolbyML",
        "html_url": "https://github.com/KolbyML",
        "followers_url": "https://api.github.com/users/KolbyML/followers",
        "following_url": "https://api.github.com/users/KolbyML/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/KolbyML/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/KolbyML/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/KolbyML/subscriptions",
        "organizations_url": "https://api.github.com/users/KolbyML/orgs",
        "repos_url": "https://api.github.com/users/KolbyML/repos",
        "events_url": "https://api.github.com/users/KolbyML/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/KolbyML/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "fda198029e3b1481689d51abcc381468e08c2b2b",
      "commit_url": "https://api.github.com/repos/KolbyML/gui/commits/fda198029e3b1481689d51abcc381468e08c2b2b",
      "created_at": "2022-08-20T17:34:44Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7226583571,
      "node_id": "HRFPE_lADOEEET9c5PZ5y9zwAAAAGuvOoT",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/7226583571",
      "actor": {
        "login": "KolbyML",
        "id": 31669092,
        "node_id": "MDQ6VXNlcjMxNjY5MDky",
        "avatar_url": "https://avatars.githubusercontent.com/u/31669092?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/KolbyML",
        "html_url": "https://github.com/KolbyML",
        "followers_url": "https://api.github.com/users/KolbyML/followers",
        "following_url": "https://api.github.com/users/KolbyML/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/KolbyML/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/KolbyML/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/KolbyML/subscriptions",
        "organizations_url": "https://api.github.com/users/KolbyML/orgs",
        "repos_url": "https://api.github.com/users/KolbyML/repos",
        "events_url": "https://api.github.com/users/KolbyML/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/KolbyML/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "c870271327cacff0a63a2741fecd5ca5e027e9a7",
      "commit_url": "https://api.github.com/repos/KolbyML/gui/commits/c870271327cacff0a63a2741fecd5ca5e027e9a7",
      "created_at": "2022-08-20T17:45:29Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7226591048,
      "node_id": "HRFPE_lADOEEET9c5PZ5y9zwAAAAGuvQdI",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/7226591048",
      "actor": {
        "login": "KolbyML",
        "id": 31669092,
        "node_id": "MDQ6VXNlcjMxNjY5MDky",
        "avatar_url": "https://avatars.githubusercontent.com/u/31669092?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/KolbyML",
        "html_url": "https://github.com/KolbyML",
        "followers_url": "https://api.github.com/users/KolbyML/followers",
        "following_url": "https://api.github.com/users/KolbyML/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/KolbyML/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/KolbyML/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/KolbyML/subscriptions",
        "organizations_url": "https://api.github.com/users/KolbyML/orgs",
        "repos_url": "https://api.github.com/users/KolbyML/repos",
        "events_url": "https://api.github.com/users/KolbyML/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/KolbyML/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "cb8f909ac8a723005fed080e518ad21d34a30a25",
      "commit_url": "https://api.github.com/repos/KolbyML/gui/commits/cb8f909ac8a723005fed080e518ad21d34a30a25",
      "created_at": "2022-08-20T17:48:33Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7226596811,
      "node_id": "HRFPE_lADOEEET9c5PZ5y9zwAAAAGuvR3L",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/7226596811",
      "actor": {
        "login": "KolbyML",
        "id": 31669092,
        "node_id": "MDQ6VXNlcjMxNjY5MDky",
        "avatar_url": "https://avatars.githubusercontent.com/u/31669092?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/KolbyML",
        "html_url": "https://github.com/KolbyML",
        "followers_url": "https://api.github.com/users/KolbyML/followers",
        "following_url": "https://api.github.com/users/KolbyML/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/KolbyML/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/KolbyML/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/KolbyML/subscriptions",
        "organizations_url": "https://api.github.com/users/KolbyML/orgs",
        "repos_url": "https://api.github.com/users/KolbyML/repos",
        "events_url": "https://api.github.com/users/KolbyML/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/KolbyML/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "96c01c5609a2c46d2fd28f6d49c43f9326bfd357",
      "commit_url": "https://api.github.com/repos/KolbyML/gui/commits/96c01c5609a2c46d2fd28f6d49c43f9326bfd357",
      "created_at": "2022-08-20T17:50:49Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7226601807,
      "node_id": "HRFPE_lADOEEET9c5PZ5y9zwAAAAGuvTFP",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/7226601807",
      "actor": {
        "login": "KolbyML",
        "id": 31669092,
        "node_id": "MDQ6VXNlcjMxNjY5MDky",
        "avatar_url": "https://avatars.githubusercontent.com/u/31669092?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/KolbyML",
        "html_url": "https://github.com/KolbyML",
        "followers_url": "https://api.github.com/users/KolbyML/followers",
        "following_url": "https://api.github.com/users/KolbyML/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/KolbyML/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/KolbyML/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/KolbyML/subscriptions",
        "organizations_url": "https://api.github.com/users/KolbyML/orgs",
        "repos_url": "https://api.github.com/users/KolbyML/repos",
        "events_url": "https://api.github.com/users/KolbyML/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/KolbyML/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "ff3360d77108daf4c0d512d1c710ed5a69b26494",
      "commit_url": "https://api.github.com/repos/KolbyML/gui/commits/ff3360d77108daf4c0d512d1c710ed5a69b26494",
      "created_at": "2022-08-20T17:52:51Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7226621864,
      "node_id": "HRFPE_lADOEEET9c5PZ5y9zwAAAAGuvX-o",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/7226621864",
      "actor": {
        "login": "KolbyML",
        "id": 31669092,
        "node_id": "MDQ6VXNlcjMxNjY5MDky",
        "avatar_url": "https://avatars.githubusercontent.com/u/31669092?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/KolbyML",
        "html_url": "https://github.com/KolbyML",
        "followers_url": "https://api.github.com/users/KolbyML/followers",
        "following_url": "https://api.github.com/users/KolbyML/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/KolbyML/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/KolbyML/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/KolbyML/subscriptions",
        "organizations_url": "https://api.github.com/users/KolbyML/orgs",
        "repos_url": "https://api.github.com/users/KolbyML/repos",
        "events_url": "https://api.github.com/users/KolbyML/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/KolbyML/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "fc3f6244ff09108351eff43114f5864f8550083a",
      "commit_url": "https://api.github.com/repos/KolbyML/gui/commits/fc3f6244ff09108351eff43114f5864f8550083a",
      "created_at": "2022-08-20T18:11:00Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7226628227,
      "node_id": "HRFPE_lADOEEET9c5PZ5y9zwAAAAGuvZiD",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/7226628227",
      "actor": {
        "login": "KolbyML",
        "id": 31669092,
        "node_id": "MDQ6VXNlcjMxNjY5MDky",
        "avatar_url": "https://avatars.githubusercontent.com/u/31669092?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/KolbyML",
        "html_url": "https://github.com/KolbyML",
        "followers_url": "https://api.github.com/users/KolbyML/followers",
        "following_url": "https://api.github.com/users/KolbyML/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/KolbyML/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/KolbyML/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/KolbyML/subscriptions",
        "organizations_url": "https://api.github.com/users/KolbyML/orgs",
        "repos_url": "https://api.github.com/users/KolbyML/repos",
        "events_url": "https://api.github.com/users/KolbyML/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/KolbyML/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "f7776e52fd2d78429486def57f0f2e9f562ba1aa",
      "commit_url": "https://api.github.com/repos/KolbyML/gui/commits/f7776e52fd2d78429486def57f0f2e9f562ba1aa",
      "created_at": "2022-08-20T18:18:21Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7226635860,
      "node_id": "HRFPE_lADOEEET9c5PZ5y9zwAAAAGuvbZU",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/7226635860",
      "actor": {
        "login": "KolbyML",
        "id": 31669092,
        "node_id": "MDQ6VXNlcjMxNjY5MDky",
        "avatar_url": "https://avatars.githubusercontent.com/u/31669092?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/KolbyML",
        "html_url": "https://github.com/KolbyML",
        "followers_url": "https://api.github.com/users/KolbyML/followers",
        "following_url": "https://api.github.com/users/KolbyML/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/KolbyML/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/KolbyML/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/KolbyML/subscriptions",
        "organizations_url": "https://api.github.com/users/KolbyML/orgs",
        "repos_url": "https://api.github.com/users/KolbyML/repos",
        "events_url": "https://api.github.com/users/KolbyML/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/KolbyML/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "6402d7acde26e054e8a09e29c4fdfce7ab17ef16",
      "commit_url": "https://api.github.com/repos/KolbyML/gui/commits/6402d7acde26e054e8a09e29c4fdfce7ab17ef16",
      "created_at": "2022-08-20T18:26:46Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7226637030,
      "node_id": "HRFPE_lADOEEET9c5PZ5y9zwAAAAGuvbrm",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/7226637030",
      "actor": {
        "login": "KolbyML",
        "id": 31669092,
        "node_id": "MDQ6VXNlcjMxNjY5MDky",
        "avatar_url": "https://avatars.githubusercontent.com/u/31669092?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/KolbyML",
        "html_url": "https://github.com/KolbyML",
        "followers_url": "https://api.github.com/users/KolbyML/followers",
        "following_url": "https://api.github.com/users/KolbyML/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/KolbyML/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/KolbyML/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/KolbyML/subscriptions",
        "organizations_url": "https://api.github.com/users/KolbyML/orgs",
        "repos_url": "https://api.github.com/users/KolbyML/repos",
        "events_url": "https://api.github.com/users/KolbyML/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/KolbyML/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "648d7471dbf64269a82151ee8fa79acb7b1e48d3",
      "commit_url": "https://api.github.com/repos/KolbyML/gui/commits/648d7471dbf64269a82151ee8fa79acb7b1e48d3",
      "created_at": "2022-08-20T18:28:06Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7226637424,
      "node_id": "HRFPE_lADOEEET9c5PZ5y9zwAAAAGuvbxw",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/7226637424",
      "actor": {
        "login": "KolbyML",
        "id": 31669092,
        "node_id": "MDQ6VXNlcjMxNjY5MDky",
        "avatar_url": "https://avatars.githubusercontent.com/u/31669092?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/KolbyML",
        "html_url": "https://github.com/KolbyML",
        "followers_url": "https://api.github.com/users/KolbyML/followers",
        "following_url": "https://api.github.com/users/KolbyML/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/KolbyML/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/KolbyML/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/KolbyML/subscriptions",
        "organizations_url": "https://api.github.com/users/KolbyML/orgs",
        "repos_url": "https://api.github.com/users/KolbyML/repos",
        "events_url": "https://api.github.com/users/KolbyML/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/KolbyML/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "6ced764584b798fec42248ac9cc8b924b6cb6c0a",
      "commit_url": "https://api.github.com/repos/KolbyML/gui/commits/6ced764584b798fec42248ac9cc8b924b6cb6c0a",
      "created_at": "2022-08-20T18:28:35Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7226681286,
      "node_id": "HRFPE_lADOEEET9c5PZ5y9zwAAAAGuvmfG",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/7226681286",
      "actor": {
        "login": "KolbyML",
        "id": 31669092,
        "node_id": "MDQ6VXNlcjMxNjY5MDky",
        "avatar_url": "https://avatars.githubusercontent.com/u/31669092?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/KolbyML",
        "html_url": "https://github.com/KolbyML",
        "followers_url": "https://api.github.com/users/KolbyML/followers",
        "following_url": "https://api.github.com/users/KolbyML/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/KolbyML/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/KolbyML/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/KolbyML/subscriptions",
        "organizations_url": "https://api.github.com/users/KolbyML/orgs",
        "repos_url": "https://api.github.com/users/KolbyML/repos",
        "events_url": "https://api.github.com/users/KolbyML/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/KolbyML/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "9355a1f9f04cca08bfffcffd15003f4d5cf1326f",
      "commit_url": "https://api.github.com/repos/KolbyML/gui/commits/9355a1f9f04cca08bfffcffd15003f4d5cf1326f",
      "created_at": "2022-08-20T19:08:12Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7226729986,
      "node_id": "HRFPE_lADOEEET9c5PZ5y9zwAAAAGuvyYC",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/7226729986",
      "actor": {
        "login": "KolbyML",
        "id": 31669092,
        "node_id": "MDQ6VXNlcjMxNjY5MDky",
        "avatar_url": "https://avatars.githubusercontent.com/u/31669092?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/KolbyML",
        "html_url": "https://github.com/KolbyML",
        "followers_url": "https://api.github.com/users/KolbyML/followers",
        "following_url": "https://api.github.com/users/KolbyML/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/KolbyML/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/KolbyML/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/KolbyML/subscriptions",
        "organizations_url": "https://api.github.com/users/KolbyML/orgs",
        "repos_url": "https://api.github.com/users/KolbyML/repos",
        "events_url": "https://api.github.com/users/KolbyML/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/KolbyML/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "bc1df554e57f55cf56c3135a572e682673d64c68",
      "commit_url": "https://api.github.com/repos/KolbyML/gui/commits/bc1df554e57f55cf56c3135a572e682673d64c68",
      "created_at": "2022-08-20T19:44:51Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7253261122,
      "node_id": "HRFPE_lADOEEET9c5PZ5y9zwAAAAGwU_tC",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/7253261122",
      "actor": {
        "login": "KolbyML",
        "id": 31669092,
        "node_id": "MDQ6VXNlcjMxNjY5MDky",
        "avatar_url": "https://avatars.githubusercontent.com/u/31669092?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/KolbyML",
        "html_url": "https://github.com/KolbyML",
        "followers_url": "https://api.github.com/users/KolbyML/followers",
        "following_url": "https://api.github.com/users/KolbyML/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/KolbyML/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/KolbyML/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/KolbyML/subscriptions",
        "organizations_url": "https://api.github.com/users/KolbyML/orgs",
        "repos_url": "https://api.github.com/users/KolbyML/repos",
        "events_url": "https://api.github.com/users/KolbyML/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/KolbyML/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "0600b6464e426cf5bf79389aa46dbefb956b4f43",
      "commit_url": "https://api.github.com/repos/KolbyML/gui/commits/0600b6464e426cf5bf79389aa46dbefb956b4f43",
      "created_at": "2022-08-24T18:15:47Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7253954313,
      "node_id": "HRFPE_lADOEEET9c5PZ5y9zwAAAAGwXo8J",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/7253954313",
      "actor": {
        "login": "KolbyML",
        "id": 31669092,
        "node_id": "MDQ6VXNlcjMxNjY5MDky",
        "avatar_url": "https://avatars.githubusercontent.com/u/31669092?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/KolbyML",
        "html_url": "https://github.com/KolbyML",
        "followers_url": "https://api.github.com/users/KolbyML/followers",
        "following_url": "https://api.github.com/users/KolbyML/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/KolbyML/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/KolbyML/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/KolbyML/subscriptions",
        "organizations_url": "https://api.github.com/users/KolbyML/orgs",
        "repos_url": "https://api.github.com/users/KolbyML/repos",
        "events_url": "https://api.github.com/users/KolbyML/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/KolbyML/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "bb0a3945626aeaa85fd6e63f3bb2e91f8357583a",
      "commit_url": "https://api.github.com/repos/KolbyML/gui/commits/bb0a3945626aeaa85fd6e63f3bb2e91f8357583a",
      "created_at": "2022-08-24T20:05:28Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7254885824,
      "node_id": "HRFPE_lADOEEET9c5PZ5y9zwAAAAGwbMXA",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/7254885824",
      "actor": {
        "login": "KolbyML",
        "id": 31669092,
        "node_id": "MDQ6VXNlcjMxNjY5MDky",
        "avatar_url": "https://avatars.githubusercontent.com/u/31669092?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/KolbyML",
        "html_url": "https://github.com/KolbyML",
        "followers_url": "https://api.github.com/users/KolbyML/followers",
        "following_url": "https://api.github.com/users/KolbyML/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/KolbyML/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/KolbyML/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/KolbyML/subscriptions",
        "organizations_url": "https://api.github.com/users/KolbyML/orgs",
        "repos_url": "https://api.github.com/users/KolbyML/repos",
        "events_url": "https://api.github.com/users/KolbyML/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/KolbyML/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "79a82285a2f5a25176f1a586850198550029b929",
      "commit_url": "https://api.github.com/repos/KolbyML/gui/commits/79a82285a2f5a25176f1a586850198550029b929",
      "created_at": "2022-08-24T23:22:38Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7255026507,
      "node_id": "HRFPE_lADOEEET9c5PZ5y9zwAAAAGwbutL",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/7255026507",
      "actor": {
        "login": "KolbyML",
        "id": 31669092,
        "node_id": "MDQ6VXNlcjMxNjY5MDky",
        "avatar_url": "https://avatars.githubusercontent.com/u/31669092?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/KolbyML",
        "html_url": "https://github.com/KolbyML",
        "followers_url": "https://api.github.com/users/KolbyML/followers",
        "following_url": "https://api.github.com/users/KolbyML/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/KolbyML/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/KolbyML/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/KolbyML/subscriptions",
        "organizations_url": "https://api.github.com/users/KolbyML/orgs",
        "repos_url": "https://api.github.com/users/KolbyML/repos",
        "events_url": "https://api.github.com/users/KolbyML/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/KolbyML/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "48a1363866e2a8511094e47c17332788ada6d1ea",
      "commit_url": "https://api.github.com/repos/KolbyML/gui/commits/48a1363866e2a8511094e47c17332788ada6d1ea",
      "created_at": "2022-08-24T23:58:32Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7255140797,
      "node_id": "HRFPE_lADOEEET9c5PZ5y9zwAAAAGwcKm9",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/7255140797",
      "actor": {
        "login": "KolbyML",
        "id": 31669092,
        "node_id": "MDQ6VXNlcjMxNjY5MDky",
        "avatar_url": "https://avatars.githubusercontent.com/u/31669092?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/KolbyML",
        "html_url": "https://github.com/KolbyML",
        "followers_url": "https://api.github.com/users/KolbyML/followers",
        "following_url": "https://api.github.com/users/KolbyML/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/KolbyML/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/KolbyML/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/KolbyML/subscriptions",
        "organizations_url": "https://api.github.com/users/KolbyML/orgs",
        "repos_url": "https://api.github.com/users/KolbyML/repos",
        "events_url": "https://api.github.com/users/KolbyML/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/KolbyML/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "faabd369c1e26eef0653b60baec039affcfdf37a",
      "commit_url": "https://api.github.com/repos/KolbyML/gui/commits/faabd369c1e26eef0653b60baec039affcfdf37a",
      "created_at": "2022-08-25T00:30:08Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7255147388,
      "node_id": "HRFPE_lADOEEET9c5PZ5y9zwAAAAGwcMN8",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/7255147388",
      "actor": {
        "login": "KolbyML",
        "id": 31669092,
        "node_id": "MDQ6VXNlcjMxNjY5MDky",
        "avatar_url": "https://avatars.githubusercontent.com/u/31669092?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/KolbyML",
        "html_url": "https://github.com/KolbyML",
        "followers_url": "https://api.github.com/users/KolbyML/followers",
        "following_url": "https://api.github.com/users/KolbyML/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/KolbyML/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/KolbyML/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/KolbyML/subscriptions",
        "organizations_url": "https://api.github.com/users/KolbyML/orgs",
        "repos_url": "https://api.github.com/users/KolbyML/repos",
        "events_url": "https://api.github.com/users/KolbyML/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/KolbyML/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "3e968a50be7663d3a70dd10312dc32c1d97e4c40",
      "commit_url": "https://api.github.com/repos/KolbyML/gui/commits/3e968a50be7663d3a70dd10312dc32c1d97e4c40",
      "created_at": "2022-08-25T00:31:54Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7255428971,
      "node_id": "HRFPE_lADOEEET9c5PZ5y9zwAAAAGwdQ9r",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/7255428971",
      "actor": {
        "login": "KolbyML",
        "id": 31669092,
        "node_id": "MDQ6VXNlcjMxNjY5MDky",
        "avatar_url": "https://avatars.githubusercontent.com/u/31669092?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/KolbyML",
        "html_url": "https://github.com/KolbyML",
        "followers_url": "https://api.github.com/users/KolbyML/followers",
        "following_url": "https://api.github.com/users/KolbyML/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/KolbyML/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/KolbyML/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/KolbyML/subscriptions",
        "organizations_url": "https://api.github.com/users/KolbyML/orgs",
        "repos_url": "https://api.github.com/users/KolbyML/repos",
        "events_url": "https://api.github.com/users/KolbyML/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/KolbyML/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "ebbb3ecfcbf2bdae6d3c705a0b60adc4c53a91ff",
      "commit_url": "https://api.github.com/repos/KolbyML/gui/commits/ebbb3ecfcbf2bdae6d3c705a0b60adc4c53a91ff",
      "created_at": "2022-08-25T01:51:46Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7255433470,
      "node_id": "HRFPE_lADOEEET9c5PZ5y9zwAAAAGwdSD-",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/7255433470",
      "actor": {
        "login": "KolbyML",
        "id": 31669092,
        "node_id": "MDQ6VXNlcjMxNjY5MDky",
        "avatar_url": "https://avatars.githubusercontent.com/u/31669092?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/KolbyML",
        "html_url": "https://github.com/KolbyML",
        "followers_url": "https://api.github.com/users/KolbyML/followers",
        "following_url": "https://api.github.com/users/KolbyML/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/KolbyML/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/KolbyML/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/KolbyML/subscriptions",
        "organizations_url": "https://api.github.com/users/KolbyML/orgs",
        "repos_url": "https://api.github.com/users/KolbyML/repos",
        "events_url": "https://api.github.com/users/KolbyML/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/KolbyML/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "98428f3ae26f177e4e1a0ec24867a78d7037d6d3",
      "commit_url": "https://api.github.com/repos/KolbyML/gui/commits/98428f3ae26f177e4e1a0ec24867a78d7037d6d3",
      "created_at": "2022-08-25T01:53:20Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7255924816,
      "node_id": "HRFPE_lADOEEET9c5PZ5y9zwAAAAGwfKBQ",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/7255924816",
      "actor": {
        "login": "KolbyML",
        "id": 31669092,
        "node_id": "MDQ6VXNlcjMxNjY5MDky",
        "avatar_url": "https://avatars.githubusercontent.com/u/31669092?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/KolbyML",
        "html_url": "https://github.com/KolbyML",
        "followers_url": "https://api.github.com/users/KolbyML/followers",
        "following_url": "https://api.github.com/users/KolbyML/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/KolbyML/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/KolbyML/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/KolbyML/subscriptions",
        "organizations_url": "https://api.github.com/users/KolbyML/orgs",
        "repos_url": "https://api.github.com/users/KolbyML/repos",
        "events_url": "https://api.github.com/users/KolbyML/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/KolbyML/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "6b7aa9d4f717e0610b603532dd1bf253abc06d08",
      "commit_url": "https://api.github.com/repos/KolbyML/gui/commits/6b7aa9d4f717e0610b603532dd1bf253abc06d08",
      "created_at": "2022-08-25T04:18:50Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7256467725,
      "node_id": "HRFPE_lADOEEET9c5PZ5y9zwAAAAGwhOkN",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/7256467725",
      "actor": {
        "login": "KolbyML",
        "id": 31669092,
        "node_id": "MDQ6VXNlcjMxNjY5MDky",
        "avatar_url": "https://avatars.githubusercontent.com/u/31669092?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/KolbyML",
        "html_url": "https://github.com/KolbyML",
        "followers_url": "https://api.github.com/users/KolbyML/followers",
        "following_url": "https://api.github.com/users/KolbyML/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/KolbyML/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/KolbyML/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/KolbyML/subscriptions",
        "organizations_url": "https://api.github.com/users/KolbyML/orgs",
        "repos_url": "https://api.github.com/users/KolbyML/repos",
        "events_url": "https://api.github.com/users/KolbyML/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/KolbyML/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "9daf3b528d3ec578e3d8f0e5169f1ce8191e68e0",
      "commit_url": "https://api.github.com/repos/KolbyML/gui/commits/9daf3b528d3ec578e3d8f0e5169f1ce8191e68e0",
      "created_at": "2022-08-25T06:30:13Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7256759381,
      "node_id": "HRFPE_lADOEEET9c5PZ5y9zwAAAAGwiVxV",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/7256759381",
      "actor": {
        "login": "KolbyML",
        "id": 31669092,
        "node_id": "MDQ6VXNlcjMxNjY5MDky",
        "avatar_url": "https://avatars.githubusercontent.com/u/31669092?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/KolbyML",
        "html_url": "https://github.com/KolbyML",
        "followers_url": "https://api.github.com/users/KolbyML/followers",
        "following_url": "https://api.github.com/users/KolbyML/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/KolbyML/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/KolbyML/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/KolbyML/subscriptions",
        "organizations_url": "https://api.github.com/users/KolbyML/orgs",
        "repos_url": "https://api.github.com/users/KolbyML/repos",
        "events_url": "https://api.github.com/users/KolbyML/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/KolbyML/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "ebbb3ecfcbf2bdae6d3c705a0b60adc4c53a91ff",
      "commit_url": "https://api.github.com/repos/KolbyML/gui/commits/ebbb3ecfcbf2bdae6d3c705a0b60adc4c53a91ff",
      "created_at": "2022-08-25T07:19:20Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7257512906,
      "node_id": "HRFPE_lADOEEET9c5PZ5y9zwAAAAGwlNvK",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/7257512906",
      "actor": {
        "login": "KolbyML",
        "id": 31669092,
        "node_id": "MDQ6VXNlcjMxNjY5MDky",
        "avatar_url": "https://avatars.githubusercontent.com/u/31669092?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/KolbyML",
        "html_url": "https://github.com/KolbyML",
        "followers_url": "https://api.github.com/users/KolbyML/followers",
        "following_url": "https://api.github.com/users/KolbyML/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/KolbyML/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/KolbyML/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/KolbyML/subscriptions",
        "organizations_url": "https://api.github.com/users/KolbyML/orgs",
        "repos_url": "https://api.github.com/users/KolbyML/repos",
        "events_url": "https://api.github.com/users/KolbyML/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/KolbyML/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "b2ae3602b9a2258220dd562d01e93c5abfafc652",
      "commit_url": "https://api.github.com/repos/KolbyML/gui/commits/b2ae3602b9a2258220dd562d01e93c5abfafc652",
      "created_at": "2022-08-25T08:59:55Z"
    },
    {
      "event": "commented",
      "id": 1226985677,
      "node_id": "IC_kwDOEEET9c5JIlDN",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/comments/1226985677",
      "actor": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-25T09:03:43Z",
      "updated_at": "2022-08-25T09:04:16Z",
      "author_association": "MEMBER",
      "body": "@KolbyML \r\n\r\nIt is not an appropriate usage of CI resources to debug your branch.",
      "user": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin-core/gui/pull/650#issuecomment-1226985677",
      "issue_url": "https://api.github.com/repos/bitcoin-core/gui/issues/650"
    },
    {
      "event": "mentioned",
      "id": 7257546745,
      "node_id": "MEE_lADOEEET9c5PZ5y9zwAAAAGwlV_5",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/7257546745",
      "actor": {
        "login": "KolbyML",
        "id": 31669092,
        "node_id": "MDQ6VXNlcjMxNjY5MDky",
        "avatar_url": "https://avatars.githubusercontent.com/u/31669092?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/KolbyML",
        "html_url": "https://github.com/KolbyML",
        "followers_url": "https://api.github.com/users/KolbyML/followers",
        "following_url": "https://api.github.com/users/KolbyML/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/KolbyML/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/KolbyML/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/KolbyML/subscriptions",
        "organizations_url": "https://api.github.com/users/KolbyML/orgs",
        "repos_url": "https://api.github.com/users/KolbyML/repos",
        "events_url": "https://api.github.com/users/KolbyML/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/KolbyML/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-25T09:04:17Z"
    },
    {
      "event": "subscribed",
      "id": 7257546778,
      "node_id": "SE_lADOEEET9c5PZ5y9zwAAAAGwlWAa",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/7257546778",
      "actor": {
        "login": "KolbyML",
        "id": 31669092,
        "node_id": "MDQ6VXNlcjMxNjY5MDky",
        "avatar_url": "https://avatars.githubusercontent.com/u/31669092?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/KolbyML",
        "html_url": "https://github.com/KolbyML",
        "followers_url": "https://api.github.com/users/KolbyML/followers",
        "following_url": "https://api.github.com/users/KolbyML/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/KolbyML/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/KolbyML/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/KolbyML/subscriptions",
        "organizations_url": "https://api.github.com/users/KolbyML/orgs",
        "repos_url": "https://api.github.com/users/KolbyML/repos",
        "events_url": "https://api.github.com/users/KolbyML/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/KolbyML/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-25T09:04:17Z"
    },
    {
      "event": "commented",
      "id": 1226991485,
      "node_id": "IC_kwDOEEET9c5JImd9",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/comments/1226991485",
      "actor": {
        "login": "KolbyML",
        "id": 31669092,
        "node_id": "MDQ6VXNlcjMxNjY5MDky",
        "avatar_url": "https://avatars.githubusercontent.com/u/31669092?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/KolbyML",
        "html_url": "https://github.com/KolbyML",
        "followers_url": "https://api.github.com/users/KolbyML/followers",
        "following_url": "https://api.github.com/users/KolbyML/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/KolbyML/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/KolbyML/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/KolbyML/subscriptions",
        "organizations_url": "https://api.github.com/users/KolbyML/orgs",
        "repos_url": "https://api.github.com/users/KolbyML/repos",
        "events_url": "https://api.github.com/users/KolbyML/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/KolbyML/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-25T09:07:51Z",
      "updated_at": "2022-08-25T09:07:51Z",
      "author_association": "CONTRIBUTOR",
      "body": "> @KolbyML\r\n> \r\n> It is not an appropriate usage of CI resources to debug your branch.\r\n\r\n@hebasto oh, sorry for doing that. How should I debug the Win64 native [vs2022] linker error I have then going forward? Thank you for letting me know",
      "user": {
        "login": "KolbyML",
        "id": 31669092,
        "node_id": "MDQ6VXNlcjMxNjY5MDky",
        "avatar_url": "https://avatars.githubusercontent.com/u/31669092?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/KolbyML",
        "html_url": "https://github.com/KolbyML",
        "followers_url": "https://api.github.com/users/KolbyML/followers",
        "following_url": "https://api.github.com/users/KolbyML/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/KolbyML/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/KolbyML/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/KolbyML/subscriptions",
        "organizations_url": "https://api.github.com/users/KolbyML/orgs",
        "repos_url": "https://api.github.com/users/KolbyML/repos",
        "events_url": "https://api.github.com/users/KolbyML/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/KolbyML/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin-core/gui/pull/650#issuecomment-1226991485",
      "issue_url": "https://api.github.com/repos/bitcoin-core/gui/issues/650"
    },
    {
      "event": "mentioned",
      "id": 7257574761,
      "node_id": "MEE_lADOEEET9c5PZ5y9zwAAAAGwlc1p",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/7257574761",
      "actor": {
        "login": "KolbyML",
        "id": 31669092,
        "node_id": "MDQ6VXNlcjMxNjY5MDky",
        "avatar_url": "https://avatars.githubusercontent.com/u/31669092?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/KolbyML",
        "html_url": "https://github.com/KolbyML",
        "followers_url": "https://api.github.com/users/KolbyML/followers",
        "following_url": "https://api.github.com/users/KolbyML/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/KolbyML/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/KolbyML/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/KolbyML/subscriptions",
        "organizations_url": "https://api.github.com/users/KolbyML/orgs",
        "repos_url": "https://api.github.com/users/KolbyML/repos",
        "events_url": "https://api.github.com/users/KolbyML/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/KolbyML/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-25T09:07:51Z"
    },
    {
      "event": "subscribed",
      "id": 7257574768,
      "node_id": "SE_lADOEEET9c5PZ5y9zwAAAAGwlc1w",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/7257574768",
      "actor": {
        "login": "KolbyML",
        "id": 31669092,
        "node_id": "MDQ6VXNlcjMxNjY5MDky",
        "avatar_url": "https://avatars.githubusercontent.com/u/31669092?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/KolbyML",
        "html_url": "https://github.com/KolbyML",
        "followers_url": "https://api.github.com/users/KolbyML/followers",
        "following_url": "https://api.github.com/users/KolbyML/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/KolbyML/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/KolbyML/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/KolbyML/subscriptions",
        "organizations_url": "https://api.github.com/users/KolbyML/orgs",
        "repos_url": "https://api.github.com/users/KolbyML/repos",
        "events_url": "https://api.github.com/users/KolbyML/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/KolbyML/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-25T09:07:51Z"
    },
    {
      "event": "mentioned",
      "id": 7257574774,
      "node_id": "MEE_lADOEEET9c5PZ5y9zwAAAAGwlc12",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/7257574774",
      "actor": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-25T09:07:51Z"
    },
    {
      "event": "subscribed",
      "id": 7257574785,
      "node_id": "SE_lADOEEET9c5PZ5y9zwAAAAGwlc2B",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/7257574785",
      "actor": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-25T09:07:51Z"
    },
    {
      "event": "commented",
      "id": 1226994796,
      "node_id": "IC_kwDOEEET9c5JInRs",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/comments/1226994796",
      "actor": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-25T09:09:55Z",
      "updated_at": "2022-08-25T09:09:55Z",
      "author_association": "MEMBER",
      "body": "> How should I debug the Win64 native [vs2022] linker error I have then going forward? Thank you for letting me know\r\n\r\nbitcoin/bitcoin#25929 should fix it",
      "user": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin-core/gui/pull/650#issuecomment-1226994796",
      "issue_url": "https://api.github.com/repos/bitcoin-core/gui/issues/650"
    },
    {
      "event": "commented",
      "id": 1226997922,
      "node_id": "IC_kwDOEEET9c5JIoCi",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/comments/1226997922",
      "actor": {
        "login": "KolbyML",
        "id": 31669092,
        "node_id": "MDQ6VXNlcjMxNjY5MDky",
        "avatar_url": "https://avatars.githubusercontent.com/u/31669092?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/KolbyML",
        "html_url": "https://github.com/KolbyML",
        "followers_url": "https://api.github.com/users/KolbyML/followers",
        "following_url": "https://api.github.com/users/KolbyML/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/KolbyML/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/KolbyML/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/KolbyML/subscriptions",
        "organizations_url": "https://api.github.com/users/KolbyML/orgs",
        "repos_url": "https://api.github.com/users/KolbyML/repos",
        "events_url": "https://api.github.com/users/KolbyML/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/KolbyML/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-25T09:12:55Z",
      "updated_at": "2022-08-25T09:14:07Z",
      "author_association": "CONTRIBUTOR",
      "body": "> > How should I debug the Win64 native [vs2022] linker error I have then going forward? Thank you for letting me know\r\n> \r\n> [bitcoin/bitcoin#25929](https://github.com/bitcoin/bitcoin/pull/25929) should fix it\r\n\r\nThank you for letting me know that was driving me crazy. Cause it seemed like my code was fine. I will push my changes, then switch the PR to a draft then, since I think that won't trigger CI. Worse comes to worse I will just work on a local branch like I was originally before working on the PR.\r\n\r\nEdit: switch it to a draft till I am done implementing tests for importmulti/importdescriptors",
      "user": {
        "login": "KolbyML",
        "id": 31669092,
        "node_id": "MDQ6VXNlcjMxNjY5MDky",
        "avatar_url": "https://avatars.githubusercontent.com/u/31669092?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/KolbyML",
        "html_url": "https://github.com/KolbyML",
        "followers_url": "https://api.github.com/users/KolbyML/followers",
        "following_url": "https://api.github.com/users/KolbyML/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/KolbyML/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/KolbyML/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/KolbyML/subscriptions",
        "organizations_url": "https://api.github.com/users/KolbyML/orgs",
        "repos_url": "https://api.github.com/users/KolbyML/repos",
        "events_url": "https://api.github.com/users/KolbyML/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/KolbyML/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin-core/gui/pull/650#issuecomment-1226997922",
      "issue_url": "https://api.github.com/repos/bitcoin-core/gui/issues/650"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7257638421,
      "node_id": "HRFPE_lADOEEET9c5PZ5y9zwAAAAGwlsYV",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/7257638421",
      "actor": {
        "login": "KolbyML",
        "id": 31669092,
        "node_id": "MDQ6VXNlcjMxNjY5MDky",
        "avatar_url": "https://avatars.githubusercontent.com/u/31669092?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/KolbyML",
        "html_url": "https://github.com/KolbyML",
        "followers_url": "https://api.github.com/users/KolbyML/followers",
        "following_url": "https://api.github.com/users/KolbyML/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/KolbyML/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/KolbyML/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/KolbyML/subscriptions",
        "organizations_url": "https://api.github.com/users/KolbyML/orgs",
        "repos_url": "https://api.github.com/users/KolbyML/repos",
        "events_url": "https://api.github.com/users/KolbyML/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/KolbyML/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "ebbb3ecfcbf2bdae6d3c705a0b60adc4c53a91ff",
      "commit_url": "https://api.github.com/repos/KolbyML/gui/commits/ebbb3ecfcbf2bdae6d3c705a0b60adc4c53a91ff",
      "created_at": "2022-08-25T09:15:19Z"
    },
    {
      "event": "commented",
      "id": 1227027971,
      "node_id": "IC_kwDOEEET9c5JIvYD",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/comments/1227027971",
      "actor": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-25T09:40:57Z",
      "updated_at": "2022-08-25T09:40:57Z",
      "author_association": "MEMBER",
      "body": "> Edit: switch it to a draft till I am done implementing tests for importmulti/importdescriptors\r\n\r\n![image](https://user-images.githubusercontent.com/32963518/186631627-9d0497dd-f38d-4c45-bf75-1f40d3d55b00.png)\r\n\r\nJust click \"Convert to draft\" :)",
      "user": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin-core/gui/pull/650#issuecomment-1227027971",
      "issue_url": "https://api.github.com/repos/bitcoin-core/gui/issues/650"
    },
    {
      "event": "convert_to_draft",
      "id": 7261217249,
      "node_id": "CTDE_lADOEEET9c5PZ5y9zwAAAAGwzWHh",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/7261217249",
      "actor": {
        "login": "KolbyML",
        "id": 31669092,
        "node_id": "MDQ6VXNlcjMxNjY5MDky",
        "avatar_url": "https://avatars.githubusercontent.com/u/31669092?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/KolbyML",
        "html_url": "https://github.com/KolbyML",
        "followers_url": "https://api.github.com/users/KolbyML/followers",
        "following_url": "https://api.github.com/users/KolbyML/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/KolbyML/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/KolbyML/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/KolbyML/subscriptions",
        "organizations_url": "https://api.github.com/users/KolbyML/orgs",
        "repos_url": "https://api.github.com/users/KolbyML/repos",
        "events_url": "https://api.github.com/users/KolbyML/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/KolbyML/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-25T16:47:05Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7264382485,
      "node_id": "HRFPE_lADOEEET9c5PZ5y9zwAAAAGw_a4V",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/7264382485",
      "actor": {
        "login": "KolbyML",
        "id": 31669092,
        "node_id": "MDQ6VXNlcjMxNjY5MDky",
        "avatar_url": "https://avatars.githubusercontent.com/u/31669092?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/KolbyML",
        "html_url": "https://github.com/KolbyML",
        "followers_url": "https://api.github.com/users/KolbyML/followers",
        "following_url": "https://api.github.com/users/KolbyML/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/KolbyML/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/KolbyML/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/KolbyML/subscriptions",
        "organizations_url": "https://api.github.com/users/KolbyML/orgs",
        "repos_url": "https://api.github.com/users/KolbyML/repos",
        "events_url": "https://api.github.com/users/KolbyML/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/KolbyML/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "11278a0f3fa4ec3ba8c9a2d4d28133f0cc40041c",
      "commit_url": "https://api.github.com/repos/KolbyML/gui/commits/11278a0f3fa4ec3ba8c9a2d4d28133f0cc40041c",
      "created_at": "2022-08-26T03:55:47Z"
    },
    {
      "event": "commented",
      "id": 1286961980,
      "node_id": "IC_kwDOEEET9c5MtXs8",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/comments/1286961980",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-10-21T13:27:57Z",
      "updated_at": "2023-08-10T23:50:56Z",
      "author_association": "CONTRIBUTOR",
      "body": "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--021abf342d371248e50ceaed478a90ca-->\n### Reviews\nSee [the guideline](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#code-review) for information on the review process.\n| Type | Reviewers |\n| ---- | --------- |\n| Concept ACK | [w0xlt](https://github.com/bitcoin-core/gui/pull/650#issuecomment-1209915707), [jarolrod](https://github.com/bitcoin-core/gui/pull/650#pullrequestreview-1067481148), [hernanmarino](https://github.com/bitcoin-core/gui/pull/650#pullrequestreview-1358165949) |\n\nIf your review is incorrectly listed, please react with 👎 to this comment and the bot will ignore it on the next update.\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#bitcoin/bitcoin/28246](https://github.com/bitcoin/bitcoin/pull/28246) (wallet: Use CTxDestination in CRecipient instead of just scriptPubKey by achow101)\n* [#bitcoin/bitcoin/28244](https://github.com/bitcoin/bitcoin/pull/28244) (Break up script/standard.{h/cpp} by achow101)\n* [#bitcoin/bitcoin/28202](https://github.com/bitcoin/bitcoin/pull/28202) (Silent Payments: receiving by josibake)\n* [#bitcoin/bitcoin/28201](https://github.com/bitcoin/bitcoin/pull/28201) (Silent Payments: sending by josibake)\n* [#bitcoin/bitcoin/28126](https://github.com/bitcoin/bitcoin/pull/28126) (wallet legacy: bugfix, disallow importing invalid scripts via importaddress by furszy)\n* [#bitcoin/bitcoin/28122](https://github.com/bitcoin/bitcoin/pull/28122) (Silent Payments: Implement BIP352 by josibake)\n* [#bitcoin/bitcoin/27865](https://github.com/bitcoin/bitcoin/pull/27865) (wallet: Track no-longer-spendable TXOs separately by achow101)\n* [#bitcoin/bitcoin/27827](https://github.com/bitcoin/bitcoin/pull/27827) (Silent Payments: send and receive by josibake)\n* [#bitcoin/bitcoin/27351](https://github.com/bitcoin/bitcoin/pull/27351) (wallet: add `seeds` argument to `importdescriptors` by apoelstra)\n* [#bitcoin/bitcoin/27286](https://github.com/bitcoin/bitcoin/pull/27286) (wallet: Keep track of the wallet's own transaction outputs in memory by achow101)\n* [#bitcoin/bitcoin/27101](https://github.com/bitcoin/bitcoin/pull/27101) (Support JSON-RPC 2.0 when requested by client by pinheadmz)\n* [#bitcoin/bitcoin/27034](https://github.com/bitcoin/bitcoin/pull/27034) (rpc: make importaddress compatible with descriptors wallet by furszy)\n* [#bitcoin/bitcoin/26840](https://github.com/bitcoin/bitcoin/pull/26840) (refactor: importpubkey, importprivkey, importaddress, importmulti, and importdescriptors rpc by KolbyML)\n* [#bitcoin/bitcoin/26403](https://github.com/bitcoin/bitcoin/pull/26403) (policy: Ephemeral anchors by instagibbs)\n* [#bitcoin/bitcoin/22838](https://github.com/bitcoin/bitcoin/pull/22838) (descriptors: Be able to specify change and receiving in a single descriptor string by achow101)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.\n",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin-core/gui/pull/650#issuecomment-1286961980",
      "issue_url": "https://api.github.com/repos/bitcoin-core/gui/issues/650"
    },
    {
      "event": "labeled",
      "id": 7965425591,
      "node_id": "LE_lADOEEET9c5PZ5y9zwAAAAHaxr-3",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/7965425591",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-12-06T11:18:19Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 8554123766,
      "node_id": "HRFPE_lADOEEET9c5PZ5y9zwAAAAH93ZH2",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/8554123766",
      "actor": {
        "login": "KolbyML",
        "id": 31669092,
        "node_id": "MDQ6VXNlcjMxNjY5MDky",
        "avatar_url": "https://avatars.githubusercontent.com/u/31669092?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/KolbyML",
        "html_url": "https://github.com/KolbyML",
        "followers_url": "https://api.github.com/users/KolbyML/followers",
        "following_url": "https://api.github.com/users/KolbyML/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/KolbyML/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/KolbyML/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/KolbyML/subscriptions",
        "organizations_url": "https://api.github.com/users/KolbyML/orgs",
        "repos_url": "https://api.github.com/users/KolbyML/repos",
        "events_url": "https://api.github.com/users/KolbyML/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/KolbyML/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "649ba82597b03a3a2500a80ce76f52c9995c0397",
      "commit_url": "https://api.github.com/repos/KolbyML/gui/commits/649ba82597b03a3a2500a80ce76f52c9995c0397",
      "created_at": "2023-02-18T23:39:02Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 8554497042,
      "node_id": "HRFPE_lADOEEET9c5PZ5y9zwAAAAH940QS",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/8554497042",
      "actor": {
        "login": "KolbyML",
        "id": 31669092,
        "node_id": "MDQ6VXNlcjMxNjY5MDky",
        "avatar_url": "https://avatars.githubusercontent.com/u/31669092?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/KolbyML",
        "html_url": "https://github.com/KolbyML",
        "followers_url": "https://api.github.com/users/KolbyML/followers",
        "following_url": "https://api.github.com/users/KolbyML/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/KolbyML/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/KolbyML/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/KolbyML/subscriptions",
        "organizations_url": "https://api.github.com/users/KolbyML/orgs",
        "repos_url": "https://api.github.com/users/KolbyML/repos",
        "events_url": "https://api.github.com/users/KolbyML/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/KolbyML/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "cf6adf97f4227b7fa061f07575c73f303bd10402",
      "commit_url": "https://api.github.com/repos/KolbyML/gui/commits/cf6adf97f4227b7fa061f07575c73f303bd10402",
      "created_at": "2023-02-19T04:42:33Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 8554500198,
      "node_id": "HRFPE_lADOEEET9c5PZ5y9zwAAAAH941Bm",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/8554500198",
      "actor": {
        "login": "KolbyML",
        "id": 31669092,
        "node_id": "MDQ6VXNlcjMxNjY5MDky",
        "avatar_url": "https://avatars.githubusercontent.com/u/31669092?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/KolbyML",
        "html_url": "https://github.com/KolbyML",
        "followers_url": "https://api.github.com/users/KolbyML/followers",
        "following_url": "https://api.github.com/users/KolbyML/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/KolbyML/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/KolbyML/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/KolbyML/subscriptions",
        "organizations_url": "https://api.github.com/users/KolbyML/orgs",
        "repos_url": "https://api.github.com/users/KolbyML/repos",
        "events_url": "https://api.github.com/users/KolbyML/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/KolbyML/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "446760110c9d86dc947f6ec52500dd452abc90e3",
      "commit_url": "https://api.github.com/repos/KolbyML/gui/commits/446760110c9d86dc947f6ec52500dd452abc90e3",
      "created_at": "2023-02-19T04:47:01Z"
    },
    {
      "event": "ready_for_review",
      "id": 8554500427,
      "node_id": "RFRE_lADOEEET9c5PZ5y9zwAAAAH941FL",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/8554500427",
      "actor": {
        "login": "KolbyML",
        "id": 31669092,
        "node_id": "MDQ6VXNlcjMxNjY5MDky",
        "avatar_url": "https://avatars.githubusercontent.com/u/31669092?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/KolbyML",
        "html_url": "https://github.com/KolbyML",
        "followers_url": "https://api.github.com/users/KolbyML/followers",
        "following_url": "https://api.github.com/users/KolbyML/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/KolbyML/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/KolbyML/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/KolbyML/subscriptions",
        "organizations_url": "https://api.github.com/users/KolbyML/orgs",
        "repos_url": "https://api.github.com/users/KolbyML/repos",
        "events_url": "https://api.github.com/users/KolbyML/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/KolbyML/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-02-19T04:47:19Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 8564601416,
      "node_id": "HRFPE_lADOEEET9c5PZ5y9zwAAAAH-fXJI",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/8564601416",
      "actor": {
        "login": "KolbyML",
        "id": 31669092,
        "node_id": "MDQ6VXNlcjMxNjY5MDky",
        "avatar_url": "https://avatars.githubusercontent.com/u/31669092?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/KolbyML",
        "html_url": "https://github.com/KolbyML",
        "followers_url": "https://api.github.com/users/KolbyML/followers",
        "following_url": "https://api.github.com/users/KolbyML/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/KolbyML/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/KolbyML/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/KolbyML/subscriptions",
        "organizations_url": "https://api.github.com/users/KolbyML/orgs",
        "repos_url": "https://api.github.com/users/KolbyML/repos",
        "events_url": "https://api.github.com/users/KolbyML/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/KolbyML/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "682d59eb1385713a2648c877bad6bfb46f7b7e51",
      "commit_url": "https://api.github.com/repos/KolbyML/gui/commits/682d59eb1385713a2648c877bad6bfb46f7b7e51",
      "created_at": "2023-02-20T19:49:40Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 8564717530,
      "node_id": "HRFPE_lADOEEET9c5PZ5y9zwAAAAH-fzfa",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/8564717530",
      "actor": {
        "login": "KolbyML",
        "id": 31669092,
        "node_id": "MDQ6VXNlcjMxNjY5MDky",
        "avatar_url": "https://avatars.githubusercontent.com/u/31669092?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/KolbyML",
        "html_url": "https://github.com/KolbyML",
        "followers_url": "https://api.github.com/users/KolbyML/followers",
        "following_url": "https://api.github.com/users/KolbyML/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/KolbyML/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/KolbyML/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/KolbyML/subscriptions",
        "organizations_url": "https://api.github.com/users/KolbyML/orgs",
        "repos_url": "https://api.github.com/users/KolbyML/repos",
        "events_url": "https://api.github.com/users/KolbyML/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/KolbyML/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "29f5ebb9364e0bee89fae2730ba8538ffa1b3c12",
      "commit_url": "https://api.github.com/repos/KolbyML/gui/commits/29f5ebb9364e0bee89fae2730ba8538ffa1b3c12",
      "created_at": "2023-02-20T20:12:41Z"
    },
    {
      "event": "unlabeled",
      "id": 8564769526,
      "node_id": "UNLE_lADOEEET9c5PZ5y9zwAAAAH-gAL2",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/8564769526",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-02-20T20:24:21Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 8565566950,
      "node_id": "HRFPE_lADOEEET9c5PZ5y9zwAAAAH-jC3m",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/8565566950",
      "actor": {
        "login": "KolbyML",
        "id": 31669092,
        "node_id": "MDQ6VXNlcjMxNjY5MDky",
        "avatar_url": "https://avatars.githubusercontent.com/u/31669092?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/KolbyML",
        "html_url": "https://github.com/KolbyML",
        "followers_url": "https://api.github.com/users/KolbyML/followers",
        "following_url": "https://api.github.com/users/KolbyML/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/KolbyML/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/KolbyML/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/KolbyML/subscriptions",
        "organizations_url": "https://api.github.com/users/KolbyML/orgs",
        "repos_url": "https://api.github.com/users/KolbyML/repos",
        "events_url": "https://api.github.com/users/KolbyML/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/KolbyML/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "b75b466cfd10863029b6269689cc3eb84f0a52e5",
      "commit_url": "https://api.github.com/repos/KolbyML/gui/commits/b75b466cfd10863029b6269689cc3eb84f0a52e5",
      "created_at": "2023-02-20T23:26:14Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 8565625938,
      "node_id": "HRFPE_lADOEEET9c5PZ5y9zwAAAAH-jRRS",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/8565625938",
      "actor": {
        "login": "KolbyML",
        "id": 31669092,
        "node_id": "MDQ6VXNlcjMxNjY5MDky",
        "avatar_url": "https://avatars.githubusercontent.com/u/31669092?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/KolbyML",
        "html_url": "https://github.com/KolbyML",
        "followers_url": "https://api.github.com/users/KolbyML/followers",
        "following_url": "https://api.github.com/users/KolbyML/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/KolbyML/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/KolbyML/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/KolbyML/subscriptions",
        "organizations_url": "https://api.github.com/users/KolbyML/orgs",
        "repos_url": "https://api.github.com/users/KolbyML/repos",
        "events_url": "https://api.github.com/users/KolbyML/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/KolbyML/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "c4d4f23f1349f2634bd41066647e269f834bfd24",
      "commit_url": "https://api.github.com/repos/KolbyML/gui/commits/c4d4f23f1349f2634bd41066647e269f834bfd24",
      "created_at": "2023-02-20T23:50:03Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 8565699981,
      "node_id": "HRFPE_lADOEEET9c5PZ5y9zwAAAAH-jjWN",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/8565699981",
      "actor": {
        "login": "KolbyML",
        "id": 31669092,
        "node_id": "MDQ6VXNlcjMxNjY5MDky",
        "avatar_url": "https://avatars.githubusercontent.com/u/31669092?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/KolbyML",
        "html_url": "https://github.com/KolbyML",
        "followers_url": "https://api.github.com/users/KolbyML/followers",
        "following_url": "https://api.github.com/users/KolbyML/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/KolbyML/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/KolbyML/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/KolbyML/subscriptions",
        "organizations_url": "https://api.github.com/users/KolbyML/orgs",
        "repos_url": "https://api.github.com/users/KolbyML/repos",
        "events_url": "https://api.github.com/users/KolbyML/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/KolbyML/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "9a2ec0765e8b1010afa9b9d3e50d64c503117a99",
      "commit_url": "https://api.github.com/repos/KolbyML/gui/commits/9a2ec0765e8b1010afa9b9d3e50d64c503117a99",
      "created_at": "2023-02-21T00:10:35Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 8565968600,
      "node_id": "HRFPE_lADOEEET9c5PZ5y9zwAAAAH-kk7Y",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/8565968600",
      "actor": {
        "login": "KolbyML",
        "id": 31669092,
        "node_id": "MDQ6VXNlcjMxNjY5MDky",
        "avatar_url": "https://avatars.githubusercontent.com/u/31669092?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/KolbyML",
        "html_url": "https://github.com/KolbyML",
        "followers_url": "https://api.github.com/users/KolbyML/followers",
        "following_url": "https://api.github.com/users/KolbyML/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/KolbyML/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/KolbyML/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/KolbyML/subscriptions",
        "organizations_url": "https://api.github.com/users/KolbyML/orgs",
        "repos_url": "https://api.github.com/users/KolbyML/repos",
        "events_url": "https://api.github.com/users/KolbyML/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/KolbyML/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "63b602f80f81ad66b63b877be99e1f8cd01dad5a",
      "commit_url": "https://api.github.com/repos/KolbyML/gui/commits/63b602f80f81ad66b63b877be99e1f8cd01dad5a",
      "created_at": "2023-02-21T01:18:25Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 8566290307,
      "node_id": "HRFPE_lADOEEET9c5PZ5y9zwAAAAH-lzeD",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/8566290307",
      "actor": {
        "login": "KolbyML",
        "id": 31669092,
        "node_id": "MDQ6VXNlcjMxNjY5MDky",
        "avatar_url": "https://avatars.githubusercontent.com/u/31669092?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/KolbyML",
        "html_url": "https://github.com/KolbyML",
        "followers_url": "https://api.github.com/users/KolbyML/followers",
        "following_url": "https://api.github.com/users/KolbyML/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/KolbyML/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/KolbyML/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/KolbyML/subscriptions",
        "organizations_url": "https://api.github.com/users/KolbyML/orgs",
        "repos_url": "https://api.github.com/users/KolbyML/repos",
        "events_url": "https://api.github.com/users/KolbyML/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/KolbyML/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "a4993aea3633d7e66f7f7aeab47ef88c24199ef8",
      "commit_url": "https://api.github.com/repos/KolbyML/gui/commits/a4993aea3633d7e66f7f7aeab47ef88c24199ef8",
      "created_at": "2023-02-21T02:39:53Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 8566369305,
      "node_id": "HRFPE_lADOEEET9c5PZ5y9zwAAAAH-mGwZ",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/8566369305",
      "actor": {
        "login": "KolbyML",
        "id": 31669092,
        "node_id": "MDQ6VXNlcjMxNjY5MDky",
        "avatar_url": "https://avatars.githubusercontent.com/u/31669092?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/KolbyML",
        "html_url": "https://github.com/KolbyML",
        "followers_url": "https://api.github.com/users/KolbyML/followers",
        "following_url": "https://api.github.com/users/KolbyML/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/KolbyML/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/KolbyML/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/KolbyML/subscriptions",
        "organizations_url": "https://api.github.com/users/KolbyML/orgs",
        "repos_url": "https://api.github.com/users/KolbyML/repos",
        "events_url": "https://api.github.com/users/KolbyML/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/KolbyML/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "be6d87f9e9e3ba4062633c01ca83ac1b26209dc8",
      "commit_url": "https://api.github.com/repos/KolbyML/gui/commits/be6d87f9e9e3ba4062633c01ca83ac1b26209dc8",
      "created_at": "2023-02-21T03:00:52Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 8566457332,
      "node_id": "HRFPE_lADOEEET9c5PZ5y9zwAAAAH-mcP0",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/8566457332",
      "actor": {
        "login": "KolbyML",
        "id": 31669092,
        "node_id": "MDQ6VXNlcjMxNjY5MDky",
        "avatar_url": "https://avatars.githubusercontent.com/u/31669092?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/KolbyML",
        "html_url": "https://github.com/KolbyML",
        "followers_url": "https://api.github.com/users/KolbyML/followers",
        "following_url": "https://api.github.com/users/KolbyML/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/KolbyML/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/KolbyML/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/KolbyML/subscriptions",
        "organizations_url": "https://api.github.com/users/KolbyML/orgs",
        "repos_url": "https://api.github.com/users/KolbyML/repos",
        "events_url": "https://api.github.com/users/KolbyML/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/KolbyML/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "02bdcb12da6cfabddf0eb3da368d1352f60bf9a4",
      "commit_url": "https://api.github.com/repos/KolbyML/gui/commits/02bdcb12da6cfabddf0eb3da368d1352f60bf9a4",
      "created_at": "2023-02-21T03:23:02Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 8566636311,
      "node_id": "HRFPE_lADOEEET9c5PZ5y9zwAAAAH-nH8X",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/8566636311",
      "actor": {
        "login": "KolbyML",
        "id": 31669092,
        "node_id": "MDQ6VXNlcjMxNjY5MDky",
        "avatar_url": "https://avatars.githubusercontent.com/u/31669092?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/KolbyML",
        "html_url": "https://github.com/KolbyML",
        "followers_url": "https://api.github.com/users/KolbyML/followers",
        "following_url": "https://api.github.com/users/KolbyML/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/KolbyML/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/KolbyML/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/KolbyML/subscriptions",
        "organizations_url": "https://api.github.com/users/KolbyML/orgs",
        "repos_url": "https://api.github.com/users/KolbyML/repos",
        "events_url": "https://api.github.com/users/KolbyML/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/KolbyML/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "17046d0ecb41f2644ab186bcf5670598cdb93f5f",
      "commit_url": "https://api.github.com/repos/KolbyML/gui/commits/17046d0ecb41f2644ab186bcf5670598cdb93f5f",
      "created_at": "2023-02-21T04:12:34Z"
    },
    {
      "event": "reviewed",
      "id": 1358165949,
      "node_id": "PRR_kwDOEEET9c5Q8_e9",
      "url": null,
      "actor": null,
      "commit_id": "17046d0ecb41f2644ab186bcf5670598cdb93f5f",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "Concept ACK, I'd really like to see this implemented.",
      "user": {
        "login": "hernanmarino",
        "id": 87907936,
        "node_id": "MDQ6VXNlcjg3OTA3OTM2",
        "avatar_url": "https://avatars.githubusercontent.com/u/87907936?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hernanmarino",
        "html_url": "https://github.com/hernanmarino",
        "followers_url": "https://api.github.com/users/hernanmarino/followers",
        "following_url": "https://api.github.com/users/hernanmarino/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hernanmarino/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hernanmarino/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hernanmarino/subscriptions",
        "organizations_url": "https://api.github.com/users/hernanmarino/orgs",
        "repos_url": "https://api.github.com/users/hernanmarino/repos",
        "events_url": "https://api.github.com/users/hernanmarino/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hernanmarino/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin-core/gui/pull/650#pullrequestreview-1358165949",
      "submitted_at": "2023-03-27T00:11:54Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin-core/gui/pulls/650"
    },
    {
      "event": "labeled",
      "id": 8984490134,
      "node_id": "LE_lADOEEET9c5PZ5y9zwAAAAIXhHCW",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/8984490134",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-04-12T11:24:42Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 8986018240,
      "node_id": "HRFPE_lADOEEET9c5PZ5y9zwAAAAIXm8HA",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/8986018240",
      "actor": {
        "login": "KolbyML",
        "id": 31669092,
        "node_id": "MDQ6VXNlcjMxNjY5MDky",
        "avatar_url": "https://avatars.githubusercontent.com/u/31669092?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/KolbyML",
        "html_url": "https://github.com/KolbyML",
        "followers_url": "https://api.github.com/users/KolbyML/followers",
        "following_url": "https://api.github.com/users/KolbyML/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/KolbyML/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/KolbyML/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/KolbyML/subscriptions",
        "organizations_url": "https://api.github.com/users/KolbyML/orgs",
        "repos_url": "https://api.github.com/users/KolbyML/repos",
        "events_url": "https://api.github.com/users/KolbyML/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/KolbyML/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "e31d527710dd9ec8997bfb8f0e29a2e00234463f",
      "commit_url": "https://api.github.com/repos/KolbyML/gui/commits/e31d527710dd9ec8997bfb8f0e29a2e00234463f",
      "created_at": "2023-04-12T13:56:23Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 8986153459,
      "node_id": "HRFPE_lADOEEET9c5PZ5y9zwAAAAIXndHz",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/8986153459",
      "actor": {
        "login": "KolbyML",
        "id": 31669092,
        "node_id": "MDQ6VXNlcjMxNjY5MDky",
        "avatar_url": "https://avatars.githubusercontent.com/u/31669092?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/KolbyML",
        "html_url": "https://github.com/KolbyML",
        "followers_url": "https://api.github.com/users/KolbyML/followers",
        "following_url": "https://api.github.com/users/KolbyML/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/KolbyML/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/KolbyML/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/KolbyML/subscriptions",
        "organizations_url": "https://api.github.com/users/KolbyML/orgs",
        "repos_url": "https://api.github.com/users/KolbyML/repos",
        "events_url": "https://api.github.com/users/KolbyML/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/KolbyML/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "b57a60a62c0b1d2c862b51b3f41927df25619588",
      "commit_url": "https://api.github.com/repos/KolbyML/gui/commits/b57a60a62c0b1d2c862b51b3f41927df25619588",
      "created_at": "2023-04-12T14:07:50Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 8986329844,
      "node_id": "HRFPE_lADOEEET9c5PZ5y9zwAAAAIXoIL0",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/8986329844",
      "actor": {
        "login": "KolbyML",
        "id": 31669092,
        "node_id": "MDQ6VXNlcjMxNjY5MDky",
        "avatar_url": "https://avatars.githubusercontent.com/u/31669092?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/KolbyML",
        "html_url": "https://github.com/KolbyML",
        "followers_url": "https://api.github.com/users/KolbyML/followers",
        "following_url": "https://api.github.com/users/KolbyML/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/KolbyML/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/KolbyML/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/KolbyML/subscriptions",
        "organizations_url": "https://api.github.com/users/KolbyML/orgs",
        "repos_url": "https://api.github.com/users/KolbyML/repos",
        "events_url": "https://api.github.com/users/KolbyML/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/KolbyML/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "09d436fc137699142eb3618c13c4e3890857d513",
      "commit_url": "https://api.github.com/repos/KolbyML/gui/commits/09d436fc137699142eb3618c13c4e3890857d513",
      "created_at": "2023-04-12T14:22:58Z"
    },
    {
      "event": "unlabeled",
      "id": 8987133287,
      "node_id": "UNLE_lADOEEET9c5PZ5y9zwAAAAIXrMVn",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/8987133287",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-04-12T15:35:27Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "labeled",
      "id": 8988432682,
      "node_id": "LE_lADOEEET9c5PZ5y9zwAAAAIXwJkq",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/8988432682",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-04-12T17:57:03Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 8990585870,
      "node_id": "HRFPE_lADOEEET9c5PZ5y9zwAAAAIX4XQO",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/8990585870",
      "actor": {
        "login": "KolbyML",
        "id": 31669092,
        "node_id": "MDQ6VXNlcjMxNjY5MDky",
        "avatar_url": "https://avatars.githubusercontent.com/u/31669092?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/KolbyML",
        "html_url": "https://github.com/KolbyML",
        "followers_url": "https://api.github.com/users/KolbyML/followers",
        "following_url": "https://api.github.com/users/KolbyML/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/KolbyML/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/KolbyML/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/KolbyML/subscriptions",
        "organizations_url": "https://api.github.com/users/KolbyML/orgs",
        "repos_url": "https://api.github.com/users/KolbyML/repos",
        "events_url": "https://api.github.com/users/KolbyML/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/KolbyML/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "0b018c1378b8b4f6c1600b213a207ec88f22d566",
      "commit_url": "https://api.github.com/repos/KolbyML/gui/commits/0b018c1378b8b4f6c1600b213a207ec88f22d566",
      "created_at": "2023-04-12T22:36:04Z"
    },
    {
      "event": "unlabeled",
      "id": 8991088503,
      "node_id": "UNLE_lADOEEET9c5PZ5y9zwAAAAIX6R93",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/8991088503",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-04-13T00:14:31Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "labeled",
      "id": 9267579663,
      "node_id": "LE_lADOEEET9c5PZ5y9zwAAAAIoZAsP",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/9267579663",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-05-17T10:33:25Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOEEET9doAKDVmMGFkZDM4ZGJjYjhhZTQ2NzEwMzdjYWUyY2I0NmY2ZjBlYTViNDI",
      "url": "https://api.github.com/repos/bitcoin-core/gui/git/commits/5f0add38dbcb8ae4671037cae2cb46f6f0ea5b42",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin-core/gui/commit/5f0add38dbcb8ae4671037cae2cb46f6f0ea5b42",
      "tree": {
        "sha": "f017fe073e4a07959df760128084379430536e5b",
        "url": "https://api.github.com/repos/bitcoin-core/gui/git/trees/f017fe073e4a07959df760128084379430536e5b"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin-core/gui/git/commits/6cc136bbd36f859a16e469bb5c016d06c19bcd50",
          "sha": "6cc136bbd36f859a16e469bb5c016d06c19bcd50",
          "html_url": "https://github.com/bitcoin-core/gui/commit/6cc136bbd36f859a16e469bb5c016d06c19bcd50"
        }
      ],
      "message": "refactor: importmulti and importdescriptors rpc",
      "committer": {
        "name": "Kolby Moroz Liebl",
        "email": "31669092+KolbyML@users.noreply.github.com",
        "date": "2023-05-18T18:07:29Z"
      },
      "author": {
        "name": "Kolby ML",
        "email": "mrmetech@gmail.com",
        "date": "2022-08-05T08:49:04Z"
      },
      "sha": "5f0add38dbcb8ae4671037cae2cb46f6f0ea5b42"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOEEET9doAKDliYzAwMWM0NjljZjRjYjQ2NDE5ODQ5NGNlNGZiMWJjNzA2MzllNDU",
      "url": "https://api.github.com/repos/bitcoin-core/gui/git/commits/9bc001c469cf4cb464198494ce4fb1bc70639e45",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin-core/gui/commit/9bc001c469cf4cb464198494ce4fb1bc70639e45",
      "tree": {
        "sha": "98b17d6c8e6f1120842df3790c415363464cd850",
        "url": "https://api.github.com/repos/bitcoin-core/gui/git/trees/98b17d6c8e6f1120842df3790c415363464cd850"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin-core/gui/git/commits/5f0add38dbcb8ae4671037cae2cb46f6f0ea5b42",
          "sha": "5f0add38dbcb8ae4671037cae2cb46f6f0ea5b42",
          "html_url": "https://github.com/bitcoin-core/gui/commit/5f0add38dbcb8ae4671037cae2cb46f6f0ea5b42"
        }
      ],
      "message": "interfaces: Add functions for import gui",
      "committer": {
        "name": "Kolby Moroz Liebl",
        "email": "31669092+KolbyML@users.noreply.github.com",
        "date": "2023-05-18T18:07:29Z"
      },
      "author": {
        "name": "Kolby ML",
        "email": "mrmetech@gmail.com",
        "date": "2022-08-05T09:47:45Z"
      },
      "sha": "9bc001c469cf4cb464198494ce4fb1bc70639e45"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOEEET9doAKDBhNWU0MmE0OTY4YTNlMjBhNzhmMjMwNWNmZjU5MTRmMGVmYjJmYzk",
      "url": "https://api.github.com/repos/bitcoin-core/gui/git/commits/0a5e42a4968a3e20a78f2305cff5914f0efb2fc9",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin-core/gui/commit/0a5e42a4968a3e20a78f2305cff5914f0efb2fc9",
      "tree": {
        "sha": "d42ca3227b2bb440a017620db21f3d7bcef13190",
        "url": "https://api.github.com/repos/bitcoin-core/gui/git/trees/d42ca3227b2bb440a017620db21f3d7bcef13190"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin-core/gui/git/commits/9bc001c469cf4cb464198494ce4fb1bc70639e45",
          "sha": "9bc001c469cf4cb464198494ce4fb1bc70639e45",
          "html_url": "https://github.com/bitcoin-core/gui/commit/9bc001c469cf4cb464198494ce4fb1bc70639e45"
        }
      ],
      "message": "qt: implemented importpubkey, importprivkey, and importaddress GUI's",
      "committer": {
        "name": "Kolby Moroz Liebl",
        "email": "31669092+KolbyML@users.noreply.github.com",
        "date": "2023-05-18T18:07:29Z"
      },
      "author": {
        "name": "Kolby ML",
        "email": "mrmetech@gmail.com",
        "date": "2022-08-05T10:25:45Z"
      },
      "sha": "0a5e42a4968a3e20a78f2305cff5914f0efb2fc9"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOEEET9doAKGQ3MjIzMTZjYzAxYjgzZWZjZTY2MmE3ZjUxYzlkMzQ4ZmIxODNiZGE",
      "url": "https://api.github.com/repos/bitcoin-core/gui/git/commits/d722316cc01b83efce662a7f51c9d348fb183bda",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin-core/gui/commit/d722316cc01b83efce662a7f51c9d348fb183bda",
      "tree": {
        "sha": "610789e65bf8576dc9305da1f383e63f938ff743",
        "url": "https://api.github.com/repos/bitcoin-core/gui/git/trees/610789e65bf8576dc9305da1f383e63f938ff743"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin-core/gui/git/commits/0a5e42a4968a3e20a78f2305cff5914f0efb2fc9",
          "sha": "0a5e42a4968a3e20a78f2305cff5914f0efb2fc9",
          "html_url": "https://github.com/bitcoin-core/gui/commit/0a5e42a4968a3e20a78f2305cff5914f0efb2fc9"
        }
      ],
      "message": "qt: implemented importmulti and importdescriptors GUI's",
      "committer": {
        "name": "Kolby Moroz Liebl",
        "email": "31669092+KolbyML@users.noreply.github.com",
        "date": "2023-05-18T18:07:29Z"
      },
      "author": {
        "name": "Kolby ML",
        "email": "mrmetech@gmail.com",
        "date": "2022-08-05T10:37:50Z"
      },
      "sha": "d722316cc01b83efce662a7f51c9d348fb183bda"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 9282501095,
      "node_id": "HRFPE_lADOEEET9c5PZ5y9zwAAAAIpR7nn",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/9282501095",
      "actor": {
        "login": "KolbyML",
        "id": 31669092,
        "node_id": "MDQ6VXNlcjMxNjY5MDky",
        "avatar_url": "https://avatars.githubusercontent.com/u/31669092?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/KolbyML",
        "html_url": "https://github.com/KolbyML",
        "followers_url": "https://api.github.com/users/KolbyML/followers",
        "following_url": "https://api.github.com/users/KolbyML/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/KolbyML/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/KolbyML/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/KolbyML/subscriptions",
        "organizations_url": "https://api.github.com/users/KolbyML/orgs",
        "repos_url": "https://api.github.com/users/KolbyML/repos",
        "events_url": "https://api.github.com/users/KolbyML/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/KolbyML/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "e5856e0fb33079c34355b77aca497f97c8dab302",
      "commit_url": "https://api.github.com/repos/KolbyML/gui/commits/e5856e0fb33079c34355b77aca497f97c8dab302",
      "created_at": "2023-05-18T18:08:20Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 9282595779,
      "node_id": "HRFPE_lADOEEET9c5PZ5y9zwAAAAIpSSvD",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/9282595779",
      "actor": {
        "login": "KolbyML",
        "id": 31669092,
        "node_id": "MDQ6VXNlcjMxNjY5MDky",
        "avatar_url": "https://avatars.githubusercontent.com/u/31669092?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/KolbyML",
        "html_url": "https://github.com/KolbyML",
        "followers_url": "https://api.github.com/users/KolbyML/followers",
        "following_url": "https://api.github.com/users/KolbyML/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/KolbyML/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/KolbyML/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/KolbyML/subscriptions",
        "organizations_url": "https://api.github.com/users/KolbyML/orgs",
        "repos_url": "https://api.github.com/users/KolbyML/repos",
        "events_url": "https://api.github.com/users/KolbyML/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/KolbyML/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "3e1b9a4ee2df5ca8ee08b2b805fd0827d1572b3a",
      "commit_url": "https://api.github.com/repos/KolbyML/gui/commits/3e1b9a4ee2df5ca8ee08b2b805fd0827d1572b3a",
      "created_at": "2023-05-18T18:21:25Z"
    },
    {
      "event": "labeled",
      "id": 9282596483,
      "node_id": "LE_lADOEEET9c5PZ5y9zwAAAAIpSS6D",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/9282596483",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-05-18T18:21:31Z",
      "label": {
        "name": "CI failed",
        "color": "ededed"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 9282650314,
      "node_id": "HRFPE_lADOEEET9c5PZ5y9zwAAAAIpSgDK",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/9282650314",
      "actor": {
        "login": "KolbyML",
        "id": 31669092,
        "node_id": "MDQ6VXNlcjMxNjY5MDky",
        "avatar_url": "https://avatars.githubusercontent.com/u/31669092?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/KolbyML",
        "html_url": "https://github.com/KolbyML",
        "followers_url": "https://api.github.com/users/KolbyML/followers",
        "following_url": "https://api.github.com/users/KolbyML/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/KolbyML/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/KolbyML/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/KolbyML/subscriptions",
        "organizations_url": "https://api.github.com/users/KolbyML/orgs",
        "repos_url": "https://api.github.com/users/KolbyML/repos",
        "events_url": "https://api.github.com/users/KolbyML/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/KolbyML/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "76c98a820c27befe6c5b6b1af2ee987f3027f898",
      "commit_url": "https://api.github.com/repos/KolbyML/gui/commits/76c98a820c27befe6c5b6b1af2ee987f3027f898",
      "created_at": "2023-05-18T18:28:51Z"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOEEET9doAKGMyOWViMDdhZjE1MDQzYzBkMjBjYzdjNmE1MTk0N2NlMzU3ODE2NTc",
      "url": "https://api.github.com/repos/bitcoin-core/gui/git/commits/c29eb07af15043c0d20cc7c6a51947ce35781657",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin-core/gui/commit/c29eb07af15043c0d20cc7c6a51947ce35781657",
      "tree": {
        "sha": "5748e1cc20614379df7b5b21096abb090ebd4b5e",
        "url": "https://api.github.com/repos/bitcoin-core/gui/git/trees/5748e1cc20614379df7b5b21096abb090ebd4b5e"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin-core/gui/git/commits/d722316cc01b83efce662a7f51c9d348fb183bda",
          "sha": "d722316cc01b83efce662a7f51c9d348fb183bda",
          "html_url": "https://github.com/bitcoin-core/gui/commit/d722316cc01b83efce662a7f51c9d348fb183bda"
        }
      ],
      "message": "qt, test: add importmulti tests",
      "committer": {
        "name": "Kolby Moroz Liebl",
        "email": "31669092+KolbyML@users.noreply.github.com",
        "date": "2023-05-18T18:36:44Z"
      },
      "author": {
        "name": "Kolby ML",
        "email": "31669092+KolbyML@users.noreply.github.com",
        "date": "2023-02-19T04:30:39Z"
      },
      "sha": "c29eb07af15043c0d20cc7c6a51947ce35781657"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOEEET9doAKDRlM2JlOWY3NTJmODMyNmRhMGU0ZWYwNWVjOWY1Yzk3N2NhZDg0YTY",
      "url": "https://api.github.com/repos/bitcoin-core/gui/git/commits/4e3be9f752f8326da0e4ef05ec9f5c977cad84a6",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin-core/gui/commit/4e3be9f752f8326da0e4ef05ec9f5c977cad84a6",
      "tree": {
        "sha": "b073e75f57f25301be9db5dd21c769726f7f0dcf",
        "url": "https://api.github.com/repos/bitcoin-core/gui/git/trees/b073e75f57f25301be9db5dd21c769726f7f0dcf"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin-core/gui/git/commits/c29eb07af15043c0d20cc7c6a51947ce35781657",
          "sha": "c29eb07af15043c0d20cc7c6a51947ce35781657",
          "html_url": "https://github.com/bitcoin-core/gui/commit/c29eb07af15043c0d20cc7c6a51947ce35781657"
        }
      ],
      "message": "qt, test: add importdescriptors tests",
      "committer": {
        "name": "Kolby Moroz Liebl",
        "email": "31669092+KolbyML@users.noreply.github.com",
        "date": "2023-05-18T18:36:44Z"
      },
      "author": {
        "name": "Kolby ML",
        "email": "31669092+KolbyML@users.noreply.github.com",
        "date": "2023-02-19T04:31:21Z"
      },
      "sha": "4e3be9f752f8326da0e4ef05ec9f5c977cad84a6"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOEEET9doAKGIyYjAwYWYxZDM3ZGQ2OWMzZTY0ZDkwNTk4NGU2OGFjNmE2YjJkOGY",
      "url": "https://api.github.com/repos/bitcoin-core/gui/git/commits/b2b00af1d37dd69c3e64d905984e68ac6a6b2d8f",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin-core/gui/commit/b2b00af1d37dd69c3e64d905984e68ac6a6b2d8f",
      "tree": {
        "sha": "684a73f744abdf8a1eb8c47be9c93d6c54f02783",
        "url": "https://api.github.com/repos/bitcoin-core/gui/git/trees/684a73f744abdf8a1eb8c47be9c93d6c54f02783"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin-core/gui/git/commits/4e3be9f752f8326da0e4ef05ec9f5c977cad84a6",
          "sha": "4e3be9f752f8326da0e4ef05ec9f5c977cad84a6",
          "html_url": "https://github.com/bitcoin-core/gui/commit/4e3be9f752f8326da0e4ef05ec9f5c977cad84a6"
        }
      ],
      "message": "qt, test: add importpubkey, importprivkey, and importaddress tests",
      "committer": {
        "name": "Kolby Moroz Liebl",
        "email": "31669092+KolbyML@users.noreply.github.com",
        "date": "2023-05-18T18:36:44Z"
      },
      "author": {
        "name": "Kolby ML",
        "email": "31669092+KolbyML@users.noreply.github.com",
        "date": "2023-02-19T04:33:12Z"
      },
      "sha": "b2b00af1d37dd69c3e64d905984e68ac6a6b2d8f"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 9282718076,
      "node_id": "HRFPE_lADOEEET9c5PZ5y9zwAAAAIpSwl8",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/9282718076",
      "actor": {
        "login": "KolbyML",
        "id": 31669092,
        "node_id": "MDQ6VXNlcjMxNjY5MDky",
        "avatar_url": "https://avatars.githubusercontent.com/u/31669092?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/KolbyML",
        "html_url": "https://github.com/KolbyML",
        "followers_url": "https://api.github.com/users/KolbyML/followers",
        "following_url": "https://api.github.com/users/KolbyML/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/KolbyML/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/KolbyML/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/KolbyML/subscriptions",
        "organizations_url": "https://api.github.com/users/KolbyML/orgs",
        "repos_url": "https://api.github.com/users/KolbyML/repos",
        "events_url": "https://api.github.com/users/KolbyML/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/KolbyML/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "b2b00af1d37dd69c3e64d905984e68ac6a6b2d8f",
      "commit_url": "https://api.github.com/repos/KolbyML/gui/commits/b2b00af1d37dd69c3e64d905984e68ac6a6b2d8f",
      "created_at": "2023-05-18T18:36:57Z"
    },
    {
      "event": "unlabeled",
      "id": 9282735955,
      "node_id": "UNLE_lADOEEET9c5PZ5y9zwAAAAIpS09T",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/9282735955",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-05-18T18:39:03Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "labeled",
      "id": 10119744344,
      "node_id": "LE_lADOEEET9c5PZ5y9zwAAAAJbLwtY",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/10119744344",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-08-17T13:48:03Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 1682320567,
      "node_id": "IC_kwDOEEET9c5kRiy3",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/comments/1682320567",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-08-17T13:48:04Z",
      "updated_at": "2023-08-17T13:48:04Z",
      "author_association": "CONTRIBUTOR",
      "body": "<!--cf906140f33d8803c4a75a2196329ecb-->\n🐙 This pull request conflicts with the target branch and [needs rebase](https://github.com/bitcoin-core/gui/blob/master/CONTRIBUTING.md#rebasing-changes).\n",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin-core/gui/pull/650#issuecomment-1682320567",
      "issue_url": "https://api.github.com/repos/bitcoin-core/gui/issues/650"
    },
    {
      "event": "commented",
      "id": 1730504109,
      "node_id": "IC_kwDOEEET9c5nJWWt",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/comments/1730504109",
      "actor": {
        "login": "pablomartin4btc",
        "id": 110166421,
        "node_id": "U_kgDOBpEBlQ",
        "avatar_url": "https://avatars.githubusercontent.com/u/110166421?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/pablomartin4btc",
        "html_url": "https://github.com/pablomartin4btc",
        "followers_url": "https://api.github.com/users/pablomartin4btc/followers",
        "following_url": "https://api.github.com/users/pablomartin4btc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/pablomartin4btc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/pablomartin4btc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/pablomartin4btc/subscriptions",
        "organizations_url": "https://api.github.com/users/pablomartin4btc/orgs",
        "repos_url": "https://api.github.com/users/pablomartin4btc/repos",
        "events_url": "https://api.github.com/users/pablomartin4btc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/pablomartin4btc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-09-21T23:50:32Z",
      "updated_at": "2023-09-21T23:50:32Z",
      "author_association": "CONTRIBUTOR",
      "body": "I'll review this as soon as I can, in the meantime, could you please link the PR to the existent issue? (Writing any of these [keywords](https://docs.github.com/en/issues/tracking-your-work-with-issues/linking-a-pull-request-to-an-issue) somewhere in the description followed by #19 would do the trick, thx!) ",
      "user": {
        "login": "pablomartin4btc",
        "id": 110166421,
        "node_id": "U_kgDOBpEBlQ",
        "avatar_url": "https://avatars.githubusercontent.com/u/110166421?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/pablomartin4btc",
        "html_url": "https://github.com/pablomartin4btc",
        "followers_url": "https://api.github.com/users/pablomartin4btc/followers",
        "following_url": "https://api.github.com/users/pablomartin4btc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/pablomartin4btc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/pablomartin4btc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/pablomartin4btc/subscriptions",
        "organizations_url": "https://api.github.com/users/pablomartin4btc/orgs",
        "repos_url": "https://api.github.com/users/pablomartin4btc/repos",
        "events_url": "https://api.github.com/users/pablomartin4btc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/pablomartin4btc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin-core/gui/pull/650#issuecomment-1730504109",
      "issue_url": "https://api.github.com/repos/bitcoin-core/gui/issues/650"
    },
    {
      "event": "commented",
      "id": 1730544144,
      "node_id": "IC_kwDOEEET9c5nJgIQ",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/comments/1730544144",
      "actor": {
        "login": "KolbyML",
        "id": 31669092,
        "node_id": "MDQ6VXNlcjMxNjY5MDky",
        "avatar_url": "https://avatars.githubusercontent.com/u/31669092?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/KolbyML",
        "html_url": "https://github.com/KolbyML",
        "followers_url": "https://api.github.com/users/KolbyML/followers",
        "following_url": "https://api.github.com/users/KolbyML/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/KolbyML/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/KolbyML/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/KolbyML/subscriptions",
        "organizations_url": "https://api.github.com/users/KolbyML/orgs",
        "repos_url": "https://api.github.com/users/KolbyML/repos",
        "events_url": "https://api.github.com/users/KolbyML/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/KolbyML/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-09-22T00:40:26Z",
      "updated_at": "2023-09-22T00:40:26Z",
      "author_association": "CONTRIBUTOR",
      "body": "@pablomartin4btc sounds good I will try and get my 2 PR's rebased",
      "user": {
        "login": "KolbyML",
        "id": 31669092,
        "node_id": "MDQ6VXNlcjMxNjY5MDky",
        "avatar_url": "https://avatars.githubusercontent.com/u/31669092?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/KolbyML",
        "html_url": "https://github.com/KolbyML",
        "followers_url": "https://api.github.com/users/KolbyML/followers",
        "following_url": "https://api.github.com/users/KolbyML/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/KolbyML/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/KolbyML/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/KolbyML/subscriptions",
        "organizations_url": "https://api.github.com/users/KolbyML/orgs",
        "repos_url": "https://api.github.com/users/KolbyML/repos",
        "events_url": "https://api.github.com/users/KolbyML/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/KolbyML/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin-core/gui/pull/650#issuecomment-1730544144",
      "issue_url": "https://api.github.com/repos/bitcoin-core/gui/issues/650"
    },
    {
      "event": "mentioned",
      "id": 10441688549,
      "node_id": "MEE_lADOEEET9c5PZ5y9zwAAAAJuX4Xl",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/10441688549",
      "actor": {
        "login": "pablomartin4btc",
        "id": 110166421,
        "node_id": "U_kgDOBpEBlQ",
        "avatar_url": "https://avatars.githubusercontent.com/u/110166421?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/pablomartin4btc",
        "html_url": "https://github.com/pablomartin4btc",
        "followers_url": "https://api.github.com/users/pablomartin4btc/followers",
        "following_url": "https://api.github.com/users/pablomartin4btc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/pablomartin4btc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/pablomartin4btc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/pablomartin4btc/subscriptions",
        "organizations_url": "https://api.github.com/users/pablomartin4btc/orgs",
        "repos_url": "https://api.github.com/users/pablomartin4btc/repos",
        "events_url": "https://api.github.com/users/pablomartin4btc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/pablomartin4btc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-09-22T00:40:26Z"
    },
    {
      "event": "subscribed",
      "id": 10441688556,
      "node_id": "SE_lADOEEET9c5PZ5y9zwAAAAJuX4Xs",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/10441688556",
      "actor": {
        "login": "pablomartin4btc",
        "id": 110166421,
        "node_id": "U_kgDOBpEBlQ",
        "avatar_url": "https://avatars.githubusercontent.com/u/110166421?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/pablomartin4btc",
        "html_url": "https://github.com/pablomartin4btc",
        "followers_url": "https://api.github.com/users/pablomartin4btc/followers",
        "following_url": "https://api.github.com/users/pablomartin4btc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/pablomartin4btc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/pablomartin4btc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/pablomartin4btc/subscriptions",
        "organizations_url": "https://api.github.com/users/pablomartin4btc/orgs",
        "repos_url": "https://api.github.com/users/pablomartin4btc/repos",
        "events_url": "https://api.github.com/users/pablomartin4btc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/pablomartin4btc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-09-22T00:40:26Z"
    },
    {
      "event": "commented",
      "id": 1731857470,
      "node_id": "IC_kwDOEEET9c5nOgw-",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/comments/1731857470",
      "actor": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-09-22T18:17:40Z",
      "updated_at": "2023-09-22T18:17:40Z",
      "author_association": "MEMBER",
      "body": "@KolbyML \r\n\r\nSuggesting to convert this PR to a draft while CI fails.",
      "user": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin-core/gui/pull/650#issuecomment-1731857470",
      "issue_url": "https://api.github.com/repos/bitcoin-core/gui/issues/650"
    },
    {
      "event": "mentioned",
      "id": 10450109012,
      "node_id": "MEE_lADOEEET9c5PZ5y9zwAAAAJu4AJU",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/10450109012",
      "actor": {
        "login": "KolbyML",
        "id": 31669092,
        "node_id": "MDQ6VXNlcjMxNjY5MDky",
        "avatar_url": "https://avatars.githubusercontent.com/u/31669092?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/KolbyML",
        "html_url": "https://github.com/KolbyML",
        "followers_url": "https://api.github.com/users/KolbyML/followers",
        "following_url": "https://api.github.com/users/KolbyML/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/KolbyML/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/KolbyML/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/KolbyML/subscriptions",
        "organizations_url": "https://api.github.com/users/KolbyML/orgs",
        "repos_url": "https://api.github.com/users/KolbyML/repos",
        "events_url": "https://api.github.com/users/KolbyML/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/KolbyML/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-09-22T18:17:40Z"
    },
    {
      "event": "subscribed",
      "id": 10450109022,
      "node_id": "SE_lADOEEET9c5PZ5y9zwAAAAJu4AJe",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/10450109022",
      "actor": {
        "login": "KolbyML",
        "id": 31669092,
        "node_id": "MDQ6VXNlcjMxNjY5MDky",
        "avatar_url": "https://avatars.githubusercontent.com/u/31669092?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/KolbyML",
        "html_url": "https://github.com/KolbyML",
        "followers_url": "https://api.github.com/users/KolbyML/followers",
        "following_url": "https://api.github.com/users/KolbyML/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/KolbyML/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/KolbyML/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/KolbyML/subscriptions",
        "organizations_url": "https://api.github.com/users/KolbyML/orgs",
        "repos_url": "https://api.github.com/users/KolbyML/repos",
        "events_url": "https://api.github.com/users/KolbyML/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/KolbyML/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-09-22T18:17:41Z"
    },
    {
      "event": "convert_to_draft",
      "id": 10452611605,
      "node_id": "CTDE_lADOEEET9c5PZ5y9zwAAAAJvBjIV",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/10452611605",
      "actor": {
        "login": "KolbyML",
        "id": 31669092,
        "node_id": "MDQ6VXNlcjMxNjY5MDky",
        "avatar_url": "https://avatars.githubusercontent.com/u/31669092?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/KolbyML",
        "html_url": "https://github.com/KolbyML",
        "followers_url": "https://api.github.com/users/KolbyML/followers",
        "following_url": "https://api.github.com/users/KolbyML/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/KolbyML/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/KolbyML/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/KolbyML/subscriptions",
        "organizations_url": "https://api.github.com/users/KolbyML/orgs",
        "repos_url": "https://api.github.com/users/KolbyML/repos",
        "events_url": "https://api.github.com/users/KolbyML/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/KolbyML/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-09-23T05:56:49Z"
    },
    {
      "event": "commented",
      "id": 1867099748,
      "node_id": "IC_kwDOEEET9c5vSa5k",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/comments/1867099748",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-12-22T00:57:31Z",
      "updated_at": "2023-12-22T00:57:31Z",
      "author_association": "CONTRIBUTOR",
      "body": "<!--13523179cfe9479db18ec6c5d236f789-->\nThere hasn't been much activity lately and the patch still needs rebase. What is the status here?\n\n* Is it still relevant? ➡️ Please solve the conflicts to make it ready for review and to ensure the CI passes.\n* Is it no longer relevant? ➡️ Please close.\n* Did the author lose interest or time to work on this? ➡️ Please close it and mark it 'Up for grabs' with the label, so that it can be picked up in the future.\n",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin-core/gui/pull/650#issuecomment-1867099748",
      "issue_url": "https://api.github.com/repos/bitcoin-core/gui/issues/650"
    },
    {
      "event": "commented",
      "id": 2008402297,
      "node_id": "IC_kwDOEEET9c53tcl5",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/comments/2008402297",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-03-20T00:33:06Z",
      "updated_at": "2024-03-20T00:33:06Z",
      "author_association": "CONTRIBUTOR",
      "body": "<!--13523179cfe9479db18ec6c5d236f789-->\n⌛ There hasn't been much activity lately and the patch still needs rebase. What is the status here?\n\n* Is it still relevant? ➡️ Please solve the conflicts to make it ready for review and to ensure the CI passes.\n* Is it no longer relevant? ➡️ Please close.\n* Did the author lose interest or time to work on this? ➡️ Please close it and mark it 'Up for grabs' with the label, so that it can be picked up in the future.\n",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin-core/gui/pull/650#issuecomment-2008402297",
      "issue_url": "https://api.github.com/repos/bitcoin-core/gui/issues/650"
    },
    {
      "event": "commented",
      "id": 2008412091,
      "node_id": "IC_kwDOEEET9c53te-7",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/comments/2008412091",
      "actor": {
        "login": "KolbyML",
        "id": 31669092,
        "node_id": "MDQ6VXNlcjMxNjY5MDky",
        "avatar_url": "https://avatars.githubusercontent.com/u/31669092?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/KolbyML",
        "html_url": "https://github.com/KolbyML",
        "followers_url": "https://api.github.com/users/KolbyML/followers",
        "following_url": "https://api.github.com/users/KolbyML/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/KolbyML/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/KolbyML/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/KolbyML/subscriptions",
        "organizations_url": "https://api.github.com/users/KolbyML/orgs",
        "repos_url": "https://api.github.com/users/KolbyML/repos",
        "events_url": "https://api.github.com/users/KolbyML/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/KolbyML/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-03-20T00:37:28Z",
      "updated_at": "2024-03-20T00:37:28Z",
      "author_association": "CONTRIBUTOR",
      "body": "I no longer have time to work on this so as the bot suggests I am going to close this",
      "user": {
        "login": "KolbyML",
        "id": 31669092,
        "node_id": "MDQ6VXNlcjMxNjY5MDky",
        "avatar_url": "https://avatars.githubusercontent.com/u/31669092?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/KolbyML",
        "html_url": "https://github.com/KolbyML",
        "followers_url": "https://api.github.com/users/KolbyML/followers",
        "following_url": "https://api.github.com/users/KolbyML/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/KolbyML/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/KolbyML/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/KolbyML/subscriptions",
        "organizations_url": "https://api.github.com/users/KolbyML/orgs",
        "repos_url": "https://api.github.com/users/KolbyML/repos",
        "events_url": "https://api.github.com/users/KolbyML/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/KolbyML/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin-core/gui/pull/650#issuecomment-2008412091",
      "issue_url": "https://api.github.com/repos/bitcoin-core/gui/issues/650"
    },
    {
      "event": "closed",
      "id": 12177818975,
      "node_id": "CE_lADOEEET9c5PZ5y9zwAAAALV2sVf",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/12177818975",
      "actor": {
        "login": "KolbyML",
        "id": 31669092,
        "node_id": "MDQ6VXNlcjMxNjY5MDky",
        "avatar_url": "https://avatars.githubusercontent.com/u/31669092?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/KolbyML",
        "html_url": "https://github.com/KolbyML",
        "followers_url": "https://api.github.com/users/KolbyML/followers",
        "following_url": "https://api.github.com/users/KolbyML/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/KolbyML/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/KolbyML/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/KolbyML/subscriptions",
        "organizations_url": "https://api.github.com/users/KolbyML/orgs",
        "repos_url": "https://api.github.com/users/KolbyML/repos",
        "events_url": "https://api.github.com/users/KolbyML/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/KolbyML/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-03-20T00:37:28Z"
    },
    {
      "event": "labeled",
      "id": 12213266237,
      "node_id": "LE_lADOEEET9c5PZ5y9zwAAAALX96c9",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/12213266237",
      "actor": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-03-22T09:40:05Z",
      "label": {
        "name": "Up for grabs",
        "color": "99a810"
      }
    },
    {
      "event": "locked",
      "id": 16939503723,
      "node_id": "LOE_lADOEEET9c5PZ5y9zwAAAAPxrFBr",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/16939503723",
      "actor": {
        "login": "bitcoin-core",
        "id": 13464320,
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjEzNDY0MzIw",
        "avatar_url": "https://avatars.githubusercontent.com/u/13464320?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitcoin-core",
        "html_url": "https://github.com/bitcoin-core",
        "followers_url": "https://api.github.com/users/bitcoin-core/followers",
        "following_url": "https://api.github.com/users/bitcoin-core/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bitcoin-core/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bitcoin-core/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bitcoin-core/subscriptions",
        "organizations_url": "https://api.github.com/users/bitcoin-core/orgs",
        "repos_url": "https://api.github.com/users/bitcoin-core/repos",
        "events_url": "https://api.github.com/users/bitcoin-core/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bitcoin-core/received_events",
        "type": "Organization",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-03-22T07:40:36Z"
    }
  ],
  "comments": [
    {
      "url": "https://api.github.com/repos/bitcoin-core/gui/pulls/comments/940572988",
      "pull_request_review_id": 1065661283,
      "id": 940572988,
      "node_id": "PRRC_kwDOEEET9c44EAE8",
      "diff_hunk": "@@ -1375,7 +975,102 @@ RPCHelpMan importmulti()\n \n         for (const UniValue& data : requests.getValues()) {\n             const int64_t timestamp = std::max(GetImportTimestamp(data, now), minimumTimestamp);\n-            const UniValue result = ProcessImport(*pwallet, data, timestamp);\n+            ImportMultiData multi_data = {};",
      "path": "src/wallet/rpc/backup.cpp",
      "position": null,
      "original_position": 421,
      "commit_id": "b2b00af1d37dd69c3e64d905984e68ac6a6b2d8f",
      "original_commit_id": "f718e24693f4d322d2a82d6f1f8f6d4add98c415",
      "in_reply_to_id": null,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In f718e24693f4d322d2a82d6f1f8f6d4add98c415 \"refactor: importmulti and importdescriptors rpc\"\r\n\r\n`= {}` is unnecessary\r\n\r\n```suggestion\r\n            ImportMultiData multi_data;\r\n```",
      "created_at": "2022-08-08T19:09:50Z",
      "updated_at": "2022-08-08T20:56:15Z",
      "html_url": "https://github.com/bitcoin-core/gui/pull/650#discussion_r940572988",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/gui/pulls/comments/940572988"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/gui/pulls/650"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 928,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/gui/pulls/comments/940574619",
      "pull_request_review_id": 1065661283,
      "id": 940574619,
      "node_id": "PRRC_kwDOEEET9c44EAeb",
      "diff_hunk": "@@ -1375,7 +975,102 @@ RPCHelpMan importmulti()\n \n         for (const UniValue& data : requests.getValues()) {\n             const int64_t timestamp = std::max(GetImportTimestamp(data, now), minimumTimestamp);\n-            const UniValue result = ProcessImport(*pwallet, data, timestamp);\n+            ImportMultiData multi_data = {};\n+            std::vector<std::string> warnings;\n+            UniValue result(UniValue::VOBJ);\n+            try {\n+                multi_data.internal = data.exists(\"internal\") ? data[\"internal\"].get_bool() : false;\n+                // Internal addresses should not have a label\n+                if (multi_data.internal && data.exists(\"label\")) {\n+                    throw InvalidParameter(\"Internal addresses should not have a label\");\n+                }\n+                multi_data.label = data.exists(\"label\") ? data[\"label\"].get_str() : \"\";\n+                multi_data.keypool = data.exists(\"keypool\") ? data[\"keypool\"].get_bool() : false;\n+\n+                multi_data.watch_only = data.exists(\"watchonly\") ? data[\"watchonly\"].get_bool() : false;\n+\n+                multi_data.keys = {};",
      "path": "src/wallet/rpc/backup.cpp",
      "position": null,
      "original_position": 435,
      "commit_id": "b2b00af1d37dd69c3e64d905984e68ac6a6b2d8f",
      "original_commit_id": "f718e24693f4d322d2a82d6f1f8f6d4add98c415",
      "in_reply_to_id": null,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In f718e24693f4d322d2a82d6f1f8f6d4add98c415 \"refactor: importmulti and importdescriptors rpc\"\r\n\r\nThis line is unnecessary.",
      "created_at": "2022-08-08T19:11:58Z",
      "updated_at": "2022-08-08T20:56:15Z",
      "html_url": "https://github.com/bitcoin-core/gui/pull/650#discussion_r940574619",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/gui/pulls/comments/940574619"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/gui/pulls/650"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 942,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/gui/pulls/comments/940576350",
      "pull_request_review_id": 1065661283,
      "id": 940576350,
      "node_id": "PRRC_kwDOEEET9c44EA5e",
      "diff_hunk": "@@ -1375,7 +975,102 @@ RPCHelpMan importmulti()\n \n         for (const UniValue& data : requests.getValues()) {\n             const int64_t timestamp = std::max(GetImportTimestamp(data, now), minimumTimestamp);\n-            const UniValue result = ProcessImport(*pwallet, data, timestamp);\n+            ImportMultiData multi_data = {};\n+            std::vector<std::string> warnings;\n+            UniValue result(UniValue::VOBJ);\n+            try {\n+                multi_data.internal = data.exists(\"internal\") ? data[\"internal\"].get_bool() : false;\n+                // Internal addresses should not have a label\n+                if (multi_data.internal && data.exists(\"label\")) {\n+                    throw InvalidParameter(\"Internal addresses should not have a label\");\n+                }\n+                multi_data.label = data.exists(\"label\") ? data[\"label\"].get_str() : \"\";\n+                multi_data.keypool = data.exists(\"keypool\") ? data[\"keypool\"].get_bool() : false;\n+\n+                multi_data.watch_only = data.exists(\"watchonly\") ? data[\"watchonly\"].get_bool() : false;\n+\n+                multi_data.keys = {};\n+                if (data.exists(\"keys\"))\n+                    for (size_t i = 0; i < data[\"keys\"].get_array().size(); ++i)\n+                        multi_data.keys.push_back(data[\"keys\"].get_array()[i].get_str());\n+\n+                bool isScript;\n+                FlatSigningProvider keys;\n+                bool range_exists = false;\n+                if (data.exists(\"scriptPubKey\") && data.exists(\"desc\")) {\n+                    throw InvalidParameter(\"Both a descriptor and a scriptPubKey should not be provided.\");\n+                } else if (data.exists(\"scriptPubKey\")) {\n+\n+                    // First ensure scriptPubKey has either a script or JSON with \"address\" string\n+                    const UniValue& scriptPubKey = data[\"scriptPubKey\"];\n+                    isScript = scriptPubKey.getType() == UniValue::VSTR;\n+                    if (!isScript && !(scriptPubKey.getType() == UniValue::VOBJ && scriptPubKey.exists(\"address\"))) {\n+                        throw InvalidParameter(\"scriptPubKey must be string with script or JSON with address string\");\n+                    }\n+                    multi_data.scriptPubKey = isScript ? scriptPubKey.get_str() : scriptPubKey[\"address\"].get_str();\n+\n+                    // Optional fields.\n+                    multi_data.redeem_script = data.exists(\"redeemscript\") ? data[\"redeemscript\"].get_str() : \"\";\n+                    multi_data.witness_script = data.exists(\"witnessscript\") ? data[\"witnessscript\"].get_str() : \"\";\n+                    multi_data.pubkeys = {};",
      "path": "src/wallet/rpc/backup.cpp",
      "position": null,
      "original_position": 458,
      "commit_id": "b2b00af1d37dd69c3e64d905984e68ac6a6b2d8f",
      "original_commit_id": "f718e24693f4d322d2a82d6f1f8f6d4add98c415",
      "in_reply_to_id": null,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In f718e24693f4d322d2a82d6f1f8f6d4add98c415 \"refactor: importmulti and importdescriptors rpc\"\r\n\r\nThis line is unnecessary.",
      "created_at": "2022-08-08T19:14:25Z",
      "updated_at": "2022-08-08T20:56:15Z",
      "html_url": "https://github.com/bitcoin-core/gui/pull/650#discussion_r940576350",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/gui/pulls/comments/940576350"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/gui/pulls/650"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 964,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/gui/pulls/comments/940584339",
      "pull_request_review_id": 1065661283,
      "id": 940584339,
      "node_id": "PRRC_kwDOEEET9c44EC2T",
      "diff_hunk": "@@ -1375,7 +975,102 @@ RPCHelpMan importmulti()\n \n         for (const UniValue& data : requests.getValues()) {\n             const int64_t timestamp = std::max(GetImportTimestamp(data, now), minimumTimestamp);\n-            const UniValue result = ProcessImport(*pwallet, data, timestamp);\n+            ImportMultiData multi_data = {};\n+            std::vector<std::string> warnings;\n+            UniValue result(UniValue::VOBJ);\n+            try {\n+                multi_data.internal = data.exists(\"internal\") ? data[\"internal\"].get_bool() : false;\n+                // Internal addresses should not have a label\n+                if (multi_data.internal && data.exists(\"label\")) {\n+                    throw InvalidParameter(\"Internal addresses should not have a label\");\n+                }\n+                multi_data.label = data.exists(\"label\") ? data[\"label\"].get_str() : \"\";\n+                multi_data.keypool = data.exists(\"keypool\") ? data[\"keypool\"].get_bool() : false;\n+\n+                multi_data.watch_only = data.exists(\"watchonly\") ? data[\"watchonly\"].get_bool() : false;\n+\n+                multi_data.keys = {};\n+                if (data.exists(\"keys\"))\n+                    for (size_t i = 0; i < data[\"keys\"].get_array().size(); ++i)\n+                        multi_data.keys.push_back(data[\"keys\"].get_array()[i].get_str());\n+\n+                bool isScript;\n+                FlatSigningProvider keys;\n+                bool range_exists = false;",
      "path": "src/wallet/rpc/backup.cpp",
      "position": null,
      "original_position": 442,
      "commit_id": "b2b00af1d37dd69c3e64d905984e68ac6a6b2d8f",
      "original_commit_id": "f718e24693f4d322d2a82d6f1f8f6d4add98c415",
      "in_reply_to_id": null,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In f718e24693f4d322d2a82d6f1f8f6d4add98c415 \"refactor: importmulti and importdescriptors rpc\"\r\n\r\n`range_exists` is unused.",
      "created_at": "2022-08-08T19:20:45Z",
      "updated_at": "2022-08-08T20:56:15Z",
      "html_url": "https://github.com/bitcoin-core/gui/pull/650#discussion_r940584339",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/gui/pulls/comments/940584339"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/gui/pulls/650"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 999,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/gui/pulls/comments/940584862",
      "pull_request_review_id": 1065661283,
      "id": 940584862,
      "node_id": "PRRC_kwDOEEET9c44EC-e",
      "diff_hunk": "@@ -1375,7 +975,102 @@ RPCHelpMan importmulti()\n \n         for (const UniValue& data : requests.getValues()) {\n             const int64_t timestamp = std::max(GetImportTimestamp(data, now), minimumTimestamp);\n-            const UniValue result = ProcessImport(*pwallet, data, timestamp);\n+            ImportMultiData multi_data = {};\n+            std::vector<std::string> warnings;\n+            UniValue result(UniValue::VOBJ);\n+            try {\n+                multi_data.internal = data.exists(\"internal\") ? data[\"internal\"].get_bool() : false;\n+                // Internal addresses should not have a label\n+                if (multi_data.internal && data.exists(\"label\")) {\n+                    throw InvalidParameter(\"Internal addresses should not have a label\");\n+                }\n+                multi_data.label = data.exists(\"label\") ? data[\"label\"].get_str() : \"\";\n+                multi_data.keypool = data.exists(\"keypool\") ? data[\"keypool\"].get_bool() : false;\n+\n+                multi_data.watch_only = data.exists(\"watchonly\") ? data[\"watchonly\"].get_bool() : false;\n+\n+                multi_data.keys = {};\n+                if (data.exists(\"keys\"))\n+                    for (size_t i = 0; i < data[\"keys\"].get_array().size(); ++i)\n+                        multi_data.keys.push_back(data[\"keys\"].get_array()[i].get_str());\n+\n+                bool isScript;\n+                FlatSigningProvider keys;",
      "path": "src/wallet/rpc/backup.cpp",
      "position": null,
      "original_position": 441,
      "commit_id": "b2b00af1d37dd69c3e64d905984e68ac6a6b2d8f",
      "original_commit_id": "f718e24693f4d322d2a82d6f1f8f6d4add98c415",
      "in_reply_to_id": null,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In f718e24693f4d322d2a82d6f1f8f6d4add98c415 \"refactor: importmulti and importdescriptors rpc\"\r\n\r\nISTM these should be part of `ImportMultiData` rather than things to be passed in to `ProcessImport` separately.",
      "created_at": "2022-08-08T19:21:27Z",
      "updated_at": "2022-08-08T20:56:15Z",
      "html_url": "https://github.com/bitcoin-core/gui/pull/650#discussion_r940584862",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/gui/pulls/comments/940584862"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/gui/pulls/650"
        }
      },
      "start_line": null,
      "original_start_line": 997,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 948,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/gui/pulls/comments/940609847",
      "pull_request_review_id": 1065661283,
      "id": 940609847,
      "node_id": "PRRC_kwDOEEET9c44EJE3",
      "diff_hunk": "@@ -0,0 +1,302 @@\n+#include <qt/importdialog.h>\n+#include <qt/forms/ui_importdialog.h>\n+\n+#include <qt/guiconstants.h>\n+#include <qt/guiutil.h>\n+#include <key_io.h>\n+#include <qt/walletmodel.h>\n+#include <interfaces/node.h>\n+#include <wallet/wallet.h>\n+#include <QKeyEvent>\n+#include <QMessageBox>\n+#include <QPushButton>\n+#include <iostream>\n+#include <QScrollBar>\n+#include <tinyformat.h>\n+#include <chain.h>\n+\n+ImportDialog::ImportDialog(Page _page, QWidget *parent, WalletModel *walletModel) :\n+    QDialog(parent, GUIUtil::dialog_flags),\n+    ui(new Ui::ImportDialog),\n+    walletModel(walletModel),\n+    page(_page)\n+{\n+    ui->setupUi(this);\n+\n+    switch (page) {\n+        case importPubkey: {\n+            ui->QStackContainer->setCurrentWidget(ui->importKeyPage);\n+            this->setWindowTitle(\"Import Public Key\");\n+            ui->keyLabelIKP->setText(\"Public Key\");\n+            ui->keyEditIKP->setPlaceholderText(\"Enter a Public Key (e.g. 1NS17iag9jJgTHDlVXjvLCEnZuQ3rJDE9L)\");\n+            ui->rescanButtonIKP->setCheckState(Qt::Checked);\n+            break;\n+        } case importPrivkey: {\n+            ui->QStackContainer->setCurrentWidget(ui->importKeyPage);\n+            this->setWindowTitle(\"Import Private Key\");\n+            ui->keyLabelIKP->setText(\"Private Key\");\n+            ui->keyEditIKP->setPlaceholderText(\"Enter a Private Key (e.g. L4sTHokqoFZpcmJgsAG2yxrf2f71v6PYpK2qEkCvc2Fp8VVdMiU3)\");\n+            ui->rescanButtonIKP->setCheckState(Qt::Checked);\n+            break;\n+        } case importAddress: {\n+            ui->QStackContainer->setCurrentWidget(ui->importAddress);\n+            this->setWindowTitle(\"Import Address\");\n+            ui->rescanButtonIA->setCheckState(Qt::Checked);\n+            ui->p2shButtonIA->setCheckState(Qt::Unchecked);\n+            break;\n+        }\n+    }\n+\n+    GUIUtil::handleCloseWindowShortcut(this);\n+}\n+\n+ImportDialog::~ImportDialog()\n+{\n+    delete ui;\n+}\n+\n+void ImportDialog::on_Accept_clicked() {\n+    switch (page) {\n+        case importPubkey: {\n+            std::string strKey = \"\";\n+            strKey.assign(ui->keyEditIKP->text().toStdString().c_str());\n+\n+            if (strKey.empty()) {\n+                QMessageBox::warning(this, tr(\"Error\"), tr(\"Key is empty\"));\n+                break;\n+            }\n+\n+            std::string strLabel;\n+            strLabel.assign(ui->labelEditIKP->text().toStdString().c_str());\n+\n+            // Whether to perform rescan after import\n+            bool fRescan = true;\n+            if (!ui->rescanButtonIKP->isChecked())\n+                fRescan = false;\n+\n+            if (fRescan && walletModel->wallet().chain().havePruned()) {\n+                // Exit early and print an error.\n+                // If a block is pruned after this check, we will import the key(s),\n+                // but fail the rescan with a generic error.\n+                QMessageBox::critical(this, tr(\"Rescan failed\"), tr(\"Rescan is disabled when blocks are pruned\"));\n+                break;\n+            }\n+\n+\n+            wallet::WalletRescanReserver reserver = walletModel->wallet().getReserver();\n+            if (fRescan && !reserver.reserve()) {\n+                QMessageBox::critical(this, tr(\"Rescan failed\"),\n+                                      tr(\"Wallet is currently rescanning. Abort existing rescan or wait.\"));\n+                break;\n+            }\n+\n+            if (!IsHex(strKey)) {\n+                QMessageBox::critical(this, tr(\"Invalid Public Key\"), tr(\"Pubkey must be a hex string\"));\n+                break;\n+            }\n+\n+            std::vector<unsigned char> data(ParseHex(strKey));\n+            CPubKey pubKey(data);\n+            if (!pubKey.IsFullyValid()) {\n+                QMessageBox::critical(this, tr(\"Invalid Public Key\"),\n+                                      tr(\"Pubkey is not a valid public key\"));\n+                break;\n+            }\n+\n+            std::set<CScript> script_pub_keys;\n+            for (const auto &dest: GetAllDestinationsForKey(pubKey)) {\n+                script_pub_keys.insert(GetScriptForDestination(dest));\n+            }\n+\n+            walletModel->wallet().MarkDirty();\n+            walletModel->wallet().ImportScriptPubKeys(strLabel, script_pub_keys, true, true, 1);\n+            walletModel->wallet().ImportPubKeys({pubKey.GetID()}, {{pubKey.GetID(), pubKey}}, {}, false, false, 1);",
      "path": "src/qt/importdialog.cpp",
      "position": null,
      "original_position": 113,
      "commit_id": "b2b00af1d37dd69c3e64d905984e68ac6a6b2d8f",
      "original_commit_id": "3a75af09dbb6c182a86ce71b15fe0824d3c68ac5",
      "in_reply_to_id": null,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In 3a75af09dbb6c182a86ce71b15fe0824d3c68ac5 \"qt: implemented importpubkey, importprivkey, and importaddress GUI's\"\r\n\r\nSince this is almost entirely copied from the RPC, I think this should be refactored. It would allow the both the RPC and the GUI to behave the same way with the locking - this implementation has us lock and release in each of the function calls, whereas the RPC holds the lock throughout. Additionally, doing so would let us expose fewer of these functions in the wallet interface.",
      "created_at": "2022-08-08T19:52:55Z",
      "updated_at": "2022-08-08T20:56:15Z",
      "html_url": "https://github.com/bitcoin-core/gui/pull/650#discussion_r940609847",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/gui/pulls/comments/940609847"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/gui/pulls/650"
        }
      },
      "start_line": null,
      "original_start_line": 106,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 156,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/gui/pulls/comments/940611471",
      "pull_request_review_id": 1065661283,
      "id": 940611471,
      "node_id": "PRRC_kwDOEEET9c44EJeP",
      "diff_hunk": "@@ -0,0 +1,302 @@\n+#include <qt/importdialog.h>\n+#include <qt/forms/ui_importdialog.h>\n+\n+#include <qt/guiconstants.h>\n+#include <qt/guiutil.h>\n+#include <key_io.h>\n+#include <qt/walletmodel.h>\n+#include <interfaces/node.h>\n+#include <wallet/wallet.h>\n+#include <QKeyEvent>\n+#include <QMessageBox>\n+#include <QPushButton>\n+#include <iostream>\n+#include <QScrollBar>\n+#include <tinyformat.h>\n+#include <chain.h>\n+\n+ImportDialog::ImportDialog(Page _page, QWidget *parent, WalletModel *walletModel) :\n+    QDialog(parent, GUIUtil::dialog_flags),\n+    ui(new Ui::ImportDialog),\n+    walletModel(walletModel),\n+    page(_page)\n+{\n+    ui->setupUi(this);\n+\n+    switch (page) {\n+        case importPubkey: {\n+            ui->QStackContainer->setCurrentWidget(ui->importKeyPage);\n+            this->setWindowTitle(\"Import Public Key\");\n+            ui->keyLabelIKP->setText(\"Public Key\");\n+            ui->keyEditIKP->setPlaceholderText(\"Enter a Public Key (e.g. 1NS17iag9jJgTHDlVXjvLCEnZuQ3rJDE9L)\");\n+            ui->rescanButtonIKP->setCheckState(Qt::Checked);\n+            break;\n+        } case importPrivkey: {\n+            ui->QStackContainer->setCurrentWidget(ui->importKeyPage);\n+            this->setWindowTitle(\"Import Private Key\");\n+            ui->keyLabelIKP->setText(\"Private Key\");\n+            ui->keyEditIKP->setPlaceholderText(\"Enter a Private Key (e.g. L4sTHokqoFZpcmJgsAG2yxrf2f71v6PYpK2qEkCvc2Fp8VVdMiU3)\");\n+            ui->rescanButtonIKP->setCheckState(Qt::Checked);\n+            break;\n+        } case importAddress: {\n+            ui->QStackContainer->setCurrentWidget(ui->importAddress);\n+            this->setWindowTitle(\"Import Address\");\n+            ui->rescanButtonIA->setCheckState(Qt::Checked);\n+            ui->p2shButtonIA->setCheckState(Qt::Unchecked);\n+            break;\n+        }\n+    }\n+\n+    GUIUtil::handleCloseWindowShortcut(this);\n+}\n+\n+ImportDialog::~ImportDialog()\n+{\n+    delete ui;\n+}\n+\n+void ImportDialog::on_Accept_clicked() {\n+    switch (page) {\n+        case importPubkey: {\n+            std::string strKey = \"\";\n+            strKey.assign(ui->keyEditIKP->text().toStdString().c_str());\n+\n+            if (strKey.empty()) {\n+                QMessageBox::warning(this, tr(\"Error\"), tr(\"Key is empty\"));\n+                break;\n+            }\n+\n+            std::string strLabel;\n+            strLabel.assign(ui->labelEditIKP->text().toStdString().c_str());\n+\n+            // Whether to perform rescan after import\n+            bool fRescan = true;\n+            if (!ui->rescanButtonIKP->isChecked())\n+                fRescan = false;\n+\n+            if (fRescan && walletModel->wallet().chain().havePruned()) {\n+                // Exit early and print an error.\n+                // If a block is pruned after this check, we will import the key(s),\n+                // but fail the rescan with a generic error.\n+                QMessageBox::critical(this, tr(\"Rescan failed\"), tr(\"Rescan is disabled when blocks are pruned\"));\n+                break;\n+            }\n+\n+\n+            wallet::WalletRescanReserver reserver = walletModel->wallet().getReserver();\n+            if (fRescan && !reserver.reserve()) {\n+                QMessageBox::critical(this, tr(\"Rescan failed\"),\n+                                      tr(\"Wallet is currently rescanning. Abort existing rescan or wait.\"));\n+                break;\n+            }\n+\n+            if (!IsHex(strKey)) {\n+                QMessageBox::critical(this, tr(\"Invalid Public Key\"), tr(\"Pubkey must be a hex string\"));\n+                break;\n+            }\n+\n+            std::vector<unsigned char> data(ParseHex(strKey));\n+            CPubKey pubKey(data);\n+            if (!pubKey.IsFullyValid()) {\n+                QMessageBox::critical(this, tr(\"Invalid Public Key\"),\n+                                      tr(\"Pubkey is not a valid public key\"));\n+                break;\n+            }\n+\n+            std::set<CScript> script_pub_keys;\n+            for (const auto &dest: GetAllDestinationsForKey(pubKey)) {\n+                script_pub_keys.insert(GetScriptForDestination(dest));\n+            }\n+\n+            walletModel->wallet().MarkDirty();\n+            walletModel->wallet().ImportScriptPubKeys(strLabel, script_pub_keys, true, true, 1);\n+            walletModel->wallet().ImportPubKeys({pubKey.GetID()}, {{pubKey.GetID(), pubKey}}, {}, false, false, 1);\n+\n+            if (fRescan) {\n+                int64_t scanned_time = walletModel->wallet().RescanFromTime(0, reserver, true);\n+                if (walletModel->wallet().IsAbortingRescan()) {\n+                    QMessageBox::critical(this, tr(\"Misc Error\"), tr(\"Rescan aborted by user.\"));\n+                    break;\n+                } else if (scanned_time > 0) {\n+                    QMessageBox::critical(this, tr(\"Wallet Error\"),\n+                                          tr(\"Rescan was unable to fully rescan the blockchain. Some transactions may be missing.\"));\n+                    break;\n+                }\n+                walletModel->wallet().ReacceptWalletTransactions();\n+            }\n+            break;\n+        }\n+        case importPrivkey: {\n+            wallet::WalletRescanReserver reserver = walletModel->wallet().getReserver();\n+            bool fRescan = true;\n+            WalletModel::UnlockContext ctx(walletModel->requestUnlock());\n+            if (!ctx.isValid()) {\n+                break;\n+            }\n+\n+            std::string strSecret = \"\";\n+            strSecret.assign(ui->keyEditIKP->text().toStdString().c_str());\n+            if (strSecret.empty()) {\n+                QMessageBox::warning(this, tr(\"Error\"), tr(\"Key is empty\"));\n+                break;\n+            }\n+\n+            std::string strLabel = \"\";\n+            strLabel.assign(ui->labelEditIKP->text().toStdString().c_str());\n+\n+            // Whether to perform rescan after import\n+            if (!ui->rescanButtonIKP->isChecked())\n+                fRescan = false;\n+\n+            if (fRescan && walletModel->wallet().chain().havePruned()) {\n+                // Exit early and print an error.\n+                // If a block is pruned after this check, we will import the key(s),\n+                // but fail the rescan with a generic error.\n+                QMessageBox::critical(this, tr(\"Rescan failed\"), tr(\"Rescan is disabled when blocks are pruned\"));\n+                break;\n+            }\n+\n+            if (fRescan && !reserver.reserve()) {\n+                QMessageBox::critical(this, tr(\"Rescan failed\"),\n+                                      tr(\"Wallet is currently rescanning. Abort existing rescan or wait.\"));\n+                break;\n+            }\n+\n+            CKey key = DecodeSecret(strSecret);\n+            if (!key.IsValid()) {\n+                QMessageBox::critical(this, tr(\"Invalid Private Key\"), tr(\"Invalid private key encoding.\"));\n+                break;\n+            }\n+\n+            CPubKey pubkey = key.GetPubKey();\n+            CHECK_NONFATAL(key.VerifyPubKey(pubkey));\n+            CKeyID vchAddress = pubkey.GetID();\n+            {\n+                walletModel->wallet().MarkDirty();\n+\n+                // We don't know which corresponding address will be used;\n+                // label all new addresses, and label existing addresses if a\n+                // label was passed.\n+                for (const auto &dest: GetAllDestinationsForKey(pubkey)) {\n+                    if (!strLabel.empty() || !walletModel->wallet().FindAddressBookEntry(dest)) {\n+                        walletModel->wallet().setAddressBook(dest, strLabel, \"receive\");\n+                    }\n+                }\n+\n+                // Use timestamp of 1 to scan the whole chain\n+                if (!walletModel->wallet().ImportPrivKeys({{vchAddress, key}}, 1)) {\n+                    QMessageBox::critical(this, tr(\"Wallet Error\"), tr(\"Error adding key to wallet\"));\n+                    break;\n+                }\n+\n+                // Add the wpkh script for this key if possible\n+                if (pubkey.IsCompressed()) {\n+                    walletModel->wallet().ImportScripts({GetScriptForDestination(WitnessV0KeyHash(vchAddress))},\n+                                                        0 /* timestamp */);\n+                }\n+            }",
      "path": "src/qt/importdialog.cpp",
      "position": null,
      "original_position": 197,
      "commit_id": "b2b00af1d37dd69c3e64d905984e68ac6a6b2d8f",
      "original_commit_id": "3a75af09dbb6c182a86ce71b15fe0824d3c68ac5",
      "in_reply_to_id": null,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In 3a75af09dbb6c182a86ce71b15fe0824d3c68ac5 \"qt: implemented importpubkey, importprivkey, and importaddress GUI's\"\r\n\r\nThis is also copied from the RPC, I think it could be refactored as well.\r\n\r\nFor handling the errors, the refactored functions could throw the same kinds of exceptions that were defined for `importmulti` and `importdescriptors`, and this GUI code can catch those and turn them into the error message boxes as necessary.",
      "created_at": "2022-08-08T19:55:04Z",
      "updated_at": "2022-08-08T20:56:15Z",
      "html_url": "https://github.com/bitcoin-core/gui/pull/650#discussion_r940611471",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/gui/pulls/comments/940611471"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/gui/pulls/650"
        }
      },
      "start_line": null,
      "original_start_line": 171,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 193,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/gui/pulls/comments/940614111",
      "pull_request_review_id": 1065661283,
      "id": 940614111,
      "node_id": "PRRC_kwDOEEET9c44EKHf",
      "diff_hunk": "@@ -0,0 +1,302 @@\n+#include <qt/importdialog.h>\n+#include <qt/forms/ui_importdialog.h>\n+\n+#include <qt/guiconstants.h>\n+#include <qt/guiutil.h>\n+#include <key_io.h>\n+#include <qt/walletmodel.h>\n+#include <interfaces/node.h>\n+#include <wallet/wallet.h>\n+#include <QKeyEvent>\n+#include <QMessageBox>\n+#include <QPushButton>\n+#include <iostream>\n+#include <QScrollBar>\n+#include <tinyformat.h>\n+#include <chain.h>\n+\n+ImportDialog::ImportDialog(Page _page, QWidget *parent, WalletModel *walletModel) :\n+    QDialog(parent, GUIUtil::dialog_flags),\n+    ui(new Ui::ImportDialog),\n+    walletModel(walletModel),\n+    page(_page)\n+{\n+    ui->setupUi(this);\n+\n+    switch (page) {\n+        case importPubkey: {\n+            ui->QStackContainer->setCurrentWidget(ui->importKeyPage);\n+            this->setWindowTitle(\"Import Public Key\");\n+            ui->keyLabelIKP->setText(\"Public Key\");\n+            ui->keyEditIKP->setPlaceholderText(\"Enter a Public Key (e.g. 1NS17iag9jJgTHDlVXjvLCEnZuQ3rJDE9L)\");\n+            ui->rescanButtonIKP->setCheckState(Qt::Checked);\n+            break;\n+        } case importPrivkey: {\n+            ui->QStackContainer->setCurrentWidget(ui->importKeyPage);\n+            this->setWindowTitle(\"Import Private Key\");\n+            ui->keyLabelIKP->setText(\"Private Key\");\n+            ui->keyEditIKP->setPlaceholderText(\"Enter a Private Key (e.g. L4sTHokqoFZpcmJgsAG2yxrf2f71v6PYpK2qEkCvc2Fp8VVdMiU3)\");\n+            ui->rescanButtonIKP->setCheckState(Qt::Checked);\n+            break;\n+        } case importAddress: {\n+            ui->QStackContainer->setCurrentWidget(ui->importAddress);\n+            this->setWindowTitle(\"Import Address\");\n+            ui->rescanButtonIA->setCheckState(Qt::Checked);\n+            ui->p2shButtonIA->setCheckState(Qt::Unchecked);\n+            break;\n+        }\n+    }\n+\n+    GUIUtil::handleCloseWindowShortcut(this);\n+}\n+\n+ImportDialog::~ImportDialog()\n+{\n+    delete ui;\n+}\n+\n+void ImportDialog::on_Accept_clicked() {\n+    switch (page) {\n+        case importPubkey: {\n+            std::string strKey = \"\";\n+            strKey.assign(ui->keyEditIKP->text().toStdString().c_str());\n+\n+            if (strKey.empty()) {\n+                QMessageBox::warning(this, tr(\"Error\"), tr(\"Key is empty\"));\n+                break;\n+            }\n+\n+            std::string strLabel;\n+            strLabel.assign(ui->labelEditIKP->text().toStdString().c_str());\n+\n+            // Whether to perform rescan after import\n+            bool fRescan = true;\n+            if (!ui->rescanButtonIKP->isChecked())\n+                fRescan = false;\n+\n+            if (fRescan && walletModel->wallet().chain().havePruned()) {\n+                // Exit early and print an error.\n+                // If a block is pruned after this check, we will import the key(s),\n+                // but fail the rescan with a generic error.\n+                QMessageBox::critical(this, tr(\"Rescan failed\"), tr(\"Rescan is disabled when blocks are pruned\"));\n+                break;\n+            }\n+\n+\n+            wallet::WalletRescanReserver reserver = walletModel->wallet().getReserver();\n+            if (fRescan && !reserver.reserve()) {\n+                QMessageBox::critical(this, tr(\"Rescan failed\"),\n+                                      tr(\"Wallet is currently rescanning. Abort existing rescan or wait.\"));\n+                break;\n+            }\n+\n+            if (!IsHex(strKey)) {\n+                QMessageBox::critical(this, tr(\"Invalid Public Key\"), tr(\"Pubkey must be a hex string\"));\n+                break;\n+            }\n+\n+            std::vector<unsigned char> data(ParseHex(strKey));\n+            CPubKey pubKey(data);\n+            if (!pubKey.IsFullyValid()) {\n+                QMessageBox::critical(this, tr(\"Invalid Public Key\"),\n+                                      tr(\"Pubkey is not a valid public key\"));\n+                break;\n+            }\n+\n+            std::set<CScript> script_pub_keys;\n+            for (const auto &dest: GetAllDestinationsForKey(pubKey)) {\n+                script_pub_keys.insert(GetScriptForDestination(dest));\n+            }\n+\n+            walletModel->wallet().MarkDirty();\n+            walletModel->wallet().ImportScriptPubKeys(strLabel, script_pub_keys, true, true, 1);\n+            walletModel->wallet().ImportPubKeys({pubKey.GetID()}, {{pubKey.GetID(), pubKey}}, {}, false, false, 1);\n+\n+            if (fRescan) {\n+                int64_t scanned_time = walletModel->wallet().RescanFromTime(0, reserver, true);\n+                if (walletModel->wallet().IsAbortingRescan()) {\n+                    QMessageBox::critical(this, tr(\"Misc Error\"), tr(\"Rescan aborted by user.\"));\n+                    break;\n+                } else if (scanned_time > 0) {\n+                    QMessageBox::critical(this, tr(\"Wallet Error\"),\n+                                          tr(\"Rescan was unable to fully rescan the blockchain. Some transactions may be missing.\"));\n+                    break;\n+                }\n+                walletModel->wallet().ReacceptWalletTransactions();\n+            }\n+            break;\n+        }\n+        case importPrivkey: {\n+            wallet::WalletRescanReserver reserver = walletModel->wallet().getReserver();\n+            bool fRescan = true;\n+            WalletModel::UnlockContext ctx(walletModel->requestUnlock());\n+            if (!ctx.isValid()) {\n+                break;\n+            }\n+\n+            std::string strSecret = \"\";\n+            strSecret.assign(ui->keyEditIKP->text().toStdString().c_str());\n+            if (strSecret.empty()) {\n+                QMessageBox::warning(this, tr(\"Error\"), tr(\"Key is empty\"));\n+                break;\n+            }\n+\n+            std::string strLabel = \"\";\n+            strLabel.assign(ui->labelEditIKP->text().toStdString().c_str());\n+\n+            // Whether to perform rescan after import\n+            if (!ui->rescanButtonIKP->isChecked())\n+                fRescan = false;\n+\n+            if (fRescan && walletModel->wallet().chain().havePruned()) {\n+                // Exit early and print an error.\n+                // If a block is pruned after this check, we will import the key(s),\n+                // but fail the rescan with a generic error.\n+                QMessageBox::critical(this, tr(\"Rescan failed\"), tr(\"Rescan is disabled when blocks are pruned\"));\n+                break;\n+            }\n+\n+            if (fRescan && !reserver.reserve()) {\n+                QMessageBox::critical(this, tr(\"Rescan failed\"),\n+                                      tr(\"Wallet is currently rescanning. Abort existing rescan or wait.\"));\n+                break;\n+            }\n+\n+            CKey key = DecodeSecret(strSecret);\n+            if (!key.IsValid()) {\n+                QMessageBox::critical(this, tr(\"Invalid Private Key\"), tr(\"Invalid private key encoding.\"));\n+                break;\n+            }\n+\n+            CPubKey pubkey = key.GetPubKey();\n+            CHECK_NONFATAL(key.VerifyPubKey(pubkey));\n+            CKeyID vchAddress = pubkey.GetID();\n+            {\n+                walletModel->wallet().MarkDirty();\n+\n+                // We don't know which corresponding address will be used;\n+                // label all new addresses, and label existing addresses if a\n+                // label was passed.\n+                for (const auto &dest: GetAllDestinationsForKey(pubkey)) {\n+                    if (!strLabel.empty() || !walletModel->wallet().FindAddressBookEntry(dest)) {\n+                        walletModel->wallet().setAddressBook(dest, strLabel, \"receive\");\n+                    }\n+                }\n+\n+                // Use timestamp of 1 to scan the whole chain\n+                if (!walletModel->wallet().ImportPrivKeys({{vchAddress, key}}, 1)) {\n+                    QMessageBox::critical(this, tr(\"Wallet Error\"), tr(\"Error adding key to wallet\"));\n+                    break;\n+                }\n+\n+                // Add the wpkh script for this key if possible\n+                if (pubkey.IsCompressed()) {\n+                    walletModel->wallet().ImportScripts({GetScriptForDestination(WitnessV0KeyHash(vchAddress))},\n+                                                        0 /* timestamp */);\n+                }\n+            }\n+\n+            if (fRescan) {\n+                int64_t scanned_time = walletModel->wallet().RescanFromTime(0, reserver, true);\n+                if (walletModel->wallet().IsAbortingRescan()) {\n+                    QMessageBox::critical(this, tr(\"Misc Error\"),\n+                                          tr(\"Rescan aborted by user.\"));\n+                    break;\n+                } else if (scanned_time > 0) {\n+                    QMessageBox::critical(this, tr(\"Wallet Error\"),\n+                                          tr(\"Rescan was unable to fully rescan the blockchain. Some transactions may be missing.\"));\n+                    break;\n+                }\n+            }\n+\n+            break;\n+        }\n+        case importAddress: {\n+            std::string strAddress = \"\";\n+            strAddress.assign(ui->keyEditIA->text().toStdString().c_str());\n+            if (strAddress.empty()) {\n+                QMessageBox::warning(this, tr(\"Error\"), tr(\"Address is empty\"));\n+                break;\n+            }\n+\n+\n+            std::string strLabel = \"\";\n+            strLabel.assign(ui->labelEditIA->text().toStdString().c_str());\n+\n+            // Whether to perform rescan after import\n+            bool fRescan = true;\n+            if (!ui->rescanButtonIA->isChecked())\n+                fRescan = false;\n+\n+            if (fRescan && walletModel->wallet().chain().havePruned()) {\n+                // Exit early and print an error.\n+                // If a block is pruned after this check, we will import the key(s),\n+                // but fail the rescan with a generic error.\n+                QMessageBox::critical(this, tr(\"Rescan failed\"), tr(\"Rescan is disabled when blocks are pruned\"));\n+                break;\n+            }\n+\n+            wallet::WalletRescanReserver reserver = walletModel->wallet().getReserver();\n+            if (fRescan && !reserver.reserve()) {\n+                QMessageBox::critical(this, tr(\"Rescan failed\"),\n+                                      tr(\"Wallet is currently rescanning. Abort existing rescan or wait.\"));\n+                break;\n+            }\n+\n+            // Whether to import a p2sh version, too\n+            bool fP2SH = false;\n+            if (ui->p2shButtonIA->isChecked())\n+                fP2SH = true;\n+\n+            CTxDestination dest = DecodeDestination(strAddress);\n+            if (IsValidDestination(dest)) {\n+                if (fP2SH) {\n+                    QMessageBox::critical(this, tr(\"Invalid Address\"),\n+                                          tr(\"Cannot use the p2sh flag with an address - use a script instead\"));\n+                    break;\n+                }\n+                if (OutputTypeFromDestination(dest) == OutputType::BECH32M) {\n+                    QMessageBox::critical(this, tr(\"Invalid Address\"),\n+                                          tr(\"Bech32m addresses cannot be imported into legacy wallets\"));\n+                    break;\n+                }\n+\n+                walletModel->wallet().MarkDirty();\n+\n+                walletModel->wallet().ImportScriptPubKeys(strLabel, {GetScriptForDestination(dest)},\n+                                                          false /* have_solving_data */, true /* apply_label */,\n+                                                          1 /* timestamp */);\n+            } else if (IsHex(strAddress)) {\n+                std::vector<unsigned char> data(ParseHex(strAddress));\n+                CScript redeem_script(data.begin(), data.end());\n+\n+                std::set <CScript> scripts = {redeem_script};\n+                walletModel->wallet().ImportScripts(scripts, 0 /* timestamp */);\n+\n+                if (fP2SH) {\n+                    scripts.insert(GetScriptForDestination(ScriptHash(redeem_script)));\n+                }\n+\n+                walletModel->wallet().ImportScriptPubKeys(strLabel, scripts, false /* have_solving_data */,\n+                                                          true /* apply_label */, 1 /* timestamp */);\n+            } else {\n+                QMessageBox::critical(this, tr(\"Invalid Address\"), tr(\"Invalid Bitcoin address or script\"));\n+                break;\n+            }",
      "path": "src/qt/importdialog.cpp",
      "position": null,
      "original_position": 285,
      "commit_id": "b2b00af1d37dd69c3e64d905984e68ac6a6b2d8f",
      "original_commit_id": "3a75af09dbb6c182a86ce71b15fe0824d3c68ac5",
      "in_reply_to_id": null,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In 3a75af09dbb6c182a86ce71b15fe0824d3c68ac5 \"qt: implemented importpubkey, importprivkey, and importaddress GUI's\"\r\n\r\nSame comment about refactoring.",
      "created_at": "2022-08-08T19:58:32Z",
      "updated_at": "2022-08-08T20:56:15Z",
      "html_url": "https://github.com/bitcoin-core/gui/pull/650#discussion_r940614111",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/gui/pulls/comments/940614111"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/gui/pulls/650"
        }
      },
      "start_line": null,
      "original_start_line": 251,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 221,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/gui/pulls/comments/940616219",
      "pull_request_review_id": 1065661283,
      "id": 940616219,
      "node_id": "PRRC_kwDOEEET9c44EKob",
      "diff_hunk": "@@ -0,0 +1,302 @@\n+#include <qt/importdialog.h>\n+#include <qt/forms/ui_importdialog.h>\n+\n+#include <qt/guiconstants.h>\n+#include <qt/guiutil.h>\n+#include <key_io.h>\n+#include <qt/walletmodel.h>\n+#include <interfaces/node.h>\n+#include <wallet/wallet.h>\n+#include <QKeyEvent>\n+#include <QMessageBox>\n+#include <QPushButton>\n+#include <iostream>\n+#include <QScrollBar>\n+#include <tinyformat.h>\n+#include <chain.h>\n+\n+ImportDialog::ImportDialog(Page _page, QWidget *parent, WalletModel *walletModel) :\n+    QDialog(parent, GUIUtil::dialog_flags),\n+    ui(new Ui::ImportDialog),\n+    walletModel(walletModel),\n+    page(_page)\n+{\n+    ui->setupUi(this);\n+\n+    switch (page) {\n+        case importPubkey: {\n+            ui->QStackContainer->setCurrentWidget(ui->importKeyPage);\n+            this->setWindowTitle(\"Import Public Key\");\n+            ui->keyLabelIKP->setText(\"Public Key\");\n+            ui->keyEditIKP->setPlaceholderText(\"Enter a Public Key (e.g. 1NS17iag9jJgTHDlVXjvLCEnZuQ3rJDE9L)\");\n+            ui->rescanButtonIKP->setCheckState(Qt::Checked);\n+            break;\n+        } case importPrivkey: {\n+            ui->QStackContainer->setCurrentWidget(ui->importKeyPage);\n+            this->setWindowTitle(\"Import Private Key\");\n+            ui->keyLabelIKP->setText(\"Private Key\");\n+            ui->keyEditIKP->setPlaceholderText(\"Enter a Private Key (e.g. L4sTHokqoFZpcmJgsAG2yxrf2f71v6PYpK2qEkCvc2Fp8VVdMiU3)\");\n+            ui->rescanButtonIKP->setCheckState(Qt::Checked);\n+            break;\n+        } case importAddress: {\n+            ui->QStackContainer->setCurrentWidget(ui->importAddress);\n+            this->setWindowTitle(\"Import Address\");\n+            ui->rescanButtonIA->setCheckState(Qt::Checked);\n+            ui->p2shButtonIA->setCheckState(Qt::Unchecked);\n+            break;\n+        }\n+    }\n+\n+    GUIUtil::handleCloseWindowShortcut(this);\n+}\n+\n+ImportDialog::~ImportDialog()\n+{\n+    delete ui;\n+}\n+\n+void ImportDialog::on_Accept_clicked() {\n+    switch (page) {\n+        case importPubkey: {\n+            std::string strKey = \"\";\n+            strKey.assign(ui->keyEditIKP->text().toStdString().c_str());",
      "path": "src/qt/importdialog.cpp",
      "position": null,
      "original_position": 62,
      "commit_id": "b2b00af1d37dd69c3e64d905984e68ac6a6b2d8f",
      "original_commit_id": "3a75af09dbb6c182a86ce71b15fe0824d3c68ac5",
      "in_reply_to_id": null,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In 3a75af09dbb6c182a86ce71b15fe0824d3c68ac5 \"qt: implemented importpubkey, importprivkey, and importaddress GUI's\"\r\n\r\nThis can be simplified to one line, here and elsewhere.\r\n\r\n```suggestion\r\n            std::string strKey = ui->keyEditIKP->text().toStdString();\r\n```",
      "created_at": "2022-08-08T20:01:28Z",
      "updated_at": "2022-08-08T20:56:15Z",
      "html_url": "https://github.com/bitcoin-core/gui/pull/650#discussion_r940616219",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/gui/pulls/comments/940616219"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/gui/pulls/650"
        }
      },
      "start_line": null,
      "original_start_line": 61,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 108,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/gui/pulls/comments/940616656",
      "pull_request_review_id": 1065661283,
      "id": 940616656,
      "node_id": "PRRC_kwDOEEET9c44EKvQ",
      "diff_hunk": "@@ -0,0 +1,302 @@\n+#include <qt/importdialog.h>\n+#include <qt/forms/ui_importdialog.h>\n+\n+#include <qt/guiconstants.h>\n+#include <qt/guiutil.h>\n+#include <key_io.h>\n+#include <qt/walletmodel.h>\n+#include <interfaces/node.h>\n+#include <wallet/wallet.h>\n+#include <QKeyEvent>\n+#include <QMessageBox>\n+#include <QPushButton>\n+#include <iostream>\n+#include <QScrollBar>\n+#include <tinyformat.h>\n+#include <chain.h>\n+\n+ImportDialog::ImportDialog(Page _page, QWidget *parent, WalletModel *walletModel) :\n+    QDialog(parent, GUIUtil::dialog_flags),\n+    ui(new Ui::ImportDialog),\n+    walletModel(walletModel),\n+    page(_page)\n+{\n+    ui->setupUi(this);\n+\n+    switch (page) {\n+        case importPubkey: {\n+            ui->QStackContainer->setCurrentWidget(ui->importKeyPage);\n+            this->setWindowTitle(\"Import Public Key\");\n+            ui->keyLabelIKP->setText(\"Public Key\");\n+            ui->keyEditIKP->setPlaceholderText(\"Enter a Public Key (e.g. 1NS17iag9jJgTHDlVXjvLCEnZuQ3rJDE9L)\");\n+            ui->rescanButtonIKP->setCheckState(Qt::Checked);\n+            break;\n+        } case importPrivkey: {\n+            ui->QStackContainer->setCurrentWidget(ui->importKeyPage);\n+            this->setWindowTitle(\"Import Private Key\");\n+            ui->keyLabelIKP->setText(\"Private Key\");\n+            ui->keyEditIKP->setPlaceholderText(\"Enter a Private Key (e.g. L4sTHokqoFZpcmJgsAG2yxrf2f71v6PYpK2qEkCvc2Fp8VVdMiU3)\");\n+            ui->rescanButtonIKP->setCheckState(Qt::Checked);\n+            break;\n+        } case importAddress: {\n+            ui->QStackContainer->setCurrentWidget(ui->importAddress);\n+            this->setWindowTitle(\"Import Address\");\n+            ui->rescanButtonIA->setCheckState(Qt::Checked);\n+            ui->p2shButtonIA->setCheckState(Qt::Unchecked);\n+            break;\n+        }\n+    }\n+\n+    GUIUtil::handleCloseWindowShortcut(this);\n+}\n+\n+ImportDialog::~ImportDialog()\n+{\n+    delete ui;\n+}\n+\n+void ImportDialog::on_Accept_clicked() {\n+    switch (page) {\n+        case importPubkey: {\n+            std::string strKey = \"\";\n+            strKey.assign(ui->keyEditIKP->text().toStdString().c_str());\n+\n+            if (strKey.empty()) {\n+                QMessageBox::warning(this, tr(\"Error\"), tr(\"Key is empty\"));\n+                break;\n+            }\n+\n+            std::string strLabel;\n+            strLabel.assign(ui->labelEditIKP->text().toStdString().c_str());",
      "path": "src/qt/importdialog.cpp",
      "position": null,
      "original_position": 70,
      "commit_id": "b2b00af1d37dd69c3e64d905984e68ac6a6b2d8f",
      "original_commit_id": "3a75af09dbb6c182a86ce71b15fe0824d3c68ac5",
      "in_reply_to_id": null,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In 3a75af09dbb6c182a86ce71b15fe0824d3c68ac5 \"qt: implemented importpubkey, importprivkey, and importaddress GUI's\"\r\n\r\nThis can be simplified to one line, here and elsewhere.\r\n\r\n```suggestion\r\n            std::string strLabel = ui->labelEditIKP->text().toStdString();\r\n```",
      "created_at": "2022-08-08T20:02:09Z",
      "updated_at": "2022-08-08T20:56:15Z",
      "html_url": "https://github.com/bitcoin-core/gui/pull/650#discussion_r940616656",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/gui/pulls/comments/940616656"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/gui/pulls/650"
        }
      },
      "start_line": null,
      "original_start_line": 69,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 116,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/gui/pulls/comments/940621024",
      "pull_request_review_id": 1065661283,
      "id": 940621024,
      "node_id": "PRRC_kwDOEEET9c44ELzg",
      "diff_hunk": "@@ -298,5 +344,377 @@ void ImportDialog::on_Accept_clicked() {\n             }\n             break;\n         }\n+        case importMulti: {\n+            bool fRescan = true;\n+            if (!ui->rescanButtonIA->isChecked())\n+                fRescan = false;\n+\n+            if (fRescan && walletModel->wallet().chain().havePruned()) {\n+                // Exit early and print an error.\n+                // If a block is pruned after this check, we will import the key(s),\n+                // but fail the rescan with a generic error.\n+                QMessageBox::critical(this, tr(\"Rescan failed\"), tr(\"Rescan is disabled when blocks are pruned\"));\n+                break;\n+            }\n+\n+            wallet::WalletRescanReserver reserver = walletModel->wallet().getReserver();\n+            if (fRescan && !reserver.reserve()) {\n+                QMessageBox::critical(this, tr(\"Rescan failed\"),\n+                                      tr(\"Wallet is currently rescanning. Abort existing rescan or wait.\"));\n+                break;\n+            }\n+\n+            int64_t now = 0;\n+            bool fRunScan = false;\n+            int64_t nLowestTimestamp = 0;\n+            std::vector<resultpdi> response = {};",
      "path": "src/qt/importdialog.cpp",
      "position": null,
      "original_position": 100,
      "commit_id": "b2b00af1d37dd69c3e64d905984e68ac6a6b2d8f",
      "original_commit_id": "c71f418f18000f537871f57a42ec76e0a25941e9",
      "in_reply_to_id": null,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In c71f418f18000f537871f57a42ec76e0a25941e9 \"qt: implemented importmulti and importdescriptors GUI's\"\r\n\r\n```suggestion\r\n            std::vector<resultpdi> response;\r\n```",
      "created_at": "2022-08-08T20:08:00Z",
      "updated_at": "2022-08-08T20:56:15Z",
      "html_url": "https://github.com/bitcoin-core/gui/pull/650#discussion_r940621024",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/gui/pulls/comments/940621024"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/gui/pulls/650"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 370,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/gui/pulls/comments/940625711",
      "pull_request_review_id": 1065661283,
      "id": 940625711,
      "node_id": "PRRC_kwDOEEET9c44EM8v",
      "diff_hunk": "@@ -298,5 +344,377 @@ void ImportDialog::on_Accept_clicked() {\n             }\n             break;\n         }\n+        case importMulti: {\n+            bool fRescan = true;\n+            if (!ui->rescanButtonIA->isChecked())\n+                fRescan = false;\n+\n+            if (fRescan && walletModel->wallet().chain().havePruned()) {\n+                // Exit early and print an error.\n+                // If a block is pruned after this check, we will import the key(s),\n+                // but fail the rescan with a generic error.\n+                QMessageBox::critical(this, tr(\"Rescan failed\"), tr(\"Rescan is disabled when blocks are pruned\"));\n+                break;\n+            }\n+\n+            wallet::WalletRescanReserver reserver = walletModel->wallet().getReserver();\n+            if (fRescan && !reserver.reserve()) {\n+                QMessageBox::critical(this, tr(\"Rescan failed\"),\n+                                      tr(\"Wallet is currently rescanning. Abort existing rescan or wait.\"));\n+                break;\n+            }\n+\n+            int64_t now = 0;\n+            bool fRunScan = false;\n+            int64_t nLowestTimestamp = 0;\n+            std::vector<resultpdi> response = {};\n+\n+            WalletModel::UnlockContext ctx(walletModel->requestUnlock());\n+            if (!ctx.isValid()) {\n+                break;\n+            }\n+\n+            // Verify all timestamps are present before importing any keys.\n+            CHECK_NONFATAL(walletModel->wallet().chain().findBlock(walletModel->wallet().GetLastBlockHash(),\n+                                                                   interfaces::FoundBlock().time(nLowestTimestamp).mtpTime(now)));\n+            const int64_t minimumTimestamp = 1;\n+\n+            for (int i = 0; i < ui->entries->count(); ++i) {\n+                ImportEntry *entry = qobject_cast<ImportEntry *>(ui->entries->itemAt(i)->widget());\n+                wallet::ImportMultiData mData = entry->getMultiData();\n+                const int64_t timestamp = std::max(GetImportTimestamp(mData.timestamp, now), minimumTimestamp);\n+                resultpdi result;\n+\n+                try {\n+                    // Internal addresses should not have a label\n+                    if (mData.internal && !mData.label.empty()) {\n+                        throw wallet::InvalidParameter(\"Internal addresses should not have a label\");\n+                    }\n+\n+                    bool isScript = false;\n+                    FlatSigningProvider keys;\n+                    if (!mData.scriptPubKey.empty()) {\n+                        // if the input isn't a valid address assume it is a script\n+                        CTxDestination dest = DecodeDestination(mData.scriptPubKey);\n+                        if (!IsValidDestination(dest)) {\n+                            isScript = true;\n+                        }\n+                    } else {\n+                        std::string error;\n+                        mData.parsed_desc = Parse(entry->getDesc(), keys, error, /* require_checksum = */ true);\n+                        if (!mData.parsed_desc) {\n+                            throw wallet::InvalidAddressOrKey(error);\n+                        }\n+                        if (mData.parsed_desc->GetOutputType() == OutputType::BECH32M) {\n+                            throw wallet::InvalidAddressOrKey(\"Bech32m descriptors cannot be imported into legacy wallets\");\n+                        }\n+                        bool range_exists = (mData.range_start && mData.range_end);\n+                        if (!mData.parsed_desc->IsRange() && range_exists) {\n+                            throw wallet::InvalidParameter(\"Range should not be specified for an un-ranged descriptor\");\n+                        } else if (mData.parsed_desc->IsRange()) {\n+                            if (!range_exists) {\n+                                throw wallet::InvalidParameter(\"Descriptor is ranged, please specify the range\");\n+                            }\n+                            RangeDescriptorCheck(mData.range_start, mData.range_end);\n+                        }\n+                    }\n+                    walletModel->wallet().ProcessImport(mData, result.warnings, isScript, keys, timestamp);\n+                    result.success = true;\n+                } catch (const wallet::MiscError& e) {\n+                    result.success = false;\n+                    result.error = e.error;\n+                } catch (const wallet::WalletError& e) {\n+                    result.success = false;\n+                    result.error = e.error;\n+                } catch (const wallet::InvalidAddressOrKey& e) {\n+                    result.success = false;\n+                    result.error = e.error;\n+                } catch (const wallet::InvalidParameter& e) {\n+                    result.success = false;\n+                    result.error = e.error;\n+                } catch (...) {\n+                    result.success = false;\n+                    result.error = \"Missing required fields\";\n+                }\n+\n+                response.push_back(result);\n+\n+                if (!fRescan) {\n+                    continue;\n+                }\n+\n+                // If at least one request was successful then allow rescan.\n+                if (result.success) {\n+                    fRunScan = true;\n+                }\n+\n+                // Get the lowest timestamp.\n+                if (timestamp < nLowestTimestamp) {\n+                    nLowestTimestamp = timestamp;\n+                }\n+            }\n+\n+            if (fRescan && fRunScan && ui->entries->count()) {\n+                int64_t scannedTime = walletModel->wallet().RescanFromTime(nLowestTimestamp, reserver, true);\n+                walletModel->wallet().ReacceptWalletTransactions();\n+\n+                if (walletModel->wallet().IsAbortingRescan()) {\n+                    QMessageBox::critical(this, tr(\"Misc Error\"),\n+                                          tr(\"Rescan aborted by user.\"));\n+\n+                    if (scannedTime > nLowestTimestamp) {\n+                        std::vector <resultpdi> results = response;\n+                        response.clear();\n+\n+                        for (int i = 0; i < ui->entries->count(); ++i) {\n+                            ImportEntry *entry = qobject_cast<ImportEntry *>(ui->entries->itemAt(i)->widget());\n+                            // If key creation date is within the successfully scanned\n+                            // range, or if the import result already has an error set, let\n+                            // the result stand unmodified. Otherwise, replace the result\n+                            // with an error message.\n+                            if (scannedTime <= GetImportTimestamp(entry->getMultiData().timestamp, now) || !results.at(i).error.empty()) {\n+                                response.push_back(results.at(i));\n+                            } else {\n+                                resultpdi result;\n+                                result.success = false;\n+                                result.error = strprintf(\n+                                                \"Rescan failed for key with creation timestamp %d. There was an error reading a \"\n+                                                \"block from time %d, which is after or within %d seconds of key creation, and \"\n+                                                \"could contain transactions pertaining to the key. As a result, transactions \"\n+                                                \"and coins using this key may not appear in the wallet. This error could be \"\n+                                                \"caused by pruning or data corruption (see bitcoind log for details) and could \"\n+                                                \"be dealt with by downloading and rescanning the relevant blocks (see -reindex \"\n+                                                \"option and rescanblockchain RPC).\",\n+                                                GetImportTimestamp(entry->getMultiData().timestamp, now), scannedTime - TIMESTAMP_WINDOW - 1,\n+                                                TIMESTAMP_WINDOW);\n+                                response.push_back(std::move(result));\n+                            }\n+                        }\n+                    }\n+                }\n+            }\n+            for (int i = 0; i < response.size(); i++) {\n+                if (!response[i].success) {\n+                    std::string warning_str;\n+                    if (response[i].warnings.size() != 0) {\n+                        for (auto w: response[i].warnings) {\n+                            warning_str += w + \"\\n\";\n+                        }\n+                    }\n+                    QMessageBox::critical(this, QString::fromStdString(\"Error: input box # \" + QString::number(i)),\n+                                          QString::fromStdString(\"Error:\" + response[i].error+\"\\n\"+\n+                                          \"Warnings:\"+\"\\n\" + warning_str));\n+                }\n+            }\n+            break;\n+        }\n+        case importDescriptors: {\n+            wallet::WalletRescanReserver reserver = walletModel->wallet().getReserver();\n+            if (!reserver.reserve()) {\n+                QMessageBox::critical(this, tr(\"Rescan failed\"),\n+                                      tr(\"Wallet is currently rescanning. Abort existing rescan or wait.\"));\n+                break;\n+            }\n+\n+            const int64_t minimum_timestamp = 1;\n+            int64_t now = 0;\n+            int64_t lowest_timestamp = 0;\n+            bool rescan = false;\n+            std::vector<resultpdi> response = {};\n+\n+            WalletModel::UnlockContext ctx(walletModel->requestUnlock());\n+            if (!ctx.isValid()) {\n+                break;\n+            }\n+\n+            CHECK_NONFATAL(walletModel->wallet().chain().findBlock(walletModel->wallet().GetLastBlockHash(),\n+                                                                   interfaces::FoundBlock().time(lowest_timestamp).mtpTime(now)));\n+\n+            // Get all timestamps and extract the lowest timestamp\n+            for (int i = 0; i < ui->entries->count(); ++i) {\n+                ImportEntry *entry = qobject_cast<ImportEntry *>(ui->entries->itemAt(i)->widget());\n+\n+                // This throws an error if \"timestamp\" doesn't exist\n+                wallet::ImportDescriptorData dData = entry->getDescriptorData();\n+                const int64_t timestamp = std::max(GetImportTimestamp(dData.timestamp, now), minimum_timestamp);\n+                resultpdi result;\n+\n+                try {\n+                    // Parse descriptor string\n+                    FlatSigningProvider keys;\n+                    std::string error;\n+                    dData.parsed_desc = Parse(entry->getDesc(), keys, error, /* require_checksum = */ true);\n+                    if (!dData.parsed_desc) {\n+                        throw wallet::InvalidAddressOrKey(error);\n+                    }\n+\n+                    bool range_exists = (dData.range_start && dData.range_end);\n+                    if (!dData.parsed_desc->IsRange() && range_exists) {\n+                        throw wallet::InvalidParameter(\"Range should not be specified for an un-ranged descriptor\");\n+                    } else if (dData.parsed_desc->IsRange()) {\n+                        if (!range_exists) {\n+                            result.warnings.push_back(\"Range not given, using default keypool range\");\n+                            dData.range_start = 0;\n+                            dData.range_end = gArgs.GetIntArg(\"-keypool\", wallet::DEFAULT_KEYPOOL_SIZE);\n+                        } else {\n+                            RangeDescriptorCheck(dData.range_start, dData.range_end);\n+                            dData.range_end++;\n+                        }\n+\n+                        if (dData.next_index) {\n+                            // bound checks\n+                            if (dData.next_index < dData.range_start || dData.next_index >= dData.range_end) {\n+                                throw wallet::InvalidParameter(\"next_index is out of range\");\n+                            }\n+                        } else {\n+                            dData.next_index = dData.range_start;\n+                        }\n+                    }\n+                    walletModel->wallet().ProcessDescriptorImport(dData, result.warnings, keys, range_exists, timestamp);\n+                    result.success = true;\n+                } catch (const wallet::MiscError& e) {\n+                    result.success = false;\n+                    result.error = e.error;\n+                } catch (const wallet::WalletError& e) {\n+                    result.success = false;\n+                    result.error = e.error;\n+                } catch (const wallet::InvalidAddressOrKey& e) {\n+                    result.success = false;\n+                    result.error = e.error;\n+                } catch (const wallet::InvalidParameter& e) {\n+                    result.success = false;\n+                    result.error = e.error;\n+                }\n+\n+                response.push_back(result);\n+\n+                if (lowest_timestamp > timestamp) {\n+                    lowest_timestamp = timestamp;\n+                }\n+\n+                // If we know the chain tip, and at least one request was successful then allow rescan\n+                if (!rescan && result.success) {\n+                    rescan = true;\n+                }\n+            }\n+            walletModel->wallet().ConnectScriptPubKeyManNotifiers();\n+\n+            // Rescan the blockchain using the lowest timestamp\n+            if (rescan) {\n+                int64_t scanned_time = walletModel->wallet().RescanFromTime(lowest_timestamp, reserver, true);\n+                walletModel->wallet().ReacceptWalletTransactions();\n+\n+                if (walletModel->wallet().IsAbortingRescan()) {\n+                    QMessageBox::critical(this, tr(\"Misc Error\"),\n+                                          tr(\"Rescan aborted by user.\"));\n+\n+                    if (scanned_time > lowest_timestamp) {\n+                        std::vector<resultpdi> results = response;\n+                        response.clear();\n+\n+                        for (int i = 0; i < ui->entries->count(); ++i) {\n+                            ImportEntry *entry = qobject_cast<ImportEntry *>(ui->entries->itemAt(i)->widget());\n+\n+                            // If the descriptor timestamp is within the successfully scanned\n+                            // range, or if the import result already has an error set, let\n+                            // the result stand unmodified. Otherwise, replace the result\n+                            // with an error message.\n+                            if (scanned_time <= GetImportTimestamp(entry->getDescriptorData().timestamp, now) || !results.at(i).error.empty()) {\n+                                response.push_back(results.at(i));\n+                            } else {\n+                                resultpdi result;\n+                                result.success = false;\n+                                result.error = strprintf(\n+                                            \"Rescan failed for descriptor with timestamp %d. There was an error reading a \"\n+                                            \"block from time %d, which is after or within %d seconds of key creation, and \"\n+                                            \"could contain transactions pertaining to the desc. As a result, transactions \"\n+                                            \"and coins using this desc may not appear in the wallet. This error could be \"\n+                                            \"caused by pruning or data corruption (see bitcoind log for details) and could \"\n+                                            \"be dealt with by downloading and rescanning the relevant blocks (see -reindex \"\n+                                            \"option and rescanblockchain RPC).\",\n+                                            GetImportTimestamp(entry->getDescriptorData().timestamp, now),\n+                                            scanned_time - TIMESTAMP_WINDOW - 1, TIMESTAMP_WINDOW);\n+                                response.push_back(std::move(result));\n+                            }\n+                        }\n+                    }\n+                }\n+            }\n+            for (int i = 0; i < response.size(); i++) {\n+                if (!response[i].success) {\n+                    std::string warning_str;\n+                    if (response[i].warnings.size() != 0) {\n+                        for (auto w: response[i].warnings) {\n+                            warning_str += w + \"\\n\";\n+                        }\n+                    }\n+                    QMessageBox::critical(this, QString::fromStdString(\"Error: input box # \" + QString::number(i)),\n+                                          QString::fromStdString(\"Error:\" + response[i].error+\"\\n\"+\n+                                                                 \"Warnings:\"+\"\\n\" + warning_str));\n+                }\n+            }\n+        }\n     }\n }\n+\n+\n+\n+ImportEntry *ImportDialog::addEntryMulti()\n+{\n+    ImportEntry *entry = new ImportEntry(ImportEntry::importMultiEntry, this);\n+    entry->setModel(walletModel);\n+    ui->entries->addWidget(entry);\n+    connect(entry, &ImportEntry::removeMultiEntry, this, &ImportDialog::removeMultiEntry);\n+\n+    // Focus the field, so that entry can start immediately\n+    //entry->clear();\n+    entry->setFocus();\n+    ui->scrollAreaWidgetContents->resize(ui->scrollAreaWidgetContents->sizeHint());\n+    qApp->processEvents();\n+    QScrollBar* bar = ui->scrollArea->verticalScrollBar();\n+    if(bar)\n+        bar->setSliderPosition(bar->maximum());\n+\n+    return entry;\n+}\n+\n+ImportEntry *ImportDialog::addEntryDescriptors()\n+{\n+    ImportEntry *entry = new ImportEntry(ImportEntry::importDescriptorsEntry, this);\n+    entry->setModel(walletModel);\n+    ui->entries->addWidget(entry);\n+    connect(entry, &ImportEntry::removeDescriptorEntry, this, &ImportDialog::removeDescriptorEntry);\n+\n+    // Focus the field, so that entry can start immediately\n+    //entry->clear();\n+    entry->setFocus();\n+    ui->scrollAreaWidgetContents->resize(ui->scrollAreaWidgetContents->sizeHint());\n+    qApp->processEvents();\n+    QScrollBar* bar = ui->scrollArea->verticalScrollBar();\n+    if(bar)\n+        bar->setSliderPosition(bar->maximum());\n+\n+    return entry;\n+}\n+\n+void ImportDialog::removeMultiEntry(ImportEntry* entry)\n+{\n+    entry->hide();\n+\n+    // If the last entry is about to be removed add an empty one\n+    if (ui->entries->count() == 1)\n+        addEntryMulti();\n+\n+    entry->deleteLater();\n+}\n+\n+void ImportDialog::removeDescriptorEntry(ImportEntry* entry)\n+{\n+    entry->hide();\n+\n+    // If the last entry is about to be removed add an empty one\n+    if (ui->entries->count() == 1)\n+        addEntryDescriptors();\n+\n+    entry->deleteLater();\n+}",
      "path": "src/qt/importdialog.cpp",
      "position": null,
      "original_position": 450,
      "commit_id": "b2b00af1d37dd69c3e64d905984e68ac6a6b2d8f",
      "original_commit_id": "c71f418f18000f537871f57a42ec76e0a25941e9",
      "in_reply_to_id": null,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In c71f418f18000f537871f57a42ec76e0a25941e9 \"qt: implemented importmulti and importdescriptors GUI's\"\r\n\r\nThese two functions are basically the same. I think you could just collapse them into a single `removeEntry` function. To figure which `addEntry` to call, you can look at `entry`'s `entryPage` member (which will need to be made public, or a getter added).",
      "created_at": "2022-08-08T20:14:33Z",
      "updated_at": "2022-08-08T20:56:15Z",
      "html_url": "https://github.com/bitcoin-core/gui/pull/650#discussion_r940625711",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/gui/pulls/comments/940625711"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/gui/pulls/650"
        }
      },
      "start_line": null,
      "original_start_line": 700,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 579,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/gui/pulls/comments/940626528",
      "pull_request_review_id": 1065661283,
      "id": 940626528,
      "node_id": "PRRC_kwDOEEET9c44ENJg",
      "diff_hunk": "@@ -298,5 +344,377 @@ void ImportDialog::on_Accept_clicked() {\n             }\n             break;\n         }\n+        case importMulti: {\n+            bool fRescan = true;\n+            if (!ui->rescanButtonIA->isChecked())\n+                fRescan = false;\n+\n+            if (fRescan && walletModel->wallet().chain().havePruned()) {\n+                // Exit early and print an error.\n+                // If a block is pruned after this check, we will import the key(s),\n+                // but fail the rescan with a generic error.\n+                QMessageBox::critical(this, tr(\"Rescan failed\"), tr(\"Rescan is disabled when blocks are pruned\"));\n+                break;\n+            }\n+\n+            wallet::WalletRescanReserver reserver = walletModel->wallet().getReserver();\n+            if (fRescan && !reserver.reserve()) {\n+                QMessageBox::critical(this, tr(\"Rescan failed\"),\n+                                      tr(\"Wallet is currently rescanning. Abort existing rescan or wait.\"));\n+                break;\n+            }\n+\n+            int64_t now = 0;\n+            bool fRunScan = false;\n+            int64_t nLowestTimestamp = 0;\n+            std::vector<resultpdi> response = {};\n+\n+            WalletModel::UnlockContext ctx(walletModel->requestUnlock());\n+            if (!ctx.isValid()) {\n+                break;\n+            }\n+\n+            // Verify all timestamps are present before importing any keys.\n+            CHECK_NONFATAL(walletModel->wallet().chain().findBlock(walletModel->wallet().GetLastBlockHash(),\n+                                                                   interfaces::FoundBlock().time(nLowestTimestamp).mtpTime(now)));\n+            const int64_t minimumTimestamp = 1;\n+\n+            for (int i = 0; i < ui->entries->count(); ++i) {\n+                ImportEntry *entry = qobject_cast<ImportEntry *>(ui->entries->itemAt(i)->widget());\n+                wallet::ImportMultiData mData = entry->getMultiData();\n+                const int64_t timestamp = std::max(GetImportTimestamp(mData.timestamp, now), minimumTimestamp);\n+                resultpdi result;\n+\n+                try {\n+                    // Internal addresses should not have a label\n+                    if (mData.internal && !mData.label.empty()) {\n+                        throw wallet::InvalidParameter(\"Internal addresses should not have a label\");\n+                    }\n+\n+                    bool isScript = false;\n+                    FlatSigningProvider keys;\n+                    if (!mData.scriptPubKey.empty()) {\n+                        // if the input isn't a valid address assume it is a script\n+                        CTxDestination dest = DecodeDestination(mData.scriptPubKey);\n+                        if (!IsValidDestination(dest)) {\n+                            isScript = true;\n+                        }\n+                    } else {\n+                        std::string error;\n+                        mData.parsed_desc = Parse(entry->getDesc(), keys, error, /* require_checksum = */ true);\n+                        if (!mData.parsed_desc) {\n+                            throw wallet::InvalidAddressOrKey(error);\n+                        }\n+                        if (mData.parsed_desc->GetOutputType() == OutputType::BECH32M) {\n+                            throw wallet::InvalidAddressOrKey(\"Bech32m descriptors cannot be imported into legacy wallets\");\n+                        }\n+                        bool range_exists = (mData.range_start && mData.range_end);\n+                        if (!mData.parsed_desc->IsRange() && range_exists) {\n+                            throw wallet::InvalidParameter(\"Range should not be specified for an un-ranged descriptor\");\n+                        } else if (mData.parsed_desc->IsRange()) {\n+                            if (!range_exists) {\n+                                throw wallet::InvalidParameter(\"Descriptor is ranged, please specify the range\");\n+                            }\n+                            RangeDescriptorCheck(mData.range_start, mData.range_end);\n+                        }\n+                    }\n+                    walletModel->wallet().ProcessImport(mData, result.warnings, isScript, keys, timestamp);\n+                    result.success = true;\n+                } catch (const wallet::MiscError& e) {\n+                    result.success = false;\n+                    result.error = e.error;\n+                } catch (const wallet::WalletError& e) {\n+                    result.success = false;\n+                    result.error = e.error;\n+                } catch (const wallet::InvalidAddressOrKey& e) {\n+                    result.success = false;\n+                    result.error = e.error;\n+                } catch (const wallet::InvalidParameter& e) {\n+                    result.success = false;\n+                    result.error = e.error;\n+                } catch (...) {\n+                    result.success = false;\n+                    result.error = \"Missing required fields\";\n+                }\n+\n+                response.push_back(result);\n+\n+                if (!fRescan) {\n+                    continue;\n+                }\n+\n+                // If at least one request was successful then allow rescan.\n+                if (result.success) {\n+                    fRunScan = true;\n+                }\n+\n+                // Get the lowest timestamp.\n+                if (timestamp < nLowestTimestamp) {\n+                    nLowestTimestamp = timestamp;\n+                }\n+            }\n+\n+            if (fRescan && fRunScan && ui->entries->count()) {\n+                int64_t scannedTime = walletModel->wallet().RescanFromTime(nLowestTimestamp, reserver, true);\n+                walletModel->wallet().ReacceptWalletTransactions();\n+\n+                if (walletModel->wallet().IsAbortingRescan()) {\n+                    QMessageBox::critical(this, tr(\"Misc Error\"),\n+                                          tr(\"Rescan aborted by user.\"));\n+\n+                    if (scannedTime > nLowestTimestamp) {\n+                        std::vector <resultpdi> results = response;\n+                        response.clear();\n+\n+                        for (int i = 0; i < ui->entries->count(); ++i) {\n+                            ImportEntry *entry = qobject_cast<ImportEntry *>(ui->entries->itemAt(i)->widget());\n+                            // If key creation date is within the successfully scanned\n+                            // range, or if the import result already has an error set, let\n+                            // the result stand unmodified. Otherwise, replace the result\n+                            // with an error message.\n+                            if (scannedTime <= GetImportTimestamp(entry->getMultiData().timestamp, now) || !results.at(i).error.empty()) {\n+                                response.push_back(results.at(i));\n+                            } else {\n+                                resultpdi result;\n+                                result.success = false;\n+                                result.error = strprintf(\n+                                                \"Rescan failed for key with creation timestamp %d. There was an error reading a \"\n+                                                \"block from time %d, which is after or within %d seconds of key creation, and \"\n+                                                \"could contain transactions pertaining to the key. As a result, transactions \"\n+                                                \"and coins using this key may not appear in the wallet. This error could be \"\n+                                                \"caused by pruning or data corruption (see bitcoind log for details) and could \"\n+                                                \"be dealt with by downloading and rescanning the relevant blocks (see -reindex \"\n+                                                \"option and rescanblockchain RPC).\",\n+                                                GetImportTimestamp(entry->getMultiData().timestamp, now), scannedTime - TIMESTAMP_WINDOW - 1,\n+                                                TIMESTAMP_WINDOW);\n+                                response.push_back(std::move(result));\n+                            }\n+                        }\n+                    }\n+                }\n+            }\n+            for (int i = 0; i < response.size(); i++) {\n+                if (!response[i].success) {\n+                    std::string warning_str;\n+                    if (response[i].warnings.size() != 0) {\n+                        for (auto w: response[i].warnings) {\n+                            warning_str += w + \"\\n\";\n+                        }\n+                    }\n+                    QMessageBox::critical(this, QString::fromStdString(\"Error: input box # \" + QString::number(i)),\n+                                          QString::fromStdString(\"Error:\" + response[i].error+\"\\n\"+\n+                                          \"Warnings:\"+\"\\n\" + warning_str));\n+                }\n+            }\n+            break;\n+        }\n+        case importDescriptors: {\n+            wallet::WalletRescanReserver reserver = walletModel->wallet().getReserver();\n+            if (!reserver.reserve()) {\n+                QMessageBox::critical(this, tr(\"Rescan failed\"),\n+                                      tr(\"Wallet is currently rescanning. Abort existing rescan or wait.\"));\n+                break;\n+            }\n+\n+            const int64_t minimum_timestamp = 1;\n+            int64_t now = 0;\n+            int64_t lowest_timestamp = 0;\n+            bool rescan = false;\n+            std::vector<resultpdi> response = {};\n+\n+            WalletModel::UnlockContext ctx(walletModel->requestUnlock());\n+            if (!ctx.isValid()) {\n+                break;\n+            }\n+\n+            CHECK_NONFATAL(walletModel->wallet().chain().findBlock(walletModel->wallet().GetLastBlockHash(),\n+                                                                   interfaces::FoundBlock().time(lowest_timestamp).mtpTime(now)));\n+\n+            // Get all timestamps and extract the lowest timestamp\n+            for (int i = 0; i < ui->entries->count(); ++i) {\n+                ImportEntry *entry = qobject_cast<ImportEntry *>(ui->entries->itemAt(i)->widget());\n+\n+                // This throws an error if \"timestamp\" doesn't exist\n+                wallet::ImportDescriptorData dData = entry->getDescriptorData();\n+                const int64_t timestamp = std::max(GetImportTimestamp(dData.timestamp, now), minimum_timestamp);\n+                resultpdi result;\n+\n+                try {\n+                    // Parse descriptor string\n+                    FlatSigningProvider keys;\n+                    std::string error;\n+                    dData.parsed_desc = Parse(entry->getDesc(), keys, error, /* require_checksum = */ true);\n+                    if (!dData.parsed_desc) {\n+                        throw wallet::InvalidAddressOrKey(error);\n+                    }\n+\n+                    bool range_exists = (dData.range_start && dData.range_end);\n+                    if (!dData.parsed_desc->IsRange() && range_exists) {\n+                        throw wallet::InvalidParameter(\"Range should not be specified for an un-ranged descriptor\");\n+                    } else if (dData.parsed_desc->IsRange()) {\n+                        if (!range_exists) {\n+                            result.warnings.push_back(\"Range not given, using default keypool range\");\n+                            dData.range_start = 0;\n+                            dData.range_end = gArgs.GetIntArg(\"-keypool\", wallet::DEFAULT_KEYPOOL_SIZE);\n+                        } else {\n+                            RangeDescriptorCheck(dData.range_start, dData.range_end);\n+                            dData.range_end++;\n+                        }\n+\n+                        if (dData.next_index) {\n+                            // bound checks\n+                            if (dData.next_index < dData.range_start || dData.next_index >= dData.range_end) {\n+                                throw wallet::InvalidParameter(\"next_index is out of range\");\n+                            }\n+                        } else {\n+                            dData.next_index = dData.range_start;\n+                        }\n+                    }\n+                    walletModel->wallet().ProcessDescriptorImport(dData, result.warnings, keys, range_exists, timestamp);\n+                    result.success = true;\n+                } catch (const wallet::MiscError& e) {\n+                    result.success = false;\n+                    result.error = e.error;\n+                } catch (const wallet::WalletError& e) {\n+                    result.success = false;\n+                    result.error = e.error;\n+                } catch (const wallet::InvalidAddressOrKey& e) {\n+                    result.success = false;\n+                    result.error = e.error;\n+                } catch (const wallet::InvalidParameter& e) {\n+                    result.success = false;\n+                    result.error = e.error;\n+                }\n+\n+                response.push_back(result);\n+\n+                if (lowest_timestamp > timestamp) {\n+                    lowest_timestamp = timestamp;\n+                }\n+\n+                // If we know the chain tip, and at least one request was successful then allow rescan\n+                if (!rescan && result.success) {\n+                    rescan = true;\n+                }\n+            }\n+            walletModel->wallet().ConnectScriptPubKeyManNotifiers();\n+\n+            // Rescan the blockchain using the lowest timestamp\n+            if (rescan) {\n+                int64_t scanned_time = walletModel->wallet().RescanFromTime(lowest_timestamp, reserver, true);\n+                walletModel->wallet().ReacceptWalletTransactions();\n+\n+                if (walletModel->wallet().IsAbortingRescan()) {\n+                    QMessageBox::critical(this, tr(\"Misc Error\"),\n+                                          tr(\"Rescan aborted by user.\"));\n+\n+                    if (scanned_time > lowest_timestamp) {\n+                        std::vector<resultpdi> results = response;\n+                        response.clear();\n+\n+                        for (int i = 0; i < ui->entries->count(); ++i) {\n+                            ImportEntry *entry = qobject_cast<ImportEntry *>(ui->entries->itemAt(i)->widget());\n+\n+                            // If the descriptor timestamp is within the successfully scanned\n+                            // range, or if the import result already has an error set, let\n+                            // the result stand unmodified. Otherwise, replace the result\n+                            // with an error message.\n+                            if (scanned_time <= GetImportTimestamp(entry->getDescriptorData().timestamp, now) || !results.at(i).error.empty()) {\n+                                response.push_back(results.at(i));\n+                            } else {\n+                                resultpdi result;\n+                                result.success = false;\n+                                result.error = strprintf(\n+                                            \"Rescan failed for descriptor with timestamp %d. There was an error reading a \"\n+                                            \"block from time %d, which is after or within %d seconds of key creation, and \"\n+                                            \"could contain transactions pertaining to the desc. As a result, transactions \"\n+                                            \"and coins using this desc may not appear in the wallet. This error could be \"\n+                                            \"caused by pruning or data corruption (see bitcoind log for details) and could \"\n+                                            \"be dealt with by downloading and rescanning the relevant blocks (see -reindex \"\n+                                            \"option and rescanblockchain RPC).\",\n+                                            GetImportTimestamp(entry->getDescriptorData().timestamp, now),\n+                                            scanned_time - TIMESTAMP_WINDOW - 1, TIMESTAMP_WINDOW);\n+                                response.push_back(std::move(result));\n+                            }\n+                        }\n+                    }\n+                }\n+            }\n+            for (int i = 0; i < response.size(); i++) {\n+                if (!response[i].success) {\n+                    std::string warning_str;\n+                    if (response[i].warnings.size() != 0) {\n+                        for (auto w: response[i].warnings) {\n+                            warning_str += w + \"\\n\";\n+                        }\n+                    }\n+                    QMessageBox::critical(this, QString::fromStdString(\"Error: input box # \" + QString::number(i)),\n+                                          QString::fromStdString(\"Error:\" + response[i].error+\"\\n\"+\n+                                                                 \"Warnings:\"+\"\\n\" + warning_str));\n+                }\n+            }\n+        }\n     }\n }\n+\n+\n+\n+ImportEntry *ImportDialog::addEntryMulti()\n+{\n+    ImportEntry *entry = new ImportEntry(ImportEntry::importMultiEntry, this);\n+    entry->setModel(walletModel);\n+    ui->entries->addWidget(entry);\n+    connect(entry, &ImportEntry::removeMultiEntry, this, &ImportDialog::removeMultiEntry);\n+\n+    // Focus the field, so that entry can start immediately\n+    //entry->clear();\n+    entry->setFocus();\n+    ui->scrollAreaWidgetContents->resize(ui->scrollAreaWidgetContents->sizeHint());\n+    qApp->processEvents();\n+    QScrollBar* bar = ui->scrollArea->verticalScrollBar();\n+    if(bar)\n+        bar->setSliderPosition(bar->maximum());\n+\n+    return entry;\n+}\n+\n+ImportEntry *ImportDialog::addEntryDescriptors()\n+{\n+    ImportEntry *entry = new ImportEntry(ImportEntry::importDescriptorsEntry, this);\n+    entry->setModel(walletModel);\n+    ui->entries->addWidget(entry);\n+    connect(entry, &ImportEntry::removeDescriptorEntry, this, &ImportDialog::removeDescriptorEntry);\n+\n+    // Focus the field, so that entry can start immediately\n+    //entry->clear();\n+    entry->setFocus();\n+    ui->scrollAreaWidgetContents->resize(ui->scrollAreaWidgetContents->sizeHint());\n+    qApp->processEvents();\n+    QScrollBar* bar = ui->scrollArea->verticalScrollBar();\n+    if(bar)\n+        bar->setSliderPosition(bar->maximum());\n+\n+    return entry;\n+}",
      "path": "src/qt/importdialog.cpp",
      "position": null,
      "original_position": 428,
      "commit_id": "b2b00af1d37dd69c3e64d905984e68ac6a6b2d8f",
      "original_commit_id": "c71f418f18000f537871f57a42ec76e0a25941e9",
      "in_reply_to_id": null,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In c71f418f18000f537871f57a42ec76e0a25941e9 \"qt: implemented importmulti and importdescriptors GUI's\"\r\n\r\nThese two functions are basically the same. You could collapse it into a single `addEntry` function that takes an `EntryPage` as a parameter to be passed to the `ImportEntry` constructor.",
      "created_at": "2022-08-08T20:15:37Z",
      "updated_at": "2022-08-08T20:56:15Z",
      "html_url": "https://github.com/bitcoin-core/gui/pull/650#discussion_r940626528",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/gui/pulls/comments/940626528"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/gui/pulls/650"
        }
      },
      "start_line": null,
      "original_start_line": 662,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 568,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/gui/pulls/comments/940630072",
      "pull_request_review_id": 1065661283,
      "id": 940630072,
      "node_id": "PRRC_kwDOEEET9c44EOA4",
      "diff_hunk": "@@ -298,5 +344,377 @@ void ImportDialog::on_Accept_clicked() {\n             }\n             break;\n         }\n+        case importMulti: {\n+            bool fRescan = true;\n+            if (!ui->rescanButtonIA->isChecked())\n+                fRescan = false;\n+\n+            if (fRescan && walletModel->wallet().chain().havePruned()) {\n+                // Exit early and print an error.\n+                // If a block is pruned after this check, we will import the key(s),\n+                // but fail the rescan with a generic error.\n+                QMessageBox::critical(this, tr(\"Rescan failed\"), tr(\"Rescan is disabled when blocks are pruned\"));\n+                break;\n+            }\n+\n+            wallet::WalletRescanReserver reserver = walletModel->wallet().getReserver();\n+            if (fRescan && !reserver.reserve()) {\n+                QMessageBox::critical(this, tr(\"Rescan failed\"),\n+                                      tr(\"Wallet is currently rescanning. Abort existing rescan or wait.\"));\n+                break;\n+            }\n+\n+            int64_t now = 0;\n+            bool fRunScan = false;\n+            int64_t nLowestTimestamp = 0;\n+            std::vector<resultpdi> response = {};\n+\n+            WalletModel::UnlockContext ctx(walletModel->requestUnlock());\n+            if (!ctx.isValid()) {\n+                break;\n+            }\n+\n+            // Verify all timestamps are present before importing any keys.\n+            CHECK_NONFATAL(walletModel->wallet().chain().findBlock(walletModel->wallet().GetLastBlockHash(),\n+                                                                   interfaces::FoundBlock().time(nLowestTimestamp).mtpTime(now)));\n+            const int64_t minimumTimestamp = 1;\n+\n+            for (int i = 0; i < ui->entries->count(); ++i) {\n+                ImportEntry *entry = qobject_cast<ImportEntry *>(ui->entries->itemAt(i)->widget());\n+                wallet::ImportMultiData mData = entry->getMultiData();\n+                const int64_t timestamp = std::max(GetImportTimestamp(mData.timestamp, now), minimumTimestamp);\n+                resultpdi result;\n+\n+                try {\n+                    // Internal addresses should not have a label\n+                    if (mData.internal && !mData.label.empty()) {\n+                        throw wallet::InvalidParameter(\"Internal addresses should not have a label\");\n+                    }\n+\n+                    bool isScript = false;\n+                    FlatSigningProvider keys;\n+                    if (!mData.scriptPubKey.empty()) {\n+                        // if the input isn't a valid address assume it is a script\n+                        CTxDestination dest = DecodeDestination(mData.scriptPubKey);\n+                        if (!IsValidDestination(dest)) {\n+                            isScript = true;\n+                        }\n+                    } else {\n+                        std::string error;\n+                        mData.parsed_desc = Parse(entry->getDesc(), keys, error, /* require_checksum = */ true);\n+                        if (!mData.parsed_desc) {\n+                            throw wallet::InvalidAddressOrKey(error);\n+                        }\n+                        if (mData.parsed_desc->GetOutputType() == OutputType::BECH32M) {\n+                            throw wallet::InvalidAddressOrKey(\"Bech32m descriptors cannot be imported into legacy wallets\");\n+                        }\n+                        bool range_exists = (mData.range_start && mData.range_end);\n+                        if (!mData.parsed_desc->IsRange() && range_exists) {\n+                            throw wallet::InvalidParameter(\"Range should not be specified for an un-ranged descriptor\");\n+                        } else if (mData.parsed_desc->IsRange()) {\n+                            if (!range_exists) {\n+                                throw wallet::InvalidParameter(\"Descriptor is ranged, please specify the range\");\n+                            }\n+                            RangeDescriptorCheck(mData.range_start, mData.range_end);\n+                        }\n+                    }\n+                    walletModel->wallet().ProcessImport(mData, result.warnings, isScript, keys, timestamp);\n+                    result.success = true;\n+                } catch (const wallet::MiscError& e) {\n+                    result.success = false;\n+                    result.error = e.error;\n+                } catch (const wallet::WalletError& e) {\n+                    result.success = false;\n+                    result.error = e.error;\n+                } catch (const wallet::InvalidAddressOrKey& e) {\n+                    result.success = false;\n+                    result.error = e.error;\n+                } catch (const wallet::InvalidParameter& e) {\n+                    result.success = false;\n+                    result.error = e.error;\n+                } catch (...) {\n+                    result.success = false;\n+                    result.error = \"Missing required fields\";\n+                }\n+\n+                response.push_back(result);\n+\n+                if (!fRescan) {\n+                    continue;\n+                }\n+\n+                // If at least one request was successful then allow rescan.\n+                if (result.success) {\n+                    fRunScan = true;\n+                }\n+\n+                // Get the lowest timestamp.\n+                if (timestamp < nLowestTimestamp) {\n+                    nLowestTimestamp = timestamp;\n+                }\n+            }\n+\n+            if (fRescan && fRunScan && ui->entries->count()) {\n+                int64_t scannedTime = walletModel->wallet().RescanFromTime(nLowestTimestamp, reserver, true);\n+                walletModel->wallet().ReacceptWalletTransactions();\n+\n+                if (walletModel->wallet().IsAbortingRescan()) {\n+                    QMessageBox::critical(this, tr(\"Misc Error\"),\n+                                          tr(\"Rescan aborted by user.\"));\n+\n+                    if (scannedTime > nLowestTimestamp) {\n+                        std::vector <resultpdi> results = response;\n+                        response.clear();\n+\n+                        for (int i = 0; i < ui->entries->count(); ++i) {\n+                            ImportEntry *entry = qobject_cast<ImportEntry *>(ui->entries->itemAt(i)->widget());\n+                            // If key creation date is within the successfully scanned\n+                            // range, or if the import result already has an error set, let\n+                            // the result stand unmodified. Otherwise, replace the result\n+                            // with an error message.\n+                            if (scannedTime <= GetImportTimestamp(entry->getMultiData().timestamp, now) || !results.at(i).error.empty()) {\n+                                response.push_back(results.at(i));\n+                            } else {\n+                                resultpdi result;\n+                                result.success = false;\n+                                result.error = strprintf(\n+                                                \"Rescan failed for key with creation timestamp %d. There was an error reading a \"\n+                                                \"block from time %d, which is after or within %d seconds of key creation, and \"\n+                                                \"could contain transactions pertaining to the key. As a result, transactions \"\n+                                                \"and coins using this key may not appear in the wallet. This error could be \"\n+                                                \"caused by pruning or data corruption (see bitcoind log for details) and could \"\n+                                                \"be dealt with by downloading and rescanning the relevant blocks (see -reindex \"\n+                                                \"option and rescanblockchain RPC).\",\n+                                                GetImportTimestamp(entry->getMultiData().timestamp, now), scannedTime - TIMESTAMP_WINDOW - 1,\n+                                                TIMESTAMP_WINDOW);\n+                                response.push_back(std::move(result));\n+                            }\n+                        }\n+                    }\n+                }\n+            }\n+            for (int i = 0; i < response.size(); i++) {",
      "path": "src/qt/importdialog.cpp",
      "position": null,
      "original_position": 226,
      "commit_id": "b2b00af1d37dd69c3e64d905984e68ac6a6b2d8f",
      "original_commit_id": "c71f418f18000f537871f57a42ec76e0a25941e9",
      "in_reply_to_id": null,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In c71f418f18000f537871f57a42ec76e0a25941e9 \"qt: implemented importmulti and importdescriptors GUI's\"\r\n\r\nCompiler warning here, also below for `importDescriptors`:\r\n\r\n```\r\nqt/importdialog.cpp: In member function ‘void ImportDialog::on_Accept_clicked()’:\r\nqt/importdialog.cpp:496:31: warning: comparison of integer expressions of different signedness: ‘int’ and ‘std::vector<resultpdi>::size_type’ {aka ‘long unsigned int’} [-Wsign-compare]\r\n  496 |             for (int i = 0; i < response.size(); i++) {\r\n      |                             ~~^~~~~~~~~~~~~~~~~\r\n```\r\n\r\n```suggestion\r\n            for (size_t i = 0; i < response.size(); i++) {\r\n```",
      "created_at": "2022-08-08T20:20:26Z",
      "updated_at": "2022-08-08T20:56:15Z",
      "html_url": "https://github.com/bitcoin-core/gui/pull/650#discussion_r940630072",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/gui/pulls/comments/940630072"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/gui/pulls/650"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 496,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/gui/pulls/comments/940634109",
      "pull_request_review_id": 1065661283,
      "id": 940634109,
      "node_id": "PRRC_kwDOEEET9c44EO_9",
      "diff_hunk": "@@ -298,5 +344,377 @@ void ImportDialog::on_Accept_clicked() {\n             }\n             break;\n         }\n+        case importMulti: {\n+            bool fRescan = true;\n+            if (!ui->rescanButtonIA->isChecked())\n+                fRescan = false;\n+\n+            if (fRescan && walletModel->wallet().chain().havePruned()) {\n+                // Exit early and print an error.\n+                // If a block is pruned after this check, we will import the key(s),\n+                // but fail the rescan with a generic error.\n+                QMessageBox::critical(this, tr(\"Rescan failed\"), tr(\"Rescan is disabled when blocks are pruned\"));\n+                break;\n+            }\n+\n+            wallet::WalletRescanReserver reserver = walletModel->wallet().getReserver();\n+            if (fRescan && !reserver.reserve()) {\n+                QMessageBox::critical(this, tr(\"Rescan failed\"),\n+                                      tr(\"Wallet is currently rescanning. Abort existing rescan or wait.\"));\n+                break;\n+            }\n+\n+            int64_t now = 0;\n+            bool fRunScan = false;\n+            int64_t nLowestTimestamp = 0;\n+            std::vector<resultpdi> response = {};\n+\n+            WalletModel::UnlockContext ctx(walletModel->requestUnlock());\n+            if (!ctx.isValid()) {\n+                break;\n+            }\n+\n+            // Verify all timestamps are present before importing any keys.\n+            CHECK_NONFATAL(walletModel->wallet().chain().findBlock(walletModel->wallet().GetLastBlockHash(),\n+                                                                   interfaces::FoundBlock().time(nLowestTimestamp).mtpTime(now)));\n+            const int64_t minimumTimestamp = 1;\n+\n+            for (int i = 0; i < ui->entries->count(); ++i) {\n+                ImportEntry *entry = qobject_cast<ImportEntry *>(ui->entries->itemAt(i)->widget());\n+                wallet::ImportMultiData mData = entry->getMultiData();\n+                const int64_t timestamp = std::max(GetImportTimestamp(mData.timestamp, now), minimumTimestamp);\n+                resultpdi result;\n+\n+                try {\n+                    // Internal addresses should not have a label\n+                    if (mData.internal && !mData.label.empty()) {\n+                        throw wallet::InvalidParameter(\"Internal addresses should not have a label\");\n+                    }\n+\n+                    bool isScript = false;\n+                    FlatSigningProvider keys;\n+                    if (!mData.scriptPubKey.empty()) {\n+                        // if the input isn't a valid address assume it is a script\n+                        CTxDestination dest = DecodeDestination(mData.scriptPubKey);\n+                        if (!IsValidDestination(dest)) {\n+                            isScript = true;\n+                        }\n+                    } else {\n+                        std::string error;\n+                        mData.parsed_desc = Parse(entry->getDesc(), keys, error, /* require_checksum = */ true);\n+                        if (!mData.parsed_desc) {\n+                            throw wallet::InvalidAddressOrKey(error);\n+                        }\n+                        if (mData.parsed_desc->GetOutputType() == OutputType::BECH32M) {\n+                            throw wallet::InvalidAddressOrKey(\"Bech32m descriptors cannot be imported into legacy wallets\");\n+                        }\n+                        bool range_exists = (mData.range_start && mData.range_end);\n+                        if (!mData.parsed_desc->IsRange() && range_exists) {\n+                            throw wallet::InvalidParameter(\"Range should not be specified for an un-ranged descriptor\");\n+                        } else if (mData.parsed_desc->IsRange()) {\n+                            if (!range_exists) {\n+                                throw wallet::InvalidParameter(\"Descriptor is ranged, please specify the range\");\n+                            }\n+                            RangeDescriptorCheck(mData.range_start, mData.range_end);\n+                        }\n+                    }\n+                    walletModel->wallet().ProcessImport(mData, result.warnings, isScript, keys, timestamp);\n+                    result.success = true;\n+                } catch (const wallet::MiscError& e) {\n+                    result.success = false;\n+                    result.error = e.error;\n+                } catch (const wallet::WalletError& e) {\n+                    result.success = false;\n+                    result.error = e.error;\n+                } catch (const wallet::InvalidAddressOrKey& e) {\n+                    result.success = false;\n+                    result.error = e.error;\n+                } catch (const wallet::InvalidParameter& e) {\n+                    result.success = false;\n+                    result.error = e.error;\n+                } catch (...) {\n+                    result.success = false;\n+                    result.error = \"Missing required fields\";\n+                }\n+\n+                response.push_back(result);\n+\n+                if (!fRescan) {\n+                    continue;\n+                }\n+\n+                // If at least one request was successful then allow rescan.\n+                if (result.success) {\n+                    fRunScan = true;\n+                }\n+\n+                // Get the lowest timestamp.\n+                if (timestamp < nLowestTimestamp) {\n+                    nLowestTimestamp = timestamp;\n+                }\n+            }\n+\n+            if (fRescan && fRunScan && ui->entries->count()) {\n+                int64_t scannedTime = walletModel->wallet().RescanFromTime(nLowestTimestamp, reserver, true);\n+                walletModel->wallet().ReacceptWalletTransactions();\n+\n+                if (walletModel->wallet().IsAbortingRescan()) {\n+                    QMessageBox::critical(this, tr(\"Misc Error\"),\n+                                          tr(\"Rescan aborted by user.\"));\n+\n+                    if (scannedTime > nLowestTimestamp) {\n+                        std::vector <resultpdi> results = response;\n+                        response.clear();\n+\n+                        for (int i = 0; i < ui->entries->count(); ++i) {\n+                            ImportEntry *entry = qobject_cast<ImportEntry *>(ui->entries->itemAt(i)->widget());\n+                            // If key creation date is within the successfully scanned\n+                            // range, or if the import result already has an error set, let\n+                            // the result stand unmodified. Otherwise, replace the result\n+                            // with an error message.\n+                            if (scannedTime <= GetImportTimestamp(entry->getMultiData().timestamp, now) || !results.at(i).error.empty()) {\n+                                response.push_back(results.at(i));\n+                            } else {\n+                                resultpdi result;\n+                                result.success = false;\n+                                result.error = strprintf(\n+                                                \"Rescan failed for key with creation timestamp %d. There was an error reading a \"\n+                                                \"block from time %d, which is after or within %d seconds of key creation, and \"\n+                                                \"could contain transactions pertaining to the key. As a result, transactions \"\n+                                                \"and coins using this key may not appear in the wallet. This error could be \"\n+                                                \"caused by pruning or data corruption (see bitcoind log for details) and could \"\n+                                                \"be dealt with by downloading and rescanning the relevant blocks (see -reindex \"\n+                                                \"option and rescanblockchain RPC).\",\n+                                                GetImportTimestamp(entry->getMultiData().timestamp, now), scannedTime - TIMESTAMP_WINDOW - 1,\n+                                                TIMESTAMP_WINDOW);\n+                                response.push_back(std::move(result));\n+                            }\n+                        }\n+                    }\n+                }\n+            }\n+            for (int i = 0; i < response.size(); i++) {\n+                if (!response[i].success) {\n+                    std::string warning_str;\n+                    if (response[i].warnings.size() != 0) {\n+                        for (auto w: response[i].warnings) {\n+                            warning_str += w + \"\\n\";\n+                        }\n+                    }\n+                    QMessageBox::critical(this, QString::fromStdString(\"Error: input box # \") + QString::number(i),",
      "path": "src/qt/importdialog.cpp",
      "position": null,
      "original_position": 234,
      "commit_id": "b2b00af1d37dd69c3e64d905984e68ac6a6b2d8f",
      "original_commit_id": "adf1a83caf37b04bfd6c86179b7121ca62d14055",
      "in_reply_to_id": null,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In c71f418f18000f537871f57a42ec76e0a25941e9 \"qt: implemented importmulti and importdescriptors GUI's\"\r\n\r\nCompiler error here, also for `importDescriptors`:\r\n\r\n```\r\nqt/importdialog.cpp:504:94: error: cannot convert ‘QStringBuilder<char [20], QString>’ to ‘const std::string&’ {aka ‘const std::__cxx11::basic_string<char>&’}\r\n  504 |                     QMessageBox::critical(this, QString::fromStdString(\"Error: input box # \" + QString::number(i)),\r\n      |                                                                        ~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\r\n      |                                                                                              |\r\n      |                                                                                              QStringBuilder<char [20], QString>\r\nIn file included from /usr/include/qt/QtCore/qobject.h:47,\r\n                 from /usr/include/qt/QtWidgets/qwidget.h:45,\r\n                 from /usr/include/qt/QtWidgets/qdialog.h:44,\r\n                 from /usr/include/qt/QtWidgets/QDialog:1,\r\n                 from ./qt/importdialog.h:4,\r\n                 from qt/importdialog.cpp:1:\r\n/usr/include/qt/QtCore/qstring.h:1555:58: note:   initializing argument 1 of ‘static QString QString::fromStdString(const std::string&)’\r\n 1555 | inline QString QString::fromStdString(const std::string &s)\r\n      |                                       ~~~~~~~~~~~~~~~~~~~^\r\n```\r\n\r\n```suggestion\r\n                    QMessageBox::critical(this, QString::fromStdString(strprintf(\"Error: input box # %d\", i)),\r\n```",
      "created_at": "2022-08-08T20:25:46Z",
      "updated_at": "2022-08-08T20:56:15Z",
      "html_url": "https://github.com/bitcoin-core/gui/pull/650#discussion_r940634109",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/gui/pulls/comments/940634109"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/gui/pulls/650"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 504,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/gui/pulls/comments/940640282",
      "pull_request_review_id": 1065661283,
      "id": 940640282,
      "node_id": "PRRC_kwDOEEET9c44EQga",
      "diff_hunk": "@@ -0,0 +1,69 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_WALLET_IMPORTS_H\n+#define BITCOIN_WALLET_IMPORTS_H\n+\n+#include <string>\n+#include <vector>\n+#include <threadsafety.h>\n+#include <script/descriptor.h>\n+#include <script/signingprovider.h>\n+#include <wallet/wallet.h>\n+\n+namespace wallet {\n+    struct MiscError {\n+        std::string error;\n+        MiscError(std::string error) : error(error) {}\n+    };\n+\n+    struct WalletError {\n+        std::string error;\n+        WalletError(std::string error) : error(error) {}\n+    };\n+\n+    struct InvalidAddressOrKey {\n+        std::string error;\n+        InvalidAddressOrKey(std::string error) : error(error) {}\n+    };\n+\n+    struct InvalidParameter {\n+        std::string error;\n+        InvalidParameter(std::string error) : error(error) {}\n+    };\n+\n+    struct ImportMultiData\n+    {\n+        std::unique_ptr<Descriptor> parsed_desc;\n+        std::string scriptPubKey;\n+        std::string redeem_script;\n+        std::string witness_script;\n+        std::string label;\n+        std::vector<std::string> pubkeys;\n+        std::vector<std::string> keys;\n+        int64_t range_start;\n+        int64_t range_end;\n+        int64_t timestamp;\n+        bool internal;\n+        bool watch_only;\n+        bool keypool;",
      "path": "src/wallet/imports.h",
      "position": null,
      "original_position": 50,
      "commit_id": "b2b00af1d37dd69c3e64d905984e68ac6a6b2d8f",
      "original_commit_id": "f718e24693f4d322d2a82d6f1f8f6d4add98c415",
      "in_reply_to_id": null,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In f718e24693f4d322d2a82d6f1f8f6d4add98c415 \"refactor: importmulti and importdescriptors rpc\"\r\n\r\nTo avoid accessing uninitialized variables, these primitives should be initialized to some safe default. Same for `ImportDescriptorData` below.",
      "created_at": "2022-08-08T20:34:01Z",
      "updated_at": "2022-08-08T20:56:15Z",
      "html_url": "https://github.com/bitcoin-core/gui/pull/650#discussion_r940640282",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/gui/pulls/comments/940640282"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/gui/pulls/650"
        }
      },
      "start_line": null,
      "original_start_line": 45,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 50,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/gui/pulls/comments/940640962",
      "pull_request_review_id": 1065661283,
      "id": 940640962,
      "node_id": "PRRC_kwDOEEET9c44EQrC",
      "diff_hunk": "@@ -298,5 +344,377 @@ void ImportDialog::on_Accept_clicked() {\n             }\n             break;\n         }\n+        case importMulti: {\n+            bool fRescan = true;\n+            if (!ui->rescanButtonIA->isChecked())\n+                fRescan = false;\n+\n+            if (fRescan && walletModel->wallet().chain().havePruned()) {\n+                // Exit early and print an error.\n+                // If a block is pruned after this check, we will import the key(s),\n+                // but fail the rescan with a generic error.\n+                QMessageBox::critical(this, tr(\"Rescan failed\"), tr(\"Rescan is disabled when blocks are pruned\"));\n+                break;\n+            }\n+\n+            wallet::WalletRescanReserver reserver = walletModel->wallet().getReserver();\n+            if (fRescan && !reserver.reserve()) {\n+                QMessageBox::critical(this, tr(\"Rescan failed\"),\n+                                      tr(\"Wallet is currently rescanning. Abort existing rescan or wait.\"));\n+                break;\n+            }\n+\n+            int64_t now = 0;\n+            bool fRunScan = false;\n+            int64_t nLowestTimestamp = 0;\n+            std::vector<resultpdi> response = {};\n+\n+            WalletModel::UnlockContext ctx(walletModel->requestUnlock());\n+            if (!ctx.isValid()) {\n+                break;\n+            }\n+\n+            // Verify all timestamps are present before importing any keys.\n+            CHECK_NONFATAL(walletModel->wallet().chain().findBlock(walletModel->wallet().GetLastBlockHash(),\n+                                                                   interfaces::FoundBlock().time(nLowestTimestamp).mtpTime(now)));\n+            const int64_t minimumTimestamp = 1;\n+\n+            for (int i = 0; i < ui->entries->count(); ++i) {\n+                ImportEntry *entry = qobject_cast<ImportEntry *>(ui->entries->itemAt(i)->widget());\n+                wallet::ImportMultiData mData = entry->getMultiData();\n+                const int64_t timestamp = std::max(GetImportTimestamp(mData.timestamp, now), minimumTimestamp);\n+                resultpdi result;\n+\n+                try {\n+                    // Internal addresses should not have a label\n+                    if (mData.internal && !mData.label.empty()) {\n+                        throw wallet::InvalidParameter(\"Internal addresses should not have a label\");\n+                    }\n+\n+                    bool isScript = false;\n+                    FlatSigningProvider keys;\n+                    if (!mData.scriptPubKey.empty()) {\n+                        // if the input isn't a valid address assume it is a script\n+                        CTxDestination dest = DecodeDestination(mData.scriptPubKey);\n+                        if (!IsValidDestination(dest)) {\n+                            isScript = true;\n+                        }\n+                    } else {\n+                        std::string error;\n+                        mData.parsed_desc = Parse(entry->getDesc(), keys, error, /* require_checksum = */ true);\n+                        if (!mData.parsed_desc) {\n+                            throw wallet::InvalidAddressOrKey(error);\n+                        }\n+                        if (mData.parsed_desc->GetOutputType() == OutputType::BECH32M) {\n+                            throw wallet::InvalidAddressOrKey(\"Bech32m descriptors cannot be imported into legacy wallets\");\n+                        }\n+                        bool range_exists = (mData.range_start && mData.range_end);\n+                        if (!mData.parsed_desc->IsRange() && range_exists) {\n+                            throw wallet::InvalidParameter(\"Range should not be specified for an un-ranged descriptor\");\n+                        } else if (mData.parsed_desc->IsRange()) {\n+                            if (!range_exists) {\n+                                throw wallet::InvalidParameter(\"Descriptor is ranged, please specify the range\");\n+                            }\n+                            RangeDescriptorCheck(mData.range_start, mData.range_end);\n+                        }\n+                    }\n+                    walletModel->wallet().ProcessImport(mData, result.warnings, isScript, keys, timestamp);\n+                    result.success = true;\n+                } catch (const wallet::MiscError& e) {\n+                    result.success = false;\n+                    result.error = e.error;\n+                } catch (const wallet::WalletError& e) {\n+                    result.success = false;\n+                    result.error = e.error;\n+                } catch (const wallet::InvalidAddressOrKey& e) {\n+                    result.success = false;\n+                    result.error = e.error;\n+                } catch (const wallet::InvalidParameter& e) {\n+                    result.success = false;\n+                    result.error = e.error;\n+                } catch (...) {\n+                    result.success = false;\n+                    result.error = \"Missing required fields\";\n+                }\n+\n+                response.push_back(result);\n+\n+                if (!fRescan) {\n+                    continue;\n+                }\n+\n+                // If at least one request was successful then allow rescan.\n+                if (result.success) {\n+                    fRunScan = true;\n+                }\n+\n+                // Get the lowest timestamp.\n+                if (timestamp < nLowestTimestamp) {\n+                    nLowestTimestamp = timestamp;\n+                }\n+            }\n+\n+            if (fRescan && fRunScan && ui->entries->count()) {\n+                int64_t scannedTime = walletModel->wallet().RescanFromTime(nLowestTimestamp, reserver, true);\n+                walletModel->wallet().ReacceptWalletTransactions();\n+\n+                if (walletModel->wallet().IsAbortingRescan()) {\n+                    QMessageBox::critical(this, tr(\"Misc Error\"),\n+                                          tr(\"Rescan aborted by user.\"));\n+\n+                    if (scannedTime > nLowestTimestamp) {\n+                        std::vector <resultpdi> results = response;\n+                        response.clear();\n+\n+                        for (int i = 0; i < ui->entries->count(); ++i) {\n+                            ImportEntry *entry = qobject_cast<ImportEntry *>(ui->entries->itemAt(i)->widget());\n+                            // If key creation date is within the successfully scanned\n+                            // range, or if the import result already has an error set, let\n+                            // the result stand unmodified. Otherwise, replace the result\n+                            // with an error message.\n+                            if (scannedTime <= GetImportTimestamp(entry->getMultiData().timestamp, now) || !results.at(i).error.empty()) {\n+                                response.push_back(results.at(i));\n+                            } else {\n+                                resultpdi result;\n+                                result.success = false;\n+                                result.error = strprintf(\n+                                                \"Rescan failed for key with creation timestamp %d. There was an error reading a \"\n+                                                \"block from time %d, which is after or within %d seconds of key creation, and \"\n+                                                \"could contain transactions pertaining to the key. As a result, transactions \"\n+                                                \"and coins using this key may not appear in the wallet. This error could be \"\n+                                                \"caused by pruning or data corruption (see bitcoind log for details) and could \"\n+                                                \"be dealt with by downloading and rescanning the relevant blocks (see -reindex \"\n+                                                \"option and rescanblockchain RPC).\",\n+                                                GetImportTimestamp(entry->getMultiData().timestamp, now), scannedTime - TIMESTAMP_WINDOW - 1,\n+                                                TIMESTAMP_WINDOW);\n+                                response.push_back(std::move(result));\n+                            }\n+                        }\n+                    }\n+                }\n+            }\n+            for (int i = 0; i < response.size(); i++) {\n+                if (!response[i].success) {\n+                    std::string warning_str;\n+                    if (response[i].warnings.size() != 0) {\n+                        for (auto w: response[i].warnings) {\n+                            warning_str += w + \"\\n\";\n+                        }\n+                    }\n+                    QMessageBox::critical(this, QString::fromStdString(\"Error: input box # \") + QString::number(i),\n+                                          QString::fromStdString(\"Error:\" + response[i].error+\"\\n\"+\n+                                          \"Warnings:\"+\"\\n\" + warning_str));\n+                }\n+            }\n+            break;\n+        }\n+        case importDescriptors: {\n+            wallet::WalletRescanReserver reserver = walletModel->wallet().getReserver();\n+            if (!reserver.reserve()) {\n+                QMessageBox::critical(this, tr(\"Rescan failed\"),\n+                                      tr(\"Wallet is currently rescanning. Abort existing rescan or wait.\"));\n+                break;\n+            }\n+\n+            const int64_t minimum_timestamp = 1;\n+            int64_t now = 0;\n+            int64_t lowest_timestamp = 0;\n+            bool rescan = false;\n+            std::vector<resultpdi> response = {};\n+\n+            WalletModel::UnlockContext ctx(walletModel->requestUnlock());\n+            if (!ctx.isValid()) {\n+                break;\n+            }\n+\n+            CHECK_NONFATAL(walletModel->wallet().chain().findBlock(walletModel->wallet().GetLastBlockHash(),\n+                                                                   interfaces::FoundBlock().time(lowest_timestamp).mtpTime(now)));\n+\n+            // Get all timestamps and extract the lowest timestamp\n+            for (int i = 0; i < ui->entries->count(); ++i) {\n+                ImportEntry *entry = qobject_cast<ImportEntry *>(ui->entries->itemAt(i)->widget());\n+\n+                // This throws an error if \"timestamp\" doesn't exist\n+                wallet::ImportDescriptorData dData = entry->getDescriptorData();\n+                const int64_t timestamp = std::max(GetImportTimestamp(dData.timestamp, now), minimum_timestamp);\n+                resultpdi result;\n+\n+                try {\n+                    // Parse descriptor string\n+                    FlatSigningProvider keys;\n+                    std::string error;\n+                    dData.parsed_desc = Parse(entry->getDesc(), keys, error, /* require_checksum = */ true);\n+                    if (!dData.parsed_desc) {\n+                        throw wallet::InvalidAddressOrKey(error);\n+                    }\n+\n+                    bool range_exists = (dData.range_start && dData.range_end);",
      "path": "src/qt/importdialog.cpp",
      "position": null,
      "original_position": 281,
      "commit_id": "b2b00af1d37dd69c3e64d905984e68ac6a6b2d8f",
      "original_commit_id": "adf1a83caf37b04bfd6c86179b7121ca62d14055",
      "in_reply_to_id": null,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In c71f418f18000f537871f57a42ec76e0a25941e9 \"qt: implemented importmulti and importdescriptors GUI's\"\r\n\r\nSurrounding parentheses are not needed\r\n\r\n```suggestion\r\n                    bool range_exists = dData.range_start && dData.range_end;\r\n```",
      "created_at": "2022-08-08T20:34:55Z",
      "updated_at": "2022-08-08T20:56:15Z",
      "html_url": "https://github.com/bitcoin-core/gui/pull/650#discussion_r940640962",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/gui/pulls/comments/940640962"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/gui/pulls/650"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 551,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/gui/pulls/comments/940650877",
      "pull_request_review_id": 1065661283,
      "id": 940650877,
      "node_id": "PRRC_kwDOEEET9c44ETF9",
      "diff_hunk": "@@ -0,0 +1,244 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#if defined(HAVE_CONFIG_H)\n+#include <config/bitcoin-config.h>\n+#endif\n+\n+#include <qt/importentry.h>\n+#include <qt/forms/ui_importentry.h>\n+\n+#include <qt/addressbookpage.h>\n+#include <qt/addresstablemodel.h>\n+#include <qt/guiutil.h>\n+#include <qt/optionsmodel.h>\n+#include <qt/walletmodel.h>\n+#include <util/string.h>\n+#include <wallet/imports.h>\n+\n+#include <QGroupBox>\n+#include <QApplication>\n+#include <QClipboard>\n+\n+ImportEntry::ImportEntry(EntryPage _entryPage, QWidget *parent) :\n+        QStackedWidget(parent),\n+        ui(new Ui::ImportEntry),\n+        model(nullptr),\n+        entryPage(_entryPage)\n+{\n+    ui->setupUi(this);\n+\n+    switch (entryPage) {\n+        case importMultiEntry: {\n+            setCurrentWidget(ui->importMultiEntry);\n+            connect(ui->importScriptPubKeyRadio, &QRadioButton::clicked, this, &ImportEntry::changeImportDialog);\n+            connect(ui->importDescriptorRadio, &QRadioButton::clicked, this, &ImportEntry::changeImportDialog);\n+            connect(ui->hideScriptsButton, &QPushButton::clicked, this, &ImportEntry::useHideScriptsButtonClicked);\n+            connect(ui->deleteMultiButton, &QPushButton::clicked, this, &ImportEntry::deleteMultiClicked);\n+\n+            ui->redeemScriptLabel->hide();\n+            ui->redeemScript->hide();\n+            ui->witnessScriptLabel->hide();\n+            ui->witnessScript->hide();\n+            ui->descLabelMulti->hide();\n+            ui->descMulti->hide();\n+\n+            ui->timestampMulti->setValidator(new Int64_tValidator(0, 0x7FFFFFFFFFFFFFFF, this));\n+            ui->startRangeMulti->setRange(0, 0x7FFFFFFF);\n+            ui->endRangeMulti->setRange(0, 0x7FFFFFFF);\n+            connect(ui->checkboxInternalMulti, &QCheckBox::clicked, this, &ImportEntry::hideLabel);\n+            break;\n+        } case importDescriptorsEntry: {\n+            setCurrentWidget(ui->importDescriptorsEntry);\n+            ui->nextIndexLabel->hide();\n+            ui->hiddenMenu->hide();\n+            ui->timestamp->setValidator(new Int64_tValidator(0, 0x7FFFFFFFFFFFFFFF, this));\n+            ui->nextIndex->setRange(0, 0x7FFFFFFF);\n+            ui->startRange->setRange(0, 0x7FFFFFFF);\n+            ui->endRange->setRange(0, 0x7FFFFFFF);\n+            connect(ui->hiddenButton, &QPushButton::clicked, this, &ImportEntry::usehiddenButtonClicked);\n+            connect(ui->deleteDescriptorButton, &QPushButton::clicked, this, &ImportEntry::deleteDescriptorClicked);\n+            connect(ui->checkboxInternal, &QCheckBox::clicked, this, &ImportEntry::hideLabelDesc);\n+            break;\n+        }\n+    }\n+}\n+\n+ImportEntry::~ImportEntry()\n+{\n+    delete ui;\n+}\n+\n+void ImportEntry::setModel(WalletModel *_model)\n+{\n+    this->model = _model;\n+}\n+\n+void ImportEntry::usehiddenButtonClicked()\n+{\n+    if (!hiddenButtonState) {\n+        ui->nextIndexLabel->show();\n+        ui->hiddenMenu->show();\n+        hiddenButtonState = true;\n+        ui->hiddenButton->setText(\"△\");\n+    } else {\n+        ui->nextIndexLabel->hide();\n+        ui->hiddenMenu->hide();\n+        hiddenButtonState = false;\n+        ui->hiddenButton->setText(\"▽\");\n+    }\n+}\n+\n+void ImportEntry::useHideScriptsButtonClicked()\n+{\n+    if (!hideScriptsButtonState) {\n+        ui->redeemScriptLabel->show();\n+        ui->redeemScript->show();\n+\n+        ui->witnessScriptLabel->show();\n+        ui->witnessScript->show();\n+        hideScriptsButtonState = true;\n+        ui->hideScriptsButton->setText(\"△\");\n+    } else {\n+        ui->redeemScriptLabel->hide();\n+        ui->redeemScript->hide();\n+\n+        ui->witnessScriptLabel->hide();\n+        ui->witnessScript->hide();\n+        hideScriptsButtonState = false;\n+        ui->hideScriptsButton->setText(\"▽\");\n+    }\n+}\n+\n+void ImportEntry::hideLabel()\n+{\n+    if (ui->checkboxInternalMulti->isChecked()) {\n+        ui->labelLabelMulti->hide();\n+        ui->labelMulti->hide();\n+    } else {\n+        ui->labelLabelMulti->show();\n+        ui->labelMulti->show();\n+    }\n+}\n+\n+void ImportEntry::hideLabelDesc()\n+{\n+    if (ui->checkboxInternal->isChecked()) {\n+        ui->labelLabel->hide();\n+        ui->label->hide();\n+    } else {\n+        ui->labelLabel->show();\n+        ui->label->show();\n+    }\n+}\n+\n+void ImportEntry::changeImportDialog()\n+{\n+    if (ui->importScriptPubKeyRadio->isChecked()) {\n+        ui->scriptPubKeyLabel->show();\n+        ui->scriptPubKey->show();\n+        ui->hideScriptsButton->show();\n+\n+        ui->redeemScriptLabel->hide();\n+        ui->redeemScript->hide();\n+\n+        ui->witnessScriptLabel->hide();\n+        ui->witnessScript->hide();\n+\n+        ui->publicKeyLabel->show();\n+        ui->publicKey->show();\n+\n+        ui->descLabelMulti->hide();\n+        ui->descMulti->hide();\n+    } else {\n+        ui->scriptPubKeyLabel->hide();\n+        ui->scriptPubKey->hide();\n+        ui->hideScriptsButton->hide();\n+\n+        ui->redeemScriptLabel->hide();\n+        ui->redeemScript->hide();\n+\n+        ui->witnessScriptLabel->hide();\n+        ui->witnessScript->hide();\n+\n+        ui->publicKeyLabel->hide();\n+        ui->publicKey->hide();\n+        ui->descLabelMulti->show();\n+        ui->descMulti->show();\n+    }\n+}\n+\n+wallet::ImportMultiData ImportEntry::getMultiData()\n+{\n+    wallet::ImportMultiData multiData;\n+\n+    if (ui->importScriptPubKeyRadio->isChecked()) {\n+        multiData.scriptPubKey = ui->scriptPubKey->text().toStdString();\n+        multiData.redeem_script = ui->redeemScript->text().toStdString();\n+        multiData.witness_script = ui->witnessScript->text().toStdString();\n+        multiData.pubkeys = SplitString(ui->publicKey->text().toStdString(), ',');",
      "path": "src/qt/importentry.cpp",
      "position": null,
      "original_position": 180,
      "commit_id": "b2b00af1d37dd69c3e64d905984e68ac6a6b2d8f",
      "original_commit_id": "46fea2598202b093c2035276b232e0f94c7e869f",
      "in_reply_to_id": null,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In c71f418f18000f537871f57a42ec76e0a25941e9 \"qt: implemented importmulti and importdescriptors GUI's\"\r\n\r\nIt looks like this is getting empty strings when no pubkeys are specified. This should check that the text is not empty.\r\n\r\nSimilar deal with the private keys.\r\n\r\n```suggestion\r\n        if (!ui->publicKey->text().isEmpty()) {\r\n            multiData.pubkeys = SplitString(ui->publicKey->text().toStdString(), ',');\r\n        }\r\n```",
      "created_at": "2022-08-08T20:48:23Z",
      "updated_at": "2022-08-08T20:56:15Z",
      "html_url": "https://github.com/bitcoin-core/gui/pull/650#discussion_r940650877",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/gui/pulls/comments/940650877"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/gui/pulls/650"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 180,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/gui/pulls/comments/940654567",
      "pull_request_review_id": 1065661283,
      "id": 940654567,
      "node_id": "PRRC_kwDOEEET9c44ET_n",
      "diff_hunk": "@@ -298,5 +344,377 @@ void ImportDialog::on_Accept_clicked() {\n             }\n             break;\n         }\n+        case importMulti: {\n+            bool fRescan = true;\n+            if (!ui->rescanButtonIA->isChecked())\n+                fRescan = false;\n+\n+            if (fRescan && walletModel->wallet().chain().havePruned()) {\n+                // Exit early and print an error.\n+                // If a block is pruned after this check, we will import the key(s),\n+                // but fail the rescan with a generic error.\n+                QMessageBox::critical(this, tr(\"Rescan failed\"), tr(\"Rescan is disabled when blocks are pruned\"));\n+                break;\n+            }\n+\n+            wallet::WalletRescanReserver reserver = walletModel->wallet().getReserver();\n+            if (fRescan && !reserver.reserve()) {\n+                QMessageBox::critical(this, tr(\"Rescan failed\"),\n+                                      tr(\"Wallet is currently rescanning. Abort existing rescan or wait.\"));\n+                break;\n+            }",
      "path": "src/qt/importdialog.cpp",
      "position": null,
      "original_position": 95,
      "commit_id": "b2b00af1d37dd69c3e64d905984e68ac6a6b2d8f",
      "original_commit_id": "46fea2598202b093c2035276b232e0f94c7e869f",
      "in_reply_to_id": null,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In c71f418f18000f537871f57a42ec76e0a25941e9 \"qt: implemented importmulti and importdescriptors GUI's\"\r\n\r\nThis rescan check boilerplate could be deduplicated and placed at the top of the function. Since some of this is not checked for some of the imports, you can guard it with an `if` that checks the enum to determine whether the check should occur.",
      "created_at": "2022-08-08T20:53:11Z",
      "updated_at": "2022-08-08T20:56:15Z",
      "html_url": "https://github.com/bitcoin-core/gui/pull/650#discussion_r940654567",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/gui/pulls/comments/940654567"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/gui/pulls/650"
        }
      },
      "start_line": null,
      "original_start_line": 348,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 301,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/gui/pulls/comments/940655561",
      "pull_request_review_id": 1065661283,
      "id": 940655561,
      "node_id": "PRRC_kwDOEEET9c44EUPJ",
      "diff_hunk": "@@ -0,0 +1,302 @@\n+#include <qt/importdialog.h>\n+#include <qt/forms/ui_importdialog.h>\n+\n+#include <qt/guiconstants.h>\n+#include <qt/guiutil.h>\n+#include <key_io.h>\n+#include <qt/walletmodel.h>\n+#include <interfaces/node.h>\n+#include <wallet/wallet.h>\n+#include <QKeyEvent>\n+#include <QMessageBox>\n+#include <QPushButton>\n+#include <iostream>\n+#include <QScrollBar>\n+#include <tinyformat.h>\n+#include <chain.h>\n+\n+ImportDialog::ImportDialog(Page _page, QWidget *parent, WalletModel *walletModel) :\n+    QDialog(parent, GUIUtil::dialog_flags),\n+    ui(new Ui::ImportDialog),\n+    walletModel(walletModel),\n+    page(_page)\n+{\n+    ui->setupUi(this);\n+\n+    switch (page) {\n+        case importPubkey: {\n+            ui->QStackContainer->setCurrentWidget(ui->importKeyPage);\n+            this->setWindowTitle(\"Import Public Key\");\n+            ui->keyLabelIKP->setText(\"Public Key\");\n+            ui->keyEditIKP->setPlaceholderText(\"Enter a Public Key (e.g. 1NS17iag9jJgTHDlVXjvLCEnZuQ3rJDE9L)\");\n+            ui->rescanButtonIKP->setCheckState(Qt::Checked);\n+            break;\n+        } case importPrivkey: {\n+            ui->QStackContainer->setCurrentWidget(ui->importKeyPage);\n+            this->setWindowTitle(\"Import Private Key\");\n+            ui->keyLabelIKP->setText(\"Private Key\");\n+            ui->keyEditIKP->setPlaceholderText(\"Enter a Private Key (e.g. L4sTHokqoFZpcmJgsAG2yxrf2f71v6PYpK2qEkCvc2Fp8VVdMiU3)\");\n+            ui->rescanButtonIKP->setCheckState(Qt::Checked);\n+            break;\n+        } case importAddress: {\n+            ui->QStackContainer->setCurrentWidget(ui->importAddress);\n+            this->setWindowTitle(\"Import Address\");\n+            ui->rescanButtonIA->setCheckState(Qt::Checked);\n+            ui->p2shButtonIA->setCheckState(Qt::Unchecked);\n+            break;\n+        }\n+    }\n+\n+    GUIUtil::handleCloseWindowShortcut(this);\n+}\n+\n+ImportDialog::~ImportDialog()\n+{\n+    delete ui;\n+}\n+\n+void ImportDialog::on_Accept_clicked() {\n+    switch (page) {\n+        case importPubkey: {\n+            std::string strKey = \"\";\n+            strKey.assign(ui->keyEditIKP->text().toStdString().c_str());\n+\n+            if (strKey.empty()) {\n+                QMessageBox::warning(this, tr(\"Error\"), tr(\"Key is empty\"));\n+                break;\n+            }\n+\n+            std::string strLabel;\n+            strLabel.assign(ui->labelEditIKP->text().toStdString().c_str());\n+\n+            // Whether to perform rescan after import\n+            bool fRescan = true;\n+            if (!ui->rescanButtonIKP->isChecked())\n+                fRescan = false;\n+\n+            if (fRescan && walletModel->wallet().chain().havePruned()) {\n+                // Exit early and print an error.\n+                // If a block is pruned after this check, we will import the key(s),\n+                // but fail the rescan with a generic error.\n+                QMessageBox::critical(this, tr(\"Rescan failed\"), tr(\"Rescan is disabled when blocks are pruned\"));\n+                break;\n+            }\n+\n+\n+            wallet::WalletRescanReserver reserver = walletModel->wallet().getReserver();\n+            if (fRescan && !reserver.reserve()) {\n+                QMessageBox::critical(this, tr(\"Rescan failed\"),\n+                                      tr(\"Wallet is currently rescanning. Abort existing rescan or wait.\"));\n+                break;\n+            }\n+\n+            if (!IsHex(strKey)) {\n+                QMessageBox::critical(this, tr(\"Invalid Public Key\"), tr(\"Pubkey must be a hex string\"));\n+                break;\n+            }\n+\n+            std::vector<unsigned char> data(ParseHex(strKey));\n+            CPubKey pubKey(data);\n+            if (!pubKey.IsFullyValid()) {\n+                QMessageBox::critical(this, tr(\"Invalid Public Key\"),\n+                                      tr(\"Pubkey is not a valid public key\"));\n+                break;\n+            }\n+\n+            std::set<CScript> script_pub_keys;\n+            for (const auto &dest: GetAllDestinationsForKey(pubKey)) {\n+                script_pub_keys.insert(GetScriptForDestination(dest));\n+            }\n+\n+            walletModel->wallet().MarkDirty();\n+            walletModel->wallet().ImportScriptPubKeys(strLabel, script_pub_keys, true, true, 1);\n+            walletModel->wallet().ImportPubKeys({pubKey.GetID()}, {{pubKey.GetID(), pubKey}}, {}, false, false, 1);\n+\n+            if (fRescan) {\n+                int64_t scanned_time = walletModel->wallet().RescanFromTime(0, reserver, true);\n+                if (walletModel->wallet().IsAbortingRescan()) {\n+                    QMessageBox::critical(this, tr(\"Misc Error\"), tr(\"Rescan aborted by user.\"));\n+                    break;\n+                } else if (scanned_time > 0) {\n+                    QMessageBox::critical(this, tr(\"Wallet Error\"),\n+                                          tr(\"Rescan was unable to fully rescan the blockchain. Some transactions may be missing.\"));\n+                    break;\n+                }\n+                walletModel->wallet().ReacceptWalletTransactions();\n+            }\n+            break;\n+        }\n+        case importPrivkey: {\n+            wallet::WalletRescanReserver reserver = walletModel->wallet().getReserver();\n+            bool fRescan = true;\n+            WalletModel::UnlockContext ctx(walletModel->requestUnlock());\n+            if (!ctx.isValid()) {\n+                break;\n+            }\n+\n+            std::string strSecret = \"\";\n+            strSecret.assign(ui->keyEditIKP->text().toStdString().c_str());\n+            if (strSecret.empty()) {\n+                QMessageBox::warning(this, tr(\"Error\"), tr(\"Key is empty\"));\n+                break;\n+            }\n+\n+            std::string strLabel = \"\";\n+            strLabel.assign(ui->labelEditIKP->text().toStdString().c_str());",
      "path": "src/qt/importdialog.cpp",
      "position": null,
      "original_position": 145,
      "commit_id": "b2b00af1d37dd69c3e64d905984e68ac6a6b2d8f",
      "original_commit_id": "8551f8473549d9e8e415e47a668002c9b61aec46",
      "in_reply_to_id": null,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In 3a75af09dbb6c182a86ce71b15fe0824d3c68ac5 \"qt: implemented importpubkey, importprivkey, and importaddress GUI's\"\r\n\r\nFetching the key and label are things that are shared for the pubkey, address, and privkey imports. This could also be deuplicated and placed at the top of the function, with the extraction of the text done only if the enum matches one of these three.",
      "created_at": "2022-08-08T20:54:31Z",
      "updated_at": "2022-08-08T20:56:15Z",
      "html_url": "https://github.com/bitcoin-core/gui/pull/650#discussion_r940655561",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/gui/pulls/comments/940655561"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/gui/pulls/650"
        }
      },
      "start_line": null,
      "original_start_line": 137,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 191,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/gui/pulls/comments/941899877",
      "pull_request_review_id": 1067511572,
      "id": 941899877,
      "node_id": "PRRC_kwDOEEET9c44JEBl",
      "diff_hunk": "@@ -1375,7 +975,102 @@ RPCHelpMan importmulti()\n \n         for (const UniValue& data : requests.getValues()) {\n             const int64_t timestamp = std::max(GetImportTimestamp(data, now), minimumTimestamp);\n-            const UniValue result = ProcessImport(*pwallet, data, timestamp);\n+            ImportMultiData multi_data = {};",
      "path": "src/wallet/rpc/backup.cpp",
      "position": null,
      "original_position": 421,
      "commit_id": "b2b00af1d37dd69c3e64d905984e68ac6a6b2d8f",
      "original_commit_id": "f718e24693f4d322d2a82d6f1f8f6d4add98c415",
      "in_reply_to_id": 940572988,
      "user": {
        "login": "KolbyML",
        "id": 31669092,
        "node_id": "MDQ6VXNlcjMxNjY5MDky",
        "avatar_url": "https://avatars.githubusercontent.com/u/31669092?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/KolbyML",
        "html_url": "https://github.com/KolbyML",
        "followers_url": "https://api.github.com/users/KolbyML/followers",
        "following_url": "https://api.github.com/users/KolbyML/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/KolbyML/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/KolbyML/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/KolbyML/subscriptions",
        "organizations_url": "https://api.github.com/users/KolbyML/orgs",
        "repos_url": "https://api.github.com/users/KolbyML/repos",
        "events_url": "https://api.github.com/users/KolbyML/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/KolbyML/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "done",
      "created_at": "2022-08-10T00:07:20Z",
      "updated_at": "2022-08-10T00:07:20Z",
      "html_url": "https://github.com/bitcoin-core/gui/pull/650#discussion_r941899877",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/gui/pulls/comments/941899877"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/gui/pulls/650"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 928,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/gui/pulls/comments/941900800",
      "pull_request_review_id": 1067512667,
      "id": 941900800,
      "node_id": "PRRC_kwDOEEET9c44JEQA",
      "diff_hunk": "@@ -1375,7 +975,102 @@ RPCHelpMan importmulti()\n \n         for (const UniValue& data : requests.getValues()) {\n             const int64_t timestamp = std::max(GetImportTimestamp(data, now), minimumTimestamp);\n-            const UniValue result = ProcessImport(*pwallet, data, timestamp);\n+            ImportMultiData multi_data = {};\n+            std::vector<std::string> warnings;\n+            UniValue result(UniValue::VOBJ);\n+            try {\n+                multi_data.internal = data.exists(\"internal\") ? data[\"internal\"].get_bool() : false;\n+                // Internal addresses should not have a label\n+                if (multi_data.internal && data.exists(\"label\")) {\n+                    throw InvalidParameter(\"Internal addresses should not have a label\");\n+                }\n+                multi_data.label = data.exists(\"label\") ? data[\"label\"].get_str() : \"\";\n+                multi_data.keypool = data.exists(\"keypool\") ? data[\"keypool\"].get_bool() : false;\n+\n+                multi_data.watch_only = data.exists(\"watchonly\") ? data[\"watchonly\"].get_bool() : false;\n+\n+                multi_data.keys = {};",
      "path": "src/wallet/rpc/backup.cpp",
      "position": null,
      "original_position": 435,
      "commit_id": "b2b00af1d37dd69c3e64d905984e68ac6a6b2d8f",
      "original_commit_id": "f718e24693f4d322d2a82d6f1f8f6d4add98c415",
      "in_reply_to_id": 940574619,
      "user": {
        "login": "KolbyML",
        "id": 31669092,
        "node_id": "MDQ6VXNlcjMxNjY5MDky",
        "avatar_url": "https://avatars.githubusercontent.com/u/31669092?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/KolbyML",
        "html_url": "https://github.com/KolbyML",
        "followers_url": "https://api.github.com/users/KolbyML/followers",
        "following_url": "https://api.github.com/users/KolbyML/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/KolbyML/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/KolbyML/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/KolbyML/subscriptions",
        "organizations_url": "https://api.github.com/users/KolbyML/orgs",
        "repos_url": "https://api.github.com/users/KolbyML/repos",
        "events_url": "https://api.github.com/users/KolbyML/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/KolbyML/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "done",
      "created_at": "2022-08-10T00:09:34Z",
      "updated_at": "2022-08-10T00:09:34Z",
      "html_url": "https://github.com/bitcoin-core/gui/pull/650#discussion_r941900800",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/gui/pulls/comments/941900800"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/gui/pulls/650"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 942,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/gui/pulls/comments/941900854",
      "pull_request_review_id": 1067512740,
      "id": 941900854,
      "node_id": "PRRC_kwDOEEET9c44JEQ2",
      "diff_hunk": "@@ -1375,7 +975,102 @@ RPCHelpMan importmulti()\n \n         for (const UniValue& data : requests.getValues()) {\n             const int64_t timestamp = std::max(GetImportTimestamp(data, now), minimumTimestamp);\n-            const UniValue result = ProcessImport(*pwallet, data, timestamp);\n+            ImportMultiData multi_data = {};\n+            std::vector<std::string> warnings;\n+            UniValue result(UniValue::VOBJ);\n+            try {\n+                multi_data.internal = data.exists(\"internal\") ? data[\"internal\"].get_bool() : false;\n+                // Internal addresses should not have a label\n+                if (multi_data.internal && data.exists(\"label\")) {\n+                    throw InvalidParameter(\"Internal addresses should not have a label\");\n+                }\n+                multi_data.label = data.exists(\"label\") ? data[\"label\"].get_str() : \"\";\n+                multi_data.keypool = data.exists(\"keypool\") ? data[\"keypool\"].get_bool() : false;\n+\n+                multi_data.watch_only = data.exists(\"watchonly\") ? data[\"watchonly\"].get_bool() : false;\n+\n+                multi_data.keys = {};\n+                if (data.exists(\"keys\"))\n+                    for (size_t i = 0; i < data[\"keys\"].get_array().size(); ++i)\n+                        multi_data.keys.push_back(data[\"keys\"].get_array()[i].get_str());\n+\n+                bool isScript;\n+                FlatSigningProvider keys;\n+                bool range_exists = false;\n+                if (data.exists(\"scriptPubKey\") && data.exists(\"desc\")) {\n+                    throw InvalidParameter(\"Both a descriptor and a scriptPubKey should not be provided.\");\n+                } else if (data.exists(\"scriptPubKey\")) {\n+\n+                    // First ensure scriptPubKey has either a script or JSON with \"address\" string\n+                    const UniValue& scriptPubKey = data[\"scriptPubKey\"];\n+                    isScript = scriptPubKey.getType() == UniValue::VSTR;\n+                    if (!isScript && !(scriptPubKey.getType() == UniValue::VOBJ && scriptPubKey.exists(\"address\"))) {\n+                        throw InvalidParameter(\"scriptPubKey must be string with script or JSON with address string\");\n+                    }\n+                    multi_data.scriptPubKey = isScript ? scriptPubKey.get_str() : scriptPubKey[\"address\"].get_str();\n+\n+                    // Optional fields.\n+                    multi_data.redeem_script = data.exists(\"redeemscript\") ? data[\"redeemscript\"].get_str() : \"\";\n+                    multi_data.witness_script = data.exists(\"witnessscript\") ? data[\"witnessscript\"].get_str() : \"\";\n+                    multi_data.pubkeys = {};",
      "path": "src/wallet/rpc/backup.cpp",
      "position": null,
      "original_position": 458,
      "commit_id": "b2b00af1d37dd69c3e64d905984e68ac6a6b2d8f",
      "original_commit_id": "f718e24693f4d322d2a82d6f1f8f6d4add98c415",
      "in_reply_to_id": 940576350,
      "user": {
        "login": "KolbyML",
        "id": 31669092,
        "node_id": "MDQ6VXNlcjMxNjY5MDky",
        "avatar_url": "https://avatars.githubusercontent.com/u/31669092?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/KolbyML",
        "html_url": "https://github.com/KolbyML",
        "followers_url": "https://api.github.com/users/KolbyML/followers",
        "following_url": "https://api.github.com/users/KolbyML/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/KolbyML/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/KolbyML/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/KolbyML/subscriptions",
        "organizations_url": "https://api.github.com/users/KolbyML/orgs",
        "repos_url": "https://api.github.com/users/KolbyML/repos",
        "events_url": "https://api.github.com/users/KolbyML/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/KolbyML/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "done",
      "created_at": "2022-08-10T00:09:43Z",
      "updated_at": "2022-08-10T00:09:43Z",
      "html_url": "https://github.com/bitcoin-core/gui/pull/650#discussion_r941900854",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/gui/pulls/comments/941900854"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/gui/pulls/650"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 964,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/gui/pulls/comments/941901238",
      "pull_request_review_id": 1067513221,
      "id": 941901238,
      "node_id": "PRRC_kwDOEEET9c44JEW2",
      "diff_hunk": "@@ -1375,7 +975,102 @@ RPCHelpMan importmulti()\n \n         for (const UniValue& data : requests.getValues()) {\n             const int64_t timestamp = std::max(GetImportTimestamp(data, now), minimumTimestamp);\n-            const UniValue result = ProcessImport(*pwallet, data, timestamp);\n+            ImportMultiData multi_data = {};\n+            std::vector<std::string> warnings;\n+            UniValue result(UniValue::VOBJ);\n+            try {\n+                multi_data.internal = data.exists(\"internal\") ? data[\"internal\"].get_bool() : false;\n+                // Internal addresses should not have a label\n+                if (multi_data.internal && data.exists(\"label\")) {\n+                    throw InvalidParameter(\"Internal addresses should not have a label\");\n+                }\n+                multi_data.label = data.exists(\"label\") ? data[\"label\"].get_str() : \"\";\n+                multi_data.keypool = data.exists(\"keypool\") ? data[\"keypool\"].get_bool() : false;\n+\n+                multi_data.watch_only = data.exists(\"watchonly\") ? data[\"watchonly\"].get_bool() : false;\n+\n+                multi_data.keys = {};\n+                if (data.exists(\"keys\"))\n+                    for (size_t i = 0; i < data[\"keys\"].get_array().size(); ++i)\n+                        multi_data.keys.push_back(data[\"keys\"].get_array()[i].get_str());\n+\n+                bool isScript;\n+                FlatSigningProvider keys;\n+                bool range_exists = false;",
      "path": "src/wallet/rpc/backup.cpp",
      "position": null,
      "original_position": 442,
      "commit_id": "b2b00af1d37dd69c3e64d905984e68ac6a6b2d8f",
      "original_commit_id": "f718e24693f4d322d2a82d6f1f8f6d4add98c415",
      "in_reply_to_id": 940584339,
      "user": {
        "login": "KolbyML",
        "id": 31669092,
        "node_id": "MDQ6VXNlcjMxNjY5MDky",
        "avatar_url": "https://avatars.githubusercontent.com/u/31669092?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/KolbyML",
        "html_url": "https://github.com/KolbyML",
        "followers_url": "https://api.github.com/users/KolbyML/followers",
        "following_url": "https://api.github.com/users/KolbyML/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/KolbyML/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/KolbyML/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/KolbyML/subscriptions",
        "organizations_url": "https://api.github.com/users/KolbyML/orgs",
        "repos_url": "https://api.github.com/users/KolbyML/repos",
        "events_url": "https://api.github.com/users/KolbyML/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/KolbyML/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "done",
      "created_at": "2022-08-10T00:10:45Z",
      "updated_at": "2022-08-10T00:10:45Z",
      "html_url": "https://github.com/bitcoin-core/gui/pull/650#discussion_r941901238",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/gui/pulls/comments/941901238"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/gui/pulls/650"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 999,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/gui/pulls/comments/941903000",
      "pull_request_review_id": 1067515285,
      "id": 941903000,
      "node_id": "PRRC_kwDOEEET9c44JEyY",
      "diff_hunk": "@@ -0,0 +1,302 @@\n+#include <qt/importdialog.h>\n+#include <qt/forms/ui_importdialog.h>\n+\n+#include <qt/guiconstants.h>\n+#include <qt/guiutil.h>\n+#include <key_io.h>\n+#include <qt/walletmodel.h>\n+#include <interfaces/node.h>\n+#include <wallet/wallet.h>\n+#include <QKeyEvent>\n+#include <QMessageBox>\n+#include <QPushButton>\n+#include <iostream>\n+#include <QScrollBar>\n+#include <tinyformat.h>\n+#include <chain.h>\n+\n+ImportDialog::ImportDialog(Page _page, QWidget *parent, WalletModel *walletModel) :\n+    QDialog(parent, GUIUtil::dialog_flags),\n+    ui(new Ui::ImportDialog),\n+    walletModel(walletModel),\n+    page(_page)\n+{\n+    ui->setupUi(this);\n+\n+    switch (page) {\n+        case importPubkey: {\n+            ui->QStackContainer->setCurrentWidget(ui->importKeyPage);\n+            this->setWindowTitle(\"Import Public Key\");\n+            ui->keyLabelIKP->setText(\"Public Key\");\n+            ui->keyEditIKP->setPlaceholderText(\"Enter a Public Key (e.g. 1NS17iag9jJgTHDlVXjvLCEnZuQ3rJDE9L)\");\n+            ui->rescanButtonIKP->setCheckState(Qt::Checked);\n+            break;\n+        } case importPrivkey: {\n+            ui->QStackContainer->setCurrentWidget(ui->importKeyPage);\n+            this->setWindowTitle(\"Import Private Key\");\n+            ui->keyLabelIKP->setText(\"Private Key\");\n+            ui->keyEditIKP->setPlaceholderText(\"Enter a Private Key (e.g. L4sTHokqoFZpcmJgsAG2yxrf2f71v6PYpK2qEkCvc2Fp8VVdMiU3)\");\n+            ui->rescanButtonIKP->setCheckState(Qt::Checked);\n+            break;\n+        } case importAddress: {\n+            ui->QStackContainer->setCurrentWidget(ui->importAddress);\n+            this->setWindowTitle(\"Import Address\");\n+            ui->rescanButtonIA->setCheckState(Qt::Checked);\n+            ui->p2shButtonIA->setCheckState(Qt::Unchecked);\n+            break;\n+        }\n+    }\n+\n+    GUIUtil::handleCloseWindowShortcut(this);\n+}\n+\n+ImportDialog::~ImportDialog()\n+{\n+    delete ui;\n+}\n+\n+void ImportDialog::on_Accept_clicked() {\n+    switch (page) {\n+        case importPubkey: {\n+            std::string strKey = \"\";\n+            strKey.assign(ui->keyEditIKP->text().toStdString().c_str());",
      "path": "src/qt/importdialog.cpp",
      "position": null,
      "original_position": 62,
      "commit_id": "b2b00af1d37dd69c3e64d905984e68ac6a6b2d8f",
      "original_commit_id": "3a75af09dbb6c182a86ce71b15fe0824d3c68ac5",
      "in_reply_to_id": 940616219,
      "user": {
        "login": "KolbyML",
        "id": 31669092,
        "node_id": "MDQ6VXNlcjMxNjY5MDky",
        "avatar_url": "https://avatars.githubusercontent.com/u/31669092?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/KolbyML",
        "html_url": "https://github.com/KolbyML",
        "followers_url": "https://api.github.com/users/KolbyML/followers",
        "following_url": "https://api.github.com/users/KolbyML/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/KolbyML/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/KolbyML/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/KolbyML/subscriptions",
        "organizations_url": "https://api.github.com/users/KolbyML/orgs",
        "repos_url": "https://api.github.com/users/KolbyML/repos",
        "events_url": "https://api.github.com/users/KolbyML/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/KolbyML/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "done",
      "created_at": "2022-08-10T00:15:22Z",
      "updated_at": "2022-08-10T00:15:22Z",
      "html_url": "https://github.com/bitcoin-core/gui/pull/650#discussion_r941903000",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/gui/pulls/comments/941903000"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/gui/pulls/650"
        }
      },
      "start_line": null,
      "original_start_line": 61,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 108,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/gui/pulls/comments/941903095",
      "pull_request_review_id": 1067515377,
      "id": 941903095,
      "node_id": "PRRC_kwDOEEET9c44JEz3",
      "diff_hunk": "@@ -0,0 +1,302 @@\n+#include <qt/importdialog.h>\n+#include <qt/forms/ui_importdialog.h>\n+\n+#include <qt/guiconstants.h>\n+#include <qt/guiutil.h>\n+#include <key_io.h>\n+#include <qt/walletmodel.h>\n+#include <interfaces/node.h>\n+#include <wallet/wallet.h>\n+#include <QKeyEvent>\n+#include <QMessageBox>\n+#include <QPushButton>\n+#include <iostream>\n+#include <QScrollBar>\n+#include <tinyformat.h>\n+#include <chain.h>\n+\n+ImportDialog::ImportDialog(Page _page, QWidget *parent, WalletModel *walletModel) :\n+    QDialog(parent, GUIUtil::dialog_flags),\n+    ui(new Ui::ImportDialog),\n+    walletModel(walletModel),\n+    page(_page)\n+{\n+    ui->setupUi(this);\n+\n+    switch (page) {\n+        case importPubkey: {\n+            ui->QStackContainer->setCurrentWidget(ui->importKeyPage);\n+            this->setWindowTitle(\"Import Public Key\");\n+            ui->keyLabelIKP->setText(\"Public Key\");\n+            ui->keyEditIKP->setPlaceholderText(\"Enter a Public Key (e.g. 1NS17iag9jJgTHDlVXjvLCEnZuQ3rJDE9L)\");\n+            ui->rescanButtonIKP->setCheckState(Qt::Checked);\n+            break;\n+        } case importPrivkey: {\n+            ui->QStackContainer->setCurrentWidget(ui->importKeyPage);\n+            this->setWindowTitle(\"Import Private Key\");\n+            ui->keyLabelIKP->setText(\"Private Key\");\n+            ui->keyEditIKP->setPlaceholderText(\"Enter a Private Key (e.g. L4sTHokqoFZpcmJgsAG2yxrf2f71v6PYpK2qEkCvc2Fp8VVdMiU3)\");\n+            ui->rescanButtonIKP->setCheckState(Qt::Checked);\n+            break;\n+        } case importAddress: {\n+            ui->QStackContainer->setCurrentWidget(ui->importAddress);\n+            this->setWindowTitle(\"Import Address\");\n+            ui->rescanButtonIA->setCheckState(Qt::Checked);\n+            ui->p2shButtonIA->setCheckState(Qt::Unchecked);\n+            break;\n+        }\n+    }\n+\n+    GUIUtil::handleCloseWindowShortcut(this);\n+}\n+\n+ImportDialog::~ImportDialog()\n+{\n+    delete ui;\n+}\n+\n+void ImportDialog::on_Accept_clicked() {\n+    switch (page) {\n+        case importPubkey: {\n+            std::string strKey = \"\";\n+            strKey.assign(ui->keyEditIKP->text().toStdString().c_str());\n+\n+            if (strKey.empty()) {\n+                QMessageBox::warning(this, tr(\"Error\"), tr(\"Key is empty\"));\n+                break;\n+            }\n+\n+            std::string strLabel;\n+            strLabel.assign(ui->labelEditIKP->text().toStdString().c_str());",
      "path": "src/qt/importdialog.cpp",
      "position": null,
      "original_position": 70,
      "commit_id": "b2b00af1d37dd69c3e64d905984e68ac6a6b2d8f",
      "original_commit_id": "3a75af09dbb6c182a86ce71b15fe0824d3c68ac5",
      "in_reply_to_id": 940616656,
      "user": {
        "login": "KolbyML",
        "id": 31669092,
        "node_id": "MDQ6VXNlcjMxNjY5MDky",
        "avatar_url": "https://avatars.githubusercontent.com/u/31669092?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/KolbyML",
        "html_url": "https://github.com/KolbyML",
        "followers_url": "https://api.github.com/users/KolbyML/followers",
        "following_url": "https://api.github.com/users/KolbyML/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/KolbyML/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/KolbyML/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/KolbyML/subscriptions",
        "organizations_url": "https://api.github.com/users/KolbyML/orgs",
        "repos_url": "https://api.github.com/users/KolbyML/repos",
        "events_url": "https://api.github.com/users/KolbyML/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/KolbyML/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "done",
      "created_at": "2022-08-10T00:15:33Z",
      "updated_at": "2022-08-10T00:15:33Z",
      "html_url": "https://github.com/bitcoin-core/gui/pull/650#discussion_r941903095",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/gui/pulls/comments/941903095"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/gui/pulls/650"
        }
      },
      "start_line": null,
      "original_start_line": 69,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 116,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/gui/pulls/comments/941903298",
      "pull_request_review_id": 1067515579,
      "id": 941903298,
      "node_id": "PRRC_kwDOEEET9c44JE3C",
      "diff_hunk": "@@ -298,5 +344,377 @@ void ImportDialog::on_Accept_clicked() {\n             }\n             break;\n         }\n+        case importMulti: {\n+            bool fRescan = true;\n+            if (!ui->rescanButtonIA->isChecked())\n+                fRescan = false;\n+\n+            if (fRescan && walletModel->wallet().chain().havePruned()) {\n+                // Exit early and print an error.\n+                // If a block is pruned after this check, we will import the key(s),\n+                // but fail the rescan with a generic error.\n+                QMessageBox::critical(this, tr(\"Rescan failed\"), tr(\"Rescan is disabled when blocks are pruned\"));\n+                break;\n+            }\n+\n+            wallet::WalletRescanReserver reserver = walletModel->wallet().getReserver();\n+            if (fRescan && !reserver.reserve()) {\n+                QMessageBox::critical(this, tr(\"Rescan failed\"),\n+                                      tr(\"Wallet is currently rescanning. Abort existing rescan or wait.\"));\n+                break;\n+            }\n+\n+            int64_t now = 0;\n+            bool fRunScan = false;\n+            int64_t nLowestTimestamp = 0;\n+            std::vector<resultpdi> response = {};",
      "path": "src/qt/importdialog.cpp",
      "position": null,
      "original_position": 100,
      "commit_id": "b2b00af1d37dd69c3e64d905984e68ac6a6b2d8f",
      "original_commit_id": "c71f418f18000f537871f57a42ec76e0a25941e9",
      "in_reply_to_id": 940621024,
      "user": {
        "login": "KolbyML",
        "id": 31669092,
        "node_id": "MDQ6VXNlcjMxNjY5MDky",
        "avatar_url": "https://avatars.githubusercontent.com/u/31669092?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/KolbyML",
        "html_url": "https://github.com/KolbyML",
        "followers_url": "https://api.github.com/users/KolbyML/followers",
        "following_url": "https://api.github.com/users/KolbyML/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/KolbyML/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/KolbyML/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/KolbyML/subscriptions",
        "organizations_url": "https://api.github.com/users/KolbyML/orgs",
        "repos_url": "https://api.github.com/users/KolbyML/repos",
        "events_url": "https://api.github.com/users/KolbyML/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/KolbyML/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "done",
      "created_at": "2022-08-10T00:16:00Z",
      "updated_at": "2022-08-10T00:16:00Z",
      "html_url": "https://github.com/bitcoin-core/gui/pull/650#discussion_r941903298",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/gui/pulls/comments/941903298"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/gui/pulls/650"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 370,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/gui/pulls/comments/941908790",
      "pull_request_review_id": 1067522219,
      "id": 941908790,
      "node_id": "PRRC_kwDOEEET9c44JGM2",
      "diff_hunk": "@@ -298,5 +344,377 @@ void ImportDialog::on_Accept_clicked() {\n             }\n             break;\n         }\n+        case importMulti: {\n+            bool fRescan = true;\n+            if (!ui->rescanButtonIA->isChecked())\n+                fRescan = false;\n+\n+            if (fRescan && walletModel->wallet().chain().havePruned()) {\n+                // Exit early and print an error.\n+                // If a block is pruned after this check, we will import the key(s),\n+                // but fail the rescan with a generic error.\n+                QMessageBox::critical(this, tr(\"Rescan failed\"), tr(\"Rescan is disabled when blocks are pruned\"));\n+                break;\n+            }\n+\n+            wallet::WalletRescanReserver reserver = walletModel->wallet().getReserver();\n+            if (fRescan && !reserver.reserve()) {\n+                QMessageBox::critical(this, tr(\"Rescan failed\"),\n+                                      tr(\"Wallet is currently rescanning. Abort existing rescan or wait.\"));\n+                break;\n+            }\n+\n+            int64_t now = 0;\n+            bool fRunScan = false;\n+            int64_t nLowestTimestamp = 0;\n+            std::vector<resultpdi> response = {};\n+\n+            WalletModel::UnlockContext ctx(walletModel->requestUnlock());\n+            if (!ctx.isValid()) {\n+                break;\n+            }\n+\n+            // Verify all timestamps are present before importing any keys.\n+            CHECK_NONFATAL(walletModel->wallet().chain().findBlock(walletModel->wallet().GetLastBlockHash(),\n+                                                                   interfaces::FoundBlock().time(nLowestTimestamp).mtpTime(now)));\n+            const int64_t minimumTimestamp = 1;\n+\n+            for (int i = 0; i < ui->entries->count(); ++i) {\n+                ImportEntry *entry = qobject_cast<ImportEntry *>(ui->entries->itemAt(i)->widget());\n+                wallet::ImportMultiData mData = entry->getMultiData();\n+                const int64_t timestamp = std::max(GetImportTimestamp(mData.timestamp, now), minimumTimestamp);\n+                resultpdi result;\n+\n+                try {\n+                    // Internal addresses should not have a label\n+                    if (mData.internal && !mData.label.empty()) {\n+                        throw wallet::InvalidParameter(\"Internal addresses should not have a label\");\n+                    }\n+\n+                    bool isScript = false;\n+                    FlatSigningProvider keys;\n+                    if (!mData.scriptPubKey.empty()) {\n+                        // if the input isn't a valid address assume it is a script\n+                        CTxDestination dest = DecodeDestination(mData.scriptPubKey);\n+                        if (!IsValidDestination(dest)) {\n+                            isScript = true;\n+                        }\n+                    } else {\n+                        std::string error;\n+                        mData.parsed_desc = Parse(entry->getDesc(), keys, error, /* require_checksum = */ true);\n+                        if (!mData.parsed_desc) {\n+                            throw wallet::InvalidAddressOrKey(error);\n+                        }\n+                        if (mData.parsed_desc->GetOutputType() == OutputType::BECH32M) {\n+                            throw wallet::InvalidAddressOrKey(\"Bech32m descriptors cannot be imported into legacy wallets\");\n+                        }\n+                        bool range_exists = (mData.range_start && mData.range_end);\n+                        if (!mData.parsed_desc->IsRange() && range_exists) {\n+                            throw wallet::InvalidParameter(\"Range should not be specified for an un-ranged descriptor\");\n+                        } else if (mData.parsed_desc->IsRange()) {\n+                            if (!range_exists) {\n+                                throw wallet::InvalidParameter(\"Descriptor is ranged, please specify the range\");\n+                            }\n+                            RangeDescriptorCheck(mData.range_start, mData.range_end);\n+                        }\n+                    }\n+                    walletModel->wallet().ProcessImport(mData, result.warnings, isScript, keys, timestamp);\n+                    result.success = true;\n+                } catch (const wallet::MiscError& e) {\n+                    result.success = false;\n+                    result.error = e.error;\n+                } catch (const wallet::WalletError& e) {\n+                    result.success = false;\n+                    result.error = e.error;\n+                } catch (const wallet::InvalidAddressOrKey& e) {\n+                    result.success = false;\n+                    result.error = e.error;\n+                } catch (const wallet::InvalidParameter& e) {\n+                    result.success = false;\n+                    result.error = e.error;\n+                } catch (...) {\n+                    result.success = false;\n+                    result.error = \"Missing required fields\";\n+                }\n+\n+                response.push_back(result);\n+\n+                if (!fRescan) {\n+                    continue;\n+                }\n+\n+                // If at least one request was successful then allow rescan.\n+                if (result.success) {\n+                    fRunScan = true;\n+                }\n+\n+                // Get the lowest timestamp.\n+                if (timestamp < nLowestTimestamp) {\n+                    nLowestTimestamp = timestamp;\n+                }\n+            }\n+\n+            if (fRescan && fRunScan && ui->entries->count()) {\n+                int64_t scannedTime = walletModel->wallet().RescanFromTime(nLowestTimestamp, reserver, true);\n+                walletModel->wallet().ReacceptWalletTransactions();\n+\n+                if (walletModel->wallet().IsAbortingRescan()) {\n+                    QMessageBox::critical(this, tr(\"Misc Error\"),\n+                                          tr(\"Rescan aborted by user.\"));\n+\n+                    if (scannedTime > nLowestTimestamp) {\n+                        std::vector <resultpdi> results = response;\n+                        response.clear();\n+\n+                        for (int i = 0; i < ui->entries->count(); ++i) {\n+                            ImportEntry *entry = qobject_cast<ImportEntry *>(ui->entries->itemAt(i)->widget());\n+                            // If key creation date is within the successfully scanned\n+                            // range, or if the import result already has an error set, let\n+                            // the result stand unmodified. Otherwise, replace the result\n+                            // with an error message.\n+                            if (scannedTime <= GetImportTimestamp(entry->getMultiData().timestamp, now) || !results.at(i).error.empty()) {\n+                                response.push_back(results.at(i));\n+                            } else {\n+                                resultpdi result;\n+                                result.success = false;\n+                                result.error = strprintf(\n+                                                \"Rescan failed for key with creation timestamp %d. There was an error reading a \"\n+                                                \"block from time %d, which is after or within %d seconds of key creation, and \"\n+                                                \"could contain transactions pertaining to the key. As a result, transactions \"\n+                                                \"and coins using this key may not appear in the wallet. This error could be \"\n+                                                \"caused by pruning or data corruption (see bitcoind log for details) and could \"\n+                                                \"be dealt with by downloading and rescanning the relevant blocks (see -reindex \"\n+                                                \"option and rescanblockchain RPC).\",\n+                                                GetImportTimestamp(entry->getMultiData().timestamp, now), scannedTime - TIMESTAMP_WINDOW - 1,\n+                                                TIMESTAMP_WINDOW);\n+                                response.push_back(std::move(result));\n+                            }\n+                        }\n+                    }\n+                }\n+            }\n+            for (int i = 0; i < response.size(); i++) {\n+                if (!response[i].success) {\n+                    std::string warning_str;\n+                    if (response[i].warnings.size() != 0) {\n+                        for (auto w: response[i].warnings) {\n+                            warning_str += w + \"\\n\";\n+                        }\n+                    }\n+                    QMessageBox::critical(this, QString::fromStdString(\"Error: input box # \" + QString::number(i)),\n+                                          QString::fromStdString(\"Error:\" + response[i].error+\"\\n\"+\n+                                          \"Warnings:\"+\"\\n\" + warning_str));\n+                }\n+            }\n+            break;\n+        }\n+        case importDescriptors: {\n+            wallet::WalletRescanReserver reserver = walletModel->wallet().getReserver();\n+            if (!reserver.reserve()) {\n+                QMessageBox::critical(this, tr(\"Rescan failed\"),\n+                                      tr(\"Wallet is currently rescanning. Abort existing rescan or wait.\"));\n+                break;\n+            }\n+\n+            const int64_t minimum_timestamp = 1;\n+            int64_t now = 0;\n+            int64_t lowest_timestamp = 0;\n+            bool rescan = false;\n+            std::vector<resultpdi> response = {};\n+\n+            WalletModel::UnlockContext ctx(walletModel->requestUnlock());\n+            if (!ctx.isValid()) {\n+                break;\n+            }\n+\n+            CHECK_NONFATAL(walletModel->wallet().chain().findBlock(walletModel->wallet().GetLastBlockHash(),\n+                                                                   interfaces::FoundBlock().time(lowest_timestamp).mtpTime(now)));\n+\n+            // Get all timestamps and extract the lowest timestamp\n+            for (int i = 0; i < ui->entries->count(); ++i) {\n+                ImportEntry *entry = qobject_cast<ImportEntry *>(ui->entries->itemAt(i)->widget());\n+\n+                // This throws an error if \"timestamp\" doesn't exist\n+                wallet::ImportDescriptorData dData = entry->getDescriptorData();\n+                const int64_t timestamp = std::max(GetImportTimestamp(dData.timestamp, now), minimum_timestamp);\n+                resultpdi result;\n+\n+                try {\n+                    // Parse descriptor string\n+                    FlatSigningProvider keys;\n+                    std::string error;\n+                    dData.parsed_desc = Parse(entry->getDesc(), keys, error, /* require_checksum = */ true);\n+                    if (!dData.parsed_desc) {\n+                        throw wallet::InvalidAddressOrKey(error);\n+                    }\n+\n+                    bool range_exists = (dData.range_start && dData.range_end);\n+                    if (!dData.parsed_desc->IsRange() && range_exists) {\n+                        throw wallet::InvalidParameter(\"Range should not be specified for an un-ranged descriptor\");\n+                    } else if (dData.parsed_desc->IsRange()) {\n+                        if (!range_exists) {\n+                            result.warnings.push_back(\"Range not given, using default keypool range\");\n+                            dData.range_start = 0;\n+                            dData.range_end = gArgs.GetIntArg(\"-keypool\", wallet::DEFAULT_KEYPOOL_SIZE);\n+                        } else {\n+                            RangeDescriptorCheck(dData.range_start, dData.range_end);\n+                            dData.range_end++;\n+                        }\n+\n+                        if (dData.next_index) {\n+                            // bound checks\n+                            if (dData.next_index < dData.range_start || dData.next_index >= dData.range_end) {\n+                                throw wallet::InvalidParameter(\"next_index is out of range\");\n+                            }\n+                        } else {\n+                            dData.next_index = dData.range_start;\n+                        }\n+                    }\n+                    walletModel->wallet().ProcessDescriptorImport(dData, result.warnings, keys, range_exists, timestamp);\n+                    result.success = true;\n+                } catch (const wallet::MiscError& e) {\n+                    result.success = false;\n+                    result.error = e.error;\n+                } catch (const wallet::WalletError& e) {\n+                    result.success = false;\n+                    result.error = e.error;\n+                } catch (const wallet::InvalidAddressOrKey& e) {\n+                    result.success = false;\n+                    result.error = e.error;\n+                } catch (const wallet::InvalidParameter& e) {\n+                    result.success = false;\n+                    result.error = e.error;\n+                }\n+\n+                response.push_back(result);\n+\n+                if (lowest_timestamp > timestamp) {\n+                    lowest_timestamp = timestamp;\n+                }\n+\n+                // If we know the chain tip, and at least one request was successful then allow rescan\n+                if (!rescan && result.success) {\n+                    rescan = true;\n+                }\n+            }\n+            walletModel->wallet().ConnectScriptPubKeyManNotifiers();\n+\n+            // Rescan the blockchain using the lowest timestamp\n+            if (rescan) {\n+                int64_t scanned_time = walletModel->wallet().RescanFromTime(lowest_timestamp, reserver, true);\n+                walletModel->wallet().ReacceptWalletTransactions();\n+\n+                if (walletModel->wallet().IsAbortingRescan()) {\n+                    QMessageBox::critical(this, tr(\"Misc Error\"),\n+                                          tr(\"Rescan aborted by user.\"));\n+\n+                    if (scanned_time > lowest_timestamp) {\n+                        std::vector<resultpdi> results = response;\n+                        response.clear();\n+\n+                        for (int i = 0; i < ui->entries->count(); ++i) {\n+                            ImportEntry *entry = qobject_cast<ImportEntry *>(ui->entries->itemAt(i)->widget());\n+\n+                            // If the descriptor timestamp is within the successfully scanned\n+                            // range, or if the import result already has an error set, let\n+                            // the result stand unmodified. Otherwise, replace the result\n+                            // with an error message.\n+                            if (scanned_time <= GetImportTimestamp(entry->getDescriptorData().timestamp, now) || !results.at(i).error.empty()) {\n+                                response.push_back(results.at(i));\n+                            } else {\n+                                resultpdi result;\n+                                result.success = false;\n+                                result.error = strprintf(\n+                                            \"Rescan failed for descriptor with timestamp %d. There was an error reading a \"\n+                                            \"block from time %d, which is after or within %d seconds of key creation, and \"\n+                                            \"could contain transactions pertaining to the desc. As a result, transactions \"\n+                                            \"and coins using this desc may not appear in the wallet. This error could be \"\n+                                            \"caused by pruning or data corruption (see bitcoind log for details) and could \"\n+                                            \"be dealt with by downloading and rescanning the relevant blocks (see -reindex \"\n+                                            \"option and rescanblockchain RPC).\",\n+                                            GetImportTimestamp(entry->getDescriptorData().timestamp, now),\n+                                            scanned_time - TIMESTAMP_WINDOW - 1, TIMESTAMP_WINDOW);\n+                                response.push_back(std::move(result));\n+                            }\n+                        }\n+                    }\n+                }\n+            }\n+            for (int i = 0; i < response.size(); i++) {\n+                if (!response[i].success) {\n+                    std::string warning_str;\n+                    if (response[i].warnings.size() != 0) {\n+                        for (auto w: response[i].warnings) {\n+                            warning_str += w + \"\\n\";\n+                        }\n+                    }\n+                    QMessageBox::critical(this, QString::fromStdString(\"Error: input box # \" + QString::number(i)),\n+                                          QString::fromStdString(\"Error:\" + response[i].error+\"\\n\"+\n+                                                                 \"Warnings:\"+\"\\n\" + warning_str));\n+                }\n+            }\n+        }\n     }\n }\n+\n+\n+\n+ImportEntry *ImportDialog::addEntryMulti()\n+{\n+    ImportEntry *entry = new ImportEntry(ImportEntry::importMultiEntry, this);\n+    entry->setModel(walletModel);\n+    ui->entries->addWidget(entry);\n+    connect(entry, &ImportEntry::removeMultiEntry, this, &ImportDialog::removeMultiEntry);\n+\n+    // Focus the field, so that entry can start immediately\n+    //entry->clear();\n+    entry->setFocus();\n+    ui->scrollAreaWidgetContents->resize(ui->scrollAreaWidgetContents->sizeHint());\n+    qApp->processEvents();\n+    QScrollBar* bar = ui->scrollArea->verticalScrollBar();\n+    if(bar)\n+        bar->setSliderPosition(bar->maximum());\n+\n+    return entry;\n+}\n+\n+ImportEntry *ImportDialog::addEntryDescriptors()\n+{\n+    ImportEntry *entry = new ImportEntry(ImportEntry::importDescriptorsEntry, this);\n+    entry->setModel(walletModel);\n+    ui->entries->addWidget(entry);\n+    connect(entry, &ImportEntry::removeDescriptorEntry, this, &ImportDialog::removeDescriptorEntry);\n+\n+    // Focus the field, so that entry can start immediately\n+    //entry->clear();\n+    entry->setFocus();\n+    ui->scrollAreaWidgetContents->resize(ui->scrollAreaWidgetContents->sizeHint());\n+    qApp->processEvents();\n+    QScrollBar* bar = ui->scrollArea->verticalScrollBar();\n+    if(bar)\n+        bar->setSliderPosition(bar->maximum());\n+\n+    return entry;\n+}\n+\n+void ImportDialog::removeMultiEntry(ImportEntry* entry)\n+{\n+    entry->hide();\n+\n+    // If the last entry is about to be removed add an empty one\n+    if (ui->entries->count() == 1)\n+        addEntryMulti();\n+\n+    entry->deleteLater();\n+}\n+\n+void ImportDialog::removeDescriptorEntry(ImportEntry* entry)\n+{\n+    entry->hide();\n+\n+    // If the last entry is about to be removed add an empty one\n+    if (ui->entries->count() == 1)\n+        addEntryDescriptors();\n+\n+    entry->deleteLater();\n+}",
      "path": "src/qt/importdialog.cpp",
      "position": null,
      "original_position": 450,
      "commit_id": "b2b00af1d37dd69c3e64d905984e68ac6a6b2d8f",
      "original_commit_id": "c71f418f18000f537871f57a42ec76e0a25941e9",
      "in_reply_to_id": 940625711,
      "user": {
        "login": "KolbyML",
        "id": 31669092,
        "node_id": "MDQ6VXNlcjMxNjY5MDky",
        "avatar_url": "https://avatars.githubusercontent.com/u/31669092?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/KolbyML",
        "html_url": "https://github.com/KolbyML",
        "followers_url": "https://api.github.com/users/KolbyML/followers",
        "following_url": "https://api.github.com/users/KolbyML/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/KolbyML/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/KolbyML/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/KolbyML/subscriptions",
        "organizations_url": "https://api.github.com/users/KolbyML/orgs",
        "repos_url": "https://api.github.com/users/KolbyML/repos",
        "events_url": "https://api.github.com/users/KolbyML/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/KolbyML/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "done",
      "created_at": "2022-08-10T00:30:16Z",
      "updated_at": "2022-08-10T00:30:16Z",
      "html_url": "https://github.com/bitcoin-core/gui/pull/650#discussion_r941908790",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/gui/pulls/comments/941908790"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/gui/pulls/650"
        }
      },
      "start_line": null,
      "original_start_line": 700,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 579,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/gui/pulls/comments/941908889",
      "pull_request_review_id": 1067522354,
      "id": 941908889,
      "node_id": "PRRC_kwDOEEET9c44JGOZ",
      "diff_hunk": "@@ -298,5 +344,377 @@ void ImportDialog::on_Accept_clicked() {\n             }\n             break;\n         }\n+        case importMulti: {\n+            bool fRescan = true;\n+            if (!ui->rescanButtonIA->isChecked())\n+                fRescan = false;\n+\n+            if (fRescan && walletModel->wallet().chain().havePruned()) {\n+                // Exit early and print an error.\n+                // If a block is pruned after this check, we will import the key(s),\n+                // but fail the rescan with a generic error.\n+                QMessageBox::critical(this, tr(\"Rescan failed\"), tr(\"Rescan is disabled when blocks are pruned\"));\n+                break;\n+            }\n+\n+            wallet::WalletRescanReserver reserver = walletModel->wallet().getReserver();\n+            if (fRescan && !reserver.reserve()) {\n+                QMessageBox::critical(this, tr(\"Rescan failed\"),\n+                                      tr(\"Wallet is currently rescanning. Abort existing rescan or wait.\"));\n+                break;\n+            }\n+\n+            int64_t now = 0;\n+            bool fRunScan = false;\n+            int64_t nLowestTimestamp = 0;\n+            std::vector<resultpdi> response = {};\n+\n+            WalletModel::UnlockContext ctx(walletModel->requestUnlock());\n+            if (!ctx.isValid()) {\n+                break;\n+            }\n+\n+            // Verify all timestamps are present before importing any keys.\n+            CHECK_NONFATAL(walletModel->wallet().chain().findBlock(walletModel->wallet().GetLastBlockHash(),\n+                                                                   interfaces::FoundBlock().time(nLowestTimestamp).mtpTime(now)));\n+            const int64_t minimumTimestamp = 1;\n+\n+            for (int i = 0; i < ui->entries->count(); ++i) {\n+                ImportEntry *entry = qobject_cast<ImportEntry *>(ui->entries->itemAt(i)->widget());\n+                wallet::ImportMultiData mData = entry->getMultiData();\n+                const int64_t timestamp = std::max(GetImportTimestamp(mData.timestamp, now), minimumTimestamp);\n+                resultpdi result;\n+\n+                try {\n+                    // Internal addresses should not have a label\n+                    if (mData.internal && !mData.label.empty()) {\n+                        throw wallet::InvalidParameter(\"Internal addresses should not have a label\");\n+                    }\n+\n+                    bool isScript = false;\n+                    FlatSigningProvider keys;\n+                    if (!mData.scriptPubKey.empty()) {\n+                        // if the input isn't a valid address assume it is a script\n+                        CTxDestination dest = DecodeDestination(mData.scriptPubKey);\n+                        if (!IsValidDestination(dest)) {\n+                            isScript = true;\n+                        }\n+                    } else {\n+                        std::string error;\n+                        mData.parsed_desc = Parse(entry->getDesc(), keys, error, /* require_checksum = */ true);\n+                        if (!mData.parsed_desc) {\n+                            throw wallet::InvalidAddressOrKey(error);\n+                        }\n+                        if (mData.parsed_desc->GetOutputType() == OutputType::BECH32M) {\n+                            throw wallet::InvalidAddressOrKey(\"Bech32m descriptors cannot be imported into legacy wallets\");\n+                        }\n+                        bool range_exists = (mData.range_start && mData.range_end);\n+                        if (!mData.parsed_desc->IsRange() && range_exists) {\n+                            throw wallet::InvalidParameter(\"Range should not be specified for an un-ranged descriptor\");\n+                        } else if (mData.parsed_desc->IsRange()) {\n+                            if (!range_exists) {\n+                                throw wallet::InvalidParameter(\"Descriptor is ranged, please specify the range\");\n+                            }\n+                            RangeDescriptorCheck(mData.range_start, mData.range_end);\n+                        }\n+                    }\n+                    walletModel->wallet().ProcessImport(mData, result.warnings, isScript, keys, timestamp);\n+                    result.success = true;\n+                } catch (const wallet::MiscError& e) {\n+                    result.success = false;\n+                    result.error = e.error;\n+                } catch (const wallet::WalletError& e) {\n+                    result.success = false;\n+                    result.error = e.error;\n+                } catch (const wallet::InvalidAddressOrKey& e) {\n+                    result.success = false;\n+                    result.error = e.error;\n+                } catch (const wallet::InvalidParameter& e) {\n+                    result.success = false;\n+                    result.error = e.error;\n+                } catch (...) {\n+                    result.success = false;\n+                    result.error = \"Missing required fields\";\n+                }\n+\n+                response.push_back(result);\n+\n+                if (!fRescan) {\n+                    continue;\n+                }\n+\n+                // If at least one request was successful then allow rescan.\n+                if (result.success) {\n+                    fRunScan = true;\n+                }\n+\n+                // Get the lowest timestamp.\n+                if (timestamp < nLowestTimestamp) {\n+                    nLowestTimestamp = timestamp;\n+                }\n+            }\n+\n+            if (fRescan && fRunScan && ui->entries->count()) {\n+                int64_t scannedTime = walletModel->wallet().RescanFromTime(nLowestTimestamp, reserver, true);\n+                walletModel->wallet().ReacceptWalletTransactions();\n+\n+                if (walletModel->wallet().IsAbortingRescan()) {\n+                    QMessageBox::critical(this, tr(\"Misc Error\"),\n+                                          tr(\"Rescan aborted by user.\"));\n+\n+                    if (scannedTime > nLowestTimestamp) {\n+                        std::vector <resultpdi> results = response;\n+                        response.clear();\n+\n+                        for (int i = 0; i < ui->entries->count(); ++i) {\n+                            ImportEntry *entry = qobject_cast<ImportEntry *>(ui->entries->itemAt(i)->widget());\n+                            // If key creation date is within the successfully scanned\n+                            // range, or if the import result already has an error set, let\n+                            // the result stand unmodified. Otherwise, replace the result\n+                            // with an error message.\n+                            if (scannedTime <= GetImportTimestamp(entry->getMultiData().timestamp, now) || !results.at(i).error.empty()) {\n+                                response.push_back(results.at(i));\n+                            } else {\n+                                resultpdi result;\n+                                result.success = false;\n+                                result.error = strprintf(\n+                                                \"Rescan failed for key with creation timestamp %d. There was an error reading a \"\n+                                                \"block from time %d, which is after or within %d seconds of key creation, and \"\n+                                                \"could contain transactions pertaining to the key. As a result, transactions \"\n+                                                \"and coins using this key may not appear in the wallet. This error could be \"\n+                                                \"caused by pruning or data corruption (see bitcoind log for details) and could \"\n+                                                \"be dealt with by downloading and rescanning the relevant blocks (see -reindex \"\n+                                                \"option and rescanblockchain RPC).\",\n+                                                GetImportTimestamp(entry->getMultiData().timestamp, now), scannedTime - TIMESTAMP_WINDOW - 1,\n+                                                TIMESTAMP_WINDOW);\n+                                response.push_back(std::move(result));\n+                            }\n+                        }\n+                    }\n+                }\n+            }\n+            for (int i = 0; i < response.size(); i++) {\n+                if (!response[i].success) {\n+                    std::string warning_str;\n+                    if (response[i].warnings.size() != 0) {\n+                        for (auto w: response[i].warnings) {\n+                            warning_str += w + \"\\n\";\n+                        }\n+                    }\n+                    QMessageBox::critical(this, QString::fromStdString(\"Error: input box # \" + QString::number(i)),\n+                                          QString::fromStdString(\"Error:\" + response[i].error+\"\\n\"+\n+                                          \"Warnings:\"+\"\\n\" + warning_str));\n+                }\n+            }\n+            break;\n+        }\n+        case importDescriptors: {\n+            wallet::WalletRescanReserver reserver = walletModel->wallet().getReserver();\n+            if (!reserver.reserve()) {\n+                QMessageBox::critical(this, tr(\"Rescan failed\"),\n+                                      tr(\"Wallet is currently rescanning. Abort existing rescan or wait.\"));\n+                break;\n+            }\n+\n+            const int64_t minimum_timestamp = 1;\n+            int64_t now = 0;\n+            int64_t lowest_timestamp = 0;\n+            bool rescan = false;\n+            std::vector<resultpdi> response = {};\n+\n+            WalletModel::UnlockContext ctx(walletModel->requestUnlock());\n+            if (!ctx.isValid()) {\n+                break;\n+            }\n+\n+            CHECK_NONFATAL(walletModel->wallet().chain().findBlock(walletModel->wallet().GetLastBlockHash(),\n+                                                                   interfaces::FoundBlock().time(lowest_timestamp).mtpTime(now)));\n+\n+            // Get all timestamps and extract the lowest timestamp\n+            for (int i = 0; i < ui->entries->count(); ++i) {\n+                ImportEntry *entry = qobject_cast<ImportEntry *>(ui->entries->itemAt(i)->widget());\n+\n+                // This throws an error if \"timestamp\" doesn't exist\n+                wallet::ImportDescriptorData dData = entry->getDescriptorData();\n+                const int64_t timestamp = std::max(GetImportTimestamp(dData.timestamp, now), minimum_timestamp);\n+                resultpdi result;\n+\n+                try {\n+                    // Parse descriptor string\n+                    FlatSigningProvider keys;\n+                    std::string error;\n+                    dData.parsed_desc = Parse(entry->getDesc(), keys, error, /* require_checksum = */ true);\n+                    if (!dData.parsed_desc) {\n+                        throw wallet::InvalidAddressOrKey(error);\n+                    }\n+\n+                    bool range_exists = (dData.range_start && dData.range_end);\n+                    if (!dData.parsed_desc->IsRange() && range_exists) {\n+                        throw wallet::InvalidParameter(\"Range should not be specified for an un-ranged descriptor\");\n+                    } else if (dData.parsed_desc->IsRange()) {\n+                        if (!range_exists) {\n+                            result.warnings.push_back(\"Range not given, using default keypool range\");\n+                            dData.range_start = 0;\n+                            dData.range_end = gArgs.GetIntArg(\"-keypool\", wallet::DEFAULT_KEYPOOL_SIZE);\n+                        } else {\n+                            RangeDescriptorCheck(dData.range_start, dData.range_end);\n+                            dData.range_end++;\n+                        }\n+\n+                        if (dData.next_index) {\n+                            // bound checks\n+                            if (dData.next_index < dData.range_start || dData.next_index >= dData.range_end) {\n+                                throw wallet::InvalidParameter(\"next_index is out of range\");\n+                            }\n+                        } else {\n+                            dData.next_index = dData.range_start;\n+                        }\n+                    }\n+                    walletModel->wallet().ProcessDescriptorImport(dData, result.warnings, keys, range_exists, timestamp);\n+                    result.success = true;\n+                } catch (const wallet::MiscError& e) {\n+                    result.success = false;\n+                    result.error = e.error;\n+                } catch (const wallet::WalletError& e) {\n+                    result.success = false;\n+                    result.error = e.error;\n+                } catch (const wallet::InvalidAddressOrKey& e) {\n+                    result.success = false;\n+                    result.error = e.error;\n+                } catch (const wallet::InvalidParameter& e) {\n+                    result.success = false;\n+                    result.error = e.error;\n+                }\n+\n+                response.push_back(result);\n+\n+                if (lowest_timestamp > timestamp) {\n+                    lowest_timestamp = timestamp;\n+                }\n+\n+                // If we know the chain tip, and at least one request was successful then allow rescan\n+                if (!rescan && result.success) {\n+                    rescan = true;\n+                }\n+            }\n+            walletModel->wallet().ConnectScriptPubKeyManNotifiers();\n+\n+            // Rescan the blockchain using the lowest timestamp\n+            if (rescan) {\n+                int64_t scanned_time = walletModel->wallet().RescanFromTime(lowest_timestamp, reserver, true);\n+                walletModel->wallet().ReacceptWalletTransactions();\n+\n+                if (walletModel->wallet().IsAbortingRescan()) {\n+                    QMessageBox::critical(this, tr(\"Misc Error\"),\n+                                          tr(\"Rescan aborted by user.\"));\n+\n+                    if (scanned_time > lowest_timestamp) {\n+                        std::vector<resultpdi> results = response;\n+                        response.clear();\n+\n+                        for (int i = 0; i < ui->entries->count(); ++i) {\n+                            ImportEntry *entry = qobject_cast<ImportEntry *>(ui->entries->itemAt(i)->widget());\n+\n+                            // If the descriptor timestamp is within the successfully scanned\n+                            // range, or if the import result already has an error set, let\n+                            // the result stand unmodified. Otherwise, replace the result\n+                            // with an error message.\n+                            if (scanned_time <= GetImportTimestamp(entry->getDescriptorData().timestamp, now) || !results.at(i).error.empty()) {\n+                                response.push_back(results.at(i));\n+                            } else {\n+                                resultpdi result;\n+                                result.success = false;\n+                                result.error = strprintf(\n+                                            \"Rescan failed for descriptor with timestamp %d. There was an error reading a \"\n+                                            \"block from time %d, which is after or within %d seconds of key creation, and \"\n+                                            \"could contain transactions pertaining to the desc. As a result, transactions \"\n+                                            \"and coins using this desc may not appear in the wallet. This error could be \"\n+                                            \"caused by pruning or data corruption (see bitcoind log for details) and could \"\n+                                            \"be dealt with by downloading and rescanning the relevant blocks (see -reindex \"\n+                                            \"option and rescanblockchain RPC).\",\n+                                            GetImportTimestamp(entry->getDescriptorData().timestamp, now),\n+                                            scanned_time - TIMESTAMP_WINDOW - 1, TIMESTAMP_WINDOW);\n+                                response.push_back(std::move(result));\n+                            }\n+                        }\n+                    }\n+                }\n+            }\n+            for (int i = 0; i < response.size(); i++) {\n+                if (!response[i].success) {\n+                    std::string warning_str;\n+                    if (response[i].warnings.size() != 0) {\n+                        for (auto w: response[i].warnings) {\n+                            warning_str += w + \"\\n\";\n+                        }\n+                    }\n+                    QMessageBox::critical(this, QString::fromStdString(\"Error: input box # \" + QString::number(i)),\n+                                          QString::fromStdString(\"Error:\" + response[i].error+\"\\n\"+\n+                                                                 \"Warnings:\"+\"\\n\" + warning_str));\n+                }\n+            }\n+        }\n     }\n }\n+\n+\n+\n+ImportEntry *ImportDialog::addEntryMulti()\n+{\n+    ImportEntry *entry = new ImportEntry(ImportEntry::importMultiEntry, this);\n+    entry->setModel(walletModel);\n+    ui->entries->addWidget(entry);\n+    connect(entry, &ImportEntry::removeMultiEntry, this, &ImportDialog::removeMultiEntry);\n+\n+    // Focus the field, so that entry can start immediately\n+    //entry->clear();\n+    entry->setFocus();\n+    ui->scrollAreaWidgetContents->resize(ui->scrollAreaWidgetContents->sizeHint());\n+    qApp->processEvents();\n+    QScrollBar* bar = ui->scrollArea->verticalScrollBar();\n+    if(bar)\n+        bar->setSliderPosition(bar->maximum());\n+\n+    return entry;\n+}\n+\n+ImportEntry *ImportDialog::addEntryDescriptors()\n+{\n+    ImportEntry *entry = new ImportEntry(ImportEntry::importDescriptorsEntry, this);\n+    entry->setModel(walletModel);\n+    ui->entries->addWidget(entry);\n+    connect(entry, &ImportEntry::removeDescriptorEntry, this, &ImportDialog::removeDescriptorEntry);\n+\n+    // Focus the field, so that entry can start immediately\n+    //entry->clear();\n+    entry->setFocus();\n+    ui->scrollAreaWidgetContents->resize(ui->scrollAreaWidgetContents->sizeHint());\n+    qApp->processEvents();\n+    QScrollBar* bar = ui->scrollArea->verticalScrollBar();\n+    if(bar)\n+        bar->setSliderPosition(bar->maximum());\n+\n+    return entry;\n+}",
      "path": "src/qt/importdialog.cpp",
      "position": null,
      "original_position": 428,
      "commit_id": "b2b00af1d37dd69c3e64d905984e68ac6a6b2d8f",
      "original_commit_id": "c71f418f18000f537871f57a42ec76e0a25941e9",
      "in_reply_to_id": 940626528,
      "user": {
        "login": "KolbyML",
        "id": 31669092,
        "node_id": "MDQ6VXNlcjMxNjY5MDky",
        "avatar_url": "https://avatars.githubusercontent.com/u/31669092?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/KolbyML",
        "html_url": "https://github.com/KolbyML",
        "followers_url": "https://api.github.com/users/KolbyML/followers",
        "following_url": "https://api.github.com/users/KolbyML/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/KolbyML/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/KolbyML/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/KolbyML/subscriptions",
        "organizations_url": "https://api.github.com/users/KolbyML/orgs",
        "repos_url": "https://api.github.com/users/KolbyML/repos",
        "events_url": "https://api.github.com/users/KolbyML/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/KolbyML/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "done",
      "created_at": "2022-08-10T00:30:36Z",
      "updated_at": "2022-08-10T00:30:37Z",
      "html_url": "https://github.com/bitcoin-core/gui/pull/650#discussion_r941908889",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/gui/pulls/comments/941908889"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/gui/pulls/650"
        }
      },
      "start_line": null,
      "original_start_line": 662,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 568,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/gui/pulls/comments/941909292",
      "pull_request_review_id": 1067522856,
      "id": 941909292,
      "node_id": "PRRC_kwDOEEET9c44JGUs",
      "diff_hunk": "@@ -298,5 +344,377 @@ void ImportDialog::on_Accept_clicked() {\n             }\n             break;\n         }\n+        case importMulti: {\n+            bool fRescan = true;\n+            if (!ui->rescanButtonIA->isChecked())\n+                fRescan = false;\n+\n+            if (fRescan && walletModel->wallet().chain().havePruned()) {\n+                // Exit early and print an error.\n+                // If a block is pruned after this check, we will import the key(s),\n+                // but fail the rescan with a generic error.\n+                QMessageBox::critical(this, tr(\"Rescan failed\"), tr(\"Rescan is disabled when blocks are pruned\"));\n+                break;\n+            }\n+\n+            wallet::WalletRescanReserver reserver = walletModel->wallet().getReserver();\n+            if (fRescan && !reserver.reserve()) {\n+                QMessageBox::critical(this, tr(\"Rescan failed\"),\n+                                      tr(\"Wallet is currently rescanning. Abort existing rescan or wait.\"));\n+                break;\n+            }\n+\n+            int64_t now = 0;\n+            bool fRunScan = false;\n+            int64_t nLowestTimestamp = 0;\n+            std::vector<resultpdi> response = {};\n+\n+            WalletModel::UnlockContext ctx(walletModel->requestUnlock());\n+            if (!ctx.isValid()) {\n+                break;\n+            }\n+\n+            // Verify all timestamps are present before importing any keys.\n+            CHECK_NONFATAL(walletModel->wallet().chain().findBlock(walletModel->wallet().GetLastBlockHash(),\n+                                                                   interfaces::FoundBlock().time(nLowestTimestamp).mtpTime(now)));\n+            const int64_t minimumTimestamp = 1;\n+\n+            for (int i = 0; i < ui->entries->count(); ++i) {\n+                ImportEntry *entry = qobject_cast<ImportEntry *>(ui->entries->itemAt(i)->widget());\n+                wallet::ImportMultiData mData = entry->getMultiData();\n+                const int64_t timestamp = std::max(GetImportTimestamp(mData.timestamp, now), minimumTimestamp);\n+                resultpdi result;\n+\n+                try {\n+                    // Internal addresses should not have a label\n+                    if (mData.internal && !mData.label.empty()) {\n+                        throw wallet::InvalidParameter(\"Internal addresses should not have a label\");\n+                    }\n+\n+                    bool isScript = false;\n+                    FlatSigningProvider keys;\n+                    if (!mData.scriptPubKey.empty()) {\n+                        // if the input isn't a valid address assume it is a script\n+                        CTxDestination dest = DecodeDestination(mData.scriptPubKey);\n+                        if (!IsValidDestination(dest)) {\n+                            isScript = true;\n+                        }\n+                    } else {\n+                        std::string error;\n+                        mData.parsed_desc = Parse(entry->getDesc(), keys, error, /* require_checksum = */ true);\n+                        if (!mData.parsed_desc) {\n+                            throw wallet::InvalidAddressOrKey(error);\n+                        }\n+                        if (mData.parsed_desc->GetOutputType() == OutputType::BECH32M) {\n+                            throw wallet::InvalidAddressOrKey(\"Bech32m descriptors cannot be imported into legacy wallets\");\n+                        }\n+                        bool range_exists = (mData.range_start && mData.range_end);\n+                        if (!mData.parsed_desc->IsRange() && range_exists) {\n+                            throw wallet::InvalidParameter(\"Range should not be specified for an un-ranged descriptor\");\n+                        } else if (mData.parsed_desc->IsRange()) {\n+                            if (!range_exists) {\n+                                throw wallet::InvalidParameter(\"Descriptor is ranged, please specify the range\");\n+                            }\n+                            RangeDescriptorCheck(mData.range_start, mData.range_end);\n+                        }\n+                    }\n+                    walletModel->wallet().ProcessImport(mData, result.warnings, isScript, keys, timestamp);\n+                    result.success = true;\n+                } catch (const wallet::MiscError& e) {\n+                    result.success = false;\n+                    result.error = e.error;\n+                } catch (const wallet::WalletError& e) {\n+                    result.success = false;\n+                    result.error = e.error;\n+                } catch (const wallet::InvalidAddressOrKey& e) {\n+                    result.success = false;\n+                    result.error = e.error;\n+                } catch (const wallet::InvalidParameter& e) {\n+                    result.success = false;\n+                    result.error = e.error;\n+                } catch (...) {\n+                    result.success = false;\n+                    result.error = \"Missing required fields\";\n+                }\n+\n+                response.push_back(result);\n+\n+                if (!fRescan) {\n+                    continue;\n+                }\n+\n+                // If at least one request was successful then allow rescan.\n+                if (result.success) {\n+                    fRunScan = true;\n+                }\n+\n+                // Get the lowest timestamp.\n+                if (timestamp < nLowestTimestamp) {\n+                    nLowestTimestamp = timestamp;\n+                }\n+            }\n+\n+            if (fRescan && fRunScan && ui->entries->count()) {\n+                int64_t scannedTime = walletModel->wallet().RescanFromTime(nLowestTimestamp, reserver, true);\n+                walletModel->wallet().ReacceptWalletTransactions();\n+\n+                if (walletModel->wallet().IsAbortingRescan()) {\n+                    QMessageBox::critical(this, tr(\"Misc Error\"),\n+                                          tr(\"Rescan aborted by user.\"));\n+\n+                    if (scannedTime > nLowestTimestamp) {\n+                        std::vector <resultpdi> results = response;\n+                        response.clear();\n+\n+                        for (int i = 0; i < ui->entries->count(); ++i) {\n+                            ImportEntry *entry = qobject_cast<ImportEntry *>(ui->entries->itemAt(i)->widget());\n+                            // If key creation date is within the successfully scanned\n+                            // range, or if the import result already has an error set, let\n+                            // the result stand unmodified. Otherwise, replace the result\n+                            // with an error message.\n+                            if (scannedTime <= GetImportTimestamp(entry->getMultiData().timestamp, now) || !results.at(i).error.empty()) {\n+                                response.push_back(results.at(i));\n+                            } else {\n+                                resultpdi result;\n+                                result.success = false;\n+                                result.error = strprintf(\n+                                                \"Rescan failed for key with creation timestamp %d. There was an error reading a \"\n+                                                \"block from time %d, which is after or within %d seconds of key creation, and \"\n+                                                \"could contain transactions pertaining to the key. As a result, transactions \"\n+                                                \"and coins using this key may not appear in the wallet. This error could be \"\n+                                                \"caused by pruning or data corruption (see bitcoind log for details) and could \"\n+                                                \"be dealt with by downloading and rescanning the relevant blocks (see -reindex \"\n+                                                \"option and rescanblockchain RPC).\",\n+                                                GetImportTimestamp(entry->getMultiData().timestamp, now), scannedTime - TIMESTAMP_WINDOW - 1,\n+                                                TIMESTAMP_WINDOW);\n+                                response.push_back(std::move(result));\n+                            }\n+                        }\n+                    }\n+                }\n+            }\n+            for (int i = 0; i < response.size(); i++) {",
      "path": "src/qt/importdialog.cpp",
      "position": null,
      "original_position": 226,
      "commit_id": "b2b00af1d37dd69c3e64d905984e68ac6a6b2d8f",
      "original_commit_id": "c71f418f18000f537871f57a42ec76e0a25941e9",
      "in_reply_to_id": 940630072,
      "user": {
        "login": "KolbyML",
        "id": 31669092,
        "node_id": "MDQ6VXNlcjMxNjY5MDky",
        "avatar_url": "https://avatars.githubusercontent.com/u/31669092?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/KolbyML",
        "html_url": "https://github.com/KolbyML",
        "followers_url": "https://api.github.com/users/KolbyML/followers",
        "following_url": "https://api.github.com/users/KolbyML/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/KolbyML/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/KolbyML/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/KolbyML/subscriptions",
        "organizations_url": "https://api.github.com/users/KolbyML/orgs",
        "repos_url": "https://api.github.com/users/KolbyML/repos",
        "events_url": "https://api.github.com/users/KolbyML/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/KolbyML/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "done",
      "created_at": "2022-08-10T00:31:44Z",
      "updated_at": "2022-08-10T00:31:44Z",
      "html_url": "https://github.com/bitcoin-core/gui/pull/650#discussion_r941909292",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/gui/pulls/comments/941909292"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/gui/pulls/650"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 496,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/gui/pulls/comments/941910166",
      "pull_request_review_id": 1067523861,
      "id": 941910166,
      "node_id": "PRRC_kwDOEEET9c44JGiW",
      "diff_hunk": "@@ -298,5 +344,377 @@ void ImportDialog::on_Accept_clicked() {\n             }\n             break;\n         }\n+        case importMulti: {\n+            bool fRescan = true;\n+            if (!ui->rescanButtonIA->isChecked())\n+                fRescan = false;\n+\n+            if (fRescan && walletModel->wallet().chain().havePruned()) {\n+                // Exit early and print an error.\n+                // If a block is pruned after this check, we will import the key(s),\n+                // but fail the rescan with a generic error.\n+                QMessageBox::critical(this, tr(\"Rescan failed\"), tr(\"Rescan is disabled when blocks are pruned\"));\n+                break;\n+            }\n+\n+            wallet::WalletRescanReserver reserver = walletModel->wallet().getReserver();\n+            if (fRescan && !reserver.reserve()) {\n+                QMessageBox::critical(this, tr(\"Rescan failed\"),\n+                                      tr(\"Wallet is currently rescanning. Abort existing rescan or wait.\"));\n+                break;\n+            }\n+\n+            int64_t now = 0;\n+            bool fRunScan = false;\n+            int64_t nLowestTimestamp = 0;\n+            std::vector<resultpdi> response = {};\n+\n+            WalletModel::UnlockContext ctx(walletModel->requestUnlock());\n+            if (!ctx.isValid()) {\n+                break;\n+            }\n+\n+            // Verify all timestamps are present before importing any keys.\n+            CHECK_NONFATAL(walletModel->wallet().chain().findBlock(walletModel->wallet().GetLastBlockHash(),\n+                                                                   interfaces::FoundBlock().time(nLowestTimestamp).mtpTime(now)));\n+            const int64_t minimumTimestamp = 1;\n+\n+            for (int i = 0; i < ui->entries->count(); ++i) {\n+                ImportEntry *entry = qobject_cast<ImportEntry *>(ui->entries->itemAt(i)->widget());\n+                wallet::ImportMultiData mData = entry->getMultiData();\n+                const int64_t timestamp = std::max(GetImportTimestamp(mData.timestamp, now), minimumTimestamp);\n+                resultpdi result;\n+\n+                try {\n+                    // Internal addresses should not have a label\n+                    if (mData.internal && !mData.label.empty()) {\n+                        throw wallet::InvalidParameter(\"Internal addresses should not have a label\");\n+                    }\n+\n+                    bool isScript = false;\n+                    FlatSigningProvider keys;\n+                    if (!mData.scriptPubKey.empty()) {\n+                        // if the input isn't a valid address assume it is a script\n+                        CTxDestination dest = DecodeDestination(mData.scriptPubKey);\n+                        if (!IsValidDestination(dest)) {\n+                            isScript = true;\n+                        }\n+                    } else {\n+                        std::string error;\n+                        mData.parsed_desc = Parse(entry->getDesc(), keys, error, /* require_checksum = */ true);\n+                        if (!mData.parsed_desc) {\n+                            throw wallet::InvalidAddressOrKey(error);\n+                        }\n+                        if (mData.parsed_desc->GetOutputType() == OutputType::BECH32M) {\n+                            throw wallet::InvalidAddressOrKey(\"Bech32m descriptors cannot be imported into legacy wallets\");\n+                        }\n+                        bool range_exists = (mData.range_start && mData.range_end);\n+                        if (!mData.parsed_desc->IsRange() && range_exists) {\n+                            throw wallet::InvalidParameter(\"Range should not be specified for an un-ranged descriptor\");\n+                        } else if (mData.parsed_desc->IsRange()) {\n+                            if (!range_exists) {\n+                                throw wallet::InvalidParameter(\"Descriptor is ranged, please specify the range\");\n+                            }\n+                            RangeDescriptorCheck(mData.range_start, mData.range_end);\n+                        }\n+                    }\n+                    walletModel->wallet().ProcessImport(mData, result.warnings, isScript, keys, timestamp);\n+                    result.success = true;\n+                } catch (const wallet::MiscError& e) {\n+                    result.success = false;\n+                    result.error = e.error;\n+                } catch (const wallet::WalletError& e) {\n+                    result.success = false;\n+                    result.error = e.error;\n+                } catch (const wallet::InvalidAddressOrKey& e) {\n+                    result.success = false;\n+                    result.error = e.error;\n+                } catch (const wallet::InvalidParameter& e) {\n+                    result.success = false;\n+                    result.error = e.error;\n+                } catch (...) {\n+                    result.success = false;\n+                    result.error = \"Missing required fields\";\n+                }\n+\n+                response.push_back(result);\n+\n+                if (!fRescan) {\n+                    continue;\n+                }\n+\n+                // If at least one request was successful then allow rescan.\n+                if (result.success) {\n+                    fRunScan = true;\n+                }\n+\n+                // Get the lowest timestamp.\n+                if (timestamp < nLowestTimestamp) {\n+                    nLowestTimestamp = timestamp;\n+                }\n+            }\n+\n+            if (fRescan && fRunScan && ui->entries->count()) {\n+                int64_t scannedTime = walletModel->wallet().RescanFromTime(nLowestTimestamp, reserver, true);\n+                walletModel->wallet().ReacceptWalletTransactions();\n+\n+                if (walletModel->wallet().IsAbortingRescan()) {\n+                    QMessageBox::critical(this, tr(\"Misc Error\"),\n+                                          tr(\"Rescan aborted by user.\"));\n+\n+                    if (scannedTime > nLowestTimestamp) {\n+                        std::vector <resultpdi> results = response;\n+                        response.clear();\n+\n+                        for (int i = 0; i < ui->entries->count(); ++i) {\n+                            ImportEntry *entry = qobject_cast<ImportEntry *>(ui->entries->itemAt(i)->widget());\n+                            // If key creation date is within the successfully scanned\n+                            // range, or if the import result already has an error set, let\n+                            // the result stand unmodified. Otherwise, replace the result\n+                            // with an error message.\n+                            if (scannedTime <= GetImportTimestamp(entry->getMultiData().timestamp, now) || !results.at(i).error.empty()) {\n+                                response.push_back(results.at(i));\n+                            } else {\n+                                resultpdi result;\n+                                result.success = false;\n+                                result.error = strprintf(\n+                                                \"Rescan failed for key with creation timestamp %d. There was an error reading a \"\n+                                                \"block from time %d, which is after or within %d seconds of key creation, and \"\n+                                                \"could contain transactions pertaining to the key. As a result, transactions \"\n+                                                \"and coins using this key may not appear in the wallet. This error could be \"\n+                                                \"caused by pruning or data corruption (see bitcoind log for details) and could \"\n+                                                \"be dealt with by downloading and rescanning the relevant blocks (see -reindex \"\n+                                                \"option and rescanblockchain RPC).\",\n+                                                GetImportTimestamp(entry->getMultiData().timestamp, now), scannedTime - TIMESTAMP_WINDOW - 1,\n+                                                TIMESTAMP_WINDOW);\n+                                response.push_back(std::move(result));\n+                            }\n+                        }\n+                    }\n+                }\n+            }\n+            for (int i = 0; i < response.size(); i++) {\n+                if (!response[i].success) {\n+                    std::string warning_str;\n+                    if (response[i].warnings.size() != 0) {\n+                        for (auto w: response[i].warnings) {\n+                            warning_str += w + \"\\n\";\n+                        }\n+                    }\n+                    QMessageBox::critical(this, QString::fromStdString(\"Error: input box # \") + QString::number(i),",
      "path": "src/qt/importdialog.cpp",
      "position": null,
      "original_position": 234,
      "commit_id": "b2b00af1d37dd69c3e64d905984e68ac6a6b2d8f",
      "original_commit_id": "adf1a83caf37b04bfd6c86179b7121ca62d14055",
      "in_reply_to_id": 940634109,
      "user": {
        "login": "KolbyML",
        "id": 31669092,
        "node_id": "MDQ6VXNlcjMxNjY5MDky",
        "avatar_url": "https://avatars.githubusercontent.com/u/31669092?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/KolbyML",
        "html_url": "https://github.com/KolbyML",
        "followers_url": "https://api.github.com/users/KolbyML/followers",
        "following_url": "https://api.github.com/users/KolbyML/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/KolbyML/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/KolbyML/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/KolbyML/subscriptions",
        "organizations_url": "https://api.github.com/users/KolbyML/orgs",
        "repos_url": "https://api.github.com/users/KolbyML/repos",
        "events_url": "https://api.github.com/users/KolbyML/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/KolbyML/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "done",
      "created_at": "2022-08-10T00:34:08Z",
      "updated_at": "2022-08-10T00:34:09Z",
      "html_url": "https://github.com/bitcoin-core/gui/pull/650#discussion_r941910166",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/gui/pulls/comments/941910166"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/gui/pulls/650"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 504,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/gui/pulls/comments/941910379",
      "pull_request_review_id": 1067524158,
      "id": 941910379,
      "node_id": "PRRC_kwDOEEET9c44JGlr",
      "diff_hunk": "@@ -298,5 +344,377 @@ void ImportDialog::on_Accept_clicked() {\n             }\n             break;\n         }\n+        case importMulti: {\n+            bool fRescan = true;\n+            if (!ui->rescanButtonIA->isChecked())\n+                fRescan = false;\n+\n+            if (fRescan && walletModel->wallet().chain().havePruned()) {\n+                // Exit early and print an error.\n+                // If a block is pruned after this check, we will import the key(s),\n+                // but fail the rescan with a generic error.\n+                QMessageBox::critical(this, tr(\"Rescan failed\"), tr(\"Rescan is disabled when blocks are pruned\"));\n+                break;\n+            }\n+\n+            wallet::WalletRescanReserver reserver = walletModel->wallet().getReserver();\n+            if (fRescan && !reserver.reserve()) {\n+                QMessageBox::critical(this, tr(\"Rescan failed\"),\n+                                      tr(\"Wallet is currently rescanning. Abort existing rescan or wait.\"));\n+                break;\n+            }\n+\n+            int64_t now = 0;\n+            bool fRunScan = false;\n+            int64_t nLowestTimestamp = 0;\n+            std::vector<resultpdi> response = {};\n+\n+            WalletModel::UnlockContext ctx(walletModel->requestUnlock());\n+            if (!ctx.isValid()) {\n+                break;\n+            }\n+\n+            // Verify all timestamps are present before importing any keys.\n+            CHECK_NONFATAL(walletModel->wallet().chain().findBlock(walletModel->wallet().GetLastBlockHash(),\n+                                                                   interfaces::FoundBlock().time(nLowestTimestamp).mtpTime(now)));\n+            const int64_t minimumTimestamp = 1;\n+\n+            for (int i = 0; i < ui->entries->count(); ++i) {\n+                ImportEntry *entry = qobject_cast<ImportEntry *>(ui->entries->itemAt(i)->widget());\n+                wallet::ImportMultiData mData = entry->getMultiData();\n+                const int64_t timestamp = std::max(GetImportTimestamp(mData.timestamp, now), minimumTimestamp);\n+                resultpdi result;\n+\n+                try {\n+                    // Internal addresses should not have a label\n+                    if (mData.internal && !mData.label.empty()) {\n+                        throw wallet::InvalidParameter(\"Internal addresses should not have a label\");\n+                    }\n+\n+                    bool isScript = false;\n+                    FlatSigningProvider keys;\n+                    if (!mData.scriptPubKey.empty()) {\n+                        // if the input isn't a valid address assume it is a script\n+                        CTxDestination dest = DecodeDestination(mData.scriptPubKey);\n+                        if (!IsValidDestination(dest)) {\n+                            isScript = true;\n+                        }\n+                    } else {\n+                        std::string error;\n+                        mData.parsed_desc = Parse(entry->getDesc(), keys, error, /* require_checksum = */ true);\n+                        if (!mData.parsed_desc) {\n+                            throw wallet::InvalidAddressOrKey(error);\n+                        }\n+                        if (mData.parsed_desc->GetOutputType() == OutputType::BECH32M) {\n+                            throw wallet::InvalidAddressOrKey(\"Bech32m descriptors cannot be imported into legacy wallets\");\n+                        }\n+                        bool range_exists = (mData.range_start && mData.range_end);\n+                        if (!mData.parsed_desc->IsRange() && range_exists) {\n+                            throw wallet::InvalidParameter(\"Range should not be specified for an un-ranged descriptor\");\n+                        } else if (mData.parsed_desc->IsRange()) {\n+                            if (!range_exists) {\n+                                throw wallet::InvalidParameter(\"Descriptor is ranged, please specify the range\");\n+                            }\n+                            RangeDescriptorCheck(mData.range_start, mData.range_end);\n+                        }\n+                    }\n+                    walletModel->wallet().ProcessImport(mData, result.warnings, isScript, keys, timestamp);\n+                    result.success = true;\n+                } catch (const wallet::MiscError& e) {\n+                    result.success = false;\n+                    result.error = e.error;\n+                } catch (const wallet::WalletError& e) {\n+                    result.success = false;\n+                    result.error = e.error;\n+                } catch (const wallet::InvalidAddressOrKey& e) {\n+                    result.success = false;\n+                    result.error = e.error;\n+                } catch (const wallet::InvalidParameter& e) {\n+                    result.success = false;\n+                    result.error = e.error;\n+                } catch (...) {\n+                    result.success = false;\n+                    result.error = \"Missing required fields\";\n+                }\n+\n+                response.push_back(result);\n+\n+                if (!fRescan) {\n+                    continue;\n+                }\n+\n+                // If at least one request was successful then allow rescan.\n+                if (result.success) {\n+                    fRunScan = true;\n+                }\n+\n+                // Get the lowest timestamp.\n+                if (timestamp < nLowestTimestamp) {\n+                    nLowestTimestamp = timestamp;\n+                }\n+            }\n+\n+            if (fRescan && fRunScan && ui->entries->count()) {\n+                int64_t scannedTime = walletModel->wallet().RescanFromTime(nLowestTimestamp, reserver, true);\n+                walletModel->wallet().ReacceptWalletTransactions();\n+\n+                if (walletModel->wallet().IsAbortingRescan()) {\n+                    QMessageBox::critical(this, tr(\"Misc Error\"),\n+                                          tr(\"Rescan aborted by user.\"));\n+\n+                    if (scannedTime > nLowestTimestamp) {\n+                        std::vector <resultpdi> results = response;\n+                        response.clear();\n+\n+                        for (int i = 0; i < ui->entries->count(); ++i) {\n+                            ImportEntry *entry = qobject_cast<ImportEntry *>(ui->entries->itemAt(i)->widget());\n+                            // If key creation date is within the successfully scanned\n+                            // range, or if the import result already has an error set, let\n+                            // the result stand unmodified. Otherwise, replace the result\n+                            // with an error message.\n+                            if (scannedTime <= GetImportTimestamp(entry->getMultiData().timestamp, now) || !results.at(i).error.empty()) {\n+                                response.push_back(results.at(i));\n+                            } else {\n+                                resultpdi result;\n+                                result.success = false;\n+                                result.error = strprintf(\n+                                                \"Rescan failed for key with creation timestamp %d. There was an error reading a \"\n+                                                \"block from time %d, which is after or within %d seconds of key creation, and \"\n+                                                \"could contain transactions pertaining to the key. As a result, transactions \"\n+                                                \"and coins using this key may not appear in the wallet. This error could be \"\n+                                                \"caused by pruning or data corruption (see bitcoind log for details) and could \"\n+                                                \"be dealt with by downloading and rescanning the relevant blocks (see -reindex \"\n+                                                \"option and rescanblockchain RPC).\",\n+                                                GetImportTimestamp(entry->getMultiData().timestamp, now), scannedTime - TIMESTAMP_WINDOW - 1,\n+                                                TIMESTAMP_WINDOW);\n+                                response.push_back(std::move(result));\n+                            }\n+                        }\n+                    }\n+                }\n+            }\n+            for (int i = 0; i < response.size(); i++) {\n+                if (!response[i].success) {\n+                    std::string warning_str;\n+                    if (response[i].warnings.size() != 0) {\n+                        for (auto w: response[i].warnings) {\n+                            warning_str += w + \"\\n\";\n+                        }\n+                    }\n+                    QMessageBox::critical(this, QString::fromStdString(\"Error: input box # \") + QString::number(i),\n+                                          QString::fromStdString(\"Error:\" + response[i].error+\"\\n\"+\n+                                          \"Warnings:\"+\"\\n\" + warning_str));\n+                }\n+            }\n+            break;\n+        }\n+        case importDescriptors: {\n+            wallet::WalletRescanReserver reserver = walletModel->wallet().getReserver();\n+            if (!reserver.reserve()) {\n+                QMessageBox::critical(this, tr(\"Rescan failed\"),\n+                                      tr(\"Wallet is currently rescanning. Abort existing rescan or wait.\"));\n+                break;\n+            }\n+\n+            const int64_t minimum_timestamp = 1;\n+            int64_t now = 0;\n+            int64_t lowest_timestamp = 0;\n+            bool rescan = false;\n+            std::vector<resultpdi> response = {};\n+\n+            WalletModel::UnlockContext ctx(walletModel->requestUnlock());\n+            if (!ctx.isValid()) {\n+                break;\n+            }\n+\n+            CHECK_NONFATAL(walletModel->wallet().chain().findBlock(walletModel->wallet().GetLastBlockHash(),\n+                                                                   interfaces::FoundBlock().time(lowest_timestamp).mtpTime(now)));\n+\n+            // Get all timestamps and extract the lowest timestamp\n+            for (int i = 0; i < ui->entries->count(); ++i) {\n+                ImportEntry *entry = qobject_cast<ImportEntry *>(ui->entries->itemAt(i)->widget());\n+\n+                // This throws an error if \"timestamp\" doesn't exist\n+                wallet::ImportDescriptorData dData = entry->getDescriptorData();\n+                const int64_t timestamp = std::max(GetImportTimestamp(dData.timestamp, now), minimum_timestamp);\n+                resultpdi result;\n+\n+                try {\n+                    // Parse descriptor string\n+                    FlatSigningProvider keys;\n+                    std::string error;\n+                    dData.parsed_desc = Parse(entry->getDesc(), keys, error, /* require_checksum = */ true);\n+                    if (!dData.parsed_desc) {\n+                        throw wallet::InvalidAddressOrKey(error);\n+                    }\n+\n+                    bool range_exists = (dData.range_start && dData.range_end);",
      "path": "src/qt/importdialog.cpp",
      "position": null,
      "original_position": 281,
      "commit_id": "b2b00af1d37dd69c3e64d905984e68ac6a6b2d8f",
      "original_commit_id": "adf1a83caf37b04bfd6c86179b7121ca62d14055",
      "in_reply_to_id": 940640962,
      "user": {
        "login": "KolbyML",
        "id": 31669092,
        "node_id": "MDQ6VXNlcjMxNjY5MDky",
        "avatar_url": "https://avatars.githubusercontent.com/u/31669092?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/KolbyML",
        "html_url": "https://github.com/KolbyML",
        "followers_url": "https://api.github.com/users/KolbyML/followers",
        "following_url": "https://api.github.com/users/KolbyML/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/KolbyML/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/KolbyML/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/KolbyML/subscriptions",
        "organizations_url": "https://api.github.com/users/KolbyML/orgs",
        "repos_url": "https://api.github.com/users/KolbyML/repos",
        "events_url": "https://api.github.com/users/KolbyML/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/KolbyML/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "done",
      "created_at": "2022-08-10T00:34:47Z",
      "updated_at": "2022-08-10T00:34:47Z",
      "html_url": "https://github.com/bitcoin-core/gui/pull/650#discussion_r941910379",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/gui/pulls/comments/941910379"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/gui/pulls/650"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 551,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/gui/pulls/comments/941911000",
      "pull_request_review_id": 1067524978,
      "id": 941911000,
      "node_id": "PRRC_kwDOEEET9c44JGvY",
      "diff_hunk": "@@ -0,0 +1,244 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#if defined(HAVE_CONFIG_H)\n+#include <config/bitcoin-config.h>\n+#endif\n+\n+#include <qt/importentry.h>\n+#include <qt/forms/ui_importentry.h>\n+\n+#include <qt/addressbookpage.h>\n+#include <qt/addresstablemodel.h>\n+#include <qt/guiutil.h>\n+#include <qt/optionsmodel.h>\n+#include <qt/walletmodel.h>\n+#include <util/string.h>\n+#include <wallet/imports.h>\n+\n+#include <QGroupBox>\n+#include <QApplication>\n+#include <QClipboard>\n+\n+ImportEntry::ImportEntry(EntryPage _entryPage, QWidget *parent) :\n+        QStackedWidget(parent),\n+        ui(new Ui::ImportEntry),\n+        model(nullptr),\n+        entryPage(_entryPage)\n+{\n+    ui->setupUi(this);\n+\n+    switch (entryPage) {\n+        case importMultiEntry: {\n+            setCurrentWidget(ui->importMultiEntry);\n+            connect(ui->importScriptPubKeyRadio, &QRadioButton::clicked, this, &ImportEntry::changeImportDialog);\n+            connect(ui->importDescriptorRadio, &QRadioButton::clicked, this, &ImportEntry::changeImportDialog);\n+            connect(ui->hideScriptsButton, &QPushButton::clicked, this, &ImportEntry::useHideScriptsButtonClicked);\n+            connect(ui->deleteMultiButton, &QPushButton::clicked, this, &ImportEntry::deleteMultiClicked);\n+\n+            ui->redeemScriptLabel->hide();\n+            ui->redeemScript->hide();\n+            ui->witnessScriptLabel->hide();\n+            ui->witnessScript->hide();\n+            ui->descLabelMulti->hide();\n+            ui->descMulti->hide();\n+\n+            ui->timestampMulti->setValidator(new Int64_tValidator(0, 0x7FFFFFFFFFFFFFFF, this));\n+            ui->startRangeMulti->setRange(0, 0x7FFFFFFF);\n+            ui->endRangeMulti->setRange(0, 0x7FFFFFFF);\n+            connect(ui->checkboxInternalMulti, &QCheckBox::clicked, this, &ImportEntry::hideLabel);\n+            break;\n+        } case importDescriptorsEntry: {\n+            setCurrentWidget(ui->importDescriptorsEntry);\n+            ui->nextIndexLabel->hide();\n+            ui->hiddenMenu->hide();\n+            ui->timestamp->setValidator(new Int64_tValidator(0, 0x7FFFFFFFFFFFFFFF, this));\n+            ui->nextIndex->setRange(0, 0x7FFFFFFF);\n+            ui->startRange->setRange(0, 0x7FFFFFFF);\n+            ui->endRange->setRange(0, 0x7FFFFFFF);\n+            connect(ui->hiddenButton, &QPushButton::clicked, this, &ImportEntry::usehiddenButtonClicked);\n+            connect(ui->deleteDescriptorButton, &QPushButton::clicked, this, &ImportEntry::deleteDescriptorClicked);\n+            connect(ui->checkboxInternal, &QCheckBox::clicked, this, &ImportEntry::hideLabelDesc);\n+            break;\n+        }\n+    }\n+}\n+\n+ImportEntry::~ImportEntry()\n+{\n+    delete ui;\n+}\n+\n+void ImportEntry::setModel(WalletModel *_model)\n+{\n+    this->model = _model;\n+}\n+\n+void ImportEntry::usehiddenButtonClicked()\n+{\n+    if (!hiddenButtonState) {\n+        ui->nextIndexLabel->show();\n+        ui->hiddenMenu->show();\n+        hiddenButtonState = true;\n+        ui->hiddenButton->setText(\"△\");\n+    } else {\n+        ui->nextIndexLabel->hide();\n+        ui->hiddenMenu->hide();\n+        hiddenButtonState = false;\n+        ui->hiddenButton->setText(\"▽\");\n+    }\n+}\n+\n+void ImportEntry::useHideScriptsButtonClicked()\n+{\n+    if (!hideScriptsButtonState) {\n+        ui->redeemScriptLabel->show();\n+        ui->redeemScript->show();\n+\n+        ui->witnessScriptLabel->show();\n+        ui->witnessScript->show();\n+        hideScriptsButtonState = true;\n+        ui->hideScriptsButton->setText(\"△\");\n+    } else {\n+        ui->redeemScriptLabel->hide();\n+        ui->redeemScript->hide();\n+\n+        ui->witnessScriptLabel->hide();\n+        ui->witnessScript->hide();\n+        hideScriptsButtonState = false;\n+        ui->hideScriptsButton->setText(\"▽\");\n+    }\n+}\n+\n+void ImportEntry::hideLabel()\n+{\n+    if (ui->checkboxInternalMulti->isChecked()) {\n+        ui->labelLabelMulti->hide();\n+        ui->labelMulti->hide();\n+    } else {\n+        ui->labelLabelMulti->show();\n+        ui->labelMulti->show();\n+    }\n+}\n+\n+void ImportEntry::hideLabelDesc()\n+{\n+    if (ui->checkboxInternal->isChecked()) {\n+        ui->labelLabel->hide();\n+        ui->label->hide();\n+    } else {\n+        ui->labelLabel->show();\n+        ui->label->show();\n+    }\n+}\n+\n+void ImportEntry::changeImportDialog()\n+{\n+    if (ui->importScriptPubKeyRadio->isChecked()) {\n+        ui->scriptPubKeyLabel->show();\n+        ui->scriptPubKey->show();\n+        ui->hideScriptsButton->show();\n+\n+        ui->redeemScriptLabel->hide();\n+        ui->redeemScript->hide();\n+\n+        ui->witnessScriptLabel->hide();\n+        ui->witnessScript->hide();\n+\n+        ui->publicKeyLabel->show();\n+        ui->publicKey->show();\n+\n+        ui->descLabelMulti->hide();\n+        ui->descMulti->hide();\n+    } else {\n+        ui->scriptPubKeyLabel->hide();\n+        ui->scriptPubKey->hide();\n+        ui->hideScriptsButton->hide();\n+\n+        ui->redeemScriptLabel->hide();\n+        ui->redeemScript->hide();\n+\n+        ui->witnessScriptLabel->hide();\n+        ui->witnessScript->hide();\n+\n+        ui->publicKeyLabel->hide();\n+        ui->publicKey->hide();\n+        ui->descLabelMulti->show();\n+        ui->descMulti->show();\n+    }\n+}\n+\n+wallet::ImportMultiData ImportEntry::getMultiData()\n+{\n+    wallet::ImportMultiData multiData;\n+\n+    if (ui->importScriptPubKeyRadio->isChecked()) {\n+        multiData.scriptPubKey = ui->scriptPubKey->text().toStdString();\n+        multiData.redeem_script = ui->redeemScript->text().toStdString();\n+        multiData.witness_script = ui->witnessScript->text().toStdString();\n+        multiData.pubkeys = SplitString(ui->publicKey->text().toStdString(), ',');",
      "path": "src/qt/importentry.cpp",
      "position": null,
      "original_position": 180,
      "commit_id": "b2b00af1d37dd69c3e64d905984e68ac6a6b2d8f",
      "original_commit_id": "46fea2598202b093c2035276b232e0f94c7e869f",
      "in_reply_to_id": 940650877,
      "user": {
        "login": "KolbyML",
        "id": 31669092,
        "node_id": "MDQ6VXNlcjMxNjY5MDky",
        "avatar_url": "https://avatars.githubusercontent.com/u/31669092?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/KolbyML",
        "html_url": "https://github.com/KolbyML",
        "followers_url": "https://api.github.com/users/KolbyML/followers",
        "following_url": "https://api.github.com/users/KolbyML/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/KolbyML/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/KolbyML/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/KolbyML/subscriptions",
        "organizations_url": "https://api.github.com/users/KolbyML/orgs",
        "repos_url": "https://api.github.com/users/KolbyML/repos",
        "events_url": "https://api.github.com/users/KolbyML/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/KolbyML/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "done",
      "created_at": "2022-08-10T00:36:48Z",
      "updated_at": "2022-08-10T00:36:48Z",
      "html_url": "https://github.com/bitcoin-core/gui/pull/650#discussion_r941911000",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/gui/pulls/comments/941911000"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/gui/pulls/650"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 180,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/gui/pulls/comments/941917557",
      "pull_request_review_id": 1067532859,
      "id": 941917557,
      "node_id": "PRRC_kwDOEEET9c44JIV1",
      "diff_hunk": "@@ -1375,7 +975,102 @@ RPCHelpMan importmulti()\n \n         for (const UniValue& data : requests.getValues()) {\n             const int64_t timestamp = std::max(GetImportTimestamp(data, now), minimumTimestamp);\n-            const UniValue result = ProcessImport(*pwallet, data, timestamp);\n+            ImportMultiData multi_data = {};\n+            std::vector<std::string> warnings;\n+            UniValue result(UniValue::VOBJ);\n+            try {\n+                multi_data.internal = data.exists(\"internal\") ? data[\"internal\"].get_bool() : false;\n+                // Internal addresses should not have a label\n+                if (multi_data.internal && data.exists(\"label\")) {\n+                    throw InvalidParameter(\"Internal addresses should not have a label\");\n+                }\n+                multi_data.label = data.exists(\"label\") ? data[\"label\"].get_str() : \"\";\n+                multi_data.keypool = data.exists(\"keypool\") ? data[\"keypool\"].get_bool() : false;\n+\n+                multi_data.watch_only = data.exists(\"watchonly\") ? data[\"watchonly\"].get_bool() : false;\n+\n+                multi_data.keys = {};\n+                if (data.exists(\"keys\"))\n+                    for (size_t i = 0; i < data[\"keys\"].get_array().size(); ++i)\n+                        multi_data.keys.push_back(data[\"keys\"].get_array()[i].get_str());\n+\n+                bool isScript;\n+                FlatSigningProvider keys;",
      "path": "src/wallet/rpc/backup.cpp",
      "position": null,
      "original_position": 441,
      "commit_id": "b2b00af1d37dd69c3e64d905984e68ac6a6b2d8f",
      "original_commit_id": "f718e24693f4d322d2a82d6f1f8f6d4add98c415",
      "in_reply_to_id": 940584862,
      "user": {
        "login": "KolbyML",
        "id": 31669092,
        "node_id": "MDQ6VXNlcjMxNjY5MDky",
        "avatar_url": "https://avatars.githubusercontent.com/u/31669092?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/KolbyML",
        "html_url": "https://github.com/KolbyML",
        "followers_url": "https://api.github.com/users/KolbyML/followers",
        "following_url": "https://api.github.com/users/KolbyML/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/KolbyML/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/KolbyML/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/KolbyML/subscriptions",
        "organizations_url": "https://api.github.com/users/KolbyML/orgs",
        "repos_url": "https://api.github.com/users/KolbyML/repos",
        "events_url": "https://api.github.com/users/KolbyML/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/KolbyML/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "done",
      "created_at": "2022-08-10T00:55:54Z",
      "updated_at": "2022-08-10T00:55:54Z",
      "html_url": "https://github.com/bitcoin-core/gui/pull/650#discussion_r941917557",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/gui/pulls/comments/941917557"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/gui/pulls/650"
        }
      },
      "start_line": null,
      "original_start_line": 997,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 948,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/gui/pulls/comments/941998667",
      "pull_request_review_id": 1067638119,
      "id": 941998667,
      "node_id": "PRRC_kwDOEEET9c44JcJL",
      "diff_hunk": "@@ -0,0 +1,302 @@\n+#include <qt/importdialog.h>\n+#include <qt/forms/ui_importdialog.h>\n+\n+#include <qt/guiconstants.h>\n+#include <qt/guiutil.h>\n+#include <key_io.h>\n+#include <qt/walletmodel.h>\n+#include <interfaces/node.h>\n+#include <wallet/wallet.h>\n+#include <QKeyEvent>\n+#include <QMessageBox>\n+#include <QPushButton>\n+#include <iostream>\n+#include <QScrollBar>\n+#include <tinyformat.h>\n+#include <chain.h>\n+\n+ImportDialog::ImportDialog(Page _page, QWidget *parent, WalletModel *walletModel) :\n+    QDialog(parent, GUIUtil::dialog_flags),\n+    ui(new Ui::ImportDialog),\n+    walletModel(walletModel),\n+    page(_page)\n+{\n+    ui->setupUi(this);\n+\n+    switch (page) {\n+        case importPubkey: {\n+            ui->QStackContainer->setCurrentWidget(ui->importKeyPage);\n+            this->setWindowTitle(\"Import Public Key\");\n+            ui->keyLabelIKP->setText(\"Public Key\");\n+            ui->keyEditIKP->setPlaceholderText(\"Enter a Public Key (e.g. 1NS17iag9jJgTHDlVXjvLCEnZuQ3rJDE9L)\");\n+            ui->rescanButtonIKP->setCheckState(Qt::Checked);\n+            break;\n+        } case importPrivkey: {\n+            ui->QStackContainer->setCurrentWidget(ui->importKeyPage);\n+            this->setWindowTitle(\"Import Private Key\");\n+            ui->keyLabelIKP->setText(\"Private Key\");\n+            ui->keyEditIKP->setPlaceholderText(\"Enter a Private Key (e.g. L4sTHokqoFZpcmJgsAG2yxrf2f71v6PYpK2qEkCvc2Fp8VVdMiU3)\");\n+            ui->rescanButtonIKP->setCheckState(Qt::Checked);\n+            break;\n+        } case importAddress: {\n+            ui->QStackContainer->setCurrentWidget(ui->importAddress);\n+            this->setWindowTitle(\"Import Address\");\n+            ui->rescanButtonIA->setCheckState(Qt::Checked);\n+            ui->p2shButtonIA->setCheckState(Qt::Unchecked);\n+            break;\n+        }\n+    }\n+\n+    GUIUtil::handleCloseWindowShortcut(this);\n+}\n+\n+ImportDialog::~ImportDialog()\n+{\n+    delete ui;\n+}\n+\n+void ImportDialog::on_Accept_clicked() {\n+    switch (page) {\n+        case importPubkey: {\n+            std::string strKey = \"\";\n+            strKey.assign(ui->keyEditIKP->text().toStdString().c_str());\n+\n+            if (strKey.empty()) {\n+                QMessageBox::warning(this, tr(\"Error\"), tr(\"Key is empty\"));\n+                break;\n+            }\n+\n+            std::string strLabel;\n+            strLabel.assign(ui->labelEditIKP->text().toStdString().c_str());\n+\n+            // Whether to perform rescan after import\n+            bool fRescan = true;\n+            if (!ui->rescanButtonIKP->isChecked())\n+                fRescan = false;\n+\n+            if (fRescan && walletModel->wallet().chain().havePruned()) {\n+                // Exit early and print an error.\n+                // If a block is pruned after this check, we will import the key(s),\n+                // but fail the rescan with a generic error.\n+                QMessageBox::critical(this, tr(\"Rescan failed\"), tr(\"Rescan is disabled when blocks are pruned\"));\n+                break;\n+            }\n+\n+\n+            wallet::WalletRescanReserver reserver = walletModel->wallet().getReserver();\n+            if (fRescan && !reserver.reserve()) {\n+                QMessageBox::critical(this, tr(\"Rescan failed\"),\n+                                      tr(\"Wallet is currently rescanning. Abort existing rescan or wait.\"));\n+                break;\n+            }\n+\n+            if (!IsHex(strKey)) {\n+                QMessageBox::critical(this, tr(\"Invalid Public Key\"), tr(\"Pubkey must be a hex string\"));\n+                break;\n+            }\n+\n+            std::vector<unsigned char> data(ParseHex(strKey));\n+            CPubKey pubKey(data);\n+            if (!pubKey.IsFullyValid()) {\n+                QMessageBox::critical(this, tr(\"Invalid Public Key\"),\n+                                      tr(\"Pubkey is not a valid public key\"));\n+                break;\n+            }\n+\n+            std::set<CScript> script_pub_keys;\n+            for (const auto &dest: GetAllDestinationsForKey(pubKey)) {\n+                script_pub_keys.insert(GetScriptForDestination(dest));\n+            }\n+\n+            walletModel->wallet().MarkDirty();\n+            walletModel->wallet().ImportScriptPubKeys(strLabel, script_pub_keys, true, true, 1);\n+            walletModel->wallet().ImportPubKeys({pubKey.GetID()}, {{pubKey.GetID(), pubKey}}, {}, false, false, 1);",
      "path": "src/qt/importdialog.cpp",
      "position": null,
      "original_position": 113,
      "commit_id": "b2b00af1d37dd69c3e64d905984e68ac6a6b2d8f",
      "original_commit_id": "3a75af09dbb6c182a86ce71b15fe0824d3c68ac5",
      "in_reply_to_id": 940609847,
      "user": {
        "login": "KolbyML",
        "id": 31669092,
        "node_id": "MDQ6VXNlcjMxNjY5MDky",
        "avatar_url": "https://avatars.githubusercontent.com/u/31669092?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/KolbyML",
        "html_url": "https://github.com/KolbyML",
        "followers_url": "https://api.github.com/users/KolbyML/followers",
        "following_url": "https://api.github.com/users/KolbyML/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/KolbyML/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/KolbyML/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/KolbyML/subscriptions",
        "organizations_url": "https://api.github.com/users/KolbyML/orgs",
        "repos_url": "https://api.github.com/users/KolbyML/repos",
        "events_url": "https://api.github.com/users/KolbyML/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/KolbyML/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "done",
      "created_at": "2022-08-10T04:11:04Z",
      "updated_at": "2022-08-10T04:11:04Z",
      "html_url": "https://github.com/bitcoin-core/gui/pull/650#discussion_r941998667",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/gui/pulls/comments/941998667"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/gui/pulls/650"
        }
      },
      "start_line": null,
      "original_start_line": 106,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 156,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/gui/pulls/comments/941998734",
      "pull_request_review_id": 1067638211,
      "id": 941998734,
      "node_id": "PRRC_kwDOEEET9c44JcKO",
      "diff_hunk": "@@ -0,0 +1,302 @@\n+#include <qt/importdialog.h>\n+#include <qt/forms/ui_importdialog.h>\n+\n+#include <qt/guiconstants.h>\n+#include <qt/guiutil.h>\n+#include <key_io.h>\n+#include <qt/walletmodel.h>\n+#include <interfaces/node.h>\n+#include <wallet/wallet.h>\n+#include <QKeyEvent>\n+#include <QMessageBox>\n+#include <QPushButton>\n+#include <iostream>\n+#include <QScrollBar>\n+#include <tinyformat.h>\n+#include <chain.h>\n+\n+ImportDialog::ImportDialog(Page _page, QWidget *parent, WalletModel *walletModel) :\n+    QDialog(parent, GUIUtil::dialog_flags),\n+    ui(new Ui::ImportDialog),\n+    walletModel(walletModel),\n+    page(_page)\n+{\n+    ui->setupUi(this);\n+\n+    switch (page) {\n+        case importPubkey: {\n+            ui->QStackContainer->setCurrentWidget(ui->importKeyPage);\n+            this->setWindowTitle(\"Import Public Key\");\n+            ui->keyLabelIKP->setText(\"Public Key\");\n+            ui->keyEditIKP->setPlaceholderText(\"Enter a Public Key (e.g. 1NS17iag9jJgTHDlVXjvLCEnZuQ3rJDE9L)\");\n+            ui->rescanButtonIKP->setCheckState(Qt::Checked);\n+            break;\n+        } case importPrivkey: {\n+            ui->QStackContainer->setCurrentWidget(ui->importKeyPage);\n+            this->setWindowTitle(\"Import Private Key\");\n+            ui->keyLabelIKP->setText(\"Private Key\");\n+            ui->keyEditIKP->setPlaceholderText(\"Enter a Private Key (e.g. L4sTHokqoFZpcmJgsAG2yxrf2f71v6PYpK2qEkCvc2Fp8VVdMiU3)\");\n+            ui->rescanButtonIKP->setCheckState(Qt::Checked);\n+            break;\n+        } case importAddress: {\n+            ui->QStackContainer->setCurrentWidget(ui->importAddress);\n+            this->setWindowTitle(\"Import Address\");\n+            ui->rescanButtonIA->setCheckState(Qt::Checked);\n+            ui->p2shButtonIA->setCheckState(Qt::Unchecked);\n+            break;\n+        }\n+    }\n+\n+    GUIUtil::handleCloseWindowShortcut(this);\n+}\n+\n+ImportDialog::~ImportDialog()\n+{\n+    delete ui;\n+}\n+\n+void ImportDialog::on_Accept_clicked() {\n+    switch (page) {\n+        case importPubkey: {\n+            std::string strKey = \"\";\n+            strKey.assign(ui->keyEditIKP->text().toStdString().c_str());\n+\n+            if (strKey.empty()) {\n+                QMessageBox::warning(this, tr(\"Error\"), tr(\"Key is empty\"));\n+                break;\n+            }\n+\n+            std::string strLabel;\n+            strLabel.assign(ui->labelEditIKP->text().toStdString().c_str());\n+\n+            // Whether to perform rescan after import\n+            bool fRescan = true;\n+            if (!ui->rescanButtonIKP->isChecked())\n+                fRescan = false;\n+\n+            if (fRescan && walletModel->wallet().chain().havePruned()) {\n+                // Exit early and print an error.\n+                // If a block is pruned after this check, we will import the key(s),\n+                // but fail the rescan with a generic error.\n+                QMessageBox::critical(this, tr(\"Rescan failed\"), tr(\"Rescan is disabled when blocks are pruned\"));\n+                break;\n+            }\n+\n+\n+            wallet::WalletRescanReserver reserver = walletModel->wallet().getReserver();\n+            if (fRescan && !reserver.reserve()) {\n+                QMessageBox::critical(this, tr(\"Rescan failed\"),\n+                                      tr(\"Wallet is currently rescanning. Abort existing rescan or wait.\"));\n+                break;\n+            }\n+\n+            if (!IsHex(strKey)) {\n+                QMessageBox::critical(this, tr(\"Invalid Public Key\"), tr(\"Pubkey must be a hex string\"));\n+                break;\n+            }\n+\n+            std::vector<unsigned char> data(ParseHex(strKey));\n+            CPubKey pubKey(data);\n+            if (!pubKey.IsFullyValid()) {\n+                QMessageBox::critical(this, tr(\"Invalid Public Key\"),\n+                                      tr(\"Pubkey is not a valid public key\"));\n+                break;\n+            }\n+\n+            std::set<CScript> script_pub_keys;\n+            for (const auto &dest: GetAllDestinationsForKey(pubKey)) {\n+                script_pub_keys.insert(GetScriptForDestination(dest));\n+            }\n+\n+            walletModel->wallet().MarkDirty();\n+            walletModel->wallet().ImportScriptPubKeys(strLabel, script_pub_keys, true, true, 1);\n+            walletModel->wallet().ImportPubKeys({pubKey.GetID()}, {{pubKey.GetID(), pubKey}}, {}, false, false, 1);\n+\n+            if (fRescan) {\n+                int64_t scanned_time = walletModel->wallet().RescanFromTime(0, reserver, true);\n+                if (walletModel->wallet().IsAbortingRescan()) {\n+                    QMessageBox::critical(this, tr(\"Misc Error\"), tr(\"Rescan aborted by user.\"));\n+                    break;\n+                } else if (scanned_time > 0) {\n+                    QMessageBox::critical(this, tr(\"Wallet Error\"),\n+                                          tr(\"Rescan was unable to fully rescan the blockchain. Some transactions may be missing.\"));\n+                    break;\n+                }\n+                walletModel->wallet().ReacceptWalletTransactions();\n+            }\n+            break;\n+        }\n+        case importPrivkey: {\n+            wallet::WalletRescanReserver reserver = walletModel->wallet().getReserver();\n+            bool fRescan = true;\n+            WalletModel::UnlockContext ctx(walletModel->requestUnlock());\n+            if (!ctx.isValid()) {\n+                break;\n+            }\n+\n+            std::string strSecret = \"\";\n+            strSecret.assign(ui->keyEditIKP->text().toStdString().c_str());\n+            if (strSecret.empty()) {\n+                QMessageBox::warning(this, tr(\"Error\"), tr(\"Key is empty\"));\n+                break;\n+            }\n+\n+            std::string strLabel = \"\";\n+            strLabel.assign(ui->labelEditIKP->text().toStdString().c_str());\n+\n+            // Whether to perform rescan after import\n+            if (!ui->rescanButtonIKP->isChecked())\n+                fRescan = false;\n+\n+            if (fRescan && walletModel->wallet().chain().havePruned()) {\n+                // Exit early and print an error.\n+                // If a block is pruned after this check, we will import the key(s),\n+                // but fail the rescan with a generic error.\n+                QMessageBox::critical(this, tr(\"Rescan failed\"), tr(\"Rescan is disabled when blocks are pruned\"));\n+                break;\n+            }\n+\n+            if (fRescan && !reserver.reserve()) {\n+                QMessageBox::critical(this, tr(\"Rescan failed\"),\n+                                      tr(\"Wallet is currently rescanning. Abort existing rescan or wait.\"));\n+                break;\n+            }\n+\n+            CKey key = DecodeSecret(strSecret);\n+            if (!key.IsValid()) {\n+                QMessageBox::critical(this, tr(\"Invalid Private Key\"), tr(\"Invalid private key encoding.\"));\n+                break;\n+            }\n+\n+            CPubKey pubkey = key.GetPubKey();\n+            CHECK_NONFATAL(key.VerifyPubKey(pubkey));\n+            CKeyID vchAddress = pubkey.GetID();\n+            {\n+                walletModel->wallet().MarkDirty();\n+\n+                // We don't know which corresponding address will be used;\n+                // label all new addresses, and label existing addresses if a\n+                // label was passed.\n+                for (const auto &dest: GetAllDestinationsForKey(pubkey)) {\n+                    if (!strLabel.empty() || !walletModel->wallet().FindAddressBookEntry(dest)) {\n+                        walletModel->wallet().setAddressBook(dest, strLabel, \"receive\");\n+                    }\n+                }\n+\n+                // Use timestamp of 1 to scan the whole chain\n+                if (!walletModel->wallet().ImportPrivKeys({{vchAddress, key}}, 1)) {\n+                    QMessageBox::critical(this, tr(\"Wallet Error\"), tr(\"Error adding key to wallet\"));\n+                    break;\n+                }\n+\n+                // Add the wpkh script for this key if possible\n+                if (pubkey.IsCompressed()) {\n+                    walletModel->wallet().ImportScripts({GetScriptForDestination(WitnessV0KeyHash(vchAddress))},\n+                                                        0 /* timestamp */);\n+                }\n+            }",
      "path": "src/qt/importdialog.cpp",
      "position": null,
      "original_position": 197,
      "commit_id": "b2b00af1d37dd69c3e64d905984e68ac6a6b2d8f",
      "original_commit_id": "3a75af09dbb6c182a86ce71b15fe0824d3c68ac5",
      "in_reply_to_id": 940611471,
      "user": {
        "login": "KolbyML",
        "id": 31669092,
        "node_id": "MDQ6VXNlcjMxNjY5MDky",
        "avatar_url": "https://avatars.githubusercontent.com/u/31669092?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/KolbyML",
        "html_url": "https://github.com/KolbyML",
        "followers_url": "https://api.github.com/users/KolbyML/followers",
        "following_url": "https://api.github.com/users/KolbyML/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/KolbyML/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/KolbyML/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/KolbyML/subscriptions",
        "organizations_url": "https://api.github.com/users/KolbyML/orgs",
        "repos_url": "https://api.github.com/users/KolbyML/repos",
        "events_url": "https://api.github.com/users/KolbyML/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/KolbyML/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "done",
      "created_at": "2022-08-10T04:11:17Z",
      "updated_at": "2022-08-10T04:11:17Z",
      "html_url": "https://github.com/bitcoin-core/gui/pull/650#discussion_r941998734",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/gui/pulls/comments/941998734"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/gui/pulls/650"
        }
      },
      "start_line": null,
      "original_start_line": 171,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 193,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/gui/pulls/comments/941998764",
      "pull_request_review_id": 1067638254,
      "id": 941998764,
      "node_id": "PRRC_kwDOEEET9c44JcKs",
      "diff_hunk": "@@ -0,0 +1,302 @@\n+#include <qt/importdialog.h>\n+#include <qt/forms/ui_importdialog.h>\n+\n+#include <qt/guiconstants.h>\n+#include <qt/guiutil.h>\n+#include <key_io.h>\n+#include <qt/walletmodel.h>\n+#include <interfaces/node.h>\n+#include <wallet/wallet.h>\n+#include <QKeyEvent>\n+#include <QMessageBox>\n+#include <QPushButton>\n+#include <iostream>\n+#include <QScrollBar>\n+#include <tinyformat.h>\n+#include <chain.h>\n+\n+ImportDialog::ImportDialog(Page _page, QWidget *parent, WalletModel *walletModel) :\n+    QDialog(parent, GUIUtil::dialog_flags),\n+    ui(new Ui::ImportDialog),\n+    walletModel(walletModel),\n+    page(_page)\n+{\n+    ui->setupUi(this);\n+\n+    switch (page) {\n+        case importPubkey: {\n+            ui->QStackContainer->setCurrentWidget(ui->importKeyPage);\n+            this->setWindowTitle(\"Import Public Key\");\n+            ui->keyLabelIKP->setText(\"Public Key\");\n+            ui->keyEditIKP->setPlaceholderText(\"Enter a Public Key (e.g. 1NS17iag9jJgTHDlVXjvLCEnZuQ3rJDE9L)\");\n+            ui->rescanButtonIKP->setCheckState(Qt::Checked);\n+            break;\n+        } case importPrivkey: {\n+            ui->QStackContainer->setCurrentWidget(ui->importKeyPage);\n+            this->setWindowTitle(\"Import Private Key\");\n+            ui->keyLabelIKP->setText(\"Private Key\");\n+            ui->keyEditIKP->setPlaceholderText(\"Enter a Private Key (e.g. L4sTHokqoFZpcmJgsAG2yxrf2f71v6PYpK2qEkCvc2Fp8VVdMiU3)\");\n+            ui->rescanButtonIKP->setCheckState(Qt::Checked);\n+            break;\n+        } case importAddress: {\n+            ui->QStackContainer->setCurrentWidget(ui->importAddress);\n+            this->setWindowTitle(\"Import Address\");\n+            ui->rescanButtonIA->setCheckState(Qt::Checked);\n+            ui->p2shButtonIA->setCheckState(Qt::Unchecked);\n+            break;\n+        }\n+    }\n+\n+    GUIUtil::handleCloseWindowShortcut(this);\n+}\n+\n+ImportDialog::~ImportDialog()\n+{\n+    delete ui;\n+}\n+\n+void ImportDialog::on_Accept_clicked() {\n+    switch (page) {\n+        case importPubkey: {\n+            std::string strKey = \"\";\n+            strKey.assign(ui->keyEditIKP->text().toStdString().c_str());\n+\n+            if (strKey.empty()) {\n+                QMessageBox::warning(this, tr(\"Error\"), tr(\"Key is empty\"));\n+                break;\n+            }\n+\n+            std::string strLabel;\n+            strLabel.assign(ui->labelEditIKP->text().toStdString().c_str());\n+\n+            // Whether to perform rescan after import\n+            bool fRescan = true;\n+            if (!ui->rescanButtonIKP->isChecked())\n+                fRescan = false;\n+\n+            if (fRescan && walletModel->wallet().chain().havePruned()) {\n+                // Exit early and print an error.\n+                // If a block is pruned after this check, we will import the key(s),\n+                // but fail the rescan with a generic error.\n+                QMessageBox::critical(this, tr(\"Rescan failed\"), tr(\"Rescan is disabled when blocks are pruned\"));\n+                break;\n+            }\n+\n+\n+            wallet::WalletRescanReserver reserver = walletModel->wallet().getReserver();\n+            if (fRescan && !reserver.reserve()) {\n+                QMessageBox::critical(this, tr(\"Rescan failed\"),\n+                                      tr(\"Wallet is currently rescanning. Abort existing rescan or wait.\"));\n+                break;\n+            }\n+\n+            if (!IsHex(strKey)) {\n+                QMessageBox::critical(this, tr(\"Invalid Public Key\"), tr(\"Pubkey must be a hex string\"));\n+                break;\n+            }\n+\n+            std::vector<unsigned char> data(ParseHex(strKey));\n+            CPubKey pubKey(data);\n+            if (!pubKey.IsFullyValid()) {\n+                QMessageBox::critical(this, tr(\"Invalid Public Key\"),\n+                                      tr(\"Pubkey is not a valid public key\"));\n+                break;\n+            }\n+\n+            std::set<CScript> script_pub_keys;\n+            for (const auto &dest: GetAllDestinationsForKey(pubKey)) {\n+                script_pub_keys.insert(GetScriptForDestination(dest));\n+            }\n+\n+            walletModel->wallet().MarkDirty();\n+            walletModel->wallet().ImportScriptPubKeys(strLabel, script_pub_keys, true, true, 1);\n+            walletModel->wallet().ImportPubKeys({pubKey.GetID()}, {{pubKey.GetID(), pubKey}}, {}, false, false, 1);\n+\n+            if (fRescan) {\n+                int64_t scanned_time = walletModel->wallet().RescanFromTime(0, reserver, true);\n+                if (walletModel->wallet().IsAbortingRescan()) {\n+                    QMessageBox::critical(this, tr(\"Misc Error\"), tr(\"Rescan aborted by user.\"));\n+                    break;\n+                } else if (scanned_time > 0) {\n+                    QMessageBox::critical(this, tr(\"Wallet Error\"),\n+                                          tr(\"Rescan was unable to fully rescan the blockchain. Some transactions may be missing.\"));\n+                    break;\n+                }\n+                walletModel->wallet().ReacceptWalletTransactions();\n+            }\n+            break;\n+        }\n+        case importPrivkey: {\n+            wallet::WalletRescanReserver reserver = walletModel->wallet().getReserver();\n+            bool fRescan = true;\n+            WalletModel::UnlockContext ctx(walletModel->requestUnlock());\n+            if (!ctx.isValid()) {\n+                break;\n+            }\n+\n+            std::string strSecret = \"\";\n+            strSecret.assign(ui->keyEditIKP->text().toStdString().c_str());\n+            if (strSecret.empty()) {\n+                QMessageBox::warning(this, tr(\"Error\"), tr(\"Key is empty\"));\n+                break;\n+            }\n+\n+            std::string strLabel = \"\";\n+            strLabel.assign(ui->labelEditIKP->text().toStdString().c_str());\n+\n+            // Whether to perform rescan after import\n+            if (!ui->rescanButtonIKP->isChecked())\n+                fRescan = false;\n+\n+            if (fRescan && walletModel->wallet().chain().havePruned()) {\n+                // Exit early and print an error.\n+                // If a block is pruned after this check, we will import the key(s),\n+                // but fail the rescan with a generic error.\n+                QMessageBox::critical(this, tr(\"Rescan failed\"), tr(\"Rescan is disabled when blocks are pruned\"));\n+                break;\n+            }\n+\n+            if (fRescan && !reserver.reserve()) {\n+                QMessageBox::critical(this, tr(\"Rescan failed\"),\n+                                      tr(\"Wallet is currently rescanning. Abort existing rescan or wait.\"));\n+                break;\n+            }\n+\n+            CKey key = DecodeSecret(strSecret);\n+            if (!key.IsValid()) {\n+                QMessageBox::critical(this, tr(\"Invalid Private Key\"), tr(\"Invalid private key encoding.\"));\n+                break;\n+            }\n+\n+            CPubKey pubkey = key.GetPubKey();\n+            CHECK_NONFATAL(key.VerifyPubKey(pubkey));\n+            CKeyID vchAddress = pubkey.GetID();\n+            {\n+                walletModel->wallet().MarkDirty();\n+\n+                // We don't know which corresponding address will be used;\n+                // label all new addresses, and label existing addresses if a\n+                // label was passed.\n+                for (const auto &dest: GetAllDestinationsForKey(pubkey)) {\n+                    if (!strLabel.empty() || !walletModel->wallet().FindAddressBookEntry(dest)) {\n+                        walletModel->wallet().setAddressBook(dest, strLabel, \"receive\");\n+                    }\n+                }\n+\n+                // Use timestamp of 1 to scan the whole chain\n+                if (!walletModel->wallet().ImportPrivKeys({{vchAddress, key}}, 1)) {\n+                    QMessageBox::critical(this, tr(\"Wallet Error\"), tr(\"Error adding key to wallet\"));\n+                    break;\n+                }\n+\n+                // Add the wpkh script for this key if possible\n+                if (pubkey.IsCompressed()) {\n+                    walletModel->wallet().ImportScripts({GetScriptForDestination(WitnessV0KeyHash(vchAddress))},\n+                                                        0 /* timestamp */);\n+                }\n+            }\n+\n+            if (fRescan) {\n+                int64_t scanned_time = walletModel->wallet().RescanFromTime(0, reserver, true);\n+                if (walletModel->wallet().IsAbortingRescan()) {\n+                    QMessageBox::critical(this, tr(\"Misc Error\"),\n+                                          tr(\"Rescan aborted by user.\"));\n+                    break;\n+                } else if (scanned_time > 0) {\n+                    QMessageBox::critical(this, tr(\"Wallet Error\"),\n+                                          tr(\"Rescan was unable to fully rescan the blockchain. Some transactions may be missing.\"));\n+                    break;\n+                }\n+            }\n+\n+            break;\n+        }\n+        case importAddress: {\n+            std::string strAddress = \"\";\n+            strAddress.assign(ui->keyEditIA->text().toStdString().c_str());\n+            if (strAddress.empty()) {\n+                QMessageBox::warning(this, tr(\"Error\"), tr(\"Address is empty\"));\n+                break;\n+            }\n+\n+\n+            std::string strLabel = \"\";\n+            strLabel.assign(ui->labelEditIA->text().toStdString().c_str());\n+\n+            // Whether to perform rescan after import\n+            bool fRescan = true;\n+            if (!ui->rescanButtonIA->isChecked())\n+                fRescan = false;\n+\n+            if (fRescan && walletModel->wallet().chain().havePruned()) {\n+                // Exit early and print an error.\n+                // If a block is pruned after this check, we will import the key(s),\n+                // but fail the rescan with a generic error.\n+                QMessageBox::critical(this, tr(\"Rescan failed\"), tr(\"Rescan is disabled when blocks are pruned\"));\n+                break;\n+            }\n+\n+            wallet::WalletRescanReserver reserver = walletModel->wallet().getReserver();\n+            if (fRescan && !reserver.reserve()) {\n+                QMessageBox::critical(this, tr(\"Rescan failed\"),\n+                                      tr(\"Wallet is currently rescanning. Abort existing rescan or wait.\"));\n+                break;\n+            }\n+\n+            // Whether to import a p2sh version, too\n+            bool fP2SH = false;\n+            if (ui->p2shButtonIA->isChecked())\n+                fP2SH = true;\n+\n+            CTxDestination dest = DecodeDestination(strAddress);\n+            if (IsValidDestination(dest)) {\n+                if (fP2SH) {\n+                    QMessageBox::critical(this, tr(\"Invalid Address\"),\n+                                          tr(\"Cannot use the p2sh flag with an address - use a script instead\"));\n+                    break;\n+                }\n+                if (OutputTypeFromDestination(dest) == OutputType::BECH32M) {\n+                    QMessageBox::critical(this, tr(\"Invalid Address\"),\n+                                          tr(\"Bech32m addresses cannot be imported into legacy wallets\"));\n+                    break;\n+                }\n+\n+                walletModel->wallet().MarkDirty();\n+\n+                walletModel->wallet().ImportScriptPubKeys(strLabel, {GetScriptForDestination(dest)},\n+                                                          false /* have_solving_data */, true /* apply_label */,\n+                                                          1 /* timestamp */);\n+            } else if (IsHex(strAddress)) {\n+                std::vector<unsigned char> data(ParseHex(strAddress));\n+                CScript redeem_script(data.begin(), data.end());\n+\n+                std::set <CScript> scripts = {redeem_script};\n+                walletModel->wallet().ImportScripts(scripts, 0 /* timestamp */);\n+\n+                if (fP2SH) {\n+                    scripts.insert(GetScriptForDestination(ScriptHash(redeem_script)));\n+                }\n+\n+                walletModel->wallet().ImportScriptPubKeys(strLabel, scripts, false /* have_solving_data */,\n+                                                          true /* apply_label */, 1 /* timestamp */);\n+            } else {\n+                QMessageBox::critical(this, tr(\"Invalid Address\"), tr(\"Invalid Bitcoin address or script\"));\n+                break;\n+            }",
      "path": "src/qt/importdialog.cpp",
      "position": null,
      "original_position": 285,
      "commit_id": "b2b00af1d37dd69c3e64d905984e68ac6a6b2d8f",
      "original_commit_id": "3a75af09dbb6c182a86ce71b15fe0824d3c68ac5",
      "in_reply_to_id": 940614111,
      "user": {
        "login": "KolbyML",
        "id": 31669092,
        "node_id": "MDQ6VXNlcjMxNjY5MDky",
        "avatar_url": "https://avatars.githubusercontent.com/u/31669092?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/KolbyML",
        "html_url": "https://github.com/KolbyML",
        "followers_url": "https://api.github.com/users/KolbyML/followers",
        "following_url": "https://api.github.com/users/KolbyML/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/KolbyML/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/KolbyML/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/KolbyML/subscriptions",
        "organizations_url": "https://api.github.com/users/KolbyML/orgs",
        "repos_url": "https://api.github.com/users/KolbyML/repos",
        "events_url": "https://api.github.com/users/KolbyML/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/KolbyML/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "done",
      "created_at": "2022-08-10T04:11:23Z",
      "updated_at": "2022-08-10T04:11:23Z",
      "html_url": "https://github.com/bitcoin-core/gui/pull/650#discussion_r941998764",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/gui/pulls/comments/941998764"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/gui/pulls/650"
        }
      },
      "start_line": null,
      "original_start_line": 251,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 221,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/gui/pulls/comments/942648648",
      "pull_request_review_id": 1068570160,
      "id": 942648648,
      "node_id": "PRRC_kwDOEEET9c44L61I",
      "diff_hunk": "@@ -298,5 +344,377 @@ void ImportDialog::on_Accept_clicked() {\n             }\n             break;\n         }\n+        case importMulti: {\n+            bool fRescan = true;\n+            if (!ui->rescanButtonIA->isChecked())\n+                fRescan = false;\n+\n+            if (fRescan && walletModel->wallet().chain().havePruned()) {\n+                // Exit early and print an error.\n+                // If a block is pruned after this check, we will import the key(s),\n+                // but fail the rescan with a generic error.\n+                QMessageBox::critical(this, tr(\"Rescan failed\"), tr(\"Rescan is disabled when blocks are pruned\"));\n+                break;\n+            }\n+\n+            wallet::WalletRescanReserver reserver = walletModel->wallet().getReserver();\n+            if (fRescan && !reserver.reserve()) {\n+                QMessageBox::critical(this, tr(\"Rescan failed\"),\n+                                      tr(\"Wallet is currently rescanning. Abort existing rescan or wait.\"));\n+                break;\n+            }",
      "path": "src/qt/importdialog.cpp",
      "position": null,
      "original_position": 95,
      "commit_id": "b2b00af1d37dd69c3e64d905984e68ac6a6b2d8f",
      "original_commit_id": "46fea2598202b093c2035276b232e0f94c7e869f",
      "in_reply_to_id": 940654567,
      "user": {
        "login": "KolbyML",
        "id": 31669092,
        "node_id": "MDQ6VXNlcjMxNjY5MDky",
        "avatar_url": "https://avatars.githubusercontent.com/u/31669092?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/KolbyML",
        "html_url": "https://github.com/KolbyML",
        "followers_url": "https://api.github.com/users/KolbyML/followers",
        "following_url": "https://api.github.com/users/KolbyML/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/KolbyML/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/KolbyML/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/KolbyML/subscriptions",
        "organizations_url": "https://api.github.com/users/KolbyML/orgs",
        "repos_url": "https://api.github.com/users/KolbyML/repos",
        "events_url": "https://api.github.com/users/KolbyML/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/KolbyML/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "done",
      "created_at": "2022-08-10T16:11:15Z",
      "updated_at": "2022-08-10T16:11:15Z",
      "html_url": "https://github.com/bitcoin-core/gui/pull/650#discussion_r942648648",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/gui/pulls/comments/942648648"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/gui/pulls/650"
        }
      },
      "start_line": null,
      "original_start_line": 348,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 301,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/gui/pulls/comments/942665595",
      "pull_request_review_id": 1068594035,
      "id": 942665595,
      "node_id": "PRRC_kwDOEEET9c44L-97",
      "diff_hunk": "@@ -0,0 +1,302 @@\n+#include <qt/importdialog.h>\n+#include <qt/forms/ui_importdialog.h>\n+\n+#include <qt/guiconstants.h>\n+#include <qt/guiutil.h>\n+#include <key_io.h>\n+#include <qt/walletmodel.h>\n+#include <interfaces/node.h>\n+#include <wallet/wallet.h>\n+#include <QKeyEvent>\n+#include <QMessageBox>\n+#include <QPushButton>\n+#include <iostream>\n+#include <QScrollBar>\n+#include <tinyformat.h>\n+#include <chain.h>\n+\n+ImportDialog::ImportDialog(Page _page, QWidget *parent, WalletModel *walletModel) :\n+    QDialog(parent, GUIUtil::dialog_flags),\n+    ui(new Ui::ImportDialog),\n+    walletModel(walletModel),\n+    page(_page)\n+{\n+    ui->setupUi(this);\n+\n+    switch (page) {\n+        case importPubkey: {\n+            ui->QStackContainer->setCurrentWidget(ui->importKeyPage);\n+            this->setWindowTitle(\"Import Public Key\");\n+            ui->keyLabelIKP->setText(\"Public Key\");\n+            ui->keyEditIKP->setPlaceholderText(\"Enter a Public Key (e.g. 1NS17iag9jJgTHDlVXjvLCEnZuQ3rJDE9L)\");\n+            ui->rescanButtonIKP->setCheckState(Qt::Checked);\n+            break;\n+        } case importPrivkey: {\n+            ui->QStackContainer->setCurrentWidget(ui->importKeyPage);\n+            this->setWindowTitle(\"Import Private Key\");\n+            ui->keyLabelIKP->setText(\"Private Key\");\n+            ui->keyEditIKP->setPlaceholderText(\"Enter a Private Key (e.g. L4sTHokqoFZpcmJgsAG2yxrf2f71v6PYpK2qEkCvc2Fp8VVdMiU3)\");\n+            ui->rescanButtonIKP->setCheckState(Qt::Checked);\n+            break;\n+        } case importAddress: {\n+            ui->QStackContainer->setCurrentWidget(ui->importAddress);\n+            this->setWindowTitle(\"Import Address\");\n+            ui->rescanButtonIA->setCheckState(Qt::Checked);\n+            ui->p2shButtonIA->setCheckState(Qt::Unchecked);\n+            break;\n+        }\n+    }\n+\n+    GUIUtil::handleCloseWindowShortcut(this);\n+}\n+\n+ImportDialog::~ImportDialog()\n+{\n+    delete ui;\n+}\n+\n+void ImportDialog::on_Accept_clicked() {\n+    switch (page) {\n+        case importPubkey: {\n+            std::string strKey = \"\";\n+            strKey.assign(ui->keyEditIKP->text().toStdString().c_str());\n+\n+            if (strKey.empty()) {\n+                QMessageBox::warning(this, tr(\"Error\"), tr(\"Key is empty\"));\n+                break;\n+            }\n+\n+            std::string strLabel;\n+            strLabel.assign(ui->labelEditIKP->text().toStdString().c_str());\n+\n+            // Whether to perform rescan after import\n+            bool fRescan = true;\n+            if (!ui->rescanButtonIKP->isChecked())\n+                fRescan = false;\n+\n+            if (fRescan && walletModel->wallet().chain().havePruned()) {\n+                // Exit early and print an error.\n+                // If a block is pruned after this check, we will import the key(s),\n+                // but fail the rescan with a generic error.\n+                QMessageBox::critical(this, tr(\"Rescan failed\"), tr(\"Rescan is disabled when blocks are pruned\"));\n+                break;\n+            }\n+\n+\n+            wallet::WalletRescanReserver reserver = walletModel->wallet().getReserver();\n+            if (fRescan && !reserver.reserve()) {\n+                QMessageBox::critical(this, tr(\"Rescan failed\"),\n+                                      tr(\"Wallet is currently rescanning. Abort existing rescan or wait.\"));\n+                break;\n+            }\n+\n+            if (!IsHex(strKey)) {\n+                QMessageBox::critical(this, tr(\"Invalid Public Key\"), tr(\"Pubkey must be a hex string\"));\n+                break;\n+            }\n+\n+            std::vector<unsigned char> data(ParseHex(strKey));\n+            CPubKey pubKey(data);\n+            if (!pubKey.IsFullyValid()) {\n+                QMessageBox::critical(this, tr(\"Invalid Public Key\"),\n+                                      tr(\"Pubkey is not a valid public key\"));\n+                break;\n+            }\n+\n+            std::set<CScript> script_pub_keys;\n+            for (const auto &dest: GetAllDestinationsForKey(pubKey)) {\n+                script_pub_keys.insert(GetScriptForDestination(dest));\n+            }\n+\n+            walletModel->wallet().MarkDirty();\n+            walletModel->wallet().ImportScriptPubKeys(strLabel, script_pub_keys, true, true, 1);\n+            walletModel->wallet().ImportPubKeys({pubKey.GetID()}, {{pubKey.GetID(), pubKey}}, {}, false, false, 1);\n+\n+            if (fRescan) {\n+                int64_t scanned_time = walletModel->wallet().RescanFromTime(0, reserver, true);\n+                if (walletModel->wallet().IsAbortingRescan()) {\n+                    QMessageBox::critical(this, tr(\"Misc Error\"), tr(\"Rescan aborted by user.\"));\n+                    break;\n+                } else if (scanned_time > 0) {\n+                    QMessageBox::critical(this, tr(\"Wallet Error\"),\n+                                          tr(\"Rescan was unable to fully rescan the blockchain. Some transactions may be missing.\"));\n+                    break;\n+                }\n+                walletModel->wallet().ReacceptWalletTransactions();\n+            }\n+            break;\n+        }\n+        case importPrivkey: {\n+            wallet::WalletRescanReserver reserver = walletModel->wallet().getReserver();\n+            bool fRescan = true;\n+            WalletModel::UnlockContext ctx(walletModel->requestUnlock());\n+            if (!ctx.isValid()) {\n+                break;\n+            }\n+\n+            std::string strSecret = \"\";\n+            strSecret.assign(ui->keyEditIKP->text().toStdString().c_str());\n+            if (strSecret.empty()) {\n+                QMessageBox::warning(this, tr(\"Error\"), tr(\"Key is empty\"));\n+                break;\n+            }\n+\n+            std::string strLabel = \"\";\n+            strLabel.assign(ui->labelEditIKP->text().toStdString().c_str());",
      "path": "src/qt/importdialog.cpp",
      "position": null,
      "original_position": 145,
      "commit_id": "b2b00af1d37dd69c3e64d905984e68ac6a6b2d8f",
      "original_commit_id": "8551f8473549d9e8e415e47a668002c9b61aec46",
      "in_reply_to_id": 940655561,
      "user": {
        "login": "KolbyML",
        "id": 31669092,
        "node_id": "MDQ6VXNlcjMxNjY5MDky",
        "avatar_url": "https://avatars.githubusercontent.com/u/31669092?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/KolbyML",
        "html_url": "https://github.com/KolbyML",
        "followers_url": "https://api.github.com/users/KolbyML/followers",
        "following_url": "https://api.github.com/users/KolbyML/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/KolbyML/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/KolbyML/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/KolbyML/subscriptions",
        "organizations_url": "https://api.github.com/users/KolbyML/orgs",
        "repos_url": "https://api.github.com/users/KolbyML/repos",
        "events_url": "https://api.github.com/users/KolbyML/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/KolbyML/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Done",
      "created_at": "2022-08-10T16:29:01Z",
      "updated_at": "2022-08-10T16:29:02Z",
      "html_url": "https://github.com/bitcoin-core/gui/pull/650#discussion_r942665595",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/gui/pulls/comments/942665595"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/gui/pulls/650"
        }
      },
      "start_line": null,
      "original_start_line": 137,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 191,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/gui/pulls/comments/943147973",
      "pull_request_review_id": 1069245127,
      "id": 943147973,
      "node_id": "PRRC_kwDOEEET9c44N0vF",
      "diff_hunk": "@@ -0,0 +1,69 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_WALLET_IMPORTS_H\n+#define BITCOIN_WALLET_IMPORTS_H\n+\n+#include <string>\n+#include <vector>\n+#include <threadsafety.h>\n+#include <script/descriptor.h>\n+#include <script/signingprovider.h>\n+#include <wallet/wallet.h>\n+\n+namespace wallet {\n+    struct MiscError {\n+        std::string error;\n+        MiscError(std::string error) : error(error) {}\n+    };\n+\n+    struct WalletError {\n+        std::string error;\n+        WalletError(std::string error) : error(error) {}\n+    };\n+\n+    struct InvalidAddressOrKey {\n+        std::string error;\n+        InvalidAddressOrKey(std::string error) : error(error) {}\n+    };\n+\n+    struct InvalidParameter {\n+        std::string error;\n+        InvalidParameter(std::string error) : error(error) {}\n+    };\n+\n+    struct ImportMultiData\n+    {\n+        std::unique_ptr<Descriptor> parsed_desc;\n+        std::string scriptPubKey;\n+        std::string redeem_script;\n+        std::string witness_script;\n+        std::string label;\n+        std::vector<std::string> pubkeys;\n+        std::vector<std::string> keys;\n+        int64_t range_start;\n+        int64_t range_end;\n+        int64_t timestamp;\n+        bool internal;\n+        bool watch_only;\n+        bool keypool;",
      "path": "src/wallet/imports.h",
      "position": null,
      "original_position": 50,
      "commit_id": "b2b00af1d37dd69c3e64d905984e68ac6a6b2d8f",
      "original_commit_id": "f718e24693f4d322d2a82d6f1f8f6d4add98c415",
      "in_reply_to_id": 940640282,
      "user": {
        "login": "KolbyML",
        "id": 31669092,
        "node_id": "MDQ6VXNlcjMxNjY5MDky",
        "avatar_url": "https://avatars.githubusercontent.com/u/31669092?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/KolbyML",
        "html_url": "https://github.com/KolbyML",
        "followers_url": "https://api.github.com/users/KolbyML/followers",
        "following_url": "https://api.github.com/users/KolbyML/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/KolbyML/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/KolbyML/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/KolbyML/subscriptions",
        "organizations_url": "https://api.github.com/users/KolbyML/orgs",
        "repos_url": "https://api.github.com/users/KolbyML/repos",
        "events_url": "https://api.github.com/users/KolbyML/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/KolbyML/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "done",
      "created_at": "2022-08-11T06:50:01Z",
      "updated_at": "2022-08-11T06:50:02Z",
      "html_url": "https://github.com/bitcoin-core/gui/pull/650#discussion_r943147973",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/gui/pulls/comments/943147973"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/gui/pulls/650"
        }
      },
      "start_line": null,
      "original_start_line": 45,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 50,
      "side": "RIGHT"
    }
  ]
}