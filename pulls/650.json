{
  "type": "pull",
  "pull": {
    "url": "https://api.github.com/repos/bitcoin-core/gui/pulls/650",
    "id": 1020574995,
    "node_id": "PR_kwDOEEET9c481L0T",
    "html_url": "https://github.com/bitcoin-core/gui/pull/650",
    "diff_url": "https://github.com/bitcoin-core/gui/pull/650.diff",
    "patch_url": "https://github.com/bitcoin-core/gui/pull/650.patch",
    "issue_url": "https://api.github.com/repos/bitcoin-core/gui/issues/650",
    "commits_url": "https://api.github.com/repos/bitcoin-core/gui/pulls/650/commits",
    "review_comments_url": "https://api.github.com/repos/bitcoin-core/gui/pulls/650/comments",
    "review_comment_url": "https://api.github.com/repos/bitcoin-core/gui/pulls/comments%7B/number%7D",
    "comments_url": "https://api.github.com/repos/bitcoin-core/gui/issues/650/comments",
    "statuses_url": "https://api.github.com/repos/bitcoin-core/gui/statuses/b2b00af1d37dd69c3e64d905984e68ac6a6b2d8f",
    "number": 650,
    "state": "open",
    "locked": false,
    "maintainer_can_modify": true,
    "title": "Add Import to Wallet GUI",
    "user": {
      "login": "KolbyML",
      "id": 31669092,
      "node_id": "MDQ6VXNlcjMxNjY5MDky",
      "avatar_url": "https://avatars.githubusercontent.com/u/31669092?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/KolbyML",
      "html_url": "https://github.com/KolbyML",
      "followers_url": "https://api.github.com/users/KolbyML/followers",
      "following_url": "https://api.github.com/users/KolbyML/following%7B/other_user%7D",
      "gists_url": "https://api.github.com/users/KolbyML/gists%7B/gist_id%7D",
      "starred_url": "https://api.github.com/users/KolbyML/starred%7B/owner%7D%7B/repo%7D",
      "subscriptions_url": "https://api.github.com/users/KolbyML/subscriptions",
      "organizations_url": "https://api.github.com/users/KolbyML/orgs",
      "repos_url": "https://api.github.com/users/KolbyML/repos",
      "events_url": "https://api.github.com/users/KolbyML/events%7B/privacy%7D",
      "received_events_url": "https://api.github.com/users/KolbyML/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "This PR does a few things\r\n- Refactors importmulti and importdescripters RPC code\r\n- Adds functions to interfaces\r\n- Adds GUI's for importpubkey, importprivkey, importaddress, importmulti, and importdescriptors RPCs\r\n- Adds QT Tests for all 5 import GUI's\r\n\r\n#### Things to get this merged\r\n- [ ] get the refactor merge on https://github.com/bitcoin/bitcoin/pull/26840\r\n- [ ] after that is done I will split the GUI PR into (importpubkey, importprivkey, importaddress), importmulti, importdescriptors each PR will have its respective tests. I will rebase to remove the commit for the refactor in those PR's it is in this PR so people can test. This is for easier code review\r\n\r\nThe dialogs are located under File -> Import to Wallet...\r\nThe options vary based on what is supported with your specific wallet type.\r\n\r\n| Dialogs are Located  |  Import Public Key Dialog  |\r\n|---|---|\r\n| ![image](https://user-images.githubusercontent.com/31669092/183477017-0423b0db-f84c-4729-9a73-b47544d88aaf.png)  | ![image](https://user-images.githubusercontent.com/31669092/183477129-0c212955-bbf3-4bc9-8089-cf2c1da7644d.png)  |\r\n\r\n| Import Private Key Dialog  | Import Address Dialog  |\r\n|---|---|\r\n|![image](https://user-images.githubusercontent.com/31669092/183477391-84ea6224-e7f5-4fba-a830-2e7fe3effcec.png)   |  ![image](https://user-images.githubusercontent.com/31669092/183477525-c3ba8cdc-ae0f-4113-8e0b-86db548f1e33.png) |\r\n\r\n| Import Multi Dialog scriptPubKey Tab  | Import Multi Dialog Descriptor Tab  |\r\n|---|---|\r\n| ![image](https://user-images.githubusercontent.com/31669092/183477928-232be9c4-fd64-4a20-91ba-00ebe41d66a6.png)  | ![image](https://user-images.githubusercontent.com/31669092/183478127-0b3c8aed-54d9-4fb4-a583-0a6bb5a46d28.png)  |\r\n\r\n|  Import Descriptors Dialog  |\r\n|---|\r\n|  ![image](https://user-images.githubusercontent.com/31669092/183478374-7f9c174d-0067-4812-9556-9e34e813b362.png) |\r\n\r\nFor Range before I had a lineedit with placeholders begin and end, @achow101 suggested I used QSpinBox, but it doesn't have placeholder text. So Currently if both are default value it counts as no input. It would look very nice if I implemented a custom QAbstractSpinBox with placeholder text, but I am not sure if it is overkill for this PR.",
    "labels": [
      {
        "id": 2145506980,
        "node_id": "MDU6TGFiZWwyMTQ1NTA2OTgw",
        "url": "https://api.github.com/repos/bitcoin-core/gui/labels/Needs%20rebase",
        "name": "Needs rebase",
        "description": "",
        "color": "cccccc",
        "default": false
      },
      {
        "id": 2927906211,
        "node_id": "MDU6TGFiZWwyOTI3OTA2MjEx",
        "url": "https://api.github.com/repos/bitcoin-core/gui/labels/Wallet",
        "name": "Wallet",
        "description": "",
        "color": "08a781",
        "default": false
      },
      {
        "id": 5353934559,
        "node_id": "LA_kwDOEEET9c8AAAABPx6O3w",
        "url": "https://api.github.com/repos/bitcoin-core/gui/labels/CI%20failed",
        "name": "CI failed",
        "color": "ededed",
        "default": false
      }
    ],
    "created_at": "2022-08-08T17:43:21Z",
    "updated_at": "2023-09-21T23:50:32Z",
    "mergeable": false,
    "mergeable_state": "dirty",
    "merge_commit_sha": "7ec595ff2e22059396d8c443ff8df52f11bb0269",
    "assignees": [],
    "requested_reviewers": [],
    "requested_teams": [],
    "rebaseable": false,
    "head": {
      "label": "KolbyML:import-gui-k",
      "ref": "import-gui-k",
      "sha": "b2b00af1d37dd69c3e64d905984e68ac6a6b2d8f",
      "user": {
        "login": "KolbyML",
        "id": 31669092,
        "node_id": "MDQ6VXNlcjMxNjY5MDky",
        "avatar_url": "https://avatars.githubusercontent.com/u/31669092?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/KolbyML",
        "html_url": "https://github.com/KolbyML",
        "followers_url": "https://api.github.com/users/KolbyML/followers",
        "following_url": "https://api.github.com/users/KolbyML/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/KolbyML/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/KolbyML/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/KolbyML/subscriptions",
        "organizations_url": "https://api.github.com/users/KolbyML/orgs",
        "repos_url": "https://api.github.com/users/KolbyML/repos",
        "events_url": "https://api.github.com/users/KolbyML/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/KolbyML/received_events",
        "type": "User",
        "site_admin": false
      },
      "repo": {
        "id": 522632822,
        "node_id": "R_kgDOHya-dg",
        "name": "gui",
        "full_name": "KolbyML/gui",
        "owner": {
          "login": "KolbyML",
          "id": 31669092,
          "node_id": "MDQ6VXNlcjMxNjY5MDky",
          "avatar_url": "https://avatars.githubusercontent.com/u/31669092?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/KolbyML",
          "html_url": "https://github.com/KolbyML",
          "followers_url": "https://api.github.com/users/KolbyML/followers",
          "following_url": "https://api.github.com/users/KolbyML/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/KolbyML/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/KolbyML/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/KolbyML/subscriptions",
          "organizations_url": "https://api.github.com/users/KolbyML/orgs",
          "repos_url": "https://api.github.com/users/KolbyML/repos",
          "events_url": "https://api.github.com/users/KolbyML/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/KolbyML/received_events",
          "type": "User",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/KolbyML/gui",
        "description": "Bitcoin Core GUI staging repository",
        "fork": true,
        "url": "https://api.github.com/repos/KolbyML/gui",
        "archive_url": "https://api.github.com/repos/KolbyML/gui/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/KolbyML/gui/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/KolbyML/gui/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/KolbyML/gui/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/KolbyML/gui/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/KolbyML/gui/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/KolbyML/gui/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/KolbyML/gui/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/KolbyML/gui/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/KolbyML/gui/contributors",
        "deployments_url": "https://api.github.com/repos/KolbyML/gui/deployments",
        "downloads_url": "https://api.github.com/repos/KolbyML/gui/downloads",
        "events_url": "https://api.github.com/repos/KolbyML/gui/events",
        "forks_url": "https://api.github.com/repos/KolbyML/gui/forks",
        "git_commits_url": "https://api.github.com/repos/KolbyML/gui/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/KolbyML/gui/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/KolbyML/gui/git/tags%7B/sha%7D",
        "git_url": "git://github.com/KolbyML/gui.git",
        "issue_comment_url": "https://api.github.com/repos/KolbyML/gui/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/KolbyML/gui/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/KolbyML/gui/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/KolbyML/gui/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/KolbyML/gui/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/KolbyML/gui/languages",
        "merges_url": "https://api.github.com/repos/KolbyML/gui/merges",
        "milestones_url": "https://api.github.com/repos/KolbyML/gui/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/KolbyML/gui/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/KolbyML/gui/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/KolbyML/gui/releases%7B/id%7D",
        "ssh_url": "git@github.com:KolbyML/gui.git",
        "stargazers_url": "https://api.github.com/repos/KolbyML/gui/stargazers",
        "statuses_url": "https://api.github.com/repos/KolbyML/gui/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/KolbyML/gui/subscribers",
        "subscription_url": "https://api.github.com/repos/KolbyML/gui/subscription",
        "tags_url": "https://api.github.com/repos/KolbyML/gui/tags",
        "teams_url": "https://api.github.com/repos/KolbyML/gui/teams",
        "trees_url": "https://api.github.com/repos/KolbyML/gui/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/KolbyML/gui.git",
        "hooks_url": "https://api.github.com/repos/KolbyML/gui/hooks",
        "svn_url": "https://github.com/KolbyML/gui",
        "homepage": "https://github.com/bitcoin/bitcoin",
        "language": "C++",
        "forks_count": 0,
        "stargazers_count": 0,
        "watchers_count": 0,
        "size": 146642,
        "default_branch": "master",
        "open_issues_count": 0,
        "is_template": false,
        "topics": [],
        "has_issues": false,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": true,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2023-05-18T18:36:55Z",
        "created_at": "2022-08-08T16:48:44Z",
        "updated_at": "2023-01-25T15:04:20Z",
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "base": {
      "label": "bitcoin-core:master",
      "ref": "master",
      "sha": "6cc136bbd36f859a16e469bb5c016d06c19bcd50",
      "user": {
        "login": "bitcoin-core",
        "id": 13464320,
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjEzNDY0MzIw",
        "avatar_url": "https://avatars.githubusercontent.com/u/13464320?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitcoin-core",
        "html_url": "https://github.com/bitcoin-core",
        "followers_url": "https://api.github.com/users/bitcoin-core/followers",
        "following_url": "https://api.github.com/users/bitcoin-core/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bitcoin-core/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bitcoin-core/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bitcoin-core/subscriptions",
        "organizations_url": "https://api.github.com/users/bitcoin-core/orgs",
        "repos_url": "https://api.github.com/users/bitcoin-core/repos",
        "events_url": "https://api.github.com/users/bitcoin-core/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bitcoin-core/received_events",
        "type": "Organization",
        "site_admin": false
      },
      "repo": {
        "id": 272700405,
        "node_id": "MDEwOlJlcG9zaXRvcnkyNzI3MDA0MDU=",
        "name": "gui",
        "full_name": "bitcoin-core/gui",
        "owner": {
          "login": "bitcoin-core",
          "id": 13464320,
          "node_id": "MDEyOk9yZ2FuaXphdGlvbjEzNDY0MzIw",
          "avatar_url": "https://avatars.githubusercontent.com/u/13464320?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/bitcoin-core",
          "html_url": "https://github.com/bitcoin-core",
          "followers_url": "https://api.github.com/users/bitcoin-core/followers",
          "following_url": "https://api.github.com/users/bitcoin-core/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/bitcoin-core/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/bitcoin-core/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/bitcoin-core/subscriptions",
          "organizations_url": "https://api.github.com/users/bitcoin-core/orgs",
          "repos_url": "https://api.github.com/users/bitcoin-core/repos",
          "events_url": "https://api.github.com/users/bitcoin-core/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/bitcoin-core/received_events",
          "type": "Organization",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/bitcoin-core/gui",
        "description": "Bitcoin Core GUI staging repository",
        "fork": false,
        "url": "https://api.github.com/repos/bitcoin-core/gui",
        "archive_url": "https://api.github.com/repos/bitcoin-core/gui/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/bitcoin-core/gui/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/bitcoin-core/gui/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/bitcoin-core/gui/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/bitcoin-core/gui/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/bitcoin-core/gui/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/bitcoin-core/gui/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/bitcoin-core/gui/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/bitcoin-core/gui/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/bitcoin-core/gui/contributors",
        "deployments_url": "https://api.github.com/repos/bitcoin-core/gui/deployments",
        "downloads_url": "https://api.github.com/repos/bitcoin-core/gui/downloads",
        "events_url": "https://api.github.com/repos/bitcoin-core/gui/events",
        "forks_url": "https://api.github.com/repos/bitcoin-core/gui/forks",
        "git_commits_url": "https://api.github.com/repos/bitcoin-core/gui/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/bitcoin-core/gui/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/bitcoin-core/gui/git/tags%7B/sha%7D",
        "git_url": "git://github.com/bitcoin-core/gui.git",
        "issue_comment_url": "https://api.github.com/repos/bitcoin-core/gui/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/bitcoin-core/gui/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/bitcoin-core/gui/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/bitcoin-core/gui/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/bitcoin-core/gui/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/bitcoin-core/gui/languages",
        "merges_url": "https://api.github.com/repos/bitcoin-core/gui/merges",
        "milestones_url": "https://api.github.com/repos/bitcoin-core/gui/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/bitcoin-core/gui/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/bitcoin-core/gui/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/bitcoin-core/gui/releases%7B/id%7D",
        "ssh_url": "git@github.com:bitcoin-core/gui.git",
        "stargazers_url": "https://api.github.com/repos/bitcoin-core/gui/stargazers",
        "statuses_url": "https://api.github.com/repos/bitcoin-core/gui/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/bitcoin-core/gui/subscribers",
        "subscription_url": "https://api.github.com/repos/bitcoin-core/gui/subscription",
        "tags_url": "https://api.github.com/repos/bitcoin-core/gui/tags",
        "teams_url": "https://api.github.com/repos/bitcoin-core/gui/teams",
        "trees_url": "https://api.github.com/repos/bitcoin-core/gui/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/bitcoin-core/gui.git",
        "hooks_url": "https://api.github.com/repos/bitcoin-core/gui/hooks",
        "svn_url": "https://github.com/bitcoin-core/gui",
        "homepage": "https://github.com/bitcoin/bitcoin",
        "language": "C++",
        "forks_count": 277,
        "stargazers_count": 508,
        "watchers_count": 508,
        "size": 153029,
        "default_branch": "master",
        "open_issues_count": 163,
        "is_template": false,
        "topics": [],
        "has_issues": true,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": true,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2023-09-21T16:33:08Z",
        "created_at": "2020-06-16T12:20:07Z",
        "updated_at": "2023-09-12T12:06:40Z",
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin-core/gui/pulls/650"
      }
    },
    "author_association": "CONTRIBUTOR",
    "draft": false,
    "additions": 4395,
    "deletions": 626,
    "changed_files": 31,
    "commits": 7,
    "review_comments": 40,
    "comments": 9
  },
  "events": [
    {
      "event": "mentioned",
      "id": 7149081452,
      "node_id": "MEE_lADOEEET9c5PZ5y9zwAAAAGqHlNs",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/7149081452",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-08T17:43:22Z"
    },
    {
      "event": "subscribed",
      "id": 7149081457,
      "node_id": "SE_lADOEEET9c5PZ5y9zwAAAAGqHlNx",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/7149081457",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-08T17:43:22Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7149271471,
      "node_id": "HRFPE_lADOEEET9c5PZ5y9zwAAAAGqITmv",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/7149271471",
      "actor": {
        "login": "KolbyML",
        "id": 31669092,
        "node_id": "MDQ6VXNlcjMxNjY5MDky",
        "avatar_url": "https://avatars.githubusercontent.com/u/31669092?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/KolbyML",
        "html_url": "https://github.com/KolbyML",
        "followers_url": "https://api.github.com/users/KolbyML/followers",
        "following_url": "https://api.github.com/users/KolbyML/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/KolbyML/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/KolbyML/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/KolbyML/subscriptions",
        "organizations_url": "https://api.github.com/users/KolbyML/orgs",
        "repos_url": "https://api.github.com/users/KolbyML/repos",
        "events_url": "https://api.github.com/users/KolbyML/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/KolbyML/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-08T18:13:26Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7149338097,
      "node_id": "HRFPE_lADOEEET9c5PZ5y9zwAAAAGqIj3x",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/7149338097",
      "actor": {
        "login": "KolbyML",
        "id": 31669092,
        "node_id": "MDQ6VXNlcjMxNjY5MDky",
        "avatar_url": "https://avatars.githubusercontent.com/u/31669092?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/KolbyML",
        "html_url": "https://github.com/KolbyML",
        "followers_url": "https://api.github.com/users/KolbyML/followers",
        "following_url": "https://api.github.com/users/KolbyML/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/KolbyML/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/KolbyML/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/KolbyML/subscriptions",
        "organizations_url": "https://api.github.com/users/KolbyML/orgs",
        "repos_url": "https://api.github.com/users/KolbyML/repos",
        "events_url": "https://api.github.com/users/KolbyML/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/KolbyML/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-08T18:23:28Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7149583149,
      "node_id": "HRFPE_lADOEEET9c5PZ5y9zwAAAAGqJfst",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/7149583149",
      "actor": {
        "login": "KolbyML",
        "id": 31669092,
        "node_id": "MDQ6VXNlcjMxNjY5MDky",
        "avatar_url": "https://avatars.githubusercontent.com/u/31669092?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/KolbyML",
        "html_url": "https://github.com/KolbyML",
        "followers_url": "https://api.github.com/users/KolbyML/followers",
        "following_url": "https://api.github.com/users/KolbyML/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/KolbyML/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/KolbyML/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/KolbyML/subscriptions",
        "organizations_url": "https://api.github.com/users/KolbyML/orgs",
        "repos_url": "https://api.github.com/users/KolbyML/repos",
        "events_url": "https://api.github.com/users/KolbyML/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/KolbyML/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-08T19:00:57Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7150091459,
      "node_id": "HRFPE_lADOEEET9c5PZ5y9zwAAAAGqLbzD",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/7150091459",
      "actor": {
        "login": "KolbyML",
        "id": 31669092,
        "node_id": "MDQ6VXNlcjMxNjY5MDky",
        "avatar_url": "https://avatars.githubusercontent.com/u/31669092?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/KolbyML",
        "html_url": "https://github.com/KolbyML",
        "followers_url": "https://api.github.com/users/KolbyML/followers",
        "following_url": "https://api.github.com/users/KolbyML/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/KolbyML/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/KolbyML/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/KolbyML/subscriptions",
        "organizations_url": "https://api.github.com/users/KolbyML/orgs",
        "repos_url": "https://api.github.com/users/KolbyML/repos",
        "events_url": "https://api.github.com/users/KolbyML/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/KolbyML/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-08T20:21:57Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7150214543,
      "node_id": "HRFPE_lADOEEET9c5PZ5y9zwAAAAGqL52P",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/7150214543",
      "actor": {
        "login": "KolbyML",
        "id": 31669092,
        "node_id": "MDQ6VXNlcjMxNjY5MDky",
        "avatar_url": "https://avatars.githubusercontent.com/u/31669092?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/KolbyML",
        "html_url": "https://github.com/KolbyML",
        "followers_url": "https://api.github.com/users/KolbyML/followers",
        "following_url": "https://api.github.com/users/KolbyML/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/KolbyML/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/KolbyML/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/KolbyML/subscriptions",
        "organizations_url": "https://api.github.com/users/KolbyML/orgs",
        "repos_url": "https://api.github.com/users/KolbyML/repos",
        "events_url": "https://api.github.com/users/KolbyML/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/KolbyML/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-08T20:43:14Z"
    },
    {
      "event": "reviewed",
      "id": 1065661283,
      "node_id": "PRR_kwDOEEET9c4_hLNj",
      "url": null,
      "actor": null,
      "commit_id": "46fea2598202b093c2035276b232e0f94c7e869f",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "While the imports mostly work, I noticed that there is no feedback when it is successful. What I expected to happen was a dialog indicating success, and then the import dialog would close itself too.\r\n\r\nI think you should also look into adapting a couple of the importmulti tests to be GUI unit tests that can test these new dialogs. It would be very helpful to have some automated testing of all of the things here rather than trying to do it by hand.\r\n\r\nNote: @KolbyML is my Summer of Bitcoin mentee.",
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/gui/pull/650#pullrequestreview-1065661283",
      "submitted_at": "2022-08-08T20:56:15Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin-core/gui/pulls/650"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7150286182,
      "node_id": "HRFPE_lADOEEET9c5PZ5y9zwAAAAGqMLVm",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/7150286182",
      "actor": {
        "login": "KolbyML",
        "id": 31669092,
        "node_id": "MDQ6VXNlcjMxNjY5MDky",
        "avatar_url": "https://avatars.githubusercontent.com/u/31669092?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/KolbyML",
        "html_url": "https://github.com/KolbyML",
        "followers_url": "https://api.github.com/users/KolbyML/followers",
        "following_url": "https://api.github.com/users/KolbyML/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/KolbyML/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/KolbyML/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/KolbyML/subscriptions",
        "organizations_url": "https://api.github.com/users/KolbyML/orgs",
        "repos_url": "https://api.github.com/users/KolbyML/repos",
        "events_url": "https://api.github.com/users/KolbyML/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/KolbyML/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-08T20:56:38Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7150359809,
      "node_id": "HRFPE_lADOEEET9c5PZ5y9zwAAAAGqMdUB",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/7150359809",
      "actor": {
        "login": "KolbyML",
        "id": 31669092,
        "node_id": "MDQ6VXNlcjMxNjY5MDky",
        "avatar_url": "https://avatars.githubusercontent.com/u/31669092?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/KolbyML",
        "html_url": "https://github.com/KolbyML",
        "followers_url": "https://api.github.com/users/KolbyML/followers",
        "following_url": "https://api.github.com/users/KolbyML/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/KolbyML/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/KolbyML/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/KolbyML/subscriptions",
        "organizations_url": "https://api.github.com/users/KolbyML/orgs",
        "repos_url": "https://api.github.com/users/KolbyML/repos",
        "events_url": "https://api.github.com/users/KolbyML/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/KolbyML/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-08T21:09:33Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7150576682,
      "node_id": "HRFPE_lADOEEET9c5PZ5y9zwAAAAGqNSQq",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/7150576682",
      "actor": {
        "login": "KolbyML",
        "id": 31669092,
        "node_id": "MDQ6VXNlcjMxNjY5MDky",
        "avatar_url": "https://avatars.githubusercontent.com/u/31669092?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/KolbyML",
        "html_url": "https://github.com/KolbyML",
        "followers_url": "https://api.github.com/users/KolbyML/followers",
        "following_url": "https://api.github.com/users/KolbyML/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/KolbyML/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/KolbyML/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/KolbyML/subscriptions",
        "organizations_url": "https://api.github.com/users/KolbyML/orgs",
        "repos_url": "https://api.github.com/users/KolbyML/repos",
        "events_url": "https://api.github.com/users/KolbyML/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/KolbyML/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-08T21:50:04Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7150583550,
      "node_id": "HRFPE_lADOEEET9c5PZ5y9zwAAAAGqNT7-",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/7150583550",
      "actor": {
        "login": "KolbyML",
        "id": 31669092,
        "node_id": "MDQ6VXNlcjMxNjY5MDky",
        "avatar_url": "https://avatars.githubusercontent.com/u/31669092?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/KolbyML",
        "html_url": "https://github.com/KolbyML",
        "followers_url": "https://api.github.com/users/KolbyML/followers",
        "following_url": "https://api.github.com/users/KolbyML/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/KolbyML/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/KolbyML/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/KolbyML/subscriptions",
        "organizations_url": "https://api.github.com/users/KolbyML/orgs",
        "repos_url": "https://api.github.com/users/KolbyML/repos",
        "events_url": "https://api.github.com/users/KolbyML/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/KolbyML/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-08T21:51:22Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7150733876,
      "node_id": "HRFPE_lADOEEET9c5PZ5y9zwAAAAGqN4o0",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/7150733876",
      "actor": {
        "login": "KolbyML",
        "id": 31669092,
        "node_id": "MDQ6VXNlcjMxNjY5MDky",
        "avatar_url": "https://avatars.githubusercontent.com/u/31669092?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/KolbyML",
        "html_url": "https://github.com/KolbyML",
        "followers_url": "https://api.github.com/users/KolbyML/followers",
        "following_url": "https://api.github.com/users/KolbyML/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/KolbyML/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/KolbyML/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/KolbyML/subscriptions",
        "organizations_url": "https://api.github.com/users/KolbyML/orgs",
        "repos_url": "https://api.github.com/users/KolbyML/repos",
        "events_url": "https://api.github.com/users/KolbyML/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/KolbyML/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-08T22:23:01Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7150812769,
      "node_id": "HRFPE_lADOEEET9c5PZ5y9zwAAAAGqOL5h",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/7150812769",
      "actor": {
        "login": "KolbyML",
        "id": 31669092,
        "node_id": "MDQ6VXNlcjMxNjY5MDky",
        "avatar_url": "https://avatars.githubusercontent.com/u/31669092?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/KolbyML",
        "html_url": "https://github.com/KolbyML",
        "followers_url": "https://api.github.com/users/KolbyML/followers",
        "following_url": "https://api.github.com/users/KolbyML/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/KolbyML/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/KolbyML/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/KolbyML/subscriptions",
        "organizations_url": "https://api.github.com/users/KolbyML/orgs",
        "repos_url": "https://api.github.com/users/KolbyML/repos",
        "events_url": "https://api.github.com/users/KolbyML/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/KolbyML/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-08T22:39:04Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7150893568,
      "node_id": "HRFPE_lADOEEET9c5PZ5y9zwAAAAGqOfoA",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/7150893568",
      "actor": {
        "login": "KolbyML",
        "id": 31669092,
        "node_id": "MDQ6VXNlcjMxNjY5MDky",
        "avatar_url": "https://avatars.githubusercontent.com/u/31669092?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/KolbyML",
        "html_url": "https://github.com/KolbyML",
        "followers_url": "https://api.github.com/users/KolbyML/followers",
        "following_url": "https://api.github.com/users/KolbyML/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/KolbyML/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/KolbyML/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/KolbyML/subscriptions",
        "organizations_url": "https://api.github.com/users/KolbyML/orgs",
        "repos_url": "https://api.github.com/users/KolbyML/repos",
        "events_url": "https://api.github.com/users/KolbyML/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/KolbyML/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-08T22:58:58Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7158036169,
      "node_id": "HRFPE_lADOEEET9c5PZ5y9zwAAAAGqpvbJ",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/7158036169",
      "actor": {
        "login": "KolbyML",
        "id": 31669092,
        "node_id": "MDQ6VXNlcjMxNjY5MDky",
        "avatar_url": "https://avatars.githubusercontent.com/u/31669092?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/KolbyML",
        "html_url": "https://github.com/KolbyML",
        "followers_url": "https://api.github.com/users/KolbyML/followers",
        "following_url": "https://api.github.com/users/KolbyML/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/KolbyML/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/KolbyML/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/KolbyML/subscriptions",
        "organizations_url": "https://api.github.com/users/KolbyML/orgs",
        "repos_url": "https://api.github.com/users/KolbyML/repos",
        "events_url": "https://api.github.com/users/KolbyML/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/KolbyML/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-09T18:42:49Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7158046441,
      "node_id": "HRFPE_lADOEEET9c5PZ5y9zwAAAAGqpx7p",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/7158046441",
      "actor": {
        "login": "KolbyML",
        "id": 31669092,
        "node_id": "MDQ6VXNlcjMxNjY5MDky",
        "avatar_url": "https://avatars.githubusercontent.com/u/31669092?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/KolbyML",
        "html_url": "https://github.com/KolbyML",
        "followers_url": "https://api.github.com/users/KolbyML/followers",
        "following_url": "https://api.github.com/users/KolbyML/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/KolbyML/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/KolbyML/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/KolbyML/subscriptions",
        "organizations_url": "https://api.github.com/users/KolbyML/orgs",
        "repos_url": "https://api.github.com/users/KolbyML/repos",
        "events_url": "https://api.github.com/users/KolbyML/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/KolbyML/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-09T18:44:32Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7158056289,
      "node_id": "HRFPE_lADOEEET9c5PZ5y9zwAAAAGqp0Vh",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/7158056289",
      "actor": {
        "login": "KolbyML",
        "id": 31669092,
        "node_id": "MDQ6VXNlcjMxNjY5MDky",
        "avatar_url": "https://avatars.githubusercontent.com/u/31669092?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/KolbyML",
        "html_url": "https://github.com/KolbyML",
        "followers_url": "https://api.github.com/users/KolbyML/followers",
        "following_url": "https://api.github.com/users/KolbyML/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/KolbyML/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/KolbyML/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/KolbyML/subscriptions",
        "organizations_url": "https://api.github.com/users/KolbyML/orgs",
        "repos_url": "https://api.github.com/users/KolbyML/repos",
        "events_url": "https://api.github.com/users/KolbyML/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/KolbyML/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-09T18:46:11Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7158071257,
      "node_id": "HRFPE_lADOEEET9c5PZ5y9zwAAAAGqp3_Z",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/7158071257",
      "actor": {
        "login": "KolbyML",
        "id": 31669092,
        "node_id": "MDQ6VXNlcjMxNjY5MDky",
        "avatar_url": "https://avatars.githubusercontent.com/u/31669092?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/KolbyML",
        "html_url": "https://github.com/KolbyML",
        "followers_url": "https://api.github.com/users/KolbyML/followers",
        "following_url": "https://api.github.com/users/KolbyML/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/KolbyML/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/KolbyML/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/KolbyML/subscriptions",
        "organizations_url": "https://api.github.com/users/KolbyML/orgs",
        "repos_url": "https://api.github.com/users/KolbyML/repos",
        "events_url": "https://api.github.com/users/KolbyML/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/KolbyML/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-09T18:48:33Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7158102128,
      "node_id": "HRFPE_lADOEEET9c5PZ5y9zwAAAAGqp_hw",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/7158102128",
      "actor": {
        "login": "KolbyML",
        "id": 31669092,
        "node_id": "MDQ6VXNlcjMxNjY5MDky",
        "avatar_url": "https://avatars.githubusercontent.com/u/31669092?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/KolbyML",
        "html_url": "https://github.com/KolbyML",
        "followers_url": "https://api.github.com/users/KolbyML/followers",
        "following_url": "https://api.github.com/users/KolbyML/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/KolbyML/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/KolbyML/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/KolbyML/subscriptions",
        "organizations_url": "https://api.github.com/users/KolbyML/orgs",
        "repos_url": "https://api.github.com/users/KolbyML/repos",
        "events_url": "https://api.github.com/users/KolbyML/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/KolbyML/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-09T18:53:41Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7158292714,
      "node_id": "HRFPE_lADOEEET9c5PZ5y9zwAAAAGqquDq",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/7158292714",
      "actor": {
        "login": "KolbyML",
        "id": 31669092,
        "node_id": "MDQ6VXNlcjMxNjY5MDky",
        "avatar_url": "https://avatars.githubusercontent.com/u/31669092?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/KolbyML",
        "html_url": "https://github.com/KolbyML",
        "followers_url": "https://api.github.com/users/KolbyML/followers",
        "following_url": "https://api.github.com/users/KolbyML/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/KolbyML/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/KolbyML/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/KolbyML/subscriptions",
        "organizations_url": "https://api.github.com/users/KolbyML/orgs",
        "repos_url": "https://api.github.com/users/KolbyML/repos",
        "events_url": "https://api.github.com/users/KolbyML/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/KolbyML/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-09T19:25:55Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7158469174,
      "node_id": "HRFPE_lADOEEET9c5PZ5y9zwAAAAGqrZI2",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/7158469174",
      "actor": {
        "login": "KolbyML",
        "id": 31669092,
        "node_id": "MDQ6VXNlcjMxNjY5MDky",
        "avatar_url": "https://avatars.githubusercontent.com/u/31669092?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/KolbyML",
        "html_url": "https://github.com/KolbyML",
        "followers_url": "https://api.github.com/users/KolbyML/followers",
        "following_url": "https://api.github.com/users/KolbyML/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/KolbyML/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/KolbyML/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/KolbyML/subscriptions",
        "organizations_url": "https://api.github.com/users/KolbyML/orgs",
        "repos_url": "https://api.github.com/users/KolbyML/repos",
        "events_url": "https://api.github.com/users/KolbyML/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/KolbyML/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-09T19:56:32Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7158646407,
      "node_id": "HRFPE_lADOEEET9c5PZ5y9zwAAAAGqsEaH",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/7158646407",
      "actor": {
        "login": "KolbyML",
        "id": 31669092,
        "node_id": "MDQ6VXNlcjMxNjY5MDky",
        "avatar_url": "https://avatars.githubusercontent.com/u/31669092?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/KolbyML",
        "html_url": "https://github.com/KolbyML",
        "followers_url": "https://api.github.com/users/KolbyML/followers",
        "following_url": "https://api.github.com/users/KolbyML/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/KolbyML/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/KolbyML/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/KolbyML/subscriptions",
        "organizations_url": "https://api.github.com/users/KolbyML/orgs",
        "repos_url": "https://api.github.com/users/KolbyML/repos",
        "events_url": "https://api.github.com/users/KolbyML/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/KolbyML/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-09T20:27:19Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7158652992,
      "node_id": "HRFPE_lADOEEET9c5PZ5y9zwAAAAGqsGBA",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/7158652992",
      "actor": {
        "login": "KolbyML",
        "id": 31669092,
        "node_id": "MDQ6VXNlcjMxNjY5MDky",
        "avatar_url": "https://avatars.githubusercontent.com/u/31669092?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/KolbyML",
        "html_url": "https://github.com/KolbyML",
        "followers_url": "https://api.github.com/users/KolbyML/followers",
        "following_url": "https://api.github.com/users/KolbyML/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/KolbyML/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/KolbyML/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/KolbyML/subscriptions",
        "organizations_url": "https://api.github.com/users/KolbyML/orgs",
        "repos_url": "https://api.github.com/users/KolbyML/repos",
        "events_url": "https://api.github.com/users/KolbyML/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/KolbyML/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-09T20:28:26Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7158775914,
      "node_id": "HRFPE_lADOEEET9c5PZ5y9zwAAAAGqskBq",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/7158775914",
      "actor": {
        "login": "KolbyML",
        "id": 31669092,
        "node_id": "MDQ6VXNlcjMxNjY5MDky",
        "avatar_url": "https://avatars.githubusercontent.com/u/31669092?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/KolbyML",
        "html_url": "https://github.com/KolbyML",
        "followers_url": "https://api.github.com/users/KolbyML/followers",
        "following_url": "https://api.github.com/users/KolbyML/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/KolbyML/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/KolbyML/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/KolbyML/subscriptions",
        "organizations_url": "https://api.github.com/users/KolbyML/orgs",
        "repos_url": "https://api.github.com/users/KolbyML/repos",
        "events_url": "https://api.github.com/users/KolbyML/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/KolbyML/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-09T20:49:52Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7158961110,
      "node_id": "HRFPE_lADOEEET9c5PZ5y9zwAAAAGqtRPW",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/7158961110",
      "actor": {
        "login": "KolbyML",
        "id": 31669092,
        "node_id": "MDQ6VXNlcjMxNjY5MDky",
        "avatar_url": "https://avatars.githubusercontent.com/u/31669092?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/KolbyML",
        "html_url": "https://github.com/KolbyML",
        "followers_url": "https://api.github.com/users/KolbyML/followers",
        "following_url": "https://api.github.com/users/KolbyML/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/KolbyML/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/KolbyML/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/KolbyML/subscriptions",
        "organizations_url": "https://api.github.com/users/KolbyML/orgs",
        "repos_url": "https://api.github.com/users/KolbyML/repos",
        "events_url": "https://api.github.com/users/KolbyML/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/KolbyML/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-09T21:25:45Z"
    },
    {
      "event": "commented",
      "id": 1209915707,
      "node_id": "IC_kwDOEEET9c5IHdk7",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/comments/1209915707",
      "actor": {
        "login": "w0xlt",
        "id": 94266259,
        "node_id": "U_kgDOBZ5jkw",
        "avatar_url": "https://avatars.githubusercontent.com/u/94266259?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/w0xlt",
        "html_url": "https://github.com/w0xlt",
        "followers_url": "https://api.github.com/users/w0xlt/followers",
        "following_url": "https://api.github.com/users/w0xlt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/w0xlt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/w0xlt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/w0xlt/subscriptions",
        "organizations_url": "https://api.github.com/users/w0xlt/orgs",
        "repos_url": "https://api.github.com/users/w0xlt/repos",
        "events_url": "https://api.github.com/users/w0xlt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/w0xlt/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-09T21:30:59Z",
      "updated_at": "2022-08-09T21:30:59Z",
      "author_association": "CONTRIBUTOR",
      "body": "Concept ACK.\r\nPerhaps it would be better to split each menu item into its own PR.",
      "user": {
        "login": "w0xlt",
        "id": 94266259,
        "node_id": "U_kgDOBZ5jkw",
        "avatar_url": "https://avatars.githubusercontent.com/u/94266259?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/w0xlt",
        "html_url": "https://github.com/w0xlt",
        "followers_url": "https://api.github.com/users/w0xlt/followers",
        "following_url": "https://api.github.com/users/w0xlt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/w0xlt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/w0xlt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/w0xlt/subscriptions",
        "organizations_url": "https://api.github.com/users/w0xlt/orgs",
        "repos_url": "https://api.github.com/users/w0xlt/repos",
        "events_url": "https://api.github.com/users/w0xlt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/w0xlt/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/gui/pull/650#issuecomment-1209915707",
      "issue_url": "https://api.github.com/repos/bitcoin-core/gui/issues/650"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7159010592,
      "node_id": "HRFPE_lADOEEET9c5PZ5y9zwAAAAGqtdUg",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/7159010592",
      "actor": {
        "login": "KolbyML",
        "id": 31669092,
        "node_id": "MDQ6VXNlcjMxNjY5MDky",
        "avatar_url": "https://avatars.githubusercontent.com/u/31669092?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/KolbyML",
        "html_url": "https://github.com/KolbyML",
        "followers_url": "https://api.github.com/users/KolbyML/followers",
        "following_url": "https://api.github.com/users/KolbyML/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/KolbyML/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/KolbyML/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/KolbyML/subscriptions",
        "organizations_url": "https://api.github.com/users/KolbyML/orgs",
        "repos_url": "https://api.github.com/users/KolbyML/repos",
        "events_url": "https://api.github.com/users/KolbyML/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/KolbyML/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-09T21:36:02Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7159347799,
      "node_id": "HRFPE_lADOEEET9c5PZ5y9zwAAAAGquvpX",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/7159347799",
      "actor": {
        "login": "KolbyML",
        "id": 31669092,
        "node_id": "MDQ6VXNlcjMxNjY5MDky",
        "avatar_url": "https://avatars.githubusercontent.com/u/31669092?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/KolbyML",
        "html_url": "https://github.com/KolbyML",
        "followers_url": "https://api.github.com/users/KolbyML/followers",
        "following_url": "https://api.github.com/users/KolbyML/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/KolbyML/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/KolbyML/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/KolbyML/subscriptions",
        "organizations_url": "https://api.github.com/users/KolbyML/orgs",
        "repos_url": "https://api.github.com/users/KolbyML/repos",
        "events_url": "https://api.github.com/users/KolbyML/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/KolbyML/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-09T23:01:38Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7159351604,
      "node_id": "HRFPE_lADOEEET9c5PZ5y9zwAAAAGquwk0",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/7159351604",
      "actor": {
        "login": "KolbyML",
        "id": 31669092,
        "node_id": "MDQ6VXNlcjMxNjY5MDky",
        "avatar_url": "https://avatars.githubusercontent.com/u/31669092?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/KolbyML",
        "html_url": "https://github.com/KolbyML",
        "followers_url": "https://api.github.com/users/KolbyML/followers",
        "following_url": "https://api.github.com/users/KolbyML/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/KolbyML/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/KolbyML/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/KolbyML/subscriptions",
        "organizations_url": "https://api.github.com/users/KolbyML/orgs",
        "repos_url": "https://api.github.com/users/KolbyML/repos",
        "events_url": "https://api.github.com/users/KolbyML/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/KolbyML/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-09T23:02:46Z"
    },
    {
      "event": "reviewed",
      "id": 1067481148,
      "node_id": "PRR_kwDOEEET9c4_oHg8",
      "url": null,
      "actor": null,
      "commit_id": "3662ce85c495b05798e9d84c9d1f9e42a90c145d",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Awesome first contribution @KolbyML, you're taking a big swing here! Concept ACK on adding this feature.\r\n\r\nFirst, I would second @w0xlt suggestion of breaking each import into it's own PR, this makes the changes digestible for reviewers.\r\n\r\nSecond, please note that any changes to the code outside of `src/qt` (excluding necessary build changes to build any new ui files) cannot be merged from this repo. Any refactoring changes to code outside of `src/qt` you want to propose in order to make this gui feature work should be opened up in the main repo: https://github.com/bitcoin/bitcoin",
      "user": {
        "login": "jarolrod",
        "id": 23396902,
        "node_id": "MDQ6VXNlcjIzMzk2OTAy",
        "avatar_url": "https://avatars.githubusercontent.com/u/23396902?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jarolrod",
        "html_url": "https://github.com/jarolrod",
        "followers_url": "https://api.github.com/users/jarolrod/followers",
        "following_url": "https://api.github.com/users/jarolrod/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jarolrod/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jarolrod/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jarolrod/subscriptions",
        "organizations_url": "https://api.github.com/users/jarolrod/orgs",
        "repos_url": "https://api.github.com/users/jarolrod/repos",
        "events_url": "https://api.github.com/users/jarolrod/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jarolrod/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/gui/pull/650#pullrequestreview-1067481148",
      "submitted_at": "2022-08-09T23:10:28Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin-core/gui/pulls/650"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7159644247,
      "node_id": "HRFPE_lADOEEET9c5PZ5y9zwAAAAGqv4BX",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/7159644247",
      "actor": {
        "login": "KolbyML",
        "id": 31669092,
        "node_id": "MDQ6VXNlcjMxNjY5MDky",
        "avatar_url": "https://avatars.githubusercontent.com/u/31669092?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/KolbyML",
        "html_url": "https://github.com/KolbyML",
        "followers_url": "https://api.github.com/users/KolbyML/followers",
        "following_url": "https://api.github.com/users/KolbyML/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/KolbyML/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/KolbyML/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/KolbyML/subscriptions",
        "organizations_url": "https://api.github.com/users/KolbyML/orgs",
        "repos_url": "https://api.github.com/users/KolbyML/repos",
        "events_url": "https://api.github.com/users/KolbyML/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/KolbyML/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-10T00:41:00Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7159654155,
      "node_id": "HRFPE_lADOEEET9c5PZ5y9zwAAAAGqv6cL",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/7159654155",
      "actor": {
        "login": "KolbyML",
        "id": 31669092,
        "node_id": "MDQ6VXNlcjMxNjY5MDky",
        "avatar_url": "https://avatars.githubusercontent.com/u/31669092?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/KolbyML",
        "html_url": "https://github.com/KolbyML",
        "followers_url": "https://api.github.com/users/KolbyML/followers",
        "following_url": "https://api.github.com/users/KolbyML/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/KolbyML/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/KolbyML/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/KolbyML/subscriptions",
        "organizations_url": "https://api.github.com/users/KolbyML/orgs",
        "repos_url": "https://api.github.com/users/KolbyML/repos",
        "events_url": "https://api.github.com/users/KolbyML/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/KolbyML/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-10T00:44:44Z"
    },
    {
      "event": "reviewed",
      "id": 1067582678,
      "node_id": "PRR_kwDOEEET9c4_ogTW",
      "url": null,
      "actor": null,
      "commit_id": "d64f79ff5bed1138fac5c2810b5cc025407dff5e",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Import Public Key & Address: This doesn't work as one would expect, and only makes sense as part of a larger entire-wallet watch-import. So too low-level for a GUI feature.\r\n\r\nImport Private Key: This is a footgun. Instead, we should only support sweeping (as a basic end-user option) - and probably via the Receive tab.\r\n\r\nImport Multi & Descriptors: Seems a bit weird in the GUI. What does \"multi\" mean here? But maybe this could be an advanced feature similar to coin control... (hidden by default)",
      "user": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/gui/pull/650#pullrequestreview-1067582678",
      "submitted_at": "2022-08-10T02:40:42Z",
      "state": "CHANGES_REQUESTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin-core/gui/pulls/650"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7160094820,
      "node_id": "HRFPE_lADOEEET9c5PZ5y9zwAAAAGqxmBk",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/7160094820",
      "actor": {
        "login": "KolbyML",
        "id": 31669092,
        "node_id": "MDQ6VXNlcjMxNjY5MDky",
        "avatar_url": "https://avatars.githubusercontent.com/u/31669092?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/KolbyML",
        "html_url": "https://github.com/KolbyML",
        "followers_url": "https://api.github.com/users/KolbyML/followers",
        "following_url": "https://api.github.com/users/KolbyML/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/KolbyML/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/KolbyML/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/KolbyML/subscriptions",
        "organizations_url": "https://api.github.com/users/KolbyML/orgs",
        "repos_url": "https://api.github.com/users/KolbyML/repos",
        "events_url": "https://api.github.com/users/KolbyML/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/KolbyML/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-10T03:08:10Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7160266195,
      "node_id": "HRFPE_lADOEEET9c5PZ5y9zwAAAAGqyP3T",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/7160266195",
      "actor": {
        "login": "KolbyML",
        "id": 31669092,
        "node_id": "MDQ6VXNlcjMxNjY5MDky",
        "avatar_url": "https://avatars.githubusercontent.com/u/31669092?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/KolbyML",
        "html_url": "https://github.com/KolbyML",
        "followers_url": "https://api.github.com/users/KolbyML/followers",
        "following_url": "https://api.github.com/users/KolbyML/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/KolbyML/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/KolbyML/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/KolbyML/subscriptions",
        "organizations_url": "https://api.github.com/users/KolbyML/orgs",
        "repos_url": "https://api.github.com/users/KolbyML/repos",
        "events_url": "https://api.github.com/users/KolbyML/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/KolbyML/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-10T03:45:45Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7160270931,
      "node_id": "HRFPE_lADOEEET9c5PZ5y9zwAAAAGqyRBT",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/7160270931",
      "actor": {
        "login": "KolbyML",
        "id": 31669092,
        "node_id": "MDQ6VXNlcjMxNjY5MDky",
        "avatar_url": "https://avatars.githubusercontent.com/u/31669092?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/KolbyML",
        "html_url": "https://github.com/KolbyML",
        "followers_url": "https://api.github.com/users/KolbyML/followers",
        "following_url": "https://api.github.com/users/KolbyML/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/KolbyML/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/KolbyML/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/KolbyML/subscriptions",
        "organizations_url": "https://api.github.com/users/KolbyML/orgs",
        "repos_url": "https://api.github.com/users/KolbyML/repos",
        "events_url": "https://api.github.com/users/KolbyML/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/KolbyML/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-10T03:47:27Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7160300495,
      "node_id": "HRFPE_lADOEEET9c5PZ5y9zwAAAAGqyYPP",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/7160300495",
      "actor": {
        "login": "KolbyML",
        "id": 31669092,
        "node_id": "MDQ6VXNlcjMxNjY5MDky",
        "avatar_url": "https://avatars.githubusercontent.com/u/31669092?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/KolbyML",
        "html_url": "https://github.com/KolbyML",
        "followers_url": "https://api.github.com/users/KolbyML/followers",
        "following_url": "https://api.github.com/users/KolbyML/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/KolbyML/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/KolbyML/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/KolbyML/subscriptions",
        "organizations_url": "https://api.github.com/users/KolbyML/orgs",
        "repos_url": "https://api.github.com/users/KolbyML/repos",
        "events_url": "https://api.github.com/users/KolbyML/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/KolbyML/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-10T03:57:50Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7160313619,
      "node_id": "HRFPE_lADOEEET9c5PZ5y9zwAAAAGqybcT",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/7160313619",
      "actor": {
        "login": "KolbyML",
        "id": 31669092,
        "node_id": "MDQ6VXNlcjMxNjY5MDky",
        "avatar_url": "https://avatars.githubusercontent.com/u/31669092?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/KolbyML",
        "html_url": "https://github.com/KolbyML",
        "followers_url": "https://api.github.com/users/KolbyML/followers",
        "following_url": "https://api.github.com/users/KolbyML/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/KolbyML/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/KolbyML/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/KolbyML/subscriptions",
        "organizations_url": "https://api.github.com/users/KolbyML/orgs",
        "repos_url": "https://api.github.com/users/KolbyML/repos",
        "events_url": "https://api.github.com/users/KolbyML/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/KolbyML/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-10T04:02:00Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7160330148,
      "node_id": "HRFPE_lADOEEET9c5PZ5y9zwAAAAGqyfek",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/7160330148",
      "actor": {
        "login": "KolbyML",
        "id": 31669092,
        "node_id": "MDQ6VXNlcjMxNjY5MDky",
        "avatar_url": "https://avatars.githubusercontent.com/u/31669092?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/KolbyML",
        "html_url": "https://github.com/KolbyML",
        "followers_url": "https://api.github.com/users/KolbyML/followers",
        "following_url": "https://api.github.com/users/KolbyML/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/KolbyML/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/KolbyML/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/KolbyML/subscriptions",
        "organizations_url": "https://api.github.com/users/KolbyML/orgs",
        "repos_url": "https://api.github.com/users/KolbyML/repos",
        "events_url": "https://api.github.com/users/KolbyML/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/KolbyML/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-10T04:06:06Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7160339496,
      "node_id": "HRFPE_lADOEEET9c5PZ5y9zwAAAAGqyhwo",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/7160339496",
      "actor": {
        "login": "KolbyML",
        "id": 31669092,
        "node_id": "MDQ6VXNlcjMxNjY5MDky",
        "avatar_url": "https://avatars.githubusercontent.com/u/31669092?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/KolbyML",
        "html_url": "https://github.com/KolbyML",
        "followers_url": "https://api.github.com/users/KolbyML/followers",
        "following_url": "https://api.github.com/users/KolbyML/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/KolbyML/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/KolbyML/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/KolbyML/subscriptions",
        "organizations_url": "https://api.github.com/users/KolbyML/orgs",
        "repos_url": "https://api.github.com/users/KolbyML/repos",
        "events_url": "https://api.github.com/users/KolbyML/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/KolbyML/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-10T04:08:45Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7165317175,
      "node_id": "HRFPE_lADOEEET9c5PZ5y9zwAAAAGrFhA3",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/7165317175",
      "actor": {
        "login": "KolbyML",
        "id": 31669092,
        "node_id": "MDQ6VXNlcjMxNjY5MDky",
        "avatar_url": "https://avatars.githubusercontent.com/u/31669092?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/KolbyML",
        "html_url": "https://github.com/KolbyML",
        "followers_url": "https://api.github.com/users/KolbyML/followers",
        "following_url": "https://api.github.com/users/KolbyML/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/KolbyML/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/KolbyML/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/KolbyML/subscriptions",
        "organizations_url": "https://api.github.com/users/KolbyML/orgs",
        "repos_url": "https://api.github.com/users/KolbyML/repos",
        "events_url": "https://api.github.com/users/KolbyML/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/KolbyML/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-10T16:13:26Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7165456164,
      "node_id": "HRFPE_lADOEEET9c5PZ5y9zwAAAAGrGC8k",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/7165456164",
      "actor": {
        "login": "KolbyML",
        "id": 31669092,
        "node_id": "MDQ6VXNlcjMxNjY5MDky",
        "avatar_url": "https://avatars.githubusercontent.com/u/31669092?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/KolbyML",
        "html_url": "https://github.com/KolbyML",
        "followers_url": "https://api.github.com/users/KolbyML/followers",
        "following_url": "https://api.github.com/users/KolbyML/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/KolbyML/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/KolbyML/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/KolbyML/subscriptions",
        "organizations_url": "https://api.github.com/users/KolbyML/orgs",
        "repos_url": "https://api.github.com/users/KolbyML/repos",
        "events_url": "https://api.github.com/users/KolbyML/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/KolbyML/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-10T16:33:43Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7165504973,
      "node_id": "HRFPE_lADOEEET9c5PZ5y9zwAAAAGrGO3N",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/7165504973",
      "actor": {
        "login": "KolbyML",
        "id": 31669092,
        "node_id": "MDQ6VXNlcjMxNjY5MDky",
        "avatar_url": "https://avatars.githubusercontent.com/u/31669092?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/KolbyML",
        "html_url": "https://github.com/KolbyML",
        "followers_url": "https://api.github.com/users/KolbyML/followers",
        "following_url": "https://api.github.com/users/KolbyML/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/KolbyML/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/KolbyML/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/KolbyML/subscriptions",
        "organizations_url": "https://api.github.com/users/KolbyML/orgs",
        "repos_url": "https://api.github.com/users/KolbyML/repos",
        "events_url": "https://api.github.com/users/KolbyML/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/KolbyML/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-10T16:41:12Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7165528818,
      "node_id": "HRFPE_lADOEEET9c5PZ5y9zwAAAAGrGUry",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/7165528818",
      "actor": {
        "login": "KolbyML",
        "id": 31669092,
        "node_id": "MDQ6VXNlcjMxNjY5MDky",
        "avatar_url": "https://avatars.githubusercontent.com/u/31669092?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/KolbyML",
        "html_url": "https://github.com/KolbyML",
        "followers_url": "https://api.github.com/users/KolbyML/followers",
        "following_url": "https://api.github.com/users/KolbyML/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/KolbyML/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/KolbyML/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/KolbyML/subscriptions",
        "organizations_url": "https://api.github.com/users/KolbyML/orgs",
        "repos_url": "https://api.github.com/users/KolbyML/repos",
        "events_url": "https://api.github.com/users/KolbyML/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/KolbyML/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-10T16:45:00Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7165583316,
      "node_id": "HRFPE_lADOEEET9c5PZ5y9zwAAAAGrGh_U",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/7165583316",
      "actor": {
        "login": "KolbyML",
        "id": 31669092,
        "node_id": "MDQ6VXNlcjMxNjY5MDky",
        "avatar_url": "https://avatars.githubusercontent.com/u/31669092?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/KolbyML",
        "html_url": "https://github.com/KolbyML",
        "followers_url": "https://api.github.com/users/KolbyML/followers",
        "following_url": "https://api.github.com/users/KolbyML/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/KolbyML/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/KolbyML/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/KolbyML/subscriptions",
        "organizations_url": "https://api.github.com/users/KolbyML/orgs",
        "repos_url": "https://api.github.com/users/KolbyML/repos",
        "events_url": "https://api.github.com/users/KolbyML/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/KolbyML/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-10T16:53:12Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7166172842,
      "node_id": "HRFPE_lADOEEET9c5PZ5y9zwAAAAGrIx6q",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/7166172842",
      "actor": {
        "login": "KolbyML",
        "id": 31669092,
        "node_id": "MDQ6VXNlcjMxNjY5MDky",
        "avatar_url": "https://avatars.githubusercontent.com/u/31669092?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/KolbyML",
        "html_url": "https://github.com/KolbyML",
        "followers_url": "https://api.github.com/users/KolbyML/followers",
        "following_url": "https://api.github.com/users/KolbyML/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/KolbyML/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/KolbyML/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/KolbyML/subscriptions",
        "organizations_url": "https://api.github.com/users/KolbyML/orgs",
        "repos_url": "https://api.github.com/users/KolbyML/repos",
        "events_url": "https://api.github.com/users/KolbyML/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/KolbyML/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-10T18:23:25Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7166745290,
      "node_id": "HRFPE_lADOEEET9c5PZ5y9zwAAAAGrK9rK",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/7166745290",
      "actor": {
        "login": "KolbyML",
        "id": 31669092,
        "node_id": "MDQ6VXNlcjMxNjY5MDky",
        "avatar_url": "https://avatars.githubusercontent.com/u/31669092?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/KolbyML",
        "html_url": "https://github.com/KolbyML",
        "followers_url": "https://api.github.com/users/KolbyML/followers",
        "following_url": "https://api.github.com/users/KolbyML/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/KolbyML/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/KolbyML/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/KolbyML/subscriptions",
        "organizations_url": "https://api.github.com/users/KolbyML/orgs",
        "repos_url": "https://api.github.com/users/KolbyML/repos",
        "events_url": "https://api.github.com/users/KolbyML/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/KolbyML/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-10T19:45:14Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7166793470,
      "node_id": "HRFPE_lADOEEET9c5PZ5y9zwAAAAGrLJb-",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/7166793470",
      "actor": {
        "login": "KolbyML",
        "id": 31669092,
        "node_id": "MDQ6VXNlcjMxNjY5MDky",
        "avatar_url": "https://avatars.githubusercontent.com/u/31669092?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/KolbyML",
        "html_url": "https://github.com/KolbyML",
        "followers_url": "https://api.github.com/users/KolbyML/followers",
        "following_url": "https://api.github.com/users/KolbyML/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/KolbyML/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/KolbyML/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/KolbyML/subscriptions",
        "organizations_url": "https://api.github.com/users/KolbyML/orgs",
        "repos_url": "https://api.github.com/users/KolbyML/repos",
        "events_url": "https://api.github.com/users/KolbyML/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/KolbyML/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-10T19:53:31Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7166808118,
      "node_id": "HRFPE_lADOEEET9c5PZ5y9zwAAAAGrLNA2",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/7166808118",
      "actor": {
        "login": "KolbyML",
        "id": 31669092,
        "node_id": "MDQ6VXNlcjMxNjY5MDky",
        "avatar_url": "https://avatars.githubusercontent.com/u/31669092?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/KolbyML",
        "html_url": "https://github.com/KolbyML",
        "followers_url": "https://api.github.com/users/KolbyML/followers",
        "following_url": "https://api.github.com/users/KolbyML/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/KolbyML/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/KolbyML/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/KolbyML/subscriptions",
        "organizations_url": "https://api.github.com/users/KolbyML/orgs",
        "repos_url": "https://api.github.com/users/KolbyML/repos",
        "events_url": "https://api.github.com/users/KolbyML/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/KolbyML/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-10T19:56:12Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7168810774,
      "node_id": "HRFPE_lADOEEET9c5PZ5y9zwAAAAGrS18W",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/7168810774",
      "actor": {
        "login": "KolbyML",
        "id": 31669092,
        "node_id": "MDQ6VXNlcjMxNjY5MDky",
        "avatar_url": "https://avatars.githubusercontent.com/u/31669092?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/KolbyML",
        "html_url": "https://github.com/KolbyML",
        "followers_url": "https://api.github.com/users/KolbyML/followers",
        "following_url": "https://api.github.com/users/KolbyML/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/KolbyML/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/KolbyML/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/KolbyML/subscriptions",
        "organizations_url": "https://api.github.com/users/KolbyML/orgs",
        "repos_url": "https://api.github.com/users/KolbyML/repos",
        "events_url": "https://api.github.com/users/KolbyML/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/KolbyML/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-11T05:26:35Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7169122677,
      "node_id": "HRFPE_lADOEEET9c5PZ5y9zwAAAAGrUCF1",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/7169122677",
      "actor": {
        "login": "KolbyML",
        "id": 31669092,
        "node_id": "MDQ6VXNlcjMxNjY5MDky",
        "avatar_url": "https://avatars.githubusercontent.com/u/31669092?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/KolbyML",
        "html_url": "https://github.com/KolbyML",
        "followers_url": "https://api.github.com/users/KolbyML/followers",
        "following_url": "https://api.github.com/users/KolbyML/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/KolbyML/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/KolbyML/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/KolbyML/subscriptions",
        "organizations_url": "https://api.github.com/users/KolbyML/orgs",
        "repos_url": "https://api.github.com/users/KolbyML/repos",
        "events_url": "https://api.github.com/users/KolbyML/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/KolbyML/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-11T06:49:03Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7175751087,
      "node_id": "HRFPE_lADOEEET9c5PZ5y9zwAAAAGrtUWv",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/7175751087",
      "actor": {
        "login": "KolbyML",
        "id": 31669092,
        "node_id": "MDQ6VXNlcjMxNjY5MDky",
        "avatar_url": "https://avatars.githubusercontent.com/u/31669092?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/KolbyML",
        "html_url": "https://github.com/KolbyML",
        "followers_url": "https://api.github.com/users/KolbyML/followers",
        "following_url": "https://api.github.com/users/KolbyML/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/KolbyML/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/KolbyML/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/KolbyML/subscriptions",
        "organizations_url": "https://api.github.com/users/KolbyML/orgs",
        "repos_url": "https://api.github.com/users/KolbyML/repos",
        "events_url": "https://api.github.com/users/KolbyML/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/KolbyML/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-12T00:41:07Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7175759271,
      "node_id": "HRFPE_lADOEEET9c5PZ5y9zwAAAAGrtWWn",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/7175759271",
      "actor": {
        "login": "KolbyML",
        "id": 31669092,
        "node_id": "MDQ6VXNlcjMxNjY5MDky",
        "avatar_url": "https://avatars.githubusercontent.com/u/31669092?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/KolbyML",
        "html_url": "https://github.com/KolbyML",
        "followers_url": "https://api.github.com/users/KolbyML/followers",
        "following_url": "https://api.github.com/users/KolbyML/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/KolbyML/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/KolbyML/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/KolbyML/subscriptions",
        "organizations_url": "https://api.github.com/users/KolbyML/orgs",
        "repos_url": "https://api.github.com/users/KolbyML/repos",
        "events_url": "https://api.github.com/users/KolbyML/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/KolbyML/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-12T00:44:04Z"
    },
    {
      "event": "renamed",
      "id": 7190524263,
      "node_id": "RTE_lADOEEET9c5PZ5y9zwAAAAGslrFn",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/7190524263",
      "actor": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-15T18:10:53Z",
      "rename": {
        "from": "qt, refactor: Add Import to Wallet GUI",
        "to": "Add Import to Wallet GUI"
      }
    },
    {
      "event": "labeled",
      "id": 7190525033,
      "node_id": "LE_lADOEEET9c5PZ5y9zwAAAAGslrRp",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/7190525033",
      "actor": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-15T18:11:00Z",
      "label": {
        "name": "Wallet",
        "color": "08a781"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7198157010,
      "node_id": "HRFPE_lADOEEET9c5PZ5y9zwAAAAGtCyjS",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/7198157010",
      "actor": {
        "login": "KolbyML",
        "id": 31669092,
        "node_id": "MDQ6VXNlcjMxNjY5MDky",
        "avatar_url": "https://avatars.githubusercontent.com/u/31669092?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/KolbyML",
        "html_url": "https://github.com/KolbyML",
        "followers_url": "https://api.github.com/users/KolbyML/followers",
        "following_url": "https://api.github.com/users/KolbyML/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/KolbyML/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/KolbyML/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/KolbyML/subscriptions",
        "organizations_url": "https://api.github.com/users/KolbyML/orgs",
        "repos_url": "https://api.github.com/users/KolbyML/repos",
        "events_url": "https://api.github.com/users/KolbyML/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/KolbyML/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-16T15:08:28Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7200737062,
      "node_id": "HRFPE_lADOEEET9c5PZ5y9zwAAAAGtMocm",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/7200737062",
      "actor": {
        "login": "KolbyML",
        "id": 31669092,
        "node_id": "MDQ6VXNlcjMxNjY5MDky",
        "avatar_url": "https://avatars.githubusercontent.com/u/31669092?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/KolbyML",
        "html_url": "https://github.com/KolbyML",
        "followers_url": "https://api.github.com/users/KolbyML/followers",
        "following_url": "https://api.github.com/users/KolbyML/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/KolbyML/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/KolbyML/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/KolbyML/subscriptions",
        "organizations_url": "https://api.github.com/users/KolbyML/orgs",
        "repos_url": "https://api.github.com/users/KolbyML/repos",
        "events_url": "https://api.github.com/users/KolbyML/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/KolbyML/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-16T21:36:09Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7201496023,
      "node_id": "HRFPE_lADOEEET9c5PZ5y9zwAAAAGtPhvX",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/7201496023",
      "actor": {
        "login": "KolbyML",
        "id": 31669092,
        "node_id": "MDQ6VXNlcjMxNjY5MDky",
        "avatar_url": "https://avatars.githubusercontent.com/u/31669092?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/KolbyML",
        "html_url": "https://github.com/KolbyML",
        "followers_url": "https://api.github.com/users/KolbyML/followers",
        "following_url": "https://api.github.com/users/KolbyML/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/KolbyML/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/KolbyML/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/KolbyML/subscriptions",
        "organizations_url": "https://api.github.com/users/KolbyML/orgs",
        "repos_url": "https://api.github.com/users/KolbyML/repos",
        "events_url": "https://api.github.com/users/KolbyML/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/KolbyML/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-17T01:07:47Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7207552113,
      "node_id": "HRFPE_lADOEEET9c5PZ5y9zwAAAAGtmoRx",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/7207552113",
      "actor": {
        "login": "KolbyML",
        "id": 31669092,
        "node_id": "MDQ6VXNlcjMxNjY5MDky",
        "avatar_url": "https://avatars.githubusercontent.com/u/31669092?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/KolbyML",
        "html_url": "https://github.com/KolbyML",
        "followers_url": "https://api.github.com/users/KolbyML/followers",
        "following_url": "https://api.github.com/users/KolbyML/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/KolbyML/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/KolbyML/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/KolbyML/subscriptions",
        "organizations_url": "https://api.github.com/users/KolbyML/orgs",
        "repos_url": "https://api.github.com/users/KolbyML/repos",
        "events_url": "https://api.github.com/users/KolbyML/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/KolbyML/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-17T16:27:04Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7207602710,
      "node_id": "HRFPE_lADOEEET9c5PZ5y9zwAAAAGtm0oW",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/7207602710",
      "actor": {
        "login": "KolbyML",
        "id": 31669092,
        "node_id": "MDQ6VXNlcjMxNjY5MDky",
        "avatar_url": "https://avatars.githubusercontent.com/u/31669092?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/KolbyML",
        "html_url": "https://github.com/KolbyML",
        "followers_url": "https://api.github.com/users/KolbyML/followers",
        "following_url": "https://api.github.com/users/KolbyML/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/KolbyML/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/KolbyML/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/KolbyML/subscriptions",
        "organizations_url": "https://api.github.com/users/KolbyML/orgs",
        "repos_url": "https://api.github.com/users/KolbyML/repos",
        "events_url": "https://api.github.com/users/KolbyML/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/KolbyML/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-17T16:34:18Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7207614455,
      "node_id": "HRFPE_lADOEEET9c5PZ5y9zwAAAAGtm3f3",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/7207614455",
      "actor": {
        "login": "KolbyML",
        "id": 31669092,
        "node_id": "MDQ6VXNlcjMxNjY5MDky",
        "avatar_url": "https://avatars.githubusercontent.com/u/31669092?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/KolbyML",
        "html_url": "https://github.com/KolbyML",
        "followers_url": "https://api.github.com/users/KolbyML/followers",
        "following_url": "https://api.github.com/users/KolbyML/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/KolbyML/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/KolbyML/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/KolbyML/subscriptions",
        "organizations_url": "https://api.github.com/users/KolbyML/orgs",
        "repos_url": "https://api.github.com/users/KolbyML/repos",
        "events_url": "https://api.github.com/users/KolbyML/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/KolbyML/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-17T16:36:03Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7207641960,
      "node_id": "HRFPE_lADOEEET9c5PZ5y9zwAAAAGtm-No",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/7207641960",
      "actor": {
        "login": "KolbyML",
        "id": 31669092,
        "node_id": "MDQ6VXNlcjMxNjY5MDky",
        "avatar_url": "https://avatars.githubusercontent.com/u/31669092?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/KolbyML",
        "html_url": "https://github.com/KolbyML",
        "followers_url": "https://api.github.com/users/KolbyML/followers",
        "following_url": "https://api.github.com/users/KolbyML/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/KolbyML/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/KolbyML/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/KolbyML/subscriptions",
        "organizations_url": "https://api.github.com/users/KolbyML/orgs",
        "repos_url": "https://api.github.com/users/KolbyML/repos",
        "events_url": "https://api.github.com/users/KolbyML/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/KolbyML/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-17T16:40:20Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7207657190,
      "node_id": "HRFPE_lADOEEET9c5PZ5y9zwAAAAGtnB7m",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/7207657190",
      "actor": {
        "login": "KolbyML",
        "id": 31669092,
        "node_id": "MDQ6VXNlcjMxNjY5MDky",
        "avatar_url": "https://avatars.githubusercontent.com/u/31669092?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/KolbyML",
        "html_url": "https://github.com/KolbyML",
        "followers_url": "https://api.github.com/users/KolbyML/followers",
        "following_url": "https://api.github.com/users/KolbyML/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/KolbyML/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/KolbyML/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/KolbyML/subscriptions",
        "organizations_url": "https://api.github.com/users/KolbyML/orgs",
        "repos_url": "https://api.github.com/users/KolbyML/repos",
        "events_url": "https://api.github.com/users/KolbyML/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/KolbyML/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-17T16:42:37Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7207663747,
      "node_id": "HRFPE_lADOEEET9c5PZ5y9zwAAAAGtnDiD",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/7207663747",
      "actor": {
        "login": "KolbyML",
        "id": 31669092,
        "node_id": "MDQ6VXNlcjMxNjY5MDky",
        "avatar_url": "https://avatars.githubusercontent.com/u/31669092?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/KolbyML",
        "html_url": "https://github.com/KolbyML",
        "followers_url": "https://api.github.com/users/KolbyML/followers",
        "following_url": "https://api.github.com/users/KolbyML/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/KolbyML/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/KolbyML/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/KolbyML/subscriptions",
        "organizations_url": "https://api.github.com/users/KolbyML/orgs",
        "repos_url": "https://api.github.com/users/KolbyML/repos",
        "events_url": "https://api.github.com/users/KolbyML/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/KolbyML/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-17T16:43:41Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7208110228,
      "node_id": "HRFPE_lADOEEET9c5PZ5y9zwAAAAGtowiU",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/7208110228",
      "actor": {
        "login": "KolbyML",
        "id": 31669092,
        "node_id": "MDQ6VXNlcjMxNjY5MDky",
        "avatar_url": "https://avatars.githubusercontent.com/u/31669092?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/KolbyML",
        "html_url": "https://github.com/KolbyML",
        "followers_url": "https://api.github.com/users/KolbyML/followers",
        "following_url": "https://api.github.com/users/KolbyML/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/KolbyML/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/KolbyML/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/KolbyML/subscriptions",
        "organizations_url": "https://api.github.com/users/KolbyML/orgs",
        "repos_url": "https://api.github.com/users/KolbyML/repos",
        "events_url": "https://api.github.com/users/KolbyML/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/KolbyML/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-17T17:52:38Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7208117798,
      "node_id": "HRFPE_lADOEEET9c5PZ5y9zwAAAAGtoyYm",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/7208117798",
      "actor": {
        "login": "KolbyML",
        "id": 31669092,
        "node_id": "MDQ6VXNlcjMxNjY5MDky",
        "avatar_url": "https://avatars.githubusercontent.com/u/31669092?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/KolbyML",
        "html_url": "https://github.com/KolbyML",
        "followers_url": "https://api.github.com/users/KolbyML/followers",
        "following_url": "https://api.github.com/users/KolbyML/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/KolbyML/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/KolbyML/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/KolbyML/subscriptions",
        "organizations_url": "https://api.github.com/users/KolbyML/orgs",
        "repos_url": "https://api.github.com/users/KolbyML/repos",
        "events_url": "https://api.github.com/users/KolbyML/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/KolbyML/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-17T17:53:42Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7208121937,
      "node_id": "HRFPE_lADOEEET9c5PZ5y9zwAAAAGtozZR",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/7208121937",
      "actor": {
        "login": "KolbyML",
        "id": 31669092,
        "node_id": "MDQ6VXNlcjMxNjY5MDky",
        "avatar_url": "https://avatars.githubusercontent.com/u/31669092?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/KolbyML",
        "html_url": "https://github.com/KolbyML",
        "followers_url": "https://api.github.com/users/KolbyML/followers",
        "following_url": "https://api.github.com/users/KolbyML/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/KolbyML/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/KolbyML/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/KolbyML/subscriptions",
        "organizations_url": "https://api.github.com/users/KolbyML/orgs",
        "repos_url": "https://api.github.com/users/KolbyML/repos",
        "events_url": "https://api.github.com/users/KolbyML/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/KolbyML/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-17T17:54:17Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7208126283,
      "node_id": "HRFPE_lADOEEET9c5PZ5y9zwAAAAGto0dL",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/7208126283",
      "actor": {
        "login": "KolbyML",
        "id": 31669092,
        "node_id": "MDQ6VXNlcjMxNjY5MDky",
        "avatar_url": "https://avatars.githubusercontent.com/u/31669092?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/KolbyML",
        "html_url": "https://github.com/KolbyML",
        "followers_url": "https://api.github.com/users/KolbyML/followers",
        "following_url": "https://api.github.com/users/KolbyML/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/KolbyML/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/KolbyML/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/KolbyML/subscriptions",
        "organizations_url": "https://api.github.com/users/KolbyML/orgs",
        "repos_url": "https://api.github.com/users/KolbyML/repos",
        "events_url": "https://api.github.com/users/KolbyML/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/KolbyML/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-17T17:54:51Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7218839931,
      "node_id": "HRFPE_lADOEEET9c5PZ5y9zwAAAAGuRsF7",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/7218839931",
      "actor": {
        "login": "KolbyML",
        "id": 31669092,
        "node_id": "MDQ6VXNlcjMxNjY5MDky",
        "avatar_url": "https://avatars.githubusercontent.com/u/31669092?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/KolbyML",
        "html_url": "https://github.com/KolbyML",
        "followers_url": "https://api.github.com/users/KolbyML/followers",
        "following_url": "https://api.github.com/users/KolbyML/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/KolbyML/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/KolbyML/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/KolbyML/subscriptions",
        "organizations_url": "https://api.github.com/users/KolbyML/orgs",
        "repos_url": "https://api.github.com/users/KolbyML/repos",
        "events_url": "https://api.github.com/users/KolbyML/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/KolbyML/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-19T02:29:04Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7218867406,
      "node_id": "HRFPE_lADOEEET9c5PZ5y9zwAAAAGuRyzO",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/7218867406",
      "actor": {
        "login": "KolbyML",
        "id": 31669092,
        "node_id": "MDQ6VXNlcjMxNjY5MDky",
        "avatar_url": "https://avatars.githubusercontent.com/u/31669092?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/KolbyML",
        "html_url": "https://github.com/KolbyML",
        "followers_url": "https://api.github.com/users/KolbyML/followers",
        "following_url": "https://api.github.com/users/KolbyML/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/KolbyML/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/KolbyML/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/KolbyML/subscriptions",
        "organizations_url": "https://api.github.com/users/KolbyML/orgs",
        "repos_url": "https://api.github.com/users/KolbyML/repos",
        "events_url": "https://api.github.com/users/KolbyML/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/KolbyML/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-19T02:37:26Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7219004943,
      "node_id": "HRFPE_lADOEEET9c5PZ5y9zwAAAAGuSUYP",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/7219004943",
      "actor": {
        "login": "KolbyML",
        "id": 31669092,
        "node_id": "MDQ6VXNlcjMxNjY5MDky",
        "avatar_url": "https://avatars.githubusercontent.com/u/31669092?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/KolbyML",
        "html_url": "https://github.com/KolbyML",
        "followers_url": "https://api.github.com/users/KolbyML/followers",
        "following_url": "https://api.github.com/users/KolbyML/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/KolbyML/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/KolbyML/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/KolbyML/subscriptions",
        "organizations_url": "https://api.github.com/users/KolbyML/orgs",
        "repos_url": "https://api.github.com/users/KolbyML/repos",
        "events_url": "https://api.github.com/users/KolbyML/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/KolbyML/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-19T03:21:23Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7219022421,
      "node_id": "HRFPE_lADOEEET9c5PZ5y9zwAAAAGuSYpV",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/7219022421",
      "actor": {
        "login": "KolbyML",
        "id": 31669092,
        "node_id": "MDQ6VXNlcjMxNjY5MDky",
        "avatar_url": "https://avatars.githubusercontent.com/u/31669092?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/KolbyML",
        "html_url": "https://github.com/KolbyML",
        "followers_url": "https://api.github.com/users/KolbyML/followers",
        "following_url": "https://api.github.com/users/KolbyML/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/KolbyML/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/KolbyML/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/KolbyML/subscriptions",
        "organizations_url": "https://api.github.com/users/KolbyML/orgs",
        "repos_url": "https://api.github.com/users/KolbyML/repos",
        "events_url": "https://api.github.com/users/KolbyML/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/KolbyML/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-19T03:27:08Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7219168048,
      "node_id": "HRFPE_lADOEEET9c5PZ5y9zwAAAAGuS8Mw",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/7219168048",
      "actor": {
        "login": "KolbyML",
        "id": 31669092,
        "node_id": "MDQ6VXNlcjMxNjY5MDky",
        "avatar_url": "https://avatars.githubusercontent.com/u/31669092?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/KolbyML",
        "html_url": "https://github.com/KolbyML",
        "followers_url": "https://api.github.com/users/KolbyML/followers",
        "following_url": "https://api.github.com/users/KolbyML/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/KolbyML/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/KolbyML/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/KolbyML/subscriptions",
        "organizations_url": "https://api.github.com/users/KolbyML/orgs",
        "repos_url": "https://api.github.com/users/KolbyML/repos",
        "events_url": "https://api.github.com/users/KolbyML/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/KolbyML/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-19T04:14:14Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7219171678,
      "node_id": "HRFPE_lADOEEET9c5PZ5y9zwAAAAGuS9Fe",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/7219171678",
      "actor": {
        "login": "KolbyML",
        "id": 31669092,
        "node_id": "MDQ6VXNlcjMxNjY5MDky",
        "avatar_url": "https://avatars.githubusercontent.com/u/31669092?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/KolbyML",
        "html_url": "https://github.com/KolbyML",
        "followers_url": "https://api.github.com/users/KolbyML/followers",
        "following_url": "https://api.github.com/users/KolbyML/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/KolbyML/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/KolbyML/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/KolbyML/subscriptions",
        "organizations_url": "https://api.github.com/users/KolbyML/orgs",
        "repos_url": "https://api.github.com/users/KolbyML/repos",
        "events_url": "https://api.github.com/users/KolbyML/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/KolbyML/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-19T04:15:18Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7219254565,
      "node_id": "HRFPE_lADOEEET9c5PZ5y9zwAAAAGuTRUl",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/7219254565",
      "actor": {
        "login": "KolbyML",
        "id": 31669092,
        "node_id": "MDQ6VXNlcjMxNjY5MDky",
        "avatar_url": "https://avatars.githubusercontent.com/u/31669092?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/KolbyML",
        "html_url": "https://github.com/KolbyML",
        "followers_url": "https://api.github.com/users/KolbyML/followers",
        "following_url": "https://api.github.com/users/KolbyML/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/KolbyML/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/KolbyML/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/KolbyML/subscriptions",
        "organizations_url": "https://api.github.com/users/KolbyML/orgs",
        "repos_url": "https://api.github.com/users/KolbyML/repos",
        "events_url": "https://api.github.com/users/KolbyML/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/KolbyML/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-19T04:40:28Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7219274904,
      "node_id": "HRFPE_lADOEEET9c5PZ5y9zwAAAAGuTWSY",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/7219274904",
      "actor": {
        "login": "KolbyML",
        "id": 31669092,
        "node_id": "MDQ6VXNlcjMxNjY5MDky",
        "avatar_url": "https://avatars.githubusercontent.com/u/31669092?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/KolbyML",
        "html_url": "https://github.com/KolbyML",
        "followers_url": "https://api.github.com/users/KolbyML/followers",
        "following_url": "https://api.github.com/users/KolbyML/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/KolbyML/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/KolbyML/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/KolbyML/subscriptions",
        "organizations_url": "https://api.github.com/users/KolbyML/orgs",
        "repos_url": "https://api.github.com/users/KolbyML/repos",
        "events_url": "https://api.github.com/users/KolbyML/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/KolbyML/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-19T04:45:51Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7219292332,
      "node_id": "HRFPE_lADOEEET9c5PZ5y9zwAAAAGuTais",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/7219292332",
      "actor": {
        "login": "KolbyML",
        "id": 31669092,
        "node_id": "MDQ6VXNlcjMxNjY5MDky",
        "avatar_url": "https://avatars.githubusercontent.com/u/31669092?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/KolbyML",
        "html_url": "https://github.com/KolbyML",
        "followers_url": "https://api.github.com/users/KolbyML/followers",
        "following_url": "https://api.github.com/users/KolbyML/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/KolbyML/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/KolbyML/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/KolbyML/subscriptions",
        "organizations_url": "https://api.github.com/users/KolbyML/orgs",
        "repos_url": "https://api.github.com/users/KolbyML/repos",
        "events_url": "https://api.github.com/users/KolbyML/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/KolbyML/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-19T04:51:45Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7219568035,
      "node_id": "HRFPE_lADOEEET9c5PZ5y9zwAAAAGuUd2j",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/7219568035",
      "actor": {
        "login": "KolbyML",
        "id": 31669092,
        "node_id": "MDQ6VXNlcjMxNjY5MDky",
        "avatar_url": "https://avatars.githubusercontent.com/u/31669092?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/KolbyML",
        "html_url": "https://github.com/KolbyML",
        "followers_url": "https://api.github.com/users/KolbyML/followers",
        "following_url": "https://api.github.com/users/KolbyML/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/KolbyML/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/KolbyML/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/KolbyML/subscriptions",
        "organizations_url": "https://api.github.com/users/KolbyML/orgs",
        "repos_url": "https://api.github.com/users/KolbyML/repos",
        "events_url": "https://api.github.com/users/KolbyML/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/KolbyML/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-19T06:07:59Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7219628423,
      "node_id": "HRFPE_lADOEEET9c5PZ5y9zwAAAAGuUsmH",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/7219628423",
      "actor": {
        "login": "KolbyML",
        "id": 31669092,
        "node_id": "MDQ6VXNlcjMxNjY5MDky",
        "avatar_url": "https://avatars.githubusercontent.com/u/31669092?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/KolbyML",
        "html_url": "https://github.com/KolbyML",
        "followers_url": "https://api.github.com/users/KolbyML/followers",
        "following_url": "https://api.github.com/users/KolbyML/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/KolbyML/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/KolbyML/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/KolbyML/subscriptions",
        "organizations_url": "https://api.github.com/users/KolbyML/orgs",
        "repos_url": "https://api.github.com/users/KolbyML/repos",
        "events_url": "https://api.github.com/users/KolbyML/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/KolbyML/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-19T06:21:38Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7219740137,
      "node_id": "HRFPE_lADOEEET9c5PZ5y9zwAAAAGuVH3p",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/7219740137",
      "actor": {
        "login": "KolbyML",
        "id": 31669092,
        "node_id": "MDQ6VXNlcjMxNjY5MDky",
        "avatar_url": "https://avatars.githubusercontent.com/u/31669092?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/KolbyML",
        "html_url": "https://github.com/KolbyML",
        "followers_url": "https://api.github.com/users/KolbyML/followers",
        "following_url": "https://api.github.com/users/KolbyML/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/KolbyML/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/KolbyML/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/KolbyML/subscriptions",
        "organizations_url": "https://api.github.com/users/KolbyML/orgs",
        "repos_url": "https://api.github.com/users/KolbyML/repos",
        "events_url": "https://api.github.com/users/KolbyML/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/KolbyML/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-19T06:45:14Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7219875614,
      "node_id": "HRFPE_lADOEEET9c5PZ5y9zwAAAAGuVo8e",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/7219875614",
      "actor": {
        "login": "KolbyML",
        "id": 31669092,
        "node_id": "MDQ6VXNlcjMxNjY5MDky",
        "avatar_url": "https://avatars.githubusercontent.com/u/31669092?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/KolbyML",
        "html_url": "https://github.com/KolbyML",
        "followers_url": "https://api.github.com/users/KolbyML/followers",
        "following_url": "https://api.github.com/users/KolbyML/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/KolbyML/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/KolbyML/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/KolbyML/subscriptions",
        "organizations_url": "https://api.github.com/users/KolbyML/orgs",
        "repos_url": "https://api.github.com/users/KolbyML/repos",
        "events_url": "https://api.github.com/users/KolbyML/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/KolbyML/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-19T07:11:10Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7219933175,
      "node_id": "HRFPE_lADOEEET9c5PZ5y9zwAAAAGuV2_3",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/7219933175",
      "actor": {
        "login": "KolbyML",
        "id": 31669092,
        "node_id": "MDQ6VXNlcjMxNjY5MDky",
        "avatar_url": "https://avatars.githubusercontent.com/u/31669092?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/KolbyML",
        "html_url": "https://github.com/KolbyML",
        "followers_url": "https://api.github.com/users/KolbyML/followers",
        "following_url": "https://api.github.com/users/KolbyML/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/KolbyML/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/KolbyML/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/KolbyML/subscriptions",
        "organizations_url": "https://api.github.com/users/KolbyML/orgs",
        "repos_url": "https://api.github.com/users/KolbyML/repos",
        "events_url": "https://api.github.com/users/KolbyML/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/KolbyML/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-19T07:21:27Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7219937121,
      "node_id": "HRFPE_lADOEEET9c5PZ5y9zwAAAAGuV39h",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/7219937121",
      "actor": {
        "login": "KolbyML",
        "id": 31669092,
        "node_id": "MDQ6VXNlcjMxNjY5MDky",
        "avatar_url": "https://avatars.githubusercontent.com/u/31669092?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/KolbyML",
        "html_url": "https://github.com/KolbyML",
        "followers_url": "https://api.github.com/users/KolbyML/followers",
        "following_url": "https://api.github.com/users/KolbyML/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/KolbyML/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/KolbyML/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/KolbyML/subscriptions",
        "organizations_url": "https://api.github.com/users/KolbyML/orgs",
        "repos_url": "https://api.github.com/users/KolbyML/repos",
        "events_url": "https://api.github.com/users/KolbyML/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/KolbyML/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-19T07:22:08Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7219981309,
      "node_id": "HRFPE_lADOEEET9c5PZ5y9zwAAAAGuWCv9",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/7219981309",
      "actor": {
        "login": "KolbyML",
        "id": 31669092,
        "node_id": "MDQ6VXNlcjMxNjY5MDky",
        "avatar_url": "https://avatars.githubusercontent.com/u/31669092?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/KolbyML",
        "html_url": "https://github.com/KolbyML",
        "followers_url": "https://api.github.com/users/KolbyML/followers",
        "following_url": "https://api.github.com/users/KolbyML/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/KolbyML/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/KolbyML/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/KolbyML/subscriptions",
        "organizations_url": "https://api.github.com/users/KolbyML/orgs",
        "repos_url": "https://api.github.com/users/KolbyML/repos",
        "events_url": "https://api.github.com/users/KolbyML/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/KolbyML/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-19T07:29:30Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7225475649,
      "node_id": "HRFPE_lADOEEET9c5PZ5y9zwAAAAGurAJB",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/7225475649",
      "actor": {
        "login": "KolbyML",
        "id": 31669092,
        "node_id": "MDQ6VXNlcjMxNjY5MDky",
        "avatar_url": "https://avatars.githubusercontent.com/u/31669092?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/KolbyML",
        "html_url": "https://github.com/KolbyML",
        "followers_url": "https://api.github.com/users/KolbyML/followers",
        "following_url": "https://api.github.com/users/KolbyML/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/KolbyML/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/KolbyML/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/KolbyML/subscriptions",
        "organizations_url": "https://api.github.com/users/KolbyML/orgs",
        "repos_url": "https://api.github.com/users/KolbyML/repos",
        "events_url": "https://api.github.com/users/KolbyML/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/KolbyML/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-19T23:37:02Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7225478676,
      "node_id": "HRFPE_lADOEEET9c5PZ5y9zwAAAAGurA4U",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/7225478676",
      "actor": {
        "login": "KolbyML",
        "id": 31669092,
        "node_id": "MDQ6VXNlcjMxNjY5MDky",
        "avatar_url": "https://avatars.githubusercontent.com/u/31669092?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/KolbyML",
        "html_url": "https://github.com/KolbyML",
        "followers_url": "https://api.github.com/users/KolbyML/followers",
        "following_url": "https://api.github.com/users/KolbyML/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/KolbyML/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/KolbyML/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/KolbyML/subscriptions",
        "organizations_url": "https://api.github.com/users/KolbyML/orgs",
        "repos_url": "https://api.github.com/users/KolbyML/repos",
        "events_url": "https://api.github.com/users/KolbyML/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/KolbyML/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-19T23:38:35Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7225606397,
      "node_id": "HRFPE_lADOEEET9c5PZ5y9zwAAAAGurgD9",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/7225606397",
      "actor": {
        "login": "KolbyML",
        "id": 31669092,
        "node_id": "MDQ6VXNlcjMxNjY5MDky",
        "avatar_url": "https://avatars.githubusercontent.com/u/31669092?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/KolbyML",
        "html_url": "https://github.com/KolbyML",
        "followers_url": "https://api.github.com/users/KolbyML/followers",
        "following_url": "https://api.github.com/users/KolbyML/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/KolbyML/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/KolbyML/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/KolbyML/subscriptions",
        "organizations_url": "https://api.github.com/users/KolbyML/orgs",
        "repos_url": "https://api.github.com/users/KolbyML/repos",
        "events_url": "https://api.github.com/users/KolbyML/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/KolbyML/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-20T00:40:13Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7225868563,
      "node_id": "HRFPE_lADOEEET9c5PZ5y9zwAAAAGusgET",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/7225868563",
      "actor": {
        "login": "KolbyML",
        "id": 31669092,
        "node_id": "MDQ6VXNlcjMxNjY5MDky",
        "avatar_url": "https://avatars.githubusercontent.com/u/31669092?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/KolbyML",
        "html_url": "https://github.com/KolbyML",
        "followers_url": "https://api.github.com/users/KolbyML/followers",
        "following_url": "https://api.github.com/users/KolbyML/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/KolbyML/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/KolbyML/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/KolbyML/subscriptions",
        "organizations_url": "https://api.github.com/users/KolbyML/orgs",
        "repos_url": "https://api.github.com/users/KolbyML/repos",
        "events_url": "https://api.github.com/users/KolbyML/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/KolbyML/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-20T04:56:41Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7225887977,
      "node_id": "HRFPE_lADOEEET9c5PZ5y9zwAAAAGuskzp",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/7225887977",
      "actor": {
        "login": "KolbyML",
        "id": 31669092,
        "node_id": "MDQ6VXNlcjMxNjY5MDky",
        "avatar_url": "https://avatars.githubusercontent.com/u/31669092?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/KolbyML",
        "html_url": "https://github.com/KolbyML",
        "followers_url": "https://api.github.com/users/KolbyML/followers",
        "following_url": "https://api.github.com/users/KolbyML/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/KolbyML/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/KolbyML/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/KolbyML/subscriptions",
        "organizations_url": "https://api.github.com/users/KolbyML/orgs",
        "repos_url": "https://api.github.com/users/KolbyML/repos",
        "events_url": "https://api.github.com/users/KolbyML/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/KolbyML/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-20T05:22:11Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7225951180,
      "node_id": "HRFPE_lADOEEET9c5PZ5y9zwAAAAGus0PM",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/7225951180",
      "actor": {
        "login": "KolbyML",
        "id": 31669092,
        "node_id": "MDQ6VXNlcjMxNjY5MDky",
        "avatar_url": "https://avatars.githubusercontent.com/u/31669092?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/KolbyML",
        "html_url": "https://github.com/KolbyML",
        "followers_url": "https://api.github.com/users/KolbyML/followers",
        "following_url": "https://api.github.com/users/KolbyML/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/KolbyML/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/KolbyML/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/KolbyML/subscriptions",
        "organizations_url": "https://api.github.com/users/KolbyML/orgs",
        "repos_url": "https://api.github.com/users/KolbyML/repos",
        "events_url": "https://api.github.com/users/KolbyML/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/KolbyML/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-20T06:41:09Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7225953766,
      "node_id": "HRFPE_lADOEEET9c5PZ5y9zwAAAAGus03m",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/7225953766",
      "actor": {
        "login": "KolbyML",
        "id": 31669092,
        "node_id": "MDQ6VXNlcjMxNjY5MDky",
        "avatar_url": "https://avatars.githubusercontent.com/u/31669092?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/KolbyML",
        "html_url": "https://github.com/KolbyML",
        "followers_url": "https://api.github.com/users/KolbyML/followers",
        "following_url": "https://api.github.com/users/KolbyML/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/KolbyML/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/KolbyML/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/KolbyML/subscriptions",
        "organizations_url": "https://api.github.com/users/KolbyML/orgs",
        "repos_url": "https://api.github.com/users/KolbyML/repos",
        "events_url": "https://api.github.com/users/KolbyML/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/KolbyML/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-20T06:44:30Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7225957524,
      "node_id": "HRFPE_lADOEEET9c5PZ5y9zwAAAAGus1yU",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/7225957524",
      "actor": {
        "login": "KolbyML",
        "id": 31669092,
        "node_id": "MDQ6VXNlcjMxNjY5MDky",
        "avatar_url": "https://avatars.githubusercontent.com/u/31669092?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/KolbyML",
        "html_url": "https://github.com/KolbyML",
        "followers_url": "https://api.github.com/users/KolbyML/followers",
        "following_url": "https://api.github.com/users/KolbyML/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/KolbyML/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/KolbyML/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/KolbyML/subscriptions",
        "organizations_url": "https://api.github.com/users/KolbyML/orgs",
        "repos_url": "https://api.github.com/users/KolbyML/repos",
        "events_url": "https://api.github.com/users/KolbyML/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/KolbyML/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-20T06:48:39Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7225962341,
      "node_id": "HRFPE_lADOEEET9c5PZ5y9zwAAAAGus29l",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/7225962341",
      "actor": {
        "login": "KolbyML",
        "id": 31669092,
        "node_id": "MDQ6VXNlcjMxNjY5MDky",
        "avatar_url": "https://avatars.githubusercontent.com/u/31669092?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/KolbyML",
        "html_url": "https://github.com/KolbyML",
        "followers_url": "https://api.github.com/users/KolbyML/followers",
        "following_url": "https://api.github.com/users/KolbyML/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/KolbyML/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/KolbyML/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/KolbyML/subscriptions",
        "organizations_url": "https://api.github.com/users/KolbyML/orgs",
        "repos_url": "https://api.github.com/users/KolbyML/repos",
        "events_url": "https://api.github.com/users/KolbyML/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/KolbyML/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-20T06:54:44Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7225963870,
      "node_id": "HRFPE_lADOEEET9c5PZ5y9zwAAAAGus3Ve",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/7225963870",
      "actor": {
        "login": "KolbyML",
        "id": 31669092,
        "node_id": "MDQ6VXNlcjMxNjY5MDky",
        "avatar_url": "https://avatars.githubusercontent.com/u/31669092?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/KolbyML",
        "html_url": "https://github.com/KolbyML",
        "followers_url": "https://api.github.com/users/KolbyML/followers",
        "following_url": "https://api.github.com/users/KolbyML/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/KolbyML/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/KolbyML/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/KolbyML/subscriptions",
        "organizations_url": "https://api.github.com/users/KolbyML/orgs",
        "repos_url": "https://api.github.com/users/KolbyML/repos",
        "events_url": "https://api.github.com/users/KolbyML/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/KolbyML/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-20T06:56:39Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7225978897,
      "node_id": "HRFPE_lADOEEET9c5PZ5y9zwAAAAGus7AR",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/7225978897",
      "actor": {
        "login": "KolbyML",
        "id": 31669092,
        "node_id": "MDQ6VXNlcjMxNjY5MDky",
        "avatar_url": "https://avatars.githubusercontent.com/u/31669092?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/KolbyML",
        "html_url": "https://github.com/KolbyML",
        "followers_url": "https://api.github.com/users/KolbyML/followers",
        "following_url": "https://api.github.com/users/KolbyML/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/KolbyML/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/KolbyML/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/KolbyML/subscriptions",
        "organizations_url": "https://api.github.com/users/KolbyML/orgs",
        "repos_url": "https://api.github.com/users/KolbyML/repos",
        "events_url": "https://api.github.com/users/KolbyML/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/KolbyML/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-20T07:15:07Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7225980667,
      "node_id": "HRFPE_lADOEEET9c5PZ5y9zwAAAAGus7b7",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/7225980667",
      "actor": {
        "login": "KolbyML",
        "id": 31669092,
        "node_id": "MDQ6VXNlcjMxNjY5MDky",
        "avatar_url": "https://avatars.githubusercontent.com/u/31669092?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/KolbyML",
        "html_url": "https://github.com/KolbyML",
        "followers_url": "https://api.github.com/users/KolbyML/followers",
        "following_url": "https://api.github.com/users/KolbyML/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/KolbyML/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/KolbyML/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/KolbyML/subscriptions",
        "organizations_url": "https://api.github.com/users/KolbyML/orgs",
        "repos_url": "https://api.github.com/users/KolbyML/repos",
        "events_url": "https://api.github.com/users/KolbyML/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/KolbyML/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-20T07:17:24Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7226560930,
      "node_id": "HRFPE_lADOEEET9c5PZ5y9zwAAAAGuvJGi",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/7226560930",
      "actor": {
        "login": "KolbyML",
        "id": 31669092,
        "node_id": "MDQ6VXNlcjMxNjY5MDky",
        "avatar_url": "https://avatars.githubusercontent.com/u/31669092?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/KolbyML",
        "html_url": "https://github.com/KolbyML",
        "followers_url": "https://api.github.com/users/KolbyML/followers",
        "following_url": "https://api.github.com/users/KolbyML/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/KolbyML/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/KolbyML/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/KolbyML/subscriptions",
        "organizations_url": "https://api.github.com/users/KolbyML/orgs",
        "repos_url": "https://api.github.com/users/KolbyML/repos",
        "events_url": "https://api.github.com/users/KolbyML/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/KolbyML/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-20T17:34:44Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7226583571,
      "node_id": "HRFPE_lADOEEET9c5PZ5y9zwAAAAGuvOoT",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/7226583571",
      "actor": {
        "login": "KolbyML",
        "id": 31669092,
        "node_id": "MDQ6VXNlcjMxNjY5MDky",
        "avatar_url": "https://avatars.githubusercontent.com/u/31669092?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/KolbyML",
        "html_url": "https://github.com/KolbyML",
        "followers_url": "https://api.github.com/users/KolbyML/followers",
        "following_url": "https://api.github.com/users/KolbyML/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/KolbyML/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/KolbyML/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/KolbyML/subscriptions",
        "organizations_url": "https://api.github.com/users/KolbyML/orgs",
        "repos_url": "https://api.github.com/users/KolbyML/repos",
        "events_url": "https://api.github.com/users/KolbyML/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/KolbyML/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-20T17:45:29Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7226591048,
      "node_id": "HRFPE_lADOEEET9c5PZ5y9zwAAAAGuvQdI",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/7226591048",
      "actor": {
        "login": "KolbyML",
        "id": 31669092,
        "node_id": "MDQ6VXNlcjMxNjY5MDky",
        "avatar_url": "https://avatars.githubusercontent.com/u/31669092?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/KolbyML",
        "html_url": "https://github.com/KolbyML",
        "followers_url": "https://api.github.com/users/KolbyML/followers",
        "following_url": "https://api.github.com/users/KolbyML/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/KolbyML/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/KolbyML/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/KolbyML/subscriptions",
        "organizations_url": "https://api.github.com/users/KolbyML/orgs",
        "repos_url": "https://api.github.com/users/KolbyML/repos",
        "events_url": "https://api.github.com/users/KolbyML/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/KolbyML/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-20T17:48:33Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7226596811,
      "node_id": "HRFPE_lADOEEET9c5PZ5y9zwAAAAGuvR3L",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/7226596811",
      "actor": {
        "login": "KolbyML",
        "id": 31669092,
        "node_id": "MDQ6VXNlcjMxNjY5MDky",
        "avatar_url": "https://avatars.githubusercontent.com/u/31669092?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/KolbyML",
        "html_url": "https://github.com/KolbyML",
        "followers_url": "https://api.github.com/users/KolbyML/followers",
        "following_url": "https://api.github.com/users/KolbyML/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/KolbyML/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/KolbyML/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/KolbyML/subscriptions",
        "organizations_url": "https://api.github.com/users/KolbyML/orgs",
        "repos_url": "https://api.github.com/users/KolbyML/repos",
        "events_url": "https://api.github.com/users/KolbyML/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/KolbyML/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-20T17:50:49Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7226601807,
      "node_id": "HRFPE_lADOEEET9c5PZ5y9zwAAAAGuvTFP",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/7226601807",
      "actor": {
        "login": "KolbyML",
        "id": 31669092,
        "node_id": "MDQ6VXNlcjMxNjY5MDky",
        "avatar_url": "https://avatars.githubusercontent.com/u/31669092?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/KolbyML",
        "html_url": "https://github.com/KolbyML",
        "followers_url": "https://api.github.com/users/KolbyML/followers",
        "following_url": "https://api.github.com/users/KolbyML/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/KolbyML/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/KolbyML/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/KolbyML/subscriptions",
        "organizations_url": "https://api.github.com/users/KolbyML/orgs",
        "repos_url": "https://api.github.com/users/KolbyML/repos",
        "events_url": "https://api.github.com/users/KolbyML/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/KolbyML/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-20T17:52:51Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7226621864,
      "node_id": "HRFPE_lADOEEET9c5PZ5y9zwAAAAGuvX-o",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/7226621864",
      "actor": {
        "login": "KolbyML",
        "id": 31669092,
        "node_id": "MDQ6VXNlcjMxNjY5MDky",
        "avatar_url": "https://avatars.githubusercontent.com/u/31669092?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/KolbyML",
        "html_url": "https://github.com/KolbyML",
        "followers_url": "https://api.github.com/users/KolbyML/followers",
        "following_url": "https://api.github.com/users/KolbyML/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/KolbyML/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/KolbyML/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/KolbyML/subscriptions",
        "organizations_url": "https://api.github.com/users/KolbyML/orgs",
        "repos_url": "https://api.github.com/users/KolbyML/repos",
        "events_url": "https://api.github.com/users/KolbyML/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/KolbyML/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-20T18:11:00Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7226628227,
      "node_id": "HRFPE_lADOEEET9c5PZ5y9zwAAAAGuvZiD",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/7226628227",
      "actor": {
        "login": "KolbyML",
        "id": 31669092,
        "node_id": "MDQ6VXNlcjMxNjY5MDky",
        "avatar_url": "https://avatars.githubusercontent.com/u/31669092?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/KolbyML",
        "html_url": "https://github.com/KolbyML",
        "followers_url": "https://api.github.com/users/KolbyML/followers",
        "following_url": "https://api.github.com/users/KolbyML/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/KolbyML/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/KolbyML/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/KolbyML/subscriptions",
        "organizations_url": "https://api.github.com/users/KolbyML/orgs",
        "repos_url": "https://api.github.com/users/KolbyML/repos",
        "events_url": "https://api.github.com/users/KolbyML/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/KolbyML/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-20T18:18:21Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7226635860,
      "node_id": "HRFPE_lADOEEET9c5PZ5y9zwAAAAGuvbZU",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/7226635860",
      "actor": {
        "login": "KolbyML",
        "id": 31669092,
        "node_id": "MDQ6VXNlcjMxNjY5MDky",
        "avatar_url": "https://avatars.githubusercontent.com/u/31669092?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/KolbyML",
        "html_url": "https://github.com/KolbyML",
        "followers_url": "https://api.github.com/users/KolbyML/followers",
        "following_url": "https://api.github.com/users/KolbyML/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/KolbyML/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/KolbyML/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/KolbyML/subscriptions",
        "organizations_url": "https://api.github.com/users/KolbyML/orgs",
        "repos_url": "https://api.github.com/users/KolbyML/repos",
        "events_url": "https://api.github.com/users/KolbyML/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/KolbyML/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-20T18:26:46Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7226637030,
      "node_id": "HRFPE_lADOEEET9c5PZ5y9zwAAAAGuvbrm",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/7226637030",
      "actor": {
        "login": "KolbyML",
        "id": 31669092,
        "node_id": "MDQ6VXNlcjMxNjY5MDky",
        "avatar_url": "https://avatars.githubusercontent.com/u/31669092?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/KolbyML",
        "html_url": "https://github.com/KolbyML",
        "followers_url": "https://api.github.com/users/KolbyML/followers",
        "following_url": "https://api.github.com/users/KolbyML/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/KolbyML/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/KolbyML/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/KolbyML/subscriptions",
        "organizations_url": "https://api.github.com/users/KolbyML/orgs",
        "repos_url": "https://api.github.com/users/KolbyML/repos",
        "events_url": "https://api.github.com/users/KolbyML/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/KolbyML/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-20T18:28:06Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7226637424,
      "node_id": "HRFPE_lADOEEET9c5PZ5y9zwAAAAGuvbxw",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/7226637424",
      "actor": {
        "login": "KolbyML",
        "id": 31669092,
        "node_id": "MDQ6VXNlcjMxNjY5MDky",
        "avatar_url": "https://avatars.githubusercontent.com/u/31669092?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/KolbyML",
        "html_url": "https://github.com/KolbyML",
        "followers_url": "https://api.github.com/users/KolbyML/followers",
        "following_url": "https://api.github.com/users/KolbyML/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/KolbyML/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/KolbyML/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/KolbyML/subscriptions",
        "organizations_url": "https://api.github.com/users/KolbyML/orgs",
        "repos_url": "https://api.github.com/users/KolbyML/repos",
        "events_url": "https://api.github.com/users/KolbyML/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/KolbyML/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-20T18:28:35Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7226681286,
      "node_id": "HRFPE_lADOEEET9c5PZ5y9zwAAAAGuvmfG",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/7226681286",
      "actor": {
        "login": "KolbyML",
        "id": 31669092,
        "node_id": "MDQ6VXNlcjMxNjY5MDky",
        "avatar_url": "https://avatars.githubusercontent.com/u/31669092?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/KolbyML",
        "html_url": "https://github.com/KolbyML",
        "followers_url": "https://api.github.com/users/KolbyML/followers",
        "following_url": "https://api.github.com/users/KolbyML/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/KolbyML/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/KolbyML/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/KolbyML/subscriptions",
        "organizations_url": "https://api.github.com/users/KolbyML/orgs",
        "repos_url": "https://api.github.com/users/KolbyML/repos",
        "events_url": "https://api.github.com/users/KolbyML/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/KolbyML/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-20T19:08:12Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7226729986,
      "node_id": "HRFPE_lADOEEET9c5PZ5y9zwAAAAGuvyYC",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/7226729986",
      "actor": {
        "login": "KolbyML",
        "id": 31669092,
        "node_id": "MDQ6VXNlcjMxNjY5MDky",
        "avatar_url": "https://avatars.githubusercontent.com/u/31669092?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/KolbyML",
        "html_url": "https://github.com/KolbyML",
        "followers_url": "https://api.github.com/users/KolbyML/followers",
        "following_url": "https://api.github.com/users/KolbyML/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/KolbyML/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/KolbyML/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/KolbyML/subscriptions",
        "organizations_url": "https://api.github.com/users/KolbyML/orgs",
        "repos_url": "https://api.github.com/users/KolbyML/repos",
        "events_url": "https://api.github.com/users/KolbyML/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/KolbyML/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-20T19:44:51Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7253261122,
      "node_id": "HRFPE_lADOEEET9c5PZ5y9zwAAAAGwU_tC",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/7253261122",
      "actor": {
        "login": "KolbyML",
        "id": 31669092,
        "node_id": "MDQ6VXNlcjMxNjY5MDky",
        "avatar_url": "https://avatars.githubusercontent.com/u/31669092?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/KolbyML",
        "html_url": "https://github.com/KolbyML",
        "followers_url": "https://api.github.com/users/KolbyML/followers",
        "following_url": "https://api.github.com/users/KolbyML/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/KolbyML/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/KolbyML/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/KolbyML/subscriptions",
        "organizations_url": "https://api.github.com/users/KolbyML/orgs",
        "repos_url": "https://api.github.com/users/KolbyML/repos",
        "events_url": "https://api.github.com/users/KolbyML/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/KolbyML/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-24T18:15:47Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7253954313,
      "node_id": "HRFPE_lADOEEET9c5PZ5y9zwAAAAGwXo8J",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/7253954313",
      "actor": {
        "login": "KolbyML",
        "id": 31669092,
        "node_id": "MDQ6VXNlcjMxNjY5MDky",
        "avatar_url": "https://avatars.githubusercontent.com/u/31669092?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/KolbyML",
        "html_url": "https://github.com/KolbyML",
        "followers_url": "https://api.github.com/users/KolbyML/followers",
        "following_url": "https://api.github.com/users/KolbyML/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/KolbyML/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/KolbyML/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/KolbyML/subscriptions",
        "organizations_url": "https://api.github.com/users/KolbyML/orgs",
        "repos_url": "https://api.github.com/users/KolbyML/repos",
        "events_url": "https://api.github.com/users/KolbyML/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/KolbyML/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-24T20:05:28Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7254885824,
      "node_id": "HRFPE_lADOEEET9c5PZ5y9zwAAAAGwbMXA",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/7254885824",
      "actor": {
        "login": "KolbyML",
        "id": 31669092,
        "node_id": "MDQ6VXNlcjMxNjY5MDky",
        "avatar_url": "https://avatars.githubusercontent.com/u/31669092?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/KolbyML",
        "html_url": "https://github.com/KolbyML",
        "followers_url": "https://api.github.com/users/KolbyML/followers",
        "following_url": "https://api.github.com/users/KolbyML/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/KolbyML/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/KolbyML/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/KolbyML/subscriptions",
        "organizations_url": "https://api.github.com/users/KolbyML/orgs",
        "repos_url": "https://api.github.com/users/KolbyML/repos",
        "events_url": "https://api.github.com/users/KolbyML/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/KolbyML/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-24T23:22:38Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7255026507,
      "node_id": "HRFPE_lADOEEET9c5PZ5y9zwAAAAGwbutL",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/7255026507",
      "actor": {
        "login": "KolbyML",
        "id": 31669092,
        "node_id": "MDQ6VXNlcjMxNjY5MDky",
        "avatar_url": "https://avatars.githubusercontent.com/u/31669092?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/KolbyML",
        "html_url": "https://github.com/KolbyML",
        "followers_url": "https://api.github.com/users/KolbyML/followers",
        "following_url": "https://api.github.com/users/KolbyML/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/KolbyML/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/KolbyML/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/KolbyML/subscriptions",
        "organizations_url": "https://api.github.com/users/KolbyML/orgs",
        "repos_url": "https://api.github.com/users/KolbyML/repos",
        "events_url": "https://api.github.com/users/KolbyML/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/KolbyML/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-24T23:58:32Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7255140797,
      "node_id": "HRFPE_lADOEEET9c5PZ5y9zwAAAAGwcKm9",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/7255140797",
      "actor": {
        "login": "KolbyML",
        "id": 31669092,
        "node_id": "MDQ6VXNlcjMxNjY5MDky",
        "avatar_url": "https://avatars.githubusercontent.com/u/31669092?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/KolbyML",
        "html_url": "https://github.com/KolbyML",
        "followers_url": "https://api.github.com/users/KolbyML/followers",
        "following_url": "https://api.github.com/users/KolbyML/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/KolbyML/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/KolbyML/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/KolbyML/subscriptions",
        "organizations_url": "https://api.github.com/users/KolbyML/orgs",
        "repos_url": "https://api.github.com/users/KolbyML/repos",
        "events_url": "https://api.github.com/users/KolbyML/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/KolbyML/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-25T00:30:08Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7255147388,
      "node_id": "HRFPE_lADOEEET9c5PZ5y9zwAAAAGwcMN8",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/7255147388",
      "actor": {
        "login": "KolbyML",
        "id": 31669092,
        "node_id": "MDQ6VXNlcjMxNjY5MDky",
        "avatar_url": "https://avatars.githubusercontent.com/u/31669092?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/KolbyML",
        "html_url": "https://github.com/KolbyML",
        "followers_url": "https://api.github.com/users/KolbyML/followers",
        "following_url": "https://api.github.com/users/KolbyML/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/KolbyML/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/KolbyML/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/KolbyML/subscriptions",
        "organizations_url": "https://api.github.com/users/KolbyML/orgs",
        "repos_url": "https://api.github.com/users/KolbyML/repos",
        "events_url": "https://api.github.com/users/KolbyML/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/KolbyML/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-25T00:31:54Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7255428971,
      "node_id": "HRFPE_lADOEEET9c5PZ5y9zwAAAAGwdQ9r",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/7255428971",
      "actor": {
        "login": "KolbyML",
        "id": 31669092,
        "node_id": "MDQ6VXNlcjMxNjY5MDky",
        "avatar_url": "https://avatars.githubusercontent.com/u/31669092?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/KolbyML",
        "html_url": "https://github.com/KolbyML",
        "followers_url": "https://api.github.com/users/KolbyML/followers",
        "following_url": "https://api.github.com/users/KolbyML/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/KolbyML/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/KolbyML/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/KolbyML/subscriptions",
        "organizations_url": "https://api.github.com/users/KolbyML/orgs",
        "repos_url": "https://api.github.com/users/KolbyML/repos",
        "events_url": "https://api.github.com/users/KolbyML/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/KolbyML/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-25T01:51:46Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7255433470,
      "node_id": "HRFPE_lADOEEET9c5PZ5y9zwAAAAGwdSD-",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/7255433470",
      "actor": {
        "login": "KolbyML",
        "id": 31669092,
        "node_id": "MDQ6VXNlcjMxNjY5MDky",
        "avatar_url": "https://avatars.githubusercontent.com/u/31669092?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/KolbyML",
        "html_url": "https://github.com/KolbyML",
        "followers_url": "https://api.github.com/users/KolbyML/followers",
        "following_url": "https://api.github.com/users/KolbyML/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/KolbyML/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/KolbyML/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/KolbyML/subscriptions",
        "organizations_url": "https://api.github.com/users/KolbyML/orgs",
        "repos_url": "https://api.github.com/users/KolbyML/repos",
        "events_url": "https://api.github.com/users/KolbyML/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/KolbyML/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-25T01:53:20Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7255924816,
      "node_id": "HRFPE_lADOEEET9c5PZ5y9zwAAAAGwfKBQ",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/7255924816",
      "actor": {
        "login": "KolbyML",
        "id": 31669092,
        "node_id": "MDQ6VXNlcjMxNjY5MDky",
        "avatar_url": "https://avatars.githubusercontent.com/u/31669092?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/KolbyML",
        "html_url": "https://github.com/KolbyML",
        "followers_url": "https://api.github.com/users/KolbyML/followers",
        "following_url": "https://api.github.com/users/KolbyML/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/KolbyML/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/KolbyML/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/KolbyML/subscriptions",
        "organizations_url": "https://api.github.com/users/KolbyML/orgs",
        "repos_url": "https://api.github.com/users/KolbyML/repos",
        "events_url": "https://api.github.com/users/KolbyML/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/KolbyML/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-25T04:18:50Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7256467725,
      "node_id": "HRFPE_lADOEEET9c5PZ5y9zwAAAAGwhOkN",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/7256467725",
      "actor": {
        "login": "KolbyML",
        "id": 31669092,
        "node_id": "MDQ6VXNlcjMxNjY5MDky",
        "avatar_url": "https://avatars.githubusercontent.com/u/31669092?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/KolbyML",
        "html_url": "https://github.com/KolbyML",
        "followers_url": "https://api.github.com/users/KolbyML/followers",
        "following_url": "https://api.github.com/users/KolbyML/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/KolbyML/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/KolbyML/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/KolbyML/subscriptions",
        "organizations_url": "https://api.github.com/users/KolbyML/orgs",
        "repos_url": "https://api.github.com/users/KolbyML/repos",
        "events_url": "https://api.github.com/users/KolbyML/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/KolbyML/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-25T06:30:13Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7256759381,
      "node_id": "HRFPE_lADOEEET9c5PZ5y9zwAAAAGwiVxV",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/7256759381",
      "actor": {
        "login": "KolbyML",
        "id": 31669092,
        "node_id": "MDQ6VXNlcjMxNjY5MDky",
        "avatar_url": "https://avatars.githubusercontent.com/u/31669092?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/KolbyML",
        "html_url": "https://github.com/KolbyML",
        "followers_url": "https://api.github.com/users/KolbyML/followers",
        "following_url": "https://api.github.com/users/KolbyML/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/KolbyML/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/KolbyML/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/KolbyML/subscriptions",
        "organizations_url": "https://api.github.com/users/KolbyML/orgs",
        "repos_url": "https://api.github.com/users/KolbyML/repos",
        "events_url": "https://api.github.com/users/KolbyML/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/KolbyML/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-25T07:19:20Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7257512906,
      "node_id": "HRFPE_lADOEEET9c5PZ5y9zwAAAAGwlNvK",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/7257512906",
      "actor": {
        "login": "KolbyML",
        "id": 31669092,
        "node_id": "MDQ6VXNlcjMxNjY5MDky",
        "avatar_url": "https://avatars.githubusercontent.com/u/31669092?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/KolbyML",
        "html_url": "https://github.com/KolbyML",
        "followers_url": "https://api.github.com/users/KolbyML/followers",
        "following_url": "https://api.github.com/users/KolbyML/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/KolbyML/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/KolbyML/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/KolbyML/subscriptions",
        "organizations_url": "https://api.github.com/users/KolbyML/orgs",
        "repos_url": "https://api.github.com/users/KolbyML/repos",
        "events_url": "https://api.github.com/users/KolbyML/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/KolbyML/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-25T08:59:55Z"
    },
    {
      "event": "commented",
      "id": 1226985677,
      "node_id": "IC_kwDOEEET9c5JIlDN",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/comments/1226985677",
      "actor": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-25T09:03:43Z",
      "updated_at": "2022-08-25T09:04:16Z",
      "author_association": "MEMBER",
      "body": "@KolbyML \r\n\r\nIt is not an appropriate usage of CI resources to debug your branch.",
      "user": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/gui/pull/650#issuecomment-1226985677",
      "issue_url": "https://api.github.com/repos/bitcoin-core/gui/issues/650"
    },
    {
      "event": "mentioned",
      "id": 7257546745,
      "node_id": "MEE_lADOEEET9c5PZ5y9zwAAAAGwlV_5",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/7257546745",
      "actor": {
        "login": "KolbyML",
        "id": 31669092,
        "node_id": "MDQ6VXNlcjMxNjY5MDky",
        "avatar_url": "https://avatars.githubusercontent.com/u/31669092?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/KolbyML",
        "html_url": "https://github.com/KolbyML",
        "followers_url": "https://api.github.com/users/KolbyML/followers",
        "following_url": "https://api.github.com/users/KolbyML/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/KolbyML/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/KolbyML/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/KolbyML/subscriptions",
        "organizations_url": "https://api.github.com/users/KolbyML/orgs",
        "repos_url": "https://api.github.com/users/KolbyML/repos",
        "events_url": "https://api.github.com/users/KolbyML/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/KolbyML/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-25T09:04:17Z"
    },
    {
      "event": "subscribed",
      "id": 7257546778,
      "node_id": "SE_lADOEEET9c5PZ5y9zwAAAAGwlWAa",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/7257546778",
      "actor": {
        "login": "KolbyML",
        "id": 31669092,
        "node_id": "MDQ6VXNlcjMxNjY5MDky",
        "avatar_url": "https://avatars.githubusercontent.com/u/31669092?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/KolbyML",
        "html_url": "https://github.com/KolbyML",
        "followers_url": "https://api.github.com/users/KolbyML/followers",
        "following_url": "https://api.github.com/users/KolbyML/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/KolbyML/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/KolbyML/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/KolbyML/subscriptions",
        "organizations_url": "https://api.github.com/users/KolbyML/orgs",
        "repos_url": "https://api.github.com/users/KolbyML/repos",
        "events_url": "https://api.github.com/users/KolbyML/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/KolbyML/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-25T09:04:17Z"
    },
    {
      "event": "commented",
      "id": 1226991485,
      "node_id": "IC_kwDOEEET9c5JImd9",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/comments/1226991485",
      "actor": {
        "login": "KolbyML",
        "id": 31669092,
        "node_id": "MDQ6VXNlcjMxNjY5MDky",
        "avatar_url": "https://avatars.githubusercontent.com/u/31669092?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/KolbyML",
        "html_url": "https://github.com/KolbyML",
        "followers_url": "https://api.github.com/users/KolbyML/followers",
        "following_url": "https://api.github.com/users/KolbyML/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/KolbyML/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/KolbyML/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/KolbyML/subscriptions",
        "organizations_url": "https://api.github.com/users/KolbyML/orgs",
        "repos_url": "https://api.github.com/users/KolbyML/repos",
        "events_url": "https://api.github.com/users/KolbyML/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/KolbyML/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-25T09:07:51Z",
      "updated_at": "2022-08-25T09:07:51Z",
      "author_association": "CONTRIBUTOR",
      "body": "> @KolbyML\r\n> \r\n> It is not an appropriate usage of CI resources to debug your branch.\r\n\r\n@hebasto oh, sorry for doing that. How should I debug the Win64 native [vs2022] linker error I have then going forward? Thank you for letting me know",
      "user": {
        "login": "KolbyML",
        "id": 31669092,
        "node_id": "MDQ6VXNlcjMxNjY5MDky",
        "avatar_url": "https://avatars.githubusercontent.com/u/31669092?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/KolbyML",
        "html_url": "https://github.com/KolbyML",
        "followers_url": "https://api.github.com/users/KolbyML/followers",
        "following_url": "https://api.github.com/users/KolbyML/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/KolbyML/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/KolbyML/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/KolbyML/subscriptions",
        "organizations_url": "https://api.github.com/users/KolbyML/orgs",
        "repos_url": "https://api.github.com/users/KolbyML/repos",
        "events_url": "https://api.github.com/users/KolbyML/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/KolbyML/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/gui/pull/650#issuecomment-1226991485",
      "issue_url": "https://api.github.com/repos/bitcoin-core/gui/issues/650"
    },
    {
      "event": "mentioned",
      "id": 7257574761,
      "node_id": "MEE_lADOEEET9c5PZ5y9zwAAAAGwlc1p",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/7257574761",
      "actor": {
        "login": "KolbyML",
        "id": 31669092,
        "node_id": "MDQ6VXNlcjMxNjY5MDky",
        "avatar_url": "https://avatars.githubusercontent.com/u/31669092?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/KolbyML",
        "html_url": "https://github.com/KolbyML",
        "followers_url": "https://api.github.com/users/KolbyML/followers",
        "following_url": "https://api.github.com/users/KolbyML/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/KolbyML/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/KolbyML/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/KolbyML/subscriptions",
        "organizations_url": "https://api.github.com/users/KolbyML/orgs",
        "repos_url": "https://api.github.com/users/KolbyML/repos",
        "events_url": "https://api.github.com/users/KolbyML/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/KolbyML/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-25T09:07:51Z"
    },
    {
      "event": "subscribed",
      "id": 7257574768,
      "node_id": "SE_lADOEEET9c5PZ5y9zwAAAAGwlc1w",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/7257574768",
      "actor": {
        "login": "KolbyML",
        "id": 31669092,
        "node_id": "MDQ6VXNlcjMxNjY5MDky",
        "avatar_url": "https://avatars.githubusercontent.com/u/31669092?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/KolbyML",
        "html_url": "https://github.com/KolbyML",
        "followers_url": "https://api.github.com/users/KolbyML/followers",
        "following_url": "https://api.github.com/users/KolbyML/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/KolbyML/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/KolbyML/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/KolbyML/subscriptions",
        "organizations_url": "https://api.github.com/users/KolbyML/orgs",
        "repos_url": "https://api.github.com/users/KolbyML/repos",
        "events_url": "https://api.github.com/users/KolbyML/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/KolbyML/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-25T09:07:51Z"
    },
    {
      "event": "mentioned",
      "id": 7257574774,
      "node_id": "MEE_lADOEEET9c5PZ5y9zwAAAAGwlc12",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/7257574774",
      "actor": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-25T09:07:51Z"
    },
    {
      "event": "subscribed",
      "id": 7257574785,
      "node_id": "SE_lADOEEET9c5PZ5y9zwAAAAGwlc2B",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/7257574785",
      "actor": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-25T09:07:51Z"
    },
    {
      "event": "commented",
      "id": 1226994796,
      "node_id": "IC_kwDOEEET9c5JInRs",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/comments/1226994796",
      "actor": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-25T09:09:55Z",
      "updated_at": "2022-08-25T09:09:55Z",
      "author_association": "MEMBER",
      "body": "> How should I debug the Win64 native [vs2022] linker error I have then going forward? Thank you for letting me know\r\n\r\nbitcoin/bitcoin#25929 should fix it",
      "user": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/gui/pull/650#issuecomment-1226994796",
      "issue_url": "https://api.github.com/repos/bitcoin-core/gui/issues/650"
    },
    {
      "event": "commented",
      "id": 1226997922,
      "node_id": "IC_kwDOEEET9c5JIoCi",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/comments/1226997922",
      "actor": {
        "login": "KolbyML",
        "id": 31669092,
        "node_id": "MDQ6VXNlcjMxNjY5MDky",
        "avatar_url": "https://avatars.githubusercontent.com/u/31669092?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/KolbyML",
        "html_url": "https://github.com/KolbyML",
        "followers_url": "https://api.github.com/users/KolbyML/followers",
        "following_url": "https://api.github.com/users/KolbyML/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/KolbyML/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/KolbyML/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/KolbyML/subscriptions",
        "organizations_url": "https://api.github.com/users/KolbyML/orgs",
        "repos_url": "https://api.github.com/users/KolbyML/repos",
        "events_url": "https://api.github.com/users/KolbyML/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/KolbyML/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-25T09:12:55Z",
      "updated_at": "2022-08-25T09:14:07Z",
      "author_association": "CONTRIBUTOR",
      "body": "> > How should I debug the Win64 native [vs2022] linker error I have then going forward? Thank you for letting me know\r\n> \r\n> [bitcoin/bitcoin#25929](https://github.com/bitcoin/bitcoin/pull/25929) should fix it\r\n\r\nThank you for letting me know that was driving me crazy. Cause it seemed like my code was fine. I will push my changes, then switch the PR to a draft then, since I think that won't trigger CI. Worse comes to worse I will just work on a local branch like I was originally before working on the PR.\r\n\r\nEdit: switch it to a draft till I am done implementing tests for importmulti/importdescriptors",
      "user": {
        "login": "KolbyML",
        "id": 31669092,
        "node_id": "MDQ6VXNlcjMxNjY5MDky",
        "avatar_url": "https://avatars.githubusercontent.com/u/31669092?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/KolbyML",
        "html_url": "https://github.com/KolbyML",
        "followers_url": "https://api.github.com/users/KolbyML/followers",
        "following_url": "https://api.github.com/users/KolbyML/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/KolbyML/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/KolbyML/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/KolbyML/subscriptions",
        "organizations_url": "https://api.github.com/users/KolbyML/orgs",
        "repos_url": "https://api.github.com/users/KolbyML/repos",
        "events_url": "https://api.github.com/users/KolbyML/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/KolbyML/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/gui/pull/650#issuecomment-1226997922",
      "issue_url": "https://api.github.com/repos/bitcoin-core/gui/issues/650"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7257638421,
      "node_id": "HRFPE_lADOEEET9c5PZ5y9zwAAAAGwlsYV",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/7257638421",
      "actor": {
        "login": "KolbyML",
        "id": 31669092,
        "node_id": "MDQ6VXNlcjMxNjY5MDky",
        "avatar_url": "https://avatars.githubusercontent.com/u/31669092?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/KolbyML",
        "html_url": "https://github.com/KolbyML",
        "followers_url": "https://api.github.com/users/KolbyML/followers",
        "following_url": "https://api.github.com/users/KolbyML/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/KolbyML/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/KolbyML/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/KolbyML/subscriptions",
        "organizations_url": "https://api.github.com/users/KolbyML/orgs",
        "repos_url": "https://api.github.com/users/KolbyML/repos",
        "events_url": "https://api.github.com/users/KolbyML/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/KolbyML/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-25T09:15:19Z"
    },
    {
      "event": "commented",
      "id": 1227027971,
      "node_id": "IC_kwDOEEET9c5JIvYD",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/comments/1227027971",
      "actor": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-25T09:40:57Z",
      "updated_at": "2022-08-25T09:40:57Z",
      "author_association": "MEMBER",
      "body": "> Edit: switch it to a draft till I am done implementing tests for importmulti/importdescriptors\r\n\r\n![image](https://user-images.githubusercontent.com/32963518/186631627-9d0497dd-f38d-4c45-bf75-1f40d3d55b00.png)\r\n\r\nJust click \"Convert to draft\" :)",
      "user": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/gui/pull/650#issuecomment-1227027971",
      "issue_url": "https://api.github.com/repos/bitcoin-core/gui/issues/650"
    },
    {
      "event": "convert_to_draft",
      "id": 7261217249,
      "node_id": "CTDE_lADOEEET9c5PZ5y9zwAAAAGwzWHh",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/7261217249",
      "actor": {
        "login": "KolbyML",
        "id": 31669092,
        "node_id": "MDQ6VXNlcjMxNjY5MDky",
        "avatar_url": "https://avatars.githubusercontent.com/u/31669092?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/KolbyML",
        "html_url": "https://github.com/KolbyML",
        "followers_url": "https://api.github.com/users/KolbyML/followers",
        "following_url": "https://api.github.com/users/KolbyML/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/KolbyML/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/KolbyML/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/KolbyML/subscriptions",
        "organizations_url": "https://api.github.com/users/KolbyML/orgs",
        "repos_url": "https://api.github.com/users/KolbyML/repos",
        "events_url": "https://api.github.com/users/KolbyML/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/KolbyML/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-25T16:47:05Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7264382485,
      "node_id": "HRFPE_lADOEEET9c5PZ5y9zwAAAAGw_a4V",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/7264382485",
      "actor": {
        "login": "KolbyML",
        "id": 31669092,
        "node_id": "MDQ6VXNlcjMxNjY5MDky",
        "avatar_url": "https://avatars.githubusercontent.com/u/31669092?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/KolbyML",
        "html_url": "https://github.com/KolbyML",
        "followers_url": "https://api.github.com/users/KolbyML/followers",
        "following_url": "https://api.github.com/users/KolbyML/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/KolbyML/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/KolbyML/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/KolbyML/subscriptions",
        "organizations_url": "https://api.github.com/users/KolbyML/orgs",
        "repos_url": "https://api.github.com/users/KolbyML/repos",
        "events_url": "https://api.github.com/users/KolbyML/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/KolbyML/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-26T03:55:47Z"
    },
    {
      "event": "commented",
      "id": 1286961980,
      "node_id": "IC_kwDOEEET9c5MtXs8",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/comments/1286961980",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-10-21T13:27:57Z",
      "updated_at": "2023-08-10T23:50:56Z",
      "author_association": "CONTRIBUTOR",
      "body": "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--021abf342d371248e50ceaed478a90ca-->\n### Reviews\nSee [the guideline](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#code-review) for information on the review process.\n| Type | Reviewers |\n| ---- | --------- |\n| Concept ACK | [w0xlt](https://github.com/bitcoin-core/gui/pull/650#issuecomment-1209915707), [jarolrod](https://github.com/bitcoin-core/gui/pull/650#pullrequestreview-1067481148), [hernanmarino](https://github.com/bitcoin-core/gui/pull/650#pullrequestreview-1358165949) |\n\nIf your review is incorrectly listed, please react with 👎 to this comment and the bot will ignore it on the next update.\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#bitcoin/bitcoin/28246](https://github.com/bitcoin/bitcoin/pull/28246) (wallet: Use CTxDestination in CRecipient instead of just scriptPubKey by achow101)\n* [#bitcoin/bitcoin/28244](https://github.com/bitcoin/bitcoin/pull/28244) (Break up script/standard.{h/cpp} by achow101)\n* [#bitcoin/bitcoin/28202](https://github.com/bitcoin/bitcoin/pull/28202) (Silent Payments: receiving by josibake)\n* [#bitcoin/bitcoin/28201](https://github.com/bitcoin/bitcoin/pull/28201) (Silent Payments: sending by josibake)\n* [#bitcoin/bitcoin/28126](https://github.com/bitcoin/bitcoin/pull/28126) (wallet legacy: bugfix, disallow importing invalid scripts via importaddress by furszy)\n* [#bitcoin/bitcoin/28122](https://github.com/bitcoin/bitcoin/pull/28122) (Silent Payments: Implement BIP352 by josibake)\n* [#bitcoin/bitcoin/27865](https://github.com/bitcoin/bitcoin/pull/27865) (wallet: Track no-longer-spendable TXOs separately by achow101)\n* [#bitcoin/bitcoin/27827](https://github.com/bitcoin/bitcoin/pull/27827) (Silent Payments: send and receive by josibake)\n* [#bitcoin/bitcoin/27351](https://github.com/bitcoin/bitcoin/pull/27351) (wallet: add `seeds` argument to `importdescriptors` by apoelstra)\n* [#bitcoin/bitcoin/27286](https://github.com/bitcoin/bitcoin/pull/27286) (wallet: Keep track of the wallet's own transaction outputs in memory by achow101)\n* [#bitcoin/bitcoin/27101](https://github.com/bitcoin/bitcoin/pull/27101) (Support JSON-RPC 2.0 when requested by client by pinheadmz)\n* [#bitcoin/bitcoin/27034](https://github.com/bitcoin/bitcoin/pull/27034) (rpc: make importaddress compatible with descriptors wallet by furszy)\n* [#bitcoin/bitcoin/26840](https://github.com/bitcoin/bitcoin/pull/26840) (refactor: importpubkey, importprivkey, importaddress, importmulti, and importdescriptors rpc by KolbyML)\n* [#bitcoin/bitcoin/26403](https://github.com/bitcoin/bitcoin/pull/26403) (policy: Ephemeral anchors by instagibbs)\n* [#bitcoin/bitcoin/22838](https://github.com/bitcoin/bitcoin/pull/22838) (descriptors: Be able to specify change and receiving in a single descriptor string by achow101)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.\n",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/gui/pull/650#issuecomment-1286961980",
      "issue_url": "https://api.github.com/repos/bitcoin-core/gui/issues/650"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-10-21T18:03:41Z",
      "updated_at": "2022-10-21T18:03:41Z",
      "source": {
        "issue": {
          "id": 1395216330,
          "node_id": "PR_kwDOABII585AFMRG",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26238",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26238/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26238/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26238/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/26238",
          "number": 26238,
          "state": "closed",
          "state_reason": null,
          "title": "clang-tidy: fixup named argument comments",
          "body": "Fix comments so they are checked/consistent.\r\nFix incorrect comments.",
          "user": {
            "login": "fanquake",
            "id": 863730,
            "node_id": "MDQ6VXNlcjg2MzczMA==",
            "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/fanquake",
            "html_url": "https://github.com/fanquake",
            "followers_url": "https://api.github.com/users/fanquake/followers",
            "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
            "organizations_url": "https://api.github.com/users/fanquake/orgs",
            "repos_url": "https://api.github.com/users/fanquake/repos",
            "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/fanquake/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": false,
          "comments": 9,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26238",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/26238",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/26238.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/26238.patch"
          },
          "closed_at": "2022-12-06T11:06:58Z",
          "created_at": "2022-10-03T19:27:58Z",
          "updated_at": "2022-12-06T11:07:15Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-10-21T18:25:47Z",
      "updated_at": "2022-10-21T18:25:47Z",
      "source": {
        "issue": {
          "id": 1387484303,
          "node_id": "PR_kwDOABII584_rkDm",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26186",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26186/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26186/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26186/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/26186",
          "number": 26186,
          "state": "closed",
          "state_reason": null,
          "title": "rpc: Sanitize label name in various RPCs with tests",
          "body": "The following RPCs did not sanitize the optional label name:\r\n- importprivkey\r\n- importaddress\r\n- importpubkey\r\n- importmulti\r\n- importdescriptors\r\n- listsinceblock\r\n\r\nThus is was possible to import an address with a label `*` which should not be possible.\r\nThe wildcard label is used for backwards compatibility in the `listtransactions` rpc.\r\nI added test coverage for these RPCs.",
          "user": {
            "login": "aureleoules",
            "id": 22493292,
            "node_id": "MDQ6VXNlcjIyNDkzMjky",
            "avatar_url": "https://avatars.githubusercontent.com/u/22493292?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/aureleoules",
            "html_url": "https://github.com/aureleoules",
            "followers_url": "https://api.github.com/users/aureleoules/followers",
            "following_url": "https://api.github.com/users/aureleoules/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/aureleoules/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/aureleoules/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/aureleoules/subscriptions",
            "organizations_url": "https://api.github.com/users/aureleoules/orgs",
            "repos_url": "https://api.github.com/users/aureleoules/repos",
            "events_url": "https://api.github.com/users/aureleoules/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/aureleoules/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 149424,
              "node_id": "MDU6TGFiZWwxNDk0MjQ=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Wallet",
              "name": "Wallet",
              "color": "08a781",
              "default": false
            },
            {
              "id": 98279177,
              "node_id": "MDU6TGFiZWw5ODI3OTE3Nw==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/RPC/REST/ZMQ",
              "name": "RPC/REST/ZMQ",
              "color": "0052cc",
              "default": false
            }
          ],
          "assignee": {
            "login": "achow101",
            "id": 3782274,
            "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
            "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/achow101",
            "html_url": "https://github.com/achow101",
            "followers_url": "https://api.github.com/users/achow101/followers",
            "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
            "organizations_url": "https://api.github.com/users/achow101/orgs",
            "repos_url": "https://api.github.com/users/achow101/repos",
            "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/achow101/received_events",
            "type": "User",
            "site_admin": false
          },
          "assignees": [
            {
              "login": "achow101",
              "id": 3782274,
              "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
              "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
              "gravatar_id": "",
              "url": "https://api.github.com/users/achow101",
              "html_url": "https://github.com/achow101",
              "followers_url": "https://api.github.com/users/achow101/followers",
              "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
              "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
              "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
              "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
              "organizations_url": "https://api.github.com/users/achow101/orgs",
              "repos_url": "https://api.github.com/users/achow101/repos",
              "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
              "received_events_url": "https://api.github.com/users/achow101/received_events",
              "type": "User",
              "site_admin": false
            }
          ],
          "author_association": "MEMBER",
          "locked": false,
          "comments": 13,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26186",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/26186",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/26186.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/26186.patch"
          },
          "closed_at": "2023-01-10T22:32:11Z",
          "created_at": "2022-09-27T10:06:48Z",
          "updated_at": "2023-01-12T11:51:48Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-10-23T05:04:31Z",
      "updated_at": "2022-10-23T05:04:31Z",
      "source": {
        "issue": {
          "id": 1206247497,
          "node_id": "PR_kwDOABII5842Uktn",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/24897",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/24897/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/24897/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/24897/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/24897",
          "number": 24897,
          "state": "closed",
          "state_reason": null,
          "title": "[Draft / POC] Silent Payments",
          "body": "This PR proposes an early version of [Silent Payment](https://gist.github.com/RubenSomsen/c43b79517e7cb701ebf77eec6dbb46b8) (author:@RubenSomsen).\r\nIn this scheme, the recipient generates a public address, but the sender tweaks the address and the recipient detects the payment by verifying all transactions on the blockchain. An example use case would be private donations.\r\n\r\nThe purpose of this PR is not a final version, but to start the discussion and get benchmarks based on a real implementation.\r\n\r\nThis version is built on top of [#994](https://github.com/bitcoin-core/secp256k1/pull/994) (bitcoin-core/secp256k1) for x-only ECDH support and #23480 (bitcoin/bitcoin) for `rawtr()`. Each new silent transaction detected is stored in wallet as a `rawtr()` descriptor. \r\n\r\nIn this implementation, the sender can tweak the recipient address by passing the `silent_payment` option to send RPC. The transaction output will be different from the address entered.\r\n\r\nFor example `./src/bitcoin-cli -regtest -named send outputs=\"[{\\\"bcrt1pwlh5xuyrpgfunwyww8cfu78yfs2yqyevl7yturavahh5kgxwdd2q5hzgfu\\\": 1.1}]\" fee_rate=1 options=\"{ \\\"silent_payment\\\": true}\"`.\r\n\r\nwill generate `vout` with completely unrelated outputs:\r\n\r\n```\r\n\"vout\": [\r\n    {\r\n      \"value\": 1.10000000,\r\n      \"n\": 0,\r\n      \"scriptPubKey\": {\r\n        \"desc\": \"rawtr(65b19890c5ca40edb816d26f5f48cd9f3ed51121613b1c2405adc1a6dbbc824a)#8myx9tcu\",\r\n        \"address\": \"bcrt1pvkce3yx9efqwmwqk6fh47jxdnuld2yfpvya3cfq94hq6dkausf9qrfjkgz\",\r\n\r\n      }\r\n    },\r\n    {\r\n      \"value\": 2.02499835,\r\n      \"n\": 1,\r\n      \"scriptPubKey\": {\r\n        \"desc\": \"rawtr(c45cb3d500bbf8f0c8841e8e011b008781d826c16ee348edb822c0f97419bc4d)#26hcce63\",\r\n        \"address\": \"bcrt1pc3wt84gqh0u0pjyyr68qzxcqs7qasfkpdm353mdcytq0jaqeh3xsuvlykg\",\r\n      }\r\n    }\r\n  ]\r\n```\r\n\r\nAny wallet, as long as it has access to private keys, can send silent payments. Thus, this excludes watch-only wallets or wallets with external signers .\r\n\r\nBut the recipient's wallet needs a new flag called `SILENT_PAYMENT`. This flag allows an additional scan that verifies that the wallet keys match the silent payment scheme. When it detects a silent payment that belongs to the wallet, it is stored in a `rawtr()` descriptor.\r\n\r\n`./src/bitcoin-cli -regtest -named createwallet wallet_name=\"recipient\" silent_payment=true`\r\n\r\nTherefore, scanning each address for each transaction is potentially prohibitive overhead, so the node can be initialized with `keypool=1` or a descriptor with range [0,1] can be imported into a blank wallet. Until there is more benchmark data, it is the safest option. The proposal recommends one static address.\r\n\r\nI've been running some silent payments on signet using wallets with default keypool and default range, I haven't noticed any relevant performance drops on the signet node.\r\nApparently this implementation is working as expected but I can't guarantee that the scheme is implemented correctly or safely, so I'm opening this PR for reviews, modifications and improvements.\r\n\r\nThere is a new functional test (`test/functional/wallet_silentpayment.py`) that can help to better understand the implementation.",
          "user": {
            "login": "w0xlt",
            "id": 94266259,
            "node_id": "U_kgDOBZ5jkw",
            "avatar_url": "https://avatars.githubusercontent.com/u/94266259?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/w0xlt",
            "html_url": "https://github.com/w0xlt",
            "followers_url": "https://api.github.com/users/w0xlt/followers",
            "following_url": "https://api.github.com/users/w0xlt/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/w0xlt/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/w0xlt/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/w0xlt/subscriptions",
            "organizations_url": "https://api.github.com/users/w0xlt/orgs",
            "repos_url": "https://api.github.com/users/w0xlt/repos",
            "events_url": "https://api.github.com/users/w0xlt/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/w0xlt/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 149424,
              "node_id": "MDU6TGFiZWwxNDk0MjQ=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Wallet",
              "name": "Wallet",
              "color": "08a781",
              "default": false
            },
            {
              "id": 61889416,
              "node_id": "MDU6TGFiZWw2MTg4OTQxNg==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Build%20system",
              "name": "Build system",
              "color": "5319e7",
              "default": false
            },
            {
              "id": 98279177,
              "node_id": "MDU6TGFiZWw5ODI3OTE3Nw==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/RPC/REST/ZMQ",
              "name": "RPC/REST/ZMQ",
              "color": "0052cc",
              "default": false
            },
            {
              "id": 159815356,
              "node_id": "MDU6TGFiZWwxNTk4MTUzNTY=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Upstream",
              "name": "Upstream",
              "color": "bfd4f2",
              "default": false
            },
            {
              "id": 241832923,
              "node_id": "MDU6TGFiZWwyNDE4MzI5MjM=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Utils/log/libs",
              "name": "Utils/log/libs",
              "description": "",
              "color": "5319e7",
              "default": false
            },
            {
              "id": 955867938,
              "node_id": "MDU6TGFiZWw5NTU4Njc5Mzg=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Needs%20rebase",
              "name": "Needs rebase",
              "description": "",
              "color": "cccccc",
              "default": false
            },
            {
              "id": 1482182044,
              "node_id": "MDU6TGFiZWwxNDgyMTgyMDQ0",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Descriptors",
              "name": "Descriptors",
              "description": "",
              "color": "e9f76c",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "CONTRIBUTOR",
          "locked": false,
          "comments": 86,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24897",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/24897",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/24897.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/24897.patch"
          },
          "closed_at": "2023-06-05T13:18:14Z",
          "created_at": "2022-04-17T00:37:23Z",
          "updated_at": "2023-06-27T11:03:39Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-10-23T18:58:50Z",
      "updated_at": "2022-10-23T18:58:50Z",
      "source": {
        "issue": {
          "id": 983140832,
          "node_id": "MDExOlB1bGxSZXF1ZXN0NzIyNzY4MTc5",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/22838",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/22838/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/22838/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/22838/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/22838",
          "number": 22838,
          "state": "open",
          "state_reason": null,
          "title": "descriptors: Be able to specify change and receiving in a single descriptor string",
          "body": "It is convenient to have a descriptor which specifies both receiving and change addresses in a single string. However, as discussed in https://github.com/bitcoin/bitcoin/issues/17190#issuecomment-895515768, it is not feasible to use a generic multipath specification like BIP 88 due to combinatorial blow up and that it would result in unexpected descriptors.\r\n\r\nTo resolve that problem, this PR proposes a targeted solution which allows only a single pair of 2 derivation indexes to be inserted in the place of a single derivation index. So instead of two descriptor `wpkh(xpub.../0/0/*)` and `wpkh(xpub.../0/1/*)` to represent receive and change addresses, this could be written as `wpkh(xpub.../0/<0;1>/*)`. The multipath specifier is of the form `<NUM;NUM>`. Each `NUM` can have its own hardened specifier, e.g. `<0;1h>` is valid. The multipath specifier can also only appear in one path index in the derivation path.\r\n\r\nThis results in the parser returning two descriptors. The first descriptor uses the first `NUM` in all pairs present, and the second uses the second `NUM`. In our implementation, if a multipath descriptor is not provided, a pair is still returned, but the second element is just `nullptr`.\r\n\r\nThe wallet will not output the multipath descriptors (yet). Furthermore, when a multipath descriptor is imported, it is expanded to the two descriptors and each imported on its own, with the second descriptor being implicitly for internal (change) addresses. There is no change to how the wallet stores or outputs descriptors (yet).\r\n\r\nNote that the path specifier is different from what was proposed. It uses angle brackets and the semicolon because these are unused characters available in the character set and I wanted to avoid conflicts with characters already in use in descriptors.\r\n\r\nCloses #17190 ",
          "user": {
            "login": "achow101",
            "id": 3782274,
            "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
            "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/achow101",
            "html_url": "https://github.com/achow101",
            "followers_url": "https://api.github.com/users/achow101/followers",
            "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
            "organizations_url": "https://api.github.com/users/achow101/orgs",
            "repos_url": "https://api.github.com/users/achow101/repos",
            "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/achow101/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 149424,
              "node_id": "MDU6TGFiZWwxNDk0MjQ=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Wallet",
              "name": "Wallet",
              "color": "08a781",
              "default": false
            },
            {
              "id": 98279177,
              "node_id": "MDU6TGFiZWw5ODI3OTE3Nw==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/RPC/REST/ZMQ",
              "name": "RPC/REST/ZMQ",
              "color": "0052cc",
              "default": false
            },
            {
              "id": 1482182044,
              "node_id": "MDU6TGFiZWwxNDgyMTgyMDQ0",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Descriptors",
              "name": "Descriptors",
              "description": "",
              "color": "e9f76c",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": false,
          "comments": 37,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22838",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/22838",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/22838.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/22838.patch"
          },
          "created_at": "2021-08-30T19:46:34Z",
          "updated_at": "2023-09-21T16:09:11Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-11-04T12:16:41Z",
      "updated_at": "2022-11-04T12:16:41Z",
      "source": {
        "issue": {
          "id": 1426214940,
          "node_id": "PR_kwDOABII585BsmgJ",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26403",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26403/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26403/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26403/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/26403",
          "number": 26403,
          "state": "open",
          "state_reason": null,
          "title": "policy: Ephemeral anchors",
          "body": "Builds on top of https://github.com/bitcoin/bitcoin/pull/25038 for consideration of inclusion to the proposal. Requires V3, for simplicity of reasoning and usage. Implementation of idea written out at https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2022-October/021036.html\r\n\r\nBIP text here: https://github.com/instagibbs/bips/blob/ephemeral_anchor/bip-ephemeralanchors.mediawiki\r\n",
          "user": {
            "login": "instagibbs",
            "id": 5767891,
            "node_id": "MDQ6VXNlcjU3Njc4OTE=",
            "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/instagibbs",
            "html_url": "https://github.com/instagibbs",
            "followers_url": "https://api.github.com/users/instagibbs/followers",
            "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
            "organizations_url": "https://api.github.com/users/instagibbs/orgs",
            "repos_url": "https://api.github.com/users/instagibbs/repos",
            "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/instagibbs/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 82428251,
              "node_id": "MDU6TGFiZWw4MjQyODI1MQ==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/TX%20fees%20and%20policy",
              "name": "TX fees and policy",
              "color": "5319e7",
              "default": false
            },
            {
              "id": 955867938,
              "node_id": "MDU6TGFiZWw5NTU4Njc5Mzg=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Needs%20rebase",
              "name": "Needs rebase",
              "description": "",
              "color": "cccccc",
              "default": false
            },
            {
              "id": 1392286103,
              "node_id": "MDU6TGFiZWwxMzkyMjg2MTAz",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Needs%20Conceptual%20Review",
              "name": "Needs Conceptual Review",
              "description": "",
              "color": "fef2c0",
              "default": false
            },
            {
              "id": 5334691551,
              "node_id": "LA_kwDOABII588AAAABPfju3w",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/CI%20failed",
              "name": "CI failed",
              "description": "",
              "color": "cccccc",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": false,
          "comments": 26,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26403",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/26403",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/26403.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/26403.patch"
          },
          "created_at": "2022-10-27T20:14:15Z",
          "updated_at": "2023-08-17T13:51:48Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-11-30T03:07:32Z",
      "updated_at": "2022-11-30T03:07:32Z",
      "source": {
        "issue": {
          "id": 1057566159,
          "node_id": "PR_kwDOABII584uubvE",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/23544",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/23544/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/23544/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/23544/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/23544",
          "number": 23544,
          "state": "closed",
          "state_reason": null,
          "title": "rpc, wallet: addhdseed, infer seed when importing descriptor with xpub ",
          "body": "Builds on top of #25907 and one commit from #22341.\r\n\r\nFirst this PR introduces a descriptor wallet RPC `addhdseed`. Similar to its legacy wallet counterpart `sethdseed` it either generates a fresh random seed, for use on a blank wallet, or the user can provide a WIF. Unlike `sethdseed` this RPC call does not add keys / fill the keypool.\r\n\r\nThis allows a user to create a blank wallet (`createwallet`), provide it with a seed (`addhdseed`) and then craft custom descriptors. (An alternative approach would to add a `nodescriptors` argument to `createwallet`, but this RPC seems useful anyway)\r\n\r\nAn example use case of this is setting up a multisig between Core and a hardware wallet. After adding the seed to an otherwise empty wallet, the user would call `getxpub m/87'/0'/0'`. They would then combine this `xpub` and origin info with the one from their hardware wallet (e.g. using `hwi --fingerprint .... getxpub m/87'/0'/0'`  and craft a descriptor like `wsh(sorted_multi(2, [...../87'/0'/0']our_xpub, [..../87'/0'/0']their_xpub))`, and import that. The resulting wallet will be able to sign its part of the transaction.\r\n\r\nThe second part of this PR enables to ability descriptors, such as in the multisig example above, in such a way that any `fingerprint` + `xpub` that is covered by our hd seed(s) can be signed for.",
          "user": {
            "login": "Sjors",
            "id": 10217,
            "node_id": "MDQ6VXNlcjEwMjE3",
            "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/Sjors",
            "html_url": "https://github.com/Sjors",
            "followers_url": "https://api.github.com/users/Sjors/followers",
            "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
            "organizations_url": "https://api.github.com/users/Sjors/orgs",
            "repos_url": "https://api.github.com/users/Sjors/repos",
            "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/Sjors/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 149424,
              "node_id": "MDU6TGFiZWwxNDk0MjQ=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Wallet",
              "name": "Wallet",
              "color": "08a781",
              "default": false
            },
            {
              "id": 98279177,
              "node_id": "MDU6TGFiZWw5ODI3OTE3Nw==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/RPC/REST/ZMQ",
              "name": "RPC/REST/ZMQ",
              "color": "0052cc",
              "default": false
            },
            {
              "id": 955867938,
              "node_id": "MDU6TGFiZWw5NTU4Njc5Mzg=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Needs%20rebase",
              "name": "Needs rebase",
              "description": "",
              "color": "cccccc",
              "default": false
            },
            {
              "id": 1482182044,
              "node_id": "MDU6TGFiZWwxNDgyMTgyMDQ0",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Descriptors",
              "name": "Descriptors",
              "description": "",
              "color": "e9f76c",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": false,
          "comments": 16,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23544",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/23544",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/23544.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/23544.patch"
          },
          "closed_at": "2023-08-01T14:15:20Z",
          "created_at": "2021-11-18T16:40:53Z",
          "updated_at": "2023-08-01T14:15:20Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "labeled",
      "id": 7965425591,
      "node_id": "LE_lADOEEET9c5PZ5y9zwAAAAHaxr-3",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/7965425591",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-12-06T11:18:19Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "KolbyML",
        "id": 31669092,
        "node_id": "MDQ6VXNlcjMxNjY5MDky",
        "avatar_url": "https://avatars.githubusercontent.com/u/31669092?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/KolbyML",
        "html_url": "https://github.com/KolbyML",
        "followers_url": "https://api.github.com/users/KolbyML/followers",
        "following_url": "https://api.github.com/users/KolbyML/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/KolbyML/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/KolbyML/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/KolbyML/subscriptions",
        "organizations_url": "https://api.github.com/users/KolbyML/orgs",
        "repos_url": "https://api.github.com/users/KolbyML/repos",
        "events_url": "https://api.github.com/users/KolbyML/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/KolbyML/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-01-07T01:24:33Z",
      "updated_at": "2023-01-07T01:24:33Z",
      "source": {
        "issue": {
          "id": 1523382830,
          "node_id": "PR_kwDOABII585G3Hol",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26840",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26840/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26840/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26840/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/26840",
          "number": 26840,
          "state": "open",
          "state_reason": null,
          "title": "refactor: importpubkey, importprivkey, importaddress, importmulti, and importdescriptors rpc",
          "body": "This is a wallet rpc refactor from my gui pr https://github.com/bitcoin-core/gui/pull/650\r\n\r\nI was told by a contributor I should make a pr here for anything not in src/qt except for makefile/.ui stuff\r\n\r\nSo this pr refactors the RPC code so that it can be used through interfaces so there isn't a ton of code duplication more details would be in my bitcoin-core/gui pr.\r\n\r\nFor context this is apart of my Summer of Bitcoin project achow101 was my mentor.\r\n",
          "user": {
            "login": "KolbyML",
            "id": 31669092,
            "node_id": "MDQ6VXNlcjMxNjY5MDky",
            "avatar_url": "https://avatars.githubusercontent.com/u/31669092?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/KolbyML",
            "html_url": "https://github.com/KolbyML",
            "followers_url": "https://api.github.com/users/KolbyML/followers",
            "following_url": "https://api.github.com/users/KolbyML/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/KolbyML/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/KolbyML/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/KolbyML/subscriptions",
            "organizations_url": "https://api.github.com/users/KolbyML/orgs",
            "repos_url": "https://api.github.com/users/KolbyML/repos",
            "events_url": "https://api.github.com/users/KolbyML/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/KolbyML/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 135961,
              "node_id": "MDU6TGFiZWwxMzU5NjE=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Refactoring",
              "name": "Refactoring",
              "color": "E6F6D6",
              "default": false
            },
            {
              "id": 5334691551,
              "node_id": "LA_kwDOABII588AAAABPfju3w",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/CI%20failed",
              "name": "CI failed",
              "description": "",
              "color": "cccccc",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "CONTRIBUTOR",
          "locked": false,
          "comments": 3,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26840",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/26840",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/26840.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/26840.patch"
          },
          "created_at": "2023-01-07T01:24:33Z",
          "updated_at": "2023-09-21T20:54:41Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 8554123766,
      "node_id": "HRFPE_lADOEEET9c5PZ5y9zwAAAAH93ZH2",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/8554123766",
      "actor": {
        "login": "KolbyML",
        "id": 31669092,
        "node_id": "MDQ6VXNlcjMxNjY5MDky",
        "avatar_url": "https://avatars.githubusercontent.com/u/31669092?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/KolbyML",
        "html_url": "https://github.com/KolbyML",
        "followers_url": "https://api.github.com/users/KolbyML/followers",
        "following_url": "https://api.github.com/users/KolbyML/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/KolbyML/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/KolbyML/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/KolbyML/subscriptions",
        "organizations_url": "https://api.github.com/users/KolbyML/orgs",
        "repos_url": "https://api.github.com/users/KolbyML/repos",
        "events_url": "https://api.github.com/users/KolbyML/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/KolbyML/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-02-18T23:39:02Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 8554497042,
      "node_id": "HRFPE_lADOEEET9c5PZ5y9zwAAAAH940QS",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/8554497042",
      "actor": {
        "login": "KolbyML",
        "id": 31669092,
        "node_id": "MDQ6VXNlcjMxNjY5MDky",
        "avatar_url": "https://avatars.githubusercontent.com/u/31669092?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/KolbyML",
        "html_url": "https://github.com/KolbyML",
        "followers_url": "https://api.github.com/users/KolbyML/followers",
        "following_url": "https://api.github.com/users/KolbyML/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/KolbyML/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/KolbyML/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/KolbyML/subscriptions",
        "organizations_url": "https://api.github.com/users/KolbyML/orgs",
        "repos_url": "https://api.github.com/users/KolbyML/repos",
        "events_url": "https://api.github.com/users/KolbyML/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/KolbyML/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-02-19T04:42:33Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 8554500198,
      "node_id": "HRFPE_lADOEEET9c5PZ5y9zwAAAAH941Bm",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/8554500198",
      "actor": {
        "login": "KolbyML",
        "id": 31669092,
        "node_id": "MDQ6VXNlcjMxNjY5MDky",
        "avatar_url": "https://avatars.githubusercontent.com/u/31669092?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/KolbyML",
        "html_url": "https://github.com/KolbyML",
        "followers_url": "https://api.github.com/users/KolbyML/followers",
        "following_url": "https://api.github.com/users/KolbyML/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/KolbyML/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/KolbyML/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/KolbyML/subscriptions",
        "organizations_url": "https://api.github.com/users/KolbyML/orgs",
        "repos_url": "https://api.github.com/users/KolbyML/repos",
        "events_url": "https://api.github.com/users/KolbyML/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/KolbyML/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-02-19T04:47:01Z"
    },
    {
      "event": "ready_for_review",
      "id": 8554500427,
      "node_id": "RFRE_lADOEEET9c5PZ5y9zwAAAAH941FL",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/8554500427",
      "actor": {
        "login": "KolbyML",
        "id": 31669092,
        "node_id": "MDQ6VXNlcjMxNjY5MDky",
        "avatar_url": "https://avatars.githubusercontent.com/u/31669092?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/KolbyML",
        "html_url": "https://github.com/KolbyML",
        "followers_url": "https://api.github.com/users/KolbyML/followers",
        "following_url": "https://api.github.com/users/KolbyML/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/KolbyML/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/KolbyML/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/KolbyML/subscriptions",
        "organizations_url": "https://api.github.com/users/KolbyML/orgs",
        "repos_url": "https://api.github.com/users/KolbyML/repos",
        "events_url": "https://api.github.com/users/KolbyML/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/KolbyML/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-02-19T04:47:19Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 8564601416,
      "node_id": "HRFPE_lADOEEET9c5PZ5y9zwAAAAH-fXJI",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/8564601416",
      "actor": {
        "login": "KolbyML",
        "id": 31669092,
        "node_id": "MDQ6VXNlcjMxNjY5MDky",
        "avatar_url": "https://avatars.githubusercontent.com/u/31669092?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/KolbyML",
        "html_url": "https://github.com/KolbyML",
        "followers_url": "https://api.github.com/users/KolbyML/followers",
        "following_url": "https://api.github.com/users/KolbyML/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/KolbyML/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/KolbyML/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/KolbyML/subscriptions",
        "organizations_url": "https://api.github.com/users/KolbyML/orgs",
        "repos_url": "https://api.github.com/users/KolbyML/repos",
        "events_url": "https://api.github.com/users/KolbyML/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/KolbyML/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-02-20T19:49:40Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 8564717530,
      "node_id": "HRFPE_lADOEEET9c5PZ5y9zwAAAAH-fzfa",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/8564717530",
      "actor": {
        "login": "KolbyML",
        "id": 31669092,
        "node_id": "MDQ6VXNlcjMxNjY5MDky",
        "avatar_url": "https://avatars.githubusercontent.com/u/31669092?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/KolbyML",
        "html_url": "https://github.com/KolbyML",
        "followers_url": "https://api.github.com/users/KolbyML/followers",
        "following_url": "https://api.github.com/users/KolbyML/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/KolbyML/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/KolbyML/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/KolbyML/subscriptions",
        "organizations_url": "https://api.github.com/users/KolbyML/orgs",
        "repos_url": "https://api.github.com/users/KolbyML/repos",
        "events_url": "https://api.github.com/users/KolbyML/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/KolbyML/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-02-20T20:12:41Z"
    },
    {
      "event": "unlabeled",
      "id": 8564769526,
      "node_id": "UNLE_lADOEEET9c5PZ5y9zwAAAAH-gAL2",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/8564769526",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-02-20T20:24:21Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 8565566950,
      "node_id": "HRFPE_lADOEEET9c5PZ5y9zwAAAAH-jC3m",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/8565566950",
      "actor": {
        "login": "KolbyML",
        "id": 31669092,
        "node_id": "MDQ6VXNlcjMxNjY5MDky",
        "avatar_url": "https://avatars.githubusercontent.com/u/31669092?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/KolbyML",
        "html_url": "https://github.com/KolbyML",
        "followers_url": "https://api.github.com/users/KolbyML/followers",
        "following_url": "https://api.github.com/users/KolbyML/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/KolbyML/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/KolbyML/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/KolbyML/subscriptions",
        "organizations_url": "https://api.github.com/users/KolbyML/orgs",
        "repos_url": "https://api.github.com/users/KolbyML/repos",
        "events_url": "https://api.github.com/users/KolbyML/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/KolbyML/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-02-20T23:26:14Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 8565625938,
      "node_id": "HRFPE_lADOEEET9c5PZ5y9zwAAAAH-jRRS",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/8565625938",
      "actor": {
        "login": "KolbyML",
        "id": 31669092,
        "node_id": "MDQ6VXNlcjMxNjY5MDky",
        "avatar_url": "https://avatars.githubusercontent.com/u/31669092?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/KolbyML",
        "html_url": "https://github.com/KolbyML",
        "followers_url": "https://api.github.com/users/KolbyML/followers",
        "following_url": "https://api.github.com/users/KolbyML/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/KolbyML/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/KolbyML/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/KolbyML/subscriptions",
        "organizations_url": "https://api.github.com/users/KolbyML/orgs",
        "repos_url": "https://api.github.com/users/KolbyML/repos",
        "events_url": "https://api.github.com/users/KolbyML/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/KolbyML/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-02-20T23:50:03Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 8565699981,
      "node_id": "HRFPE_lADOEEET9c5PZ5y9zwAAAAH-jjWN",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/8565699981",
      "actor": {
        "login": "KolbyML",
        "id": 31669092,
        "node_id": "MDQ6VXNlcjMxNjY5MDky",
        "avatar_url": "https://avatars.githubusercontent.com/u/31669092?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/KolbyML",
        "html_url": "https://github.com/KolbyML",
        "followers_url": "https://api.github.com/users/KolbyML/followers",
        "following_url": "https://api.github.com/users/KolbyML/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/KolbyML/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/KolbyML/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/KolbyML/subscriptions",
        "organizations_url": "https://api.github.com/users/KolbyML/orgs",
        "repos_url": "https://api.github.com/users/KolbyML/repos",
        "events_url": "https://api.github.com/users/KolbyML/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/KolbyML/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-02-21T00:10:35Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 8565968600,
      "node_id": "HRFPE_lADOEEET9c5PZ5y9zwAAAAH-kk7Y",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/8565968600",
      "actor": {
        "login": "KolbyML",
        "id": 31669092,
        "node_id": "MDQ6VXNlcjMxNjY5MDky",
        "avatar_url": "https://avatars.githubusercontent.com/u/31669092?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/KolbyML",
        "html_url": "https://github.com/KolbyML",
        "followers_url": "https://api.github.com/users/KolbyML/followers",
        "following_url": "https://api.github.com/users/KolbyML/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/KolbyML/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/KolbyML/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/KolbyML/subscriptions",
        "organizations_url": "https://api.github.com/users/KolbyML/orgs",
        "repos_url": "https://api.github.com/users/KolbyML/repos",
        "events_url": "https://api.github.com/users/KolbyML/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/KolbyML/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-02-21T01:18:25Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 8566290307,
      "node_id": "HRFPE_lADOEEET9c5PZ5y9zwAAAAH-lzeD",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/8566290307",
      "actor": {
        "login": "KolbyML",
        "id": 31669092,
        "node_id": "MDQ6VXNlcjMxNjY5MDky",
        "avatar_url": "https://avatars.githubusercontent.com/u/31669092?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/KolbyML",
        "html_url": "https://github.com/KolbyML",
        "followers_url": "https://api.github.com/users/KolbyML/followers",
        "following_url": "https://api.github.com/users/KolbyML/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/KolbyML/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/KolbyML/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/KolbyML/subscriptions",
        "organizations_url": "https://api.github.com/users/KolbyML/orgs",
        "repos_url": "https://api.github.com/users/KolbyML/repos",
        "events_url": "https://api.github.com/users/KolbyML/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/KolbyML/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-02-21T02:39:53Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 8566369305,
      "node_id": "HRFPE_lADOEEET9c5PZ5y9zwAAAAH-mGwZ",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/8566369305",
      "actor": {
        "login": "KolbyML",
        "id": 31669092,
        "node_id": "MDQ6VXNlcjMxNjY5MDky",
        "avatar_url": "https://avatars.githubusercontent.com/u/31669092?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/KolbyML",
        "html_url": "https://github.com/KolbyML",
        "followers_url": "https://api.github.com/users/KolbyML/followers",
        "following_url": "https://api.github.com/users/KolbyML/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/KolbyML/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/KolbyML/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/KolbyML/subscriptions",
        "organizations_url": "https://api.github.com/users/KolbyML/orgs",
        "repos_url": "https://api.github.com/users/KolbyML/repos",
        "events_url": "https://api.github.com/users/KolbyML/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/KolbyML/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-02-21T03:00:52Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 8566457332,
      "node_id": "HRFPE_lADOEEET9c5PZ5y9zwAAAAH-mcP0",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/8566457332",
      "actor": {
        "login": "KolbyML",
        "id": 31669092,
        "node_id": "MDQ6VXNlcjMxNjY5MDky",
        "avatar_url": "https://avatars.githubusercontent.com/u/31669092?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/KolbyML",
        "html_url": "https://github.com/KolbyML",
        "followers_url": "https://api.github.com/users/KolbyML/followers",
        "following_url": "https://api.github.com/users/KolbyML/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/KolbyML/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/KolbyML/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/KolbyML/subscriptions",
        "organizations_url": "https://api.github.com/users/KolbyML/orgs",
        "repos_url": "https://api.github.com/users/KolbyML/repos",
        "events_url": "https://api.github.com/users/KolbyML/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/KolbyML/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-02-21T03:23:02Z"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-02-21T04:08:24Z",
      "updated_at": "2023-02-21T04:08:24Z",
      "source": {
        "issue": {
          "id": 1570008732,
          "node_id": "PR_kwDOABII585JNilD",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/27034",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/27034/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/27034/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/27034/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/27034",
          "number": 27034,
          "state": "open",
          "state_reason": null,
          "title": "rpc: make importaddress compatible with descriptors wallet",
          "body": "Made it as part of reviewing other PRs; so it's simpler to watch certain address/hex in descriptor wallets (without have to go through `importdescriptors` nuances).\r\n\r\nbasically importing the standalone address as a `addr(ADDR)` descriptor and the raw hex as a `raw(HEX)` descriptor.\r\n\r\nNote:\r\nAs we don't allow mixing watch-only descriptors with spendable ones, the previous behavior is retained\r\nif the user try to import an address into a wallet with private keys enabled.\r\n",
          "user": {
            "login": "furszy",
            "id": 5377650,
            "node_id": "MDQ6VXNlcjUzNzc2NTA=",
            "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/furszy",
            "html_url": "https://github.com/furszy",
            "followers_url": "https://api.github.com/users/furszy/followers",
            "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
            "organizations_url": "https://api.github.com/users/furszy/orgs",
            "repos_url": "https://api.github.com/users/furszy/repos",
            "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/furszy/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 98279177,
              "node_id": "MDU6TGFiZWw5ODI3OTE3Nw==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/RPC/REST/ZMQ",
              "name": "RPC/REST/ZMQ",
              "color": "0052cc",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": false,
          "comments": 7,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/27034",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/27034",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/27034.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/27034.patch"
          },
          "created_at": "2023-02-03T15:21:29Z",
          "updated_at": "2023-09-21T20:48:21Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 8566636311,
      "node_id": "HRFPE_lADOEEET9c5PZ5y9zwAAAAH-nH8X",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/8566636311",
      "actor": {
        "login": "KolbyML",
        "id": 31669092,
        "node_id": "MDQ6VXNlcjMxNjY5MDky",
        "avatar_url": "https://avatars.githubusercontent.com/u/31669092?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/KolbyML",
        "html_url": "https://github.com/KolbyML",
        "followers_url": "https://api.github.com/users/KolbyML/followers",
        "following_url": "https://api.github.com/users/KolbyML/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/KolbyML/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/KolbyML/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/KolbyML/subscriptions",
        "organizations_url": "https://api.github.com/users/KolbyML/orgs",
        "repos_url": "https://api.github.com/users/KolbyML/repos",
        "events_url": "https://api.github.com/users/KolbyML/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/KolbyML/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-02-21T04:12:34Z"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-02-21T04:43:08Z",
      "updated_at": "2023-02-21T04:43:08Z",
      "source": {
        "issue": {
          "id": 1525922049,
          "node_id": "PR_kwDOABII585G_oZW",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26858",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26858/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26858/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26858/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/26858",
          "number": 26858,
          "state": "closed",
          "state_reason": null,
          "title": "wallet: Use defined purposes instead of inlining",
          "body": "Based on this comment https://github.com/bitcoin/bitcoin/pull/26761#discussion_r1062447532.\r\n\r\nThis PR stores the currently inlined address purposes as constants and use them accordingly.",
          "user": {
            "login": "aureleoules",
            "id": 22493292,
            "node_id": "MDQ6VXNlcjIyNDkzMjky",
            "avatar_url": "https://avatars.githubusercontent.com/u/22493292?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/aureleoules",
            "html_url": "https://github.com/aureleoules",
            "followers_url": "https://api.github.com/users/aureleoules/followers",
            "following_url": "https://api.github.com/users/aureleoules/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/aureleoules/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/aureleoules/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/aureleoules/subscriptions",
            "organizations_url": "https://api.github.com/users/aureleoules/orgs",
            "repos_url": "https://api.github.com/users/aureleoules/repos",
            "events_url": "https://api.github.com/users/aureleoules/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/aureleoules/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 149424,
              "node_id": "MDU6TGFiZWwxNDk0MjQ=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Wallet",
              "name": "Wallet",
              "color": "08a781",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": false,
          "comments": 5,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26858",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/26858",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/26858.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/26858.patch"
          },
          "closed_at": "2023-03-26T00:12:06Z",
          "created_at": "2023-01-09T16:30:06Z",
          "updated_at": "2023-03-26T00:12:15Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-02-21T07:04:28Z",
      "updated_at": "2023-02-21T07:04:28Z",
      "source": {
        "issue": {
          "id": 1359383041,
          "node_id": "PR_kwDOABII584-PV2_",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25979",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25979/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25979/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25979/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/25979",
          "number": 25979,
          "state": "open",
          "state_reason": null,
          "title": "[WIP] wallet: standardize change output detection process",
          "body": "Depends on https://github.com/bitcoin/bitcoin/pull/27601, please go there first.\r\n\r\nThis work aims to define, and implement a base standard mechanism to\r\ndetect individual change outputs.\r\n\r\n### Context\r\n\r\nCurrently, the wallet detects whether an output is change or not based\r\non data stored in the address book.\r\n\r\nThere is no notion of “change outputs”, the wallet detects change scripts.\r\n\r\nConnoting that any address book record modification has implications\r\non all the historical outputs related to that particular destination. Meaning\r\nthat all those outputs can either be change or not. There is no middle-ground\r\ngranular distinction.\r\n\r\n#### How Change Detection Currently Works?\r\n\r\nThe wallet walks-through the transaction outputs, extracts the script\r\ndestination and verify the following two points:\r\n\r\n1) If the destination doesn't exist in the address book, then the script\r\n    is a \"change address\".\r\n   \r\n2) If the destination exists in the address book, but it doesn't have a\r\n     label, then the script is a \"change address\".\r\n\r\n### Motivation\r\n\r\nThere are a good number of problems in the current approach:\r\n\r\n- We make the wallet dependent on an external structure, with separate storage.\r\n   Which has to be updated and maintained along with the wallet state.\r\n\r\n- It cannot be maintained nor recovered across different wallet instances.\r\n   Cannot re-create the, possibly custom, address book data only by importing\r\n   the wallet descriptor string.\r\n\r\n- As the address book is an structure that the user can freely modify, the change\r\n   detection process might differ through different wallets.\r\n \r\n- The current rudimentary assumptions of \"no address book entry\" or \"no label set for the address book entry\"\r\n  to denote that certain script destination is change or not can easily be broken:\r\n  E.g. derive an address from one of the wallet’s external paths manually. Then send coins to it.\r\n  As the receive destination wasn't created inside the wallet, the wallet has no associated address book entry.\r\n  So, the reception is invalidly detected as change (added a test case for it).\r\n\r\n- The wallet can't detect change outputs on more complex scripts such as multi-sig change outputs.\r\n\r\n- The wallet is not able to detect change outputs going to an internal address if the internal address has a label.\r\n  (E.g. the user can manually set a label for the internal address and, doing that, make that all the change\r\n  outputs, in the wallet history, that were sent to the destination are no longer detected as change).\r\n\r\n- There isn’t a way to distinguish the external reception of coins into an internal address. Coins reception on any\r\n   internal address are always detected as change.\r\n\r\n### New Change Detection Mechanism Goals\r\n\r\nAiming to:\r\n\r\n* Define a base mechanism to align different wallet implementations. Preventing each piece of software\r\n  from diverging on the basic change outputs distinction.\r\n\r\n* Detect change outputs on-demand without requiring to maintain an external data structure synced with the\r\n   latest wallet state.\r\n\r\n* Independently, and accurately, detect change outputs regardless data stored in structures that the user\r\n   can freely modify.\r\n\r\n* Granular distinction between change vs non-change outputs that were sent to the same internal address.\r\n  E.g. the reception of coins, from an external source, on internal addresses will not longer be detected\r\n  as change anymore.\r\n\r\n* Expand the change detection to more complex scripts such as a multi-sig protected addresses. (While they\r\n  are added into the wallet on an internal spkm)\r\n\r\n#### Change Output Detection Rules\r\n\r\nA transaction output is change if it fulfills the following points:\r\n\r\n1) At least one of the parent transaction inputs is from the wallet. (If none of them are, then the wallet is receiving coins\r\n    on an internal address).\r\n\r\n2) The script extracted destination is from the wallet and is located in one of the internal script pub key manager.\r\n    (e.g. derived from an internal derivation path)\r\n\r\n#### What about legacy wallets?\r\n\r\nIf the legacy wallet is HD post-split, we have an internal derivation path, so we can follow the same process as\r\ndescriptors wallet. Unless the destination is on the pre-split key pool, in which case, we fallback to the follow-up\r\ncase.\r\n\r\nIf the legacy wallet is pre-split, we continue using the address book as we either have an HD wallet with keys\r\nderived only on the external path, or we are using raw keypool.\r\n\r\n———————————————————————\r\n\r\n#### Extra Note\r\nThis PR, in about 85% at least, is about expanding the current test coverage for the change output detection area.\r\n\r\n#### TO DO (still WIP):\r\n\r\n* [x] Save “internal” flag on non-active descriptors so the wallet can use them on the change detection process.\r\n   (which will fix the currently failing test cases).\r\n* [ ] Re-organize commits so tests always pass.\r\n* [ ] Verify backwards compatibility.",
          "user": {
            "login": "furszy",
            "id": 5377650,
            "node_id": "MDQ6VXNlcjUzNzc2NTA=",
            "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/furszy",
            "html_url": "https://github.com/furszy",
            "followers_url": "https://api.github.com/users/furszy/followers",
            "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
            "organizations_url": "https://api.github.com/users/furszy/orgs",
            "repos_url": "https://api.github.com/users/furszy/repos",
            "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/furszy/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 149424,
              "node_id": "MDU6TGFiZWwxNDk0MjQ=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Wallet",
              "name": "Wallet",
              "color": "08a781",
              "default": false
            },
            {
              "id": 955867938,
              "node_id": "MDU6TGFiZWw5NTU4Njc5Mzg=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Needs%20rebase",
              "name": "Needs rebase",
              "description": "",
              "color": "cccccc",
              "default": false
            },
            {
              "id": 5334691551,
              "node_id": "LA_kwDOABII588AAAABPfju3w",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/CI%20failed",
              "name": "CI failed",
              "description": "",
              "color": "cccccc",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": false,
          "comments": 9,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25979",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/25979",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/25979.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/25979.patch"
          },
          "created_at": "2022-09-01T20:40:07Z",
          "updated_at": "2023-07-20T10:57:10Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-02-21T08:01:35Z",
      "updated_at": "2023-02-21T08:01:35Z",
      "source": {
        "issue": {
          "id": 1263730107,
          "node_id": "PR_kwDOABII5845REBZ",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25297",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25297/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25297/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25297/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/25297",
          "number": 25297,
          "state": "open",
          "state_reason": null,
          "title": "wallet: group independent db writes on single batched db transaction",
          "body": "The block connection process, same as many other wallet processes, contains plenty individual db writes.\r\n\r\nThis PR batches all the db transaction that occurs along each wallet workflow. Dumping all the information to disk at once atomically at the end of the process.\r\n\r\nThen, for BDB, fixed places where we are flushing to db directly on individual writes. e.g we do it in the in the chain sync/scan process, when an output that belongs to the wallet is found if the address is not inside the address book. \r\n\r\nPlus, in several places across the wallet flows, we create new `WalletBatch` objects. Which, internally, mean: Increasing the db references number, try to open the db and, for SQLite, setup and bind the statements.\r\nThis PR avoids all this overhead by sharing the same db handler instance through each entire workflow.",
          "user": {
            "login": "furszy",
            "id": 5377650,
            "node_id": "MDQ6VXNlcjUzNzc2NTA=",
            "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/furszy",
            "html_url": "https://github.com/furszy",
            "followers_url": "https://api.github.com/users/furszy/followers",
            "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
            "organizations_url": "https://api.github.com/users/furszy/orgs",
            "repos_url": "https://api.github.com/users/furszy/repos",
            "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/furszy/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 149424,
              "node_id": "MDU6TGFiZWwxNDk0MjQ=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Wallet",
              "name": "Wallet",
              "color": "08a781",
              "default": false
            },
            {
              "id": 955867938,
              "node_id": "MDU6TGFiZWw5NTU4Njc5Mzg=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Needs%20rebase",
              "name": "Needs rebase",
              "description": "",
              "color": "cccccc",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": false,
          "comments": 8,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25297",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/25297",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/25297.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/25297.patch"
          },
          "created_at": "2022-06-07T18:55:49Z",
          "updated_at": "2023-08-13T01:32:42Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-03-07T10:35:37Z",
      "updated_at": "2023-03-07T10:35:37Z",
      "source": {
        "issue": {
          "id": 1612315619,
          "node_id": "PR_kwDOABII585LaolD",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/27217",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/27217/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/27217/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/27217/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/27217",
          "number": 27217,
          "state": "closed",
          "state_reason": null,
          "title": "wallet: Replace use of purpose strings with an enum",
          "body": "Instead of storing and passing around fixed strings for the purpose of an address, use an enum.",
          "user": {
            "login": "achow101",
            "id": 3782274,
            "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
            "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/achow101",
            "html_url": "https://github.com/achow101",
            "followers_url": "https://api.github.com/users/achow101/followers",
            "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
            "organizations_url": "https://api.github.com/users/achow101/orgs",
            "repos_url": "https://api.github.com/users/achow101/repos",
            "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/achow101/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 149424,
              "node_id": "MDU6TGFiZWwxNDk0MjQ=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Wallet",
              "name": "Wallet",
              "color": "08a781",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": false,
          "comments": 6,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/27217",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/27217",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/27217.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/27217.patch"
          },
          "closed_at": "2023-04-12T09:31:28Z",
          "created_at": "2023-03-06T22:28:58Z",
          "updated_at": "2023-04-13T11:05:04Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-03-21T04:09:19Z",
      "updated_at": "2023-03-21T04:09:19Z",
      "source": {
        "issue": {
          "id": 1632858009,
          "node_id": "PR_kwDOABII585MfYTP",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/27286",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/27286/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/27286/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/27286/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/27286",
          "number": 27286,
          "state": "open",
          "state_reason": null,
          "title": "wallet: Keep track of the wallet's own transaction outputs in memory",
          "body": "Currently, the wallet is not actually aware about its own transaction outputs. Instead, it will iterate all of the transactions stored in `mapWallet`, and then all of the outputs of those transactions, in order to figure out what belongs to it for the purposes of coin selection and balance calculation. For balance calculation, there is caching that results in it only iterating all of the transactions, but not all of the outputs. However when the cache is dirty, everything is iterated. This is especially problematic for wallets that have a lot of transactions, or transactions that have a lot of unrelated outputs (as may occur with coinjoins or batched payments).\r\n\r\nThis PR helps to resolve this issue by making the wallet track all of the outputs that belong to it in a new member `m_txos`. Note that this includes outputs that may have already been spent. Both balance calculation (`GetBalance`) and coin selection (`AvailableCoins`) are updated to iterate `m_txos`. This is generally faster since it ignores all of the unrelated outputs, and it is not slower as in the worst case of wallets containing only single output transactions, it's exactly the same number of outputs iterated.\r\n\r\n`m_txos` is memory only, and it is populated during wallet loading. When each transaction is loaded, all of its outputs are checked to see if it is `IsMine`, and if so, an entry added to `m_txos`. When new transactions are received, the same procedure is done.\r\n\r\nSince imports can change the `IsMine` status of a transaction (although they can only be \"promoted\" from watchonly to spendable), all of the import RPCs will be a bit slower as they re-iterate all transactions and all outputs to update `m_txos`.\r\n\r\nEach output in `m_txos` is stored in a new `WalletTXO` class. This class contains references to the parent `CWalletTx` and the `CTxOut` itself. It also caches the `IsMine` value of the txout. This should be safe as `IsMine` should not change unless there are imports. This allows us to have additional performance improvements in places that use these `WalletTXO`s as they can use the cached `IsMine` rather than repeatedly calling `IsMine` which can be expensive.\r\n\r\nThe existing `WalletBalance` benchmark demonstrates the performance improvement that this PR makes. The existing `WalletAvailableCoins` benchmark doesn't as all of the outputs used in that benchmark belong to the test wallet. I've updated that benchmark to have a bunch of unrelated outputs in each transaction so that the difference is demonstrated.\r\n\r\nThis is part of a larger project to have the wallet actually track and store a set of its UTXOs.\r\n\r\nBuilt on #24914 as it requires loading the txs last in order for `m_txos` to be built correctly.\r\n\r\n***\r\n\r\n## Benchmarks:\r\n\r\nMaster:\r\n\r\n|               ns/op |                op/s |    err% |          ins/op |         bra/op |   miss% |     total | benchmark\r\n|--------------------:|--------------------:|--------:|----------------:|---------------:|--------:|----------:|:----------\r\n|       92,245,141.50 |               10.84 |    0.1% |  988,823,975.00 |  66,803,340.50 |    0.0% |      2.04 | `WalletAvailableCoins`\r\n|            5,709.90 |          175,134.50 |    0.5% |       80,968.24 |      25,539.15 |    0.1% |      0.01 | `WalletBalanceClean`\r\n|          139,396.17 |            7,173.80 |    0.6% |    1,383,390.50 |     430,276.86 |    0.0% |      0.01 | `WalletBalanceDirty`\r\n|            5,055.80 |          197,792.47 |    0.3% |       80,968.10 |      25,539.02 |    0.1% |      0.01 | `WalletBalanceMine`\r\n|                9.79 |      102,152,396.19 |    0.1% |          161.00 |          37.00 |    0.0% |      0.01 | `WalletBalanceWatch`\r\n|        1,552,736.00 |              644.02 |    1.5% |   20,316,315.80 |     618,545.80 |    0.6% |      0.08 | `WalletCreateTxUseOnlyPresetInputs`\r\n|      114,114,732.00 |                8.76 |    0.5% |1,291,047,717.60 | 320,244,602.00 |    0.0% |      6.30 | `WalletCreateTxUsePresetInputsAndCoinSelection`\r\n|      359,315,754.00 |                2.78 |    0.1% |4,339,447,818.00 | 136,619,757.00 |    0.7% |      1.80 | `WalletLoadingDescriptors`\r\n|       98,230,601.00 |               10.18 |    0.1% |  537,688,964.00 |  97,332,266.00 |    0.3% |      0.49 | `WalletLoadingLegacy`\r\n\r\nPR:\r\n\r\n|               ns/op |                op/s |    err% |          ins/op |         bra/op |   miss% |     total | benchmark\r\n|--------------------:|--------------------:|--------:|----------------:|---------------:|--------:|----------:|:----------\r\n|       75,319,868.50 |               13.28 |    0.2% |  863,758,229.00 |  30,892,593.00 |    0.2% |      1.66 | `WalletAvailableCoins`\r\n|            2,367.62 |          422,364.95 |    1.0% |       35,785.05 |       9,893.01 |    0.2% |      0.01 | `WalletBalanceClean`\r\n|            2,685.58 |          372,359.55 |    0.2% |       36,501.05 |      10,027.01 |    0.1% |      0.01 | `WalletBalanceDirty`\r\n|            3,462.24 |          288,830.68 |    2.7% |       35,785.06 |       9,893.01 |    0.3% |      0.01 | `WalletBalanceMine`\r\n|               11.65 |       85,838,176.97 |    0.1% |          180.00 |          42.00 |    0.0% |      0.01 | `WalletBalanceWatch`\r\n|        1,563,092.60 |              639.76 |    1.5% |   20,426,154.40 |     649,953.80 |    0.6% |      0.09 | `WalletCreateTxUseOnlyPresetInputs`\r\n|       58,367,804.40 |               17.13 |    0.9% |  587,164,005.00 | 107,905,843.80 |    0.1% |      3.21 | `WalletCreateTxUsePresetInputsAndCoinSelection`\r\n|      365,302,636.00 |                2.74 |    0.2% |4,349,345,147.00 | 138,730,668.00 |    0.8% |      1.83 | `WalletLoadingDescriptors`\r\n|      124,995,585.00 |                8.00 |    1.2% |  801,998,316.00 | 103,210,721.00 |    0.3% |      0.63 | `WalletLoadingLegacy`\r\n",
          "user": {
            "login": "achow101",
            "id": 3782274,
            "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
            "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/achow101",
            "html_url": "https://github.com/achow101",
            "followers_url": "https://api.github.com/users/achow101/followers",
            "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
            "organizations_url": "https://api.github.com/users/achow101/orgs",
            "repos_url": "https://api.github.com/users/achow101/repos",
            "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/achow101/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 149424,
              "node_id": "MDU6TGFiZWwxNDk0MjQ=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Wallet",
              "name": "Wallet",
              "color": "08a781",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": false,
          "comments": 7,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/27286",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/27286",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/27286.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/27286.patch"
          },
          "created_at": "2023-03-20T21:02:45Z",
          "updated_at": "2023-09-21T20:37:09Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "reviewed",
      "id": 1358165949,
      "node_id": "PRR_kwDOEEET9c5Q8_e9",
      "url": null,
      "actor": null,
      "commit_id": "17046d0ecb41f2644ab186bcf5670598cdb93f5f",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "Concept ACK, I'd really like to see this implemented.",
      "user": {
        "login": "hernanmarino",
        "id": 87907936,
        "node_id": "MDQ6VXNlcjg3OTA3OTM2",
        "avatar_url": "https://avatars.githubusercontent.com/u/87907936?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hernanmarino",
        "html_url": "https://github.com/hernanmarino",
        "followers_url": "https://api.github.com/users/hernanmarino/followers",
        "following_url": "https://api.github.com/users/hernanmarino/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hernanmarino/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hernanmarino/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hernanmarino/subscriptions",
        "organizations_url": "https://api.github.com/users/hernanmarino/orgs",
        "repos_url": "https://api.github.com/users/hernanmarino/repos",
        "events_url": "https://api.github.com/users/hernanmarino/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hernanmarino/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/gui/pull/650#pullrequestreview-1358165949",
      "submitted_at": "2023-03-27T00:11:54Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin-core/gui/pulls/650"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-03-27T10:35:31Z",
      "updated_at": "2023-03-27T10:35:31Z",
      "source": {
        "issue": {
          "id": 1641164830,
          "node_id": "PR_kwDOABII585M7Ee8",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/27337",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/27337/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/27337/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/27337/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/27337",
          "number": 27337,
          "state": "closed",
          "state_reason": null,
          "title": "wallet: allow importing descriptors that have no xprivs, even in a privkey-enabled wallet",
          "body": "Importing pubkey-only descriptors works fine as long as the wallet already has the required privkeys.\r\n\r\nHappy to add whatever tests people advise me to.\r\n\r\nFixes #27336\r\n\r\n**Edit** Never mind -- we can update balances but not sign coins. More work needs to be done to support this.",
          "user": {
            "login": "apoelstra",
            "id": 1351933,
            "node_id": "MDQ6VXNlcjEzNTE5MzM=",
            "avatar_url": "https://avatars.githubusercontent.com/u/1351933?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/apoelstra",
            "html_url": "https://github.com/apoelstra",
            "followers_url": "https://api.github.com/users/apoelstra/followers",
            "following_url": "https://api.github.com/users/apoelstra/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/apoelstra/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/apoelstra/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/apoelstra/subscriptions",
            "organizations_url": "https://api.github.com/users/apoelstra/orgs",
            "repos_url": "https://api.github.com/users/apoelstra/repos",
            "events_url": "https://api.github.com/users/apoelstra/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/apoelstra/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 149424,
              "node_id": "MDU6TGFiZWwxNDk0MjQ=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Wallet",
              "name": "Wallet",
              "color": "08a781",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "CONTRIBUTOR",
          "locked": false,
          "comments": 2,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/27337",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/27337",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/27337.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/27337.patch"
          },
          "closed_at": "2023-03-27T14:28:28Z",
          "created_at": "2023-03-27T00:25:12Z",
          "updated_at": "2023-03-27T14:28:29Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-03-28T02:59:57Z",
      "updated_at": "2023-03-28T02:59:57Z",
      "source": {
        "issue": {
          "id": 1643033911,
          "node_id": "PR_kwDOABII585NBVge",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/27351",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/27351/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/27351/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/27351/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/27351",
          "number": 27351,
          "state": "open",
          "state_reason": null,
          "title": "wallet: add `seeds` argument to `importdescriptors`",
          "body": "This PR introduces the ability to import BIP32 master seeds alongside xpubs. It currently expects seeds to be provided in [BIP 93/codex32](https://github.com/bitcoin/bips/blob/master/bip-0093.mediawiki) either as a single seed or as a list of shares which can be assembled via Shamir Secret Sharing.\r\n\r\nIt could be generalized to other seed formats, e.g. a hex-encoding or the old `sethdseeds` WIF format, easily enough by just attempting to parse the input in those formats and retrying until we find one that works. (Though we must be extremely careful that these formats are unambiguous! If the user imports a seed they don't expect, which fails to match the one they've backed up, the result could be coin loss. For formats with no prefix or checksum, e.g. hex-encoded bytes, we may need to require the user provide a prefix or a separate flag.)\r\n\r\nThe motivation here is that users who are importing their coins from another wallet likely have them in the form of a public descriptor (probably one of the standard `pkh(BIP44/48/84/whatever)` ones) along with a master seed (probably in some seed word format, but this is easy enough to convert to a straight BIP32 seed with an external tool). The seed, presumably, they want to minimize handling of, while the descriptor they are likely to be copy/pasting from somewhere and generally being less careful with.\r\n\r\nTo import this into Core, they currently need to construct a version of their descriptor in which xpubs are replaced by xprivs, and import that. This is cumbersome and potentially dangerous. With this extra RPC flag they are able to separately tweak their descriptor however they need, and then adding their seed data, unmodified, at the last minute in one place.\r\n\r\nMy specific use case is: I have an estate planning document which contains careful instructions for reconstructing seed data from shares which are stored separately and externally to the planning document. Meanwhile, the document itself contains a public descriptor, with checksum already computed, which is stored in several locations accessible by an open-ended set of people. If I were forced to mix the secret data with the public data, it would increase the risk of leaking the secrets as well as the risk of losing the public part.\r\n\r\n**Edit:** Other approaches, that I considered but chose not to take:\r\n\r\n* Extend the existing `sethdseed` RPC. This RPC is legacy-only and not supported by descriptor wallets, because it depends on the legacy \"bag of keys\" model where you could stick keys into the wallet and it'd \"just work\", often in surprising ways.\r\n* Add a new descriptor-wallet-based `importseed` RPC or something. This doesn't work for more-or-less the same reason; the descriptor wallet associates all its keys with `ScriptPubKeyManager`s, so we would need to add support for \"global keys\" somehow. This is a lot of work, lots of room for bikeshedding, and I worry that @achow101 will NACK anything that looks too much like a \"bag of keys\" model. (The situation would be much less bad than the legacy one, where 3rd parties could do stuff like mapping p2wpkh addresses to p2pkh ones and the wallet would just accept it ... but it would still potentially lead to user confusion about what exact conditions the wallet could sign for what descriptors, and it may constrain future wallet changes.)\r\n* Adding a `codex32(...)/1/2/3` xpriv format to the descriptor import format. This was suggested to me by @sipa and has the benefit that very closely matches the existing import model.\r\n\r\nPersonally I don't like the latter\r\n* for the reasons stated in the PR description -- I like my descriptors to be public, and my secret data to be limited to 16 bytes, and I think this is a common mode of operation for people coming from other wallets\r\n* ...and maybe worse, a common model for other wallet authors, who would refuse to nicely interoperate with this);\r\n* because it felt like enough of a change to deserve a change to one of the descriptor BIPs, but those are big enough already and it's hard to get tiny changes to propagate to all implementors of standards. Plus it felt wrong to couple codex32 with descriptors like this.i\r\n* because if you have multiple descirptors that use the same seed, it would force you to copy the seed multiple times, which is dangerous. (In some cases [BIP 389](https://github.com/bitcoin/bips/pull/1354) will make this better, but it doesn't cover everything and anyway is not accepted or implemented yet. One thing at a time :))\r\n\r\nBut what cinched it, and made me switch to the approach in the PR, was that @roconnor-blockstream pointed out to me that the codex32 model means that you can't predict, at writing-down-the-descriptor time, exactly what shares you'll be inputting. And because descriptors have a checksum which covers their entire string encoding, this means that you can't predict ahead-of-timei what will go into the `codex32(...)` slot and therefore what the total checksum ought to be. And this means that either (a) you lose the descriptor checksum, which is a Bad Idea and also inconvenient for importers who' will have to construct a checksum with `getdescriptorinfo` to get `importdescriptors` to accept it, even though said checksum had never been used to protect data in storage; or (b) you modify the descriptor checksum algorithm to be aware of `codex(...)` and to skip checksumming the data inside of that. This means even more implementation complexity that other wallets are unlikely to bring in, plus the result generalizes less easily to other seed formats (e.g. hex) which don't have checksums of their own.\r\n\r\n",
          "user": {
            "login": "apoelstra",
            "id": 1351933,
            "node_id": "MDQ6VXNlcjEzNTE5MzM=",
            "avatar_url": "https://avatars.githubusercontent.com/u/1351933?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/apoelstra",
            "html_url": "https://github.com/apoelstra",
            "followers_url": "https://api.github.com/users/apoelstra/followers",
            "following_url": "https://api.github.com/users/apoelstra/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/apoelstra/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/apoelstra/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/apoelstra/subscriptions",
            "organizations_url": "https://api.github.com/users/apoelstra/orgs",
            "repos_url": "https://api.github.com/users/apoelstra/repos",
            "events_url": "https://api.github.com/users/apoelstra/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/apoelstra/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 149424,
              "node_id": "MDU6TGFiZWwxNDk0MjQ=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Wallet",
              "name": "Wallet",
              "color": "08a781",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "CONTRIBUTOR",
          "locked": false,
          "comments": 10,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/27351",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/27351",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/27351.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/27351.patch"
          },
          "created_at": "2023-03-28T00:57:14Z",
          "updated_at": "2023-09-21T20:33:42Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-03-28T20:28:17Z",
      "updated_at": "2023-03-28T20:28:17Z",
      "source": {
        "issue": {
          "id": 1584692334,
          "node_id": "PR_kwDOABII585J-QiA",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/27101",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/27101/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/27101/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/27101/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/27101",
          "number": 27101,
          "state": "open",
          "state_reason": null,
          "title": "Support JSON-RPC 2.0 when requested by client",
          "body": "Closes https://github.com/bitcoin/bitcoin/issues/2960\r\n\r\nBitcoin Core's JSONRPC server behaves with a special blend of 1.0, 1.1 and 2.0 behaviors. This introduces compliance issues with more strict clients. There are the major misbehaviors that I found:\r\n- returning non-200 HTTP codes for RPC errors like \"Method not found\" (this is not a server error or an HTTP error)\r\n- returning both `\"error\"` and `\"result\"` fields together in a response object.\r\n- different behavior for single and batched RPC requests\r\n\r\nhttps://github.com/bitcoin/bitcoin/pull/15495 added regression tests after a discussion in https://github.com/bitcoin/bitcoin/pull/15381 to kinda lock in our RPC behavior to preserve backwards compatibility. \r\n\r\nhttps://github.com/bitcoin/bitcoin/pull/12435 was an attempt to allow strict 2.0 compliance behind a flag, but was abandoned. \r\n\r\nThe approach in this PR is not strict and preserves backwards compatibility in a familiar bitcoin-y way: all old behavior is preserved, but new rules are applied to clients that opt in. One of the rules in the [JSON RPC 2.0 spec](https://www.jsonrpc.org/specification#request_object) is that the kv pair `\"jsonrpc\": \"2.0\"` must be present in the request. Well, let's just use that to trigger strict 2.0 behavior! When that kv pair is included in a request object, the [response will adhere to strict JSON-RPC 2.0 rules](https://www.jsonrpc.org/specification#response_object), essentially:\r\n\r\n- always return HTTP 200 \"OK\" unless there really is a server error or malformed request\r\n- either return `\"error\"` OR `\"result\"` but never both\r\n- same behavior for single and batch requests\r\n\r\nIf this is merged next steps can be:\r\n\r\n- Refactor bitcoin-cli to always use strict 2.0\r\n- Refactor the python test framework to always use strict 2.0 for everything\r\n- Begin deprecation process for 1.0/1.1 behavior (?)\r\n\r\nIf we can one day remove the old 1.0/1.1 behavior we can clean up the rpc code quite a bit.\r\n\r\nThis patch does NOT implement JSON RPC 2.0 [\"notifications\"](https://www.jsonrpc.org/specification#notification) which are requests that the server should not respond to.",
          "user": {
            "login": "pinheadmz",
            "id": 2084648,
            "node_id": "MDQ6VXNlcjIwODQ2NDg=",
            "avatar_url": "https://avatars.githubusercontent.com/u/2084648?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/pinheadmz",
            "html_url": "https://github.com/pinheadmz",
            "followers_url": "https://api.github.com/users/pinheadmz/followers",
            "following_url": "https://api.github.com/users/pinheadmz/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/pinheadmz/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/pinheadmz/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/pinheadmz/subscriptions",
            "organizations_url": "https://api.github.com/users/pinheadmz/orgs",
            "repos_url": "https://api.github.com/users/pinheadmz/repos",
            "events_url": "https://api.github.com/users/pinheadmz/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/pinheadmz/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 955867938,
              "node_id": "MDU6TGFiZWw5NTU4Njc5Mzg=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Needs%20rebase",
              "name": "Needs rebase",
              "description": "",
              "color": "cccccc",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": false,
          "comments": 15,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/27101",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/27101",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/27101.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/27101.patch"
          },
          "created_at": "2023-02-14T19:13:42Z",
          "updated_at": "2023-09-14T19:01:01Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-03-30T09:51:44Z",
      "updated_at": "2023-03-30T09:51:44Z",
      "source": {
        "issue": {
          "id": 1631284093,
          "node_id": "PR_kwDOABII585MaEi3",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/27279",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/27279/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/27279/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/27279/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/27279",
          "number": 27279,
          "state": "closed",
          "state_reason": null,
          "title": "Add \"warnings\", deprecate \"warning\" in {create,load,unload,restore}wallet",
          "body": "Based on discussion and concept ACKed in #27138, add a `warnings` field to RPCs createwallet, loadwallet, unloadwallet, and restorewallet as a JSON array of strings to replace the `warning` string field in these 4 RPCs. The idea is to more gracefully handle multiple warning messages and for consistency with other wallet RPCs.  Then, deprecate the latter fields, which represent all the remaining RPC `warning` fields.\r\n\r\nThe first commit https://github.com/bitcoin/bitcoin/pull/27279/commits/f73782a9032a462a71569e9424db9bf9eeababf3 implements https://github.com/bitcoin/bitcoin/pull/27138#issuecomment-1474789198 as an alternative to #27138. One of those two could potentially be backported to our currently supported releases.\r\n",
          "user": {
            "login": "jonatack",
            "id": 2415484,
            "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
            "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jonatack",
            "html_url": "https://github.com/jonatack",
            "followers_url": "https://api.github.com/users/jonatack/followers",
            "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
            "organizations_url": "https://api.github.com/users/jonatack/orgs",
            "repos_url": "https://api.github.com/users/jonatack/repos",
            "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/jonatack/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [],
          "assignees": [],
          "author_association": "CONTRIBUTOR",
          "locked": false,
          "comments": 4,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/27279",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/27279",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/27279.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/27279.patch"
          },
          "closed_at": "2023-04-12T17:09:58Z",
          "created_at": "2023-03-20T02:52:06Z",
          "updated_at": "2023-04-12T17:13:23Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "labeled",
      "id": 8984490134,
      "node_id": "LE_lADOEEET9c5PZ5y9zwAAAAIXhHCW",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/8984490134",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-04-12T11:24:42Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 8986018240,
      "node_id": "HRFPE_lADOEEET9c5PZ5y9zwAAAAIXm8HA",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/8986018240",
      "actor": {
        "login": "KolbyML",
        "id": 31669092,
        "node_id": "MDQ6VXNlcjMxNjY5MDky",
        "avatar_url": "https://avatars.githubusercontent.com/u/31669092?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/KolbyML",
        "html_url": "https://github.com/KolbyML",
        "followers_url": "https://api.github.com/users/KolbyML/followers",
        "following_url": "https://api.github.com/users/KolbyML/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/KolbyML/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/KolbyML/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/KolbyML/subscriptions",
        "organizations_url": "https://api.github.com/users/KolbyML/orgs",
        "repos_url": "https://api.github.com/users/KolbyML/repos",
        "events_url": "https://api.github.com/users/KolbyML/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/KolbyML/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-04-12T13:56:23Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 8986153459,
      "node_id": "HRFPE_lADOEEET9c5PZ5y9zwAAAAIXndHz",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/8986153459",
      "actor": {
        "login": "KolbyML",
        "id": 31669092,
        "node_id": "MDQ6VXNlcjMxNjY5MDky",
        "avatar_url": "https://avatars.githubusercontent.com/u/31669092?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/KolbyML",
        "html_url": "https://github.com/KolbyML",
        "followers_url": "https://api.github.com/users/KolbyML/followers",
        "following_url": "https://api.github.com/users/KolbyML/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/KolbyML/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/KolbyML/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/KolbyML/subscriptions",
        "organizations_url": "https://api.github.com/users/KolbyML/orgs",
        "repos_url": "https://api.github.com/users/KolbyML/repos",
        "events_url": "https://api.github.com/users/KolbyML/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/KolbyML/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-04-12T14:07:50Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 8986329844,
      "node_id": "HRFPE_lADOEEET9c5PZ5y9zwAAAAIXoIL0",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/8986329844",
      "actor": {
        "login": "KolbyML",
        "id": 31669092,
        "node_id": "MDQ6VXNlcjMxNjY5MDky",
        "avatar_url": "https://avatars.githubusercontent.com/u/31669092?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/KolbyML",
        "html_url": "https://github.com/KolbyML",
        "followers_url": "https://api.github.com/users/KolbyML/followers",
        "following_url": "https://api.github.com/users/KolbyML/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/KolbyML/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/KolbyML/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/KolbyML/subscriptions",
        "organizations_url": "https://api.github.com/users/KolbyML/orgs",
        "repos_url": "https://api.github.com/users/KolbyML/repos",
        "events_url": "https://api.github.com/users/KolbyML/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/KolbyML/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-04-12T14:22:58Z"
    },
    {
      "event": "unlabeled",
      "id": 8987133287,
      "node_id": "UNLE_lADOEEET9c5PZ5y9zwAAAAIXrMVn",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/8987133287",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-04-12T15:35:27Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "labeled",
      "id": 8988432682,
      "node_id": "LE_lADOEEET9c5PZ5y9zwAAAAIXwJkq",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/8988432682",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-04-12T17:57:03Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 8990585870,
      "node_id": "HRFPE_lADOEEET9c5PZ5y9zwAAAAIX4XQO",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/8990585870",
      "actor": {
        "login": "KolbyML",
        "id": 31669092,
        "node_id": "MDQ6VXNlcjMxNjY5MDky",
        "avatar_url": "https://avatars.githubusercontent.com/u/31669092?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/KolbyML",
        "html_url": "https://github.com/KolbyML",
        "followers_url": "https://api.github.com/users/KolbyML/followers",
        "following_url": "https://api.github.com/users/KolbyML/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/KolbyML/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/KolbyML/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/KolbyML/subscriptions",
        "organizations_url": "https://api.github.com/users/KolbyML/orgs",
        "repos_url": "https://api.github.com/users/KolbyML/repos",
        "events_url": "https://api.github.com/users/KolbyML/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/KolbyML/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-04-12T22:36:04Z"
    },
    {
      "event": "unlabeled",
      "id": 8991088503,
      "node_id": "UNLE_lADOEEET9c5PZ5y9zwAAAAIX6R93",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/8991088503",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-04-13T00:14:31Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-05-17T00:58:30Z",
      "updated_at": "2023-05-17T00:58:30Z",
      "source": {
        "issue": {
          "id": 1712093328,
          "node_id": "PR_kwDOEEET9c5Qnphy",
          "url": "https://api.github.com/repos/bitcoin-core/gui/issues/729",
          "repository_url": "https://api.github.com/repos/bitcoin-core/gui",
          "labels_url": "https://api.github.com/repos/bitcoin-core/gui/issues/729/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin-core/gui/issues/729/comments",
          "events_url": "https://api.github.com/repos/bitcoin-core/gui/issues/729/events",
          "html_url": "https://github.com/bitcoin-core/gui/pull/729",
          "number": 729,
          "state": "closed",
          "state_reason": null,
          "title": "test: Add missed header",
          "body": "Should fix MSVC link errors like [that](https://api.cirrus-ci.com/v1/task/4870882892447744/logs/build.log):\r\n```\r\naddressbooktests.obj : error LNK2019: unresolved external symbol \"void __cdecl ConfirmMessage(class QString *,class std::chrono::duration<__int64,struct std::ratio<1,1000> >)\" (?ConfirmMessage@@YAXPEAVQString@@V?$duration@_JU?$ratio@$00$0DOI@@std@@@chrono@std@@@Z) referenced in function \"void __cdecl `anonymous namespace'::EditAddressAndSubmit(class EditAddressDialog *,class QString const &,class QString const &,class QString)\" (?EditAddressAndSubmit@?A0x2e52698e@@YAXPEAVEditAddressDialog@@AEBVQString@@1V3@@Z) [C:\\Users\\ContainerAdministrator\\AppData\\Local\\Temp\\cirrus-ci-build\\build_msvc\\test_bitcoin-qt\\test_bitcoin-qt.vcxproj]\r\nwallettests.obj : error LNK2001: unresolved external symbol \"void __cdecl ConfirmMessage(class QString *,class std::chrono::duration<__int64,struct std::ratio<1,1000> >)\" (?ConfirmMessage@@YAXPEAVQString@@V?$duration@_JU?$ratio@$00$0DOI@@std@@@chrono@std@@@Z) [C:\\Users\\ContainerAdministrator\\AppData\\Local\\Temp\\cirrus-ci-build\\build_msvc\\test_bitcoin-qt\\test_bitcoin-qt.vcxproj]\r\nC:\\Users\\ContainerAdministrator\\AppData\\Local\\Temp\\cirrus-ci-build\\build_msvc\\x64\\Release\\test_bitcoin-qt.exe : fatal error LNK1120: 1 unresolved externals [C:\\Users\\ContainerAdministrator\\AppData\\Local\\Temp\\cirrus-ci-build\\build_msvc\\test_bitcoin-qt\\test_bitcoin-qt.vcxproj]\r\n```",
          "user": {
            "login": "hebasto",
            "id": 32963518,
            "node_id": "MDQ6VXNlcjMyOTYzNTE4",
            "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/hebasto",
            "html_url": "https://github.com/hebasto",
            "followers_url": "https://api.github.com/users/hebasto/followers",
            "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
            "organizations_url": "https://api.github.com/users/hebasto/orgs",
            "repos_url": "https://api.github.com/users/hebasto/repos",
            "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/hebasto/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": false,
          "comments": 14,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin-core/gui/pulls/729",
            "html_url": "https://github.com/bitcoin-core/gui/pull/729",
            "diff_url": "https://github.com/bitcoin-core/gui/pull/729.diff",
            "patch_url": "https://github.com/bitcoin-core/gui/pull/729.patch"
          },
          "closed_at": "2023-05-17T08:39:35Z",
          "created_at": "2023-05-16T14:00:29Z",
          "updated_at": "2023-05-21T12:35:51Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "labeled",
      "id": 9267579663,
      "node_id": "LE_lADOEEET9c5PZ5y9zwAAAAIoZAsP",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/9267579663",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-05-17T10:33:25Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOEEET9doAKDVmMGFkZDM4ZGJjYjhhZTQ2NzEwMzdjYWUyY2I0NmY2ZjBlYTViNDI",
      "url": "https://api.github.com/repos/bitcoin-core/gui/git/commits/5f0add38dbcb8ae4671037cae2cb46f6f0ea5b42",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin-core/gui/commit/5f0add38dbcb8ae4671037cae2cb46f6f0ea5b42",
      "tree": {
        "sha": "f017fe073e4a07959df760128084379430536e5b",
        "url": "https://api.github.com/repos/bitcoin-core/gui/git/trees/f017fe073e4a07959df760128084379430536e5b"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin-core/gui/git/commits/6cc136bbd36f859a16e469bb5c016d06c19bcd50",
          "sha": "6cc136bbd36f859a16e469bb5c016d06c19bcd50",
          "html_url": "https://github.com/bitcoin-core/gui/commit/6cc136bbd36f859a16e469bb5c016d06c19bcd50"
        }
      ],
      "message": "refactor: importmulti and importdescriptors rpc",
      "committer": {
        "name": "Kolby Moroz Liebl",
        "email": "31669092+KolbyML@users.noreply.github.com",
        "date": "2023-05-18T18:07:29Z"
      },
      "author": {
        "name": "Kolby ML",
        "email": "mrmetech@gmail.com",
        "date": "2022-08-05T08:49:04Z"
      },
      "sha": "5f0add38dbcb8ae4671037cae2cb46f6f0ea5b42"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOEEET9doAKDliYzAwMWM0NjljZjRjYjQ2NDE5ODQ5NGNlNGZiMWJjNzA2MzllNDU",
      "url": "https://api.github.com/repos/bitcoin-core/gui/git/commits/9bc001c469cf4cb464198494ce4fb1bc70639e45",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin-core/gui/commit/9bc001c469cf4cb464198494ce4fb1bc70639e45",
      "tree": {
        "sha": "98b17d6c8e6f1120842df3790c415363464cd850",
        "url": "https://api.github.com/repos/bitcoin-core/gui/git/trees/98b17d6c8e6f1120842df3790c415363464cd850"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin-core/gui/git/commits/5f0add38dbcb8ae4671037cae2cb46f6f0ea5b42",
          "sha": "5f0add38dbcb8ae4671037cae2cb46f6f0ea5b42",
          "html_url": "https://github.com/bitcoin-core/gui/commit/5f0add38dbcb8ae4671037cae2cb46f6f0ea5b42"
        }
      ],
      "message": "interfaces: Add functions for import gui",
      "committer": {
        "name": "Kolby Moroz Liebl",
        "email": "31669092+KolbyML@users.noreply.github.com",
        "date": "2023-05-18T18:07:29Z"
      },
      "author": {
        "name": "Kolby ML",
        "email": "mrmetech@gmail.com",
        "date": "2022-08-05T09:47:45Z"
      },
      "sha": "9bc001c469cf4cb464198494ce4fb1bc70639e45"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOEEET9doAKDBhNWU0MmE0OTY4YTNlMjBhNzhmMjMwNWNmZjU5MTRmMGVmYjJmYzk",
      "url": "https://api.github.com/repos/bitcoin-core/gui/git/commits/0a5e42a4968a3e20a78f2305cff5914f0efb2fc9",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin-core/gui/commit/0a5e42a4968a3e20a78f2305cff5914f0efb2fc9",
      "tree": {
        "sha": "d42ca3227b2bb440a017620db21f3d7bcef13190",
        "url": "https://api.github.com/repos/bitcoin-core/gui/git/trees/d42ca3227b2bb440a017620db21f3d7bcef13190"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin-core/gui/git/commits/9bc001c469cf4cb464198494ce4fb1bc70639e45",
          "sha": "9bc001c469cf4cb464198494ce4fb1bc70639e45",
          "html_url": "https://github.com/bitcoin-core/gui/commit/9bc001c469cf4cb464198494ce4fb1bc70639e45"
        }
      ],
      "message": "qt: implemented importpubkey, importprivkey, and importaddress GUI's",
      "committer": {
        "name": "Kolby Moroz Liebl",
        "email": "31669092+KolbyML@users.noreply.github.com",
        "date": "2023-05-18T18:07:29Z"
      },
      "author": {
        "name": "Kolby ML",
        "email": "mrmetech@gmail.com",
        "date": "2022-08-05T10:25:45Z"
      },
      "sha": "0a5e42a4968a3e20a78f2305cff5914f0efb2fc9"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOEEET9doAKGQ3MjIzMTZjYzAxYjgzZWZjZTY2MmE3ZjUxYzlkMzQ4ZmIxODNiZGE",
      "url": "https://api.github.com/repos/bitcoin-core/gui/git/commits/d722316cc01b83efce662a7f51c9d348fb183bda",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin-core/gui/commit/d722316cc01b83efce662a7f51c9d348fb183bda",
      "tree": {
        "sha": "610789e65bf8576dc9305da1f383e63f938ff743",
        "url": "https://api.github.com/repos/bitcoin-core/gui/git/trees/610789e65bf8576dc9305da1f383e63f938ff743"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin-core/gui/git/commits/0a5e42a4968a3e20a78f2305cff5914f0efb2fc9",
          "sha": "0a5e42a4968a3e20a78f2305cff5914f0efb2fc9",
          "html_url": "https://github.com/bitcoin-core/gui/commit/0a5e42a4968a3e20a78f2305cff5914f0efb2fc9"
        }
      ],
      "message": "qt: implemented importmulti and importdescriptors GUI's",
      "committer": {
        "name": "Kolby Moroz Liebl",
        "email": "31669092+KolbyML@users.noreply.github.com",
        "date": "2023-05-18T18:07:29Z"
      },
      "author": {
        "name": "Kolby ML",
        "email": "mrmetech@gmail.com",
        "date": "2022-08-05T10:37:50Z"
      },
      "sha": "d722316cc01b83efce662a7f51c9d348fb183bda"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 9282501095,
      "node_id": "HRFPE_lADOEEET9c5PZ5y9zwAAAAIpR7nn",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/9282501095",
      "actor": {
        "login": "KolbyML",
        "id": 31669092,
        "node_id": "MDQ6VXNlcjMxNjY5MDky",
        "avatar_url": "https://avatars.githubusercontent.com/u/31669092?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/KolbyML",
        "html_url": "https://github.com/KolbyML",
        "followers_url": "https://api.github.com/users/KolbyML/followers",
        "following_url": "https://api.github.com/users/KolbyML/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/KolbyML/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/KolbyML/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/KolbyML/subscriptions",
        "organizations_url": "https://api.github.com/users/KolbyML/orgs",
        "repos_url": "https://api.github.com/users/KolbyML/repos",
        "events_url": "https://api.github.com/users/KolbyML/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/KolbyML/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-05-18T18:08:20Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 9282595779,
      "node_id": "HRFPE_lADOEEET9c5PZ5y9zwAAAAIpSSvD",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/9282595779",
      "actor": {
        "login": "KolbyML",
        "id": 31669092,
        "node_id": "MDQ6VXNlcjMxNjY5MDky",
        "avatar_url": "https://avatars.githubusercontent.com/u/31669092?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/KolbyML",
        "html_url": "https://github.com/KolbyML",
        "followers_url": "https://api.github.com/users/KolbyML/followers",
        "following_url": "https://api.github.com/users/KolbyML/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/KolbyML/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/KolbyML/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/KolbyML/subscriptions",
        "organizations_url": "https://api.github.com/users/KolbyML/orgs",
        "repos_url": "https://api.github.com/users/KolbyML/repos",
        "events_url": "https://api.github.com/users/KolbyML/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/KolbyML/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-05-18T18:21:25Z"
    },
    {
      "event": "labeled",
      "id": 9282596483,
      "node_id": "LE_lADOEEET9c5PZ5y9zwAAAAIpSS6D",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/9282596483",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-05-18T18:21:31Z",
      "label": {
        "name": "CI failed",
        "color": "ededed"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 9282650314,
      "node_id": "HRFPE_lADOEEET9c5PZ5y9zwAAAAIpSgDK",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/9282650314",
      "actor": {
        "login": "KolbyML",
        "id": 31669092,
        "node_id": "MDQ6VXNlcjMxNjY5MDky",
        "avatar_url": "https://avatars.githubusercontent.com/u/31669092?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/KolbyML",
        "html_url": "https://github.com/KolbyML",
        "followers_url": "https://api.github.com/users/KolbyML/followers",
        "following_url": "https://api.github.com/users/KolbyML/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/KolbyML/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/KolbyML/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/KolbyML/subscriptions",
        "organizations_url": "https://api.github.com/users/KolbyML/orgs",
        "repos_url": "https://api.github.com/users/KolbyML/repos",
        "events_url": "https://api.github.com/users/KolbyML/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/KolbyML/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-05-18T18:28:51Z"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOEEET9doAKGMyOWViMDdhZjE1MDQzYzBkMjBjYzdjNmE1MTk0N2NlMzU3ODE2NTc",
      "url": "https://api.github.com/repos/bitcoin-core/gui/git/commits/c29eb07af15043c0d20cc7c6a51947ce35781657",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin-core/gui/commit/c29eb07af15043c0d20cc7c6a51947ce35781657",
      "tree": {
        "sha": "5748e1cc20614379df7b5b21096abb090ebd4b5e",
        "url": "https://api.github.com/repos/bitcoin-core/gui/git/trees/5748e1cc20614379df7b5b21096abb090ebd4b5e"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin-core/gui/git/commits/d722316cc01b83efce662a7f51c9d348fb183bda",
          "sha": "d722316cc01b83efce662a7f51c9d348fb183bda",
          "html_url": "https://github.com/bitcoin-core/gui/commit/d722316cc01b83efce662a7f51c9d348fb183bda"
        }
      ],
      "message": "qt, test: add importmulti tests",
      "committer": {
        "name": "Kolby Moroz Liebl",
        "email": "31669092+KolbyML@users.noreply.github.com",
        "date": "2023-05-18T18:36:44Z"
      },
      "author": {
        "name": "Kolby ML",
        "email": "31669092+KolbyML@users.noreply.github.com",
        "date": "2023-02-19T04:30:39Z"
      },
      "sha": "c29eb07af15043c0d20cc7c6a51947ce35781657"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOEEET9doAKDRlM2JlOWY3NTJmODMyNmRhMGU0ZWYwNWVjOWY1Yzk3N2NhZDg0YTY",
      "url": "https://api.github.com/repos/bitcoin-core/gui/git/commits/4e3be9f752f8326da0e4ef05ec9f5c977cad84a6",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin-core/gui/commit/4e3be9f752f8326da0e4ef05ec9f5c977cad84a6",
      "tree": {
        "sha": "b073e75f57f25301be9db5dd21c769726f7f0dcf",
        "url": "https://api.github.com/repos/bitcoin-core/gui/git/trees/b073e75f57f25301be9db5dd21c769726f7f0dcf"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin-core/gui/git/commits/c29eb07af15043c0d20cc7c6a51947ce35781657",
          "sha": "c29eb07af15043c0d20cc7c6a51947ce35781657",
          "html_url": "https://github.com/bitcoin-core/gui/commit/c29eb07af15043c0d20cc7c6a51947ce35781657"
        }
      ],
      "message": "qt, test: add importdescriptors tests",
      "committer": {
        "name": "Kolby Moroz Liebl",
        "email": "31669092+KolbyML@users.noreply.github.com",
        "date": "2023-05-18T18:36:44Z"
      },
      "author": {
        "name": "Kolby ML",
        "email": "31669092+KolbyML@users.noreply.github.com",
        "date": "2023-02-19T04:31:21Z"
      },
      "sha": "4e3be9f752f8326da0e4ef05ec9f5c977cad84a6"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOEEET9doAKGIyYjAwYWYxZDM3ZGQ2OWMzZTY0ZDkwNTk4NGU2OGFjNmE2YjJkOGY",
      "url": "https://api.github.com/repos/bitcoin-core/gui/git/commits/b2b00af1d37dd69c3e64d905984e68ac6a6b2d8f",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin-core/gui/commit/b2b00af1d37dd69c3e64d905984e68ac6a6b2d8f",
      "tree": {
        "sha": "684a73f744abdf8a1eb8c47be9c93d6c54f02783",
        "url": "https://api.github.com/repos/bitcoin-core/gui/git/trees/684a73f744abdf8a1eb8c47be9c93d6c54f02783"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin-core/gui/git/commits/4e3be9f752f8326da0e4ef05ec9f5c977cad84a6",
          "sha": "4e3be9f752f8326da0e4ef05ec9f5c977cad84a6",
          "html_url": "https://github.com/bitcoin-core/gui/commit/4e3be9f752f8326da0e4ef05ec9f5c977cad84a6"
        }
      ],
      "message": "qt, test: add importpubkey, importprivkey, and importaddress tests",
      "committer": {
        "name": "Kolby Moroz Liebl",
        "email": "31669092+KolbyML@users.noreply.github.com",
        "date": "2023-05-18T18:36:44Z"
      },
      "author": {
        "name": "Kolby ML",
        "email": "31669092+KolbyML@users.noreply.github.com",
        "date": "2023-02-19T04:33:12Z"
      },
      "sha": "b2b00af1d37dd69c3e64d905984e68ac6a6b2d8f"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 9282718076,
      "node_id": "HRFPE_lADOEEET9c5PZ5y9zwAAAAIpSwl8",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/9282718076",
      "actor": {
        "login": "KolbyML",
        "id": 31669092,
        "node_id": "MDQ6VXNlcjMxNjY5MDky",
        "avatar_url": "https://avatars.githubusercontent.com/u/31669092?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/KolbyML",
        "html_url": "https://github.com/KolbyML",
        "followers_url": "https://api.github.com/users/KolbyML/followers",
        "following_url": "https://api.github.com/users/KolbyML/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/KolbyML/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/KolbyML/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/KolbyML/subscriptions",
        "organizations_url": "https://api.github.com/users/KolbyML/orgs",
        "repos_url": "https://api.github.com/users/KolbyML/repos",
        "events_url": "https://api.github.com/users/KolbyML/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/KolbyML/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-05-18T18:36:57Z"
    },
    {
      "event": "unlabeled",
      "id": 9282735955,
      "node_id": "UNLE_lADOEEET9c5PZ5y9zwAAAAIpS09T",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/9282735955",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-05-18T18:39:03Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-06-05T20:54:09Z",
      "updated_at": "2023-06-05T20:54:09Z",
      "source": {
        "issue": {
          "id": 1741647494,
          "node_id": "PR_kwDOABII585SMBHD",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/27827",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/27827/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/27827/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/27827/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/27827",
          "number": 27827,
          "state": "open",
          "state_reason": null,
          "title": "Silent Payments: send and receive",
          "body": "## For reviewers\r\n\r\nIn an attempt to make reviewing a bit more sane, I'm breaking this up into a few smaller PRs, but will keep this one open as the parent PR and keep it rebased on the child PRs. The main purpose of having this PR is to track progress on child PRs and also have an easy way to compile `bitcoind` with both send and receive support for testing. Additionally, I'll be adding more functional tests to this PR since it's much easier to test when `bitcoind` can both send and receive.\r\n\r\n## PRs\r\n\r\n- [ ] https://github.com/bitcoin/bitcoin/pull/28122\r\n  - Implements the logic from BIP352 without any wallet code. This PR adds the necessary cryptographic functions and implements the logic needed for sending and scanning. This PR also includes the test vectors from the BIP as unit tests. Both the send and receive PRs have this as a dependency. In terms of priority, this PR should be reviewed first\r\n- [ ] https://github.com/bitcoin/bitcoin/pull/28201\r\n  - Implements sending in the Bitcoin Core wallet. This PR allows a wallet to send to a silent payment address, regardless of whether or not the wallet can receive silent payments\r\n  - Ready for review, but marked as a draft until dependencies are merged\r\n- [ ] https://github.com/bitcoin/bitcoin/pull/28202\r\n  - Implements receiving in the Bitcoin Core wallet. This PR allows a wallet to generate silent payment addresses and scan for silent payments, regardless of whether or not the wallet can send to a silent payment address\r\n  - Ready for review but marked as a draft until dependencies are merged\r\n\r\nFor the silent payments specification, see https://github.com/bitcoin/bips/pull/1458\r\n\r\n## Overall\r\n\r\nThis PR implements the full silent payments scheme: sending and receiving. The following items are not covered in this PR and are intended for follow-up PRs:\r\n\r\n* Adding labels for the receiver wallet\r\n* Full RPC coverage (only `sendtoaddress` and `sendmany` are covered in this PR)\r\n* Light client support (vending the tweak data per block, either in an index or to serve to indexer, such as electrum server)\r\n* Add benchmarks to validate that there are no DoS concerns for doing silent payment verification for transactions in the mempool\r\n* External signer support (dependent on hardware wallets supporting silent payments)\r\n* More unit / functional test coverage\r\n\r\n## Major changes\r\n\r\nThis PR is a continuation of the work done in https://github.com/bitcoin/bitcoin/pull/24897. Below is a summary of the major changes:\r\n\r\n* Remove labels\r\n  * The original draft included labels, but this has been deferred for a later PR. Labels are not necessary for sending and receiving and there are still some open questions on how best to implement them in Bitcoin Core. Labels can also be added at any point by the receiver without requiring any changes from the sender\r\n* Remove indexes\r\n  * In the original draft, indexes were used when scanning for silent payments and when doing wallet rescans. This has been removed in favor of using `rev*.dat` files for rescanning. It may make sense to add an index in the future, but for the purpose of vending tweak data to light clients, which is still an open question\r\n* Update to implement the most current version of BIP352\r\n  * Since the original draft, there have been a few changes in the BIP which are reflected in the current PR. Most notably, using 33-byte compressed keys for the silent payment address (as opposed to X-only keys in the original draft) \r\n\r\nIt may be helpful for context to read through the discussions on #24897 , but ongoing review should happen in the relevant child PRs listed above.",
          "user": {
            "login": "josibake",
            "id": 7444140,
            "node_id": "MDQ6VXNlcjc0NDQxNDA=",
            "avatar_url": "https://avatars.githubusercontent.com/u/7444140?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/josibake",
            "html_url": "https://github.com/josibake",
            "followers_url": "https://api.github.com/users/josibake/followers",
            "following_url": "https://api.github.com/users/josibake/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/josibake/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/josibake/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/josibake/subscriptions",
            "organizations_url": "https://api.github.com/users/josibake/orgs",
            "repos_url": "https://api.github.com/users/josibake/repos",
            "events_url": "https://api.github.com/users/josibake/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/josibake/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 955867938,
              "node_id": "MDU6TGFiZWw5NTU4Njc5Mzg=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Needs%20rebase",
              "name": "Needs rebase",
              "description": "",
              "color": "cccccc",
              "default": false
            },
            {
              "id": 5334691551,
              "node_id": "LA_kwDOABII588AAAABPfju3w",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/CI%20failed",
              "name": "CI failed",
              "description": "",
              "color": "cccccc",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "CONTRIBUTOR",
          "locked": false,
          "comments": 6,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/27827",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/27827",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/27827.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/27827.patch"
          },
          "created_at": "2023-06-05T12:12:23Z",
          "updated_at": "2023-09-19T18:12:38Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-06-12T20:49:34Z",
      "updated_at": "2023-06-12T20:49:34Z",
      "source": {
        "issue": {
          "id": 1753342247,
          "node_id": "PR_kwDOABII585SzfoS",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/27865",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/27865/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/27865/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/27865/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/27865",
          "number": 27865,
          "state": "open",
          "state_reason": null,
          "title": "wallet: Track no-longer-spendable TXOs separately",
          "body": "In #27286, the wallet keeps track of all of its transaction outputs, even if they are already spent or are otherwise unspendable. This TXO set is iterated for balance checking and coin selection preparation, which can still be slow for wallets that have had a lot of activity. This PR aims to improve the performance of such wallets by moving UTXOs that are definitely no longer spendable to a different map in the wallet so that far fewer TXOs need to be iterated for the aforementioned functions.\r\n\r\nUnspendable TXOs (not to be confused with Unspent TXOs) are those which have a spending transaction that has been confirmed, or are no longer valid due to reorgs. TXOs that are spent in unconfirmed transactions remain in the primary TXO set, and are filtered out of balance and coin selection as before.\r\n\r\nDepends on #27286",
          "user": {
            "login": "achow101",
            "id": 3782274,
            "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
            "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/achow101",
            "html_url": "https://github.com/achow101",
            "followers_url": "https://api.github.com/users/achow101/followers",
            "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
            "organizations_url": "https://api.github.com/users/achow101/orgs",
            "repos_url": "https://api.github.com/users/achow101/repos",
            "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/achow101/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 149424,
              "node_id": "MDU6TGFiZWwxNDk0MjQ=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Wallet",
              "name": "Wallet",
              "color": "08a781",
              "default": false
            },
            {
              "id": 955867938,
              "node_id": "MDU6TGFiZWw5NTU4Njc5Mzg=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Needs%20rebase",
              "name": "Needs rebase",
              "description": "",
              "color": "cccccc",
              "default": false
            },
            {
              "id": 5334691551,
              "node_id": "LA_kwDOABII588AAAABPfju3w",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/CI%20failed",
              "name": "CI failed",
              "description": "",
              "color": "cccccc",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": false,
          "comments": 7,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/27865",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/27865",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/27865.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/27865.patch"
          },
          "created_at": "2023-06-12T18:40:10Z",
          "updated_at": "2023-09-19T18:12:14Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-07-22T19:17:24Z",
      "updated_at": "2023-07-22T19:17:24Z",
      "source": {
        "issue": {
          "id": 1816776719,
          "node_id": "PR_kwDOABII585WJfIp",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28126",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28126/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28126/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28126/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/28126",
          "number": 28126,
          "state": "closed",
          "state_reason": null,
          "title": "wallet legacy: bugfix, disallow importing invalid scripts via importaddress",
          "body": "E.g. we're currently allowing to import scripts with several\r\nsh levels.\r\n\r\nThese scripts are not being watched by the wallet;\r\n`IsMine` returns `ISMINE_NO` for them (same as if they\r\nweren't stored at all..).\r\n\r\nSo, there is no reason to accept them in the first\r\nplace.\r\n\r\nNote:\r\nTo verify this, can run the test commit on top of master.\r\n`wallet_basic.py --legacy-wallet` will fail without the\r\nbugfix commit.\r\n\r\nPrior to this PR, let's focus on #28125.",
          "user": {
            "login": "furszy",
            "id": 5377650,
            "node_id": "MDQ6VXNlcjUzNzc2NTA=",
            "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/furszy",
            "html_url": "https://github.com/furszy",
            "followers_url": "https://api.github.com/users/furszy/followers",
            "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
            "organizations_url": "https://api.github.com/users/furszy/orgs",
            "repos_url": "https://api.github.com/users/furszy/repos",
            "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/furszy/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 5334691551,
              "node_id": "LA_kwDOABII588AAAABPfju3w",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/CI%20failed",
              "name": "CI failed",
              "description": "",
              "color": "cccccc",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": false,
          "comments": 3,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28126",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/28126",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/28126.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/28126.patch"
          },
          "closed_at": "2023-09-21T14:18:02Z",
          "created_at": "2023-07-22T14:04:38Z",
          "updated_at": "2023-09-21T14:18:02Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-08-02T20:47:24Z",
      "updated_at": "2023-08-02T20:47:24Z",
      "source": {
        "issue": {
          "id": 1833553731,
          "node_id": "PR_kwDOABII585XB6sb",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28202",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28202/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28202/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28202/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/28202",
          "number": 28202,
          "state": "open",
          "state_reason": null,
          "title": "Silent Payments: receiving",
          "body": "This PR is a child of https://github.com/bitcoin/bitcoin/pull/27827 and only implements the receiving logic. For the rest:\r\n\r\n* #28122 - implement the silent payments scheme\r\n* #28201 - implements sending\r\n* #27827 - all three PRs together - this PR is meant for tracking progress and is useful for reviewers who want to compile all three PRs at once for testing\r\n\r\nThis PR depends on #28122 and is marked as a draft until it is merged. Commits up to https://github.com/bitcoin/bitcoin/commit/8ee791e7b34a354ce6835b968fe12924b8908d7c belong to #28122; please review those commits on #28122\r\n\r\n## Receiving \r\n\r\n_Description coming soon_",
          "user": {
            "login": "josibake",
            "id": 7444140,
            "node_id": "MDQ6VXNlcjc0NDQxNDA=",
            "avatar_url": "https://avatars.githubusercontent.com/u/7444140?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/josibake",
            "html_url": "https://github.com/josibake",
            "followers_url": "https://api.github.com/users/josibake/followers",
            "following_url": "https://api.github.com/users/josibake/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/josibake/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/josibake/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/josibake/subscriptions",
            "organizations_url": "https://api.github.com/users/josibake/orgs",
            "repos_url": "https://api.github.com/users/josibake/repos",
            "events_url": "https://api.github.com/users/josibake/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/josibake/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 955867938,
              "node_id": "MDU6TGFiZWw5NTU4Njc5Mzg=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Needs%20rebase",
              "name": "Needs rebase",
              "description": "",
              "color": "cccccc",
              "default": false
            },
            {
              "id": 5334691551,
              "node_id": "LA_kwDOABII588AAAABPfju3w",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/CI%20failed",
              "name": "CI failed",
              "description": "",
              "color": "cccccc",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "CONTRIBUTOR",
          "locked": false,
          "comments": 2,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28202",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/28202",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/28202.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/28202.patch"
          },
          "created_at": "2023-08-02T16:42:41Z",
          "updated_at": "2023-09-19T18:10:16Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-08-02T20:50:35Z",
      "updated_at": "2023-08-02T20:50:35Z",
      "source": {
        "issue": {
          "id": 1833542215,
          "node_id": "PR_kwDOABII585XB4Gh",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28201",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28201/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28201/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28201/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/28201",
          "number": 28201,
          "state": "open",
          "state_reason": null,
          "title": "Silent Payments: sending",
          "body": "This PR is a child of https://github.com/bitcoin/bitcoin/pull/27827 and only implements the sending logic. For the rest:\r\n\r\n* #28122 - implement the silent payments scheme\r\n* #28202 - implements receiving\r\n* #27827 - all three PRs together - this PR is meant for tracking progress and is useful for reviewers who want to compile all three PRs at once for testing\r\n\r\nThis PR depends on #28122 and is marked as a draft until it is merged. If interested in those commits, please review on #28122\r\n\r\n## Sending \r\n### Silent Payments logic\r\n\r\nThe main focus of this PR is:\r\n\r\n* Applying the Taptweak to a taproot internal private key (this is a copy-paste of the code for applying the taptweak in the signing process)\r\n* Getting a private key from a given `scriptPubKey`\r\n* Creating silent payment outputs\r\n* Applying the created scriptPubKeys back to the vector of `CRecipients`\r\n\r\nThe functions are then used together to create silent payment outputs during `CreateTransactionInternal`.\r\n\r\n### Final steps\r\n\r\nThe last commits ensure that:\r\n\r\n* Coin selection is silent payments aware and knows to exclude taproot script path spends and inputs with unknown witness when funding a transaction which pays to a silent payment address\r\n* The change output type is correctly chosen when paying to a silent payment address\r\n* Functional tests\r\n",
          "user": {
            "login": "josibake",
            "id": 7444140,
            "node_id": "MDQ6VXNlcjc0NDQxNDA=",
            "avatar_url": "https://avatars.githubusercontent.com/u/7444140?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/josibake",
            "html_url": "https://github.com/josibake",
            "followers_url": "https://api.github.com/users/josibake/followers",
            "following_url": "https://api.github.com/users/josibake/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/josibake/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/josibake/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/josibake/subscriptions",
            "organizations_url": "https://api.github.com/users/josibake/orgs",
            "repos_url": "https://api.github.com/users/josibake/repos",
            "events_url": "https://api.github.com/users/josibake/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/josibake/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [],
          "assignees": [],
          "author_association": "CONTRIBUTOR",
          "locked": false,
          "comments": 2,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28201",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/28201",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/28201.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/28201.patch"
          },
          "created_at": "2023-08-02T16:37:04Z",
          "updated_at": "2023-09-21T19:36:16Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-08-09T17:09:18Z",
      "updated_at": "2023-08-09T17:09:18Z",
      "source": {
        "issue": {
          "id": 1843493325,
          "node_id": "PR_kwDOABII585XjLWx",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28246",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28246/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28246/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28246/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/28246",
          "number": 28246,
          "state": "closed",
          "state_reason": null,
          "title": "wallet: Use CTxDestination in CRecipient instead of just scriptPubKey",
          "body": "For silent payments, we want to provide a `SilentPaymentsDestination` to be used as the recipient, which requires `CRecipient` to use something other than just the `scriptPubKey` as we cannot know the output script for a silent payment prior to transaction creation. `CTxDestination` seems like the obvious place to add a `SilentPaymentsDestination` as it is our internal representation of an address.\r\n\r\nIn order to still allow paying to arbitrary scriptPubKeys (e.g. for data carrier outputs, or the user hand crafted a raw transaction that they have given to `fundrawtransaction`), `CNoDestination` is changed to contain raw scripts.\r\n\r\nAdditionally, P2PK scripts are now interpreted as a new `PubKeyDestination` rather than `PKHash`. This results in some things that would have given an address for P2PK scripts to no longer do so. This is arguably more correct.\r\n\r\n`ExtractDestination`'s behavior is slightly changed for the above. It now returns `true` for those destinations that have addresses, so P2PK scripts now result in `false`. Even though it returns false for `CNoDestination`, the script will now be included in that `CNoDestination`.\r\n\r\nBuilds on #28244",
          "user": {
            "login": "achow101",
            "id": 3782274,
            "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
            "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/achow101",
            "html_url": "https://github.com/achow101",
            "followers_url": "https://api.github.com/users/achow101/followers",
            "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
            "organizations_url": "https://api.github.com/users/achow101/orgs",
            "repos_url": "https://api.github.com/users/achow101/repos",
            "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/achow101/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 149424,
              "node_id": "MDU6TGFiZWwxNDk0MjQ=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Wallet",
              "name": "Wallet",
              "color": "08a781",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": false,
          "comments": 16,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28246",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/28246",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/28246.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/28246.patch"
          },
          "closed_at": "2023-09-19T16:49:00Z",
          "created_at": "2023-08-09T15:16:28Z",
          "updated_at": "2023-09-20T10:10:40Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-08-09T17:14:36Z",
      "updated_at": "2023-08-09T17:14:36Z",
      "source": {
        "issue": {
          "id": 1843062887,
          "node_id": "PR_kwDOABII585XhuK3",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28244",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28244/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28244/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28244/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/28244",
          "number": 28244,
          "state": "closed",
          "state_reason": null,
          "title": "Break up script/standard.{h/cpp}",
          "body": "Some future work needs to touch things in script/standard.{h/cpp}, however it is unclear if it is safe to do so as they are included in several different places that could effect standardness and consensus. It contains a mix of policy parameters, consensus parameters, and utilities only used by the wallet. This PR breaks up the various components and renames the files to clearly separate everything.\r\n\r\n* `CTxDestination` is moved to a new file `src/addresstype.{cpp/h}`\r\n* `TaprootSpendData` and `TaprootBuilder` (and their utility functions and structs) are moved to `SigningProvider` as these are used only during signing.\r\n* `CScriptID` is moved to `script/script.h` to be next to `CScript`.\r\n* `MANDATORY_SCRIPT_VERIFY_FLAGS` is moved to `interpreter.h`\r\n* The parameters `DEFAULT_ACCEPT_DATACARRIER` and `MAX_OP_RETURN_RELAY` are moved to `policy.h`\r\n* `standard.{cpp/h}` is renamed to `solver.{cpp/h}` since that's all that's left in the file after the above moves",
          "user": {
            "login": "achow101",
            "id": 3782274,
            "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
            "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/achow101",
            "html_url": "https://github.com/achow101",
            "followers_url": "https://api.github.com/users/achow101/followers",
            "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
            "organizations_url": "https://api.github.com/users/achow101/orgs",
            "repos_url": "https://api.github.com/users/achow101/repos",
            "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/achow101/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": false,
          "comments": 9,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28244",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/28244",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/28244.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/28244.patch"
          },
          "closed_at": "2023-08-17T11:54:27Z",
          "created_at": "2023-08-09T11:43:57Z",
          "updated_at": "2023-08-30T02:14:20Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-08-11T03:21:23Z",
      "updated_at": "2023-08-11T03:21:23Z",
      "source": {
        "issue": {
          "id": 1816230792,
          "node_id": "PR_kwDOABII585WHu-Q",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28122",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28122/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28122/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28122/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/28122",
          "number": 28122,
          "state": "open",
          "state_reason": null,
          "title": "Silent Payments: Implement BIP352",
          "body": "UPDATE: Rather than having a special encoder and decoder for silent payments, it makes more sense to have `CTxDestination` include a `V0SilentPaymentDestination` type. Some pre-work to make this easier is done in https://github.com/bitcoin/bitcoin/pull/28246 , which this PR now depends on. If you want to review this PR, please review these two first.\r\n\r\n<hr/>\r\n\r\nThis PR is a child of https://github.com/bitcoin/bitcoin/pull/27827 and only implements the BIP logic without the wallet code. For the wallet implementations:\r\n* #28201 - implements sending\r\n* #28202 - implements receiving\r\n* #27827 - all three PRs together - this PR is meant for tracking progress and is useful for reviewers who want to compile all three PRs at once for testing\r\n\r\n## BIP352\r\n\r\nThis PR focuses strictly on the BIP logic and attempts to separate it from the wallet and transaction implementation details. This is accomplished by working directly with public and private keys, instead of needing a wallet backend and transactions for testing. Labels for the receiver are optional and thus deferred for a later PR.\r\n\r\nTest vectors from the BIP are included as unit tests.\r\n\r\nBefore reviewing, it is strongly recommended you read https://github.com/bitcoin/bips/pull/1458 and take a look at the reference python implementation on the BIP.\r\n",
          "user": {
            "login": "josibake",
            "id": 7444140,
            "node_id": "MDQ6VXNlcjc0NDQxNDA=",
            "avatar_url": "https://avatars.githubusercontent.com/u/7444140?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/josibake",
            "html_url": "https://github.com/josibake",
            "followers_url": "https://api.github.com/users/josibake/followers",
            "following_url": "https://api.github.com/users/josibake/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/josibake/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/josibake/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/josibake/subscriptions",
            "organizations_url": "https://api.github.com/users/josibake/orgs",
            "repos_url": "https://api.github.com/users/josibake/repos",
            "events_url": "https://api.github.com/users/josibake/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/josibake/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [],
          "assignees": [],
          "author_association": "CONTRIBUTOR",
          "locked": false,
          "comments": 20,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28122",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/28122",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/28122.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/28122.patch"
          },
          "created_at": "2023-07-21T18:36:37Z",
          "updated_at": "2023-09-21T17:56:23Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "labeled",
      "id": 10119744344,
      "node_id": "LE_lADOEEET9c5PZ5y9zwAAAAJbLwtY",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/events/10119744344",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-08-17T13:48:03Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 1682320567,
      "node_id": "IC_kwDOEEET9c5kRiy3",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/comments/1682320567",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-08-17T13:48:04Z",
      "updated_at": "2023-08-17T13:48:04Z",
      "author_association": "CONTRIBUTOR",
      "body": "<!--cf906140f33d8803c4a75a2196329ecb-->\n🐙 This pull request conflicts with the target branch and [needs rebase](https://github.com/bitcoin-core/gui/blob/master/CONTRIBUTING.md#rebasing-changes).\n",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/gui/pull/650#issuecomment-1682320567",
      "issue_url": "https://api.github.com/repos/bitcoin-core/gui/issues/650"
    },
    {
      "event": "commented",
      "id": 1730504109,
      "node_id": "IC_kwDOEEET9c5nJWWt",
      "url": "https://api.github.com/repos/bitcoin-core/gui/issues/comments/1730504109",
      "actor": {
        "login": "pablomartin4btc",
        "id": 110166421,
        "node_id": "U_kgDOBpEBlQ",
        "avatar_url": "https://avatars.githubusercontent.com/u/110166421?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/pablomartin4btc",
        "html_url": "https://github.com/pablomartin4btc",
        "followers_url": "https://api.github.com/users/pablomartin4btc/followers",
        "following_url": "https://api.github.com/users/pablomartin4btc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/pablomartin4btc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/pablomartin4btc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/pablomartin4btc/subscriptions",
        "organizations_url": "https://api.github.com/users/pablomartin4btc/orgs",
        "repos_url": "https://api.github.com/users/pablomartin4btc/repos",
        "events_url": "https://api.github.com/users/pablomartin4btc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/pablomartin4btc/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-09-21T23:50:32Z",
      "updated_at": "2023-09-21T23:50:32Z",
      "author_association": "CONTRIBUTOR",
      "body": "I'll review this as soon as I can, in the meantime, could you please link the PR to the existent issue? (Writing any of these [keywords](https://docs.github.com/en/issues/tracking-your-work-with-issues/linking-a-pull-request-to-an-issue) somewhere in the description followed by #19 would do the trick, thx!) ",
      "user": {
        "login": "pablomartin4btc",
        "id": 110166421,
        "node_id": "U_kgDOBpEBlQ",
        "avatar_url": "https://avatars.githubusercontent.com/u/110166421?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/pablomartin4btc",
        "html_url": "https://github.com/pablomartin4btc",
        "followers_url": "https://api.github.com/users/pablomartin4btc/followers",
        "following_url": "https://api.github.com/users/pablomartin4btc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/pablomartin4btc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/pablomartin4btc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/pablomartin4btc/subscriptions",
        "organizations_url": "https://api.github.com/users/pablomartin4btc/orgs",
        "repos_url": "https://api.github.com/users/pablomartin4btc/repos",
        "events_url": "https://api.github.com/users/pablomartin4btc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/pablomartin4btc/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin-core/gui/pull/650#issuecomment-1730504109",
      "issue_url": "https://api.github.com/repos/bitcoin-core/gui/issues/650"
    }
  ],
  "comments": [
    {
      "url": "https://api.github.com/repos/bitcoin-core/gui/pulls/comments/940572988",
      "pull_request_review_id": 1065661283,
      "id": 940572988,
      "node_id": "PRRC_kwDOEEET9c44EAE8",
      "diff_hunk": "@@ -1375,7 +975,102 @@ RPCHelpMan importmulti()\n \n         for (const UniValue& data : requests.getValues()) {\n             const int64_t timestamp = std::max(GetImportTimestamp(data, now), minimumTimestamp);\n-            const UniValue result = ProcessImport(*pwallet, data, timestamp);\n+            ImportMultiData multi_data = {};",
      "path": "src/wallet/rpc/backup.cpp",
      "position": null,
      "original_position": 421,
      "commit_id": "b2b00af1d37dd69c3e64d905984e68ac6a6b2d8f",
      "original_commit_id": "f718e24693f4d322d2a82d6f1f8f6d4add98c415",
      "in_reply_to_id": null,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In f718e24693f4d322d2a82d6f1f8f6d4add98c415 \"refactor: importmulti and importdescriptors rpc\"\r\n\r\n`= {}` is unnecessary\r\n\r\n```suggestion\r\n            ImportMultiData multi_data;\r\n```",
      "created_at": "2022-08-08T19:09:50Z",
      "updated_at": "2022-08-08T20:56:15Z",
      "html_url": "https://github.com/bitcoin-core/gui/pull/650#discussion_r940572988",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/gui/pulls/comments/940572988"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/gui/pulls/650"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 928,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/gui/pulls/comments/940574619",
      "pull_request_review_id": 1065661283,
      "id": 940574619,
      "node_id": "PRRC_kwDOEEET9c44EAeb",
      "diff_hunk": "@@ -1375,7 +975,102 @@ RPCHelpMan importmulti()\n \n         for (const UniValue& data : requests.getValues()) {\n             const int64_t timestamp = std::max(GetImportTimestamp(data, now), minimumTimestamp);\n-            const UniValue result = ProcessImport(*pwallet, data, timestamp);\n+            ImportMultiData multi_data = {};\n+            std::vector<std::string> warnings;\n+            UniValue result(UniValue::VOBJ);\n+            try {\n+                multi_data.internal = data.exists(\"internal\") ? data[\"internal\"].get_bool() : false;\n+                // Internal addresses should not have a label\n+                if (multi_data.internal && data.exists(\"label\")) {\n+                    throw InvalidParameter(\"Internal addresses should not have a label\");\n+                }\n+                multi_data.label = data.exists(\"label\") ? data[\"label\"].get_str() : \"\";\n+                multi_data.keypool = data.exists(\"keypool\") ? data[\"keypool\"].get_bool() : false;\n+\n+                multi_data.watch_only = data.exists(\"watchonly\") ? data[\"watchonly\"].get_bool() : false;\n+\n+                multi_data.keys = {};",
      "path": "src/wallet/rpc/backup.cpp",
      "position": null,
      "original_position": 435,
      "commit_id": "b2b00af1d37dd69c3e64d905984e68ac6a6b2d8f",
      "original_commit_id": "f718e24693f4d322d2a82d6f1f8f6d4add98c415",
      "in_reply_to_id": null,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In f718e24693f4d322d2a82d6f1f8f6d4add98c415 \"refactor: importmulti and importdescriptors rpc\"\r\n\r\nThis line is unnecessary.",
      "created_at": "2022-08-08T19:11:58Z",
      "updated_at": "2022-08-08T20:56:15Z",
      "html_url": "https://github.com/bitcoin-core/gui/pull/650#discussion_r940574619",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/gui/pulls/comments/940574619"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/gui/pulls/650"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 942,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/gui/pulls/comments/940576350",
      "pull_request_review_id": 1065661283,
      "id": 940576350,
      "node_id": "PRRC_kwDOEEET9c44EA5e",
      "diff_hunk": "@@ -1375,7 +975,102 @@ RPCHelpMan importmulti()\n \n         for (const UniValue& data : requests.getValues()) {\n             const int64_t timestamp = std::max(GetImportTimestamp(data, now), minimumTimestamp);\n-            const UniValue result = ProcessImport(*pwallet, data, timestamp);\n+            ImportMultiData multi_data = {};\n+            std::vector<std::string> warnings;\n+            UniValue result(UniValue::VOBJ);\n+            try {\n+                multi_data.internal = data.exists(\"internal\") ? data[\"internal\"].get_bool() : false;\n+                // Internal addresses should not have a label\n+                if (multi_data.internal && data.exists(\"label\")) {\n+                    throw InvalidParameter(\"Internal addresses should not have a label\");\n+                }\n+                multi_data.label = data.exists(\"label\") ? data[\"label\"].get_str() : \"\";\n+                multi_data.keypool = data.exists(\"keypool\") ? data[\"keypool\"].get_bool() : false;\n+\n+                multi_data.watch_only = data.exists(\"watchonly\") ? data[\"watchonly\"].get_bool() : false;\n+\n+                multi_data.keys = {};\n+                if (data.exists(\"keys\"))\n+                    for (size_t i = 0; i < data[\"keys\"].get_array().size(); ++i)\n+                        multi_data.keys.push_back(data[\"keys\"].get_array()[i].get_str());\n+\n+                bool isScript;\n+                FlatSigningProvider keys;\n+                bool range_exists = false;\n+                if (data.exists(\"scriptPubKey\") && data.exists(\"desc\")) {\n+                    throw InvalidParameter(\"Both a descriptor and a scriptPubKey should not be provided.\");\n+                } else if (data.exists(\"scriptPubKey\")) {\n+\n+                    // First ensure scriptPubKey has either a script or JSON with \"address\" string\n+                    const UniValue& scriptPubKey = data[\"scriptPubKey\"];\n+                    isScript = scriptPubKey.getType() == UniValue::VSTR;\n+                    if (!isScript && !(scriptPubKey.getType() == UniValue::VOBJ && scriptPubKey.exists(\"address\"))) {\n+                        throw InvalidParameter(\"scriptPubKey must be string with script or JSON with address string\");\n+                    }\n+                    multi_data.scriptPubKey = isScript ? scriptPubKey.get_str() : scriptPubKey[\"address\"].get_str();\n+\n+                    // Optional fields.\n+                    multi_data.redeem_script = data.exists(\"redeemscript\") ? data[\"redeemscript\"].get_str() : \"\";\n+                    multi_data.witness_script = data.exists(\"witnessscript\") ? data[\"witnessscript\"].get_str() : \"\";\n+                    multi_data.pubkeys = {};",
      "path": "src/wallet/rpc/backup.cpp",
      "position": null,
      "original_position": 458,
      "commit_id": "b2b00af1d37dd69c3e64d905984e68ac6a6b2d8f",
      "original_commit_id": "f718e24693f4d322d2a82d6f1f8f6d4add98c415",
      "in_reply_to_id": null,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In f718e24693f4d322d2a82d6f1f8f6d4add98c415 \"refactor: importmulti and importdescriptors rpc\"\r\n\r\nThis line is unnecessary.",
      "created_at": "2022-08-08T19:14:25Z",
      "updated_at": "2022-08-08T20:56:15Z",
      "html_url": "https://github.com/bitcoin-core/gui/pull/650#discussion_r940576350",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/gui/pulls/comments/940576350"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/gui/pulls/650"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 964,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/gui/pulls/comments/940584339",
      "pull_request_review_id": 1065661283,
      "id": 940584339,
      "node_id": "PRRC_kwDOEEET9c44EC2T",
      "diff_hunk": "@@ -1375,7 +975,102 @@ RPCHelpMan importmulti()\n \n         for (const UniValue& data : requests.getValues()) {\n             const int64_t timestamp = std::max(GetImportTimestamp(data, now), minimumTimestamp);\n-            const UniValue result = ProcessImport(*pwallet, data, timestamp);\n+            ImportMultiData multi_data = {};\n+            std::vector<std::string> warnings;\n+            UniValue result(UniValue::VOBJ);\n+            try {\n+                multi_data.internal = data.exists(\"internal\") ? data[\"internal\"].get_bool() : false;\n+                // Internal addresses should not have a label\n+                if (multi_data.internal && data.exists(\"label\")) {\n+                    throw InvalidParameter(\"Internal addresses should not have a label\");\n+                }\n+                multi_data.label = data.exists(\"label\") ? data[\"label\"].get_str() : \"\";\n+                multi_data.keypool = data.exists(\"keypool\") ? data[\"keypool\"].get_bool() : false;\n+\n+                multi_data.watch_only = data.exists(\"watchonly\") ? data[\"watchonly\"].get_bool() : false;\n+\n+                multi_data.keys = {};\n+                if (data.exists(\"keys\"))\n+                    for (size_t i = 0; i < data[\"keys\"].get_array().size(); ++i)\n+                        multi_data.keys.push_back(data[\"keys\"].get_array()[i].get_str());\n+\n+                bool isScript;\n+                FlatSigningProvider keys;\n+                bool range_exists = false;",
      "path": "src/wallet/rpc/backup.cpp",
      "position": null,
      "original_position": 442,
      "commit_id": "b2b00af1d37dd69c3e64d905984e68ac6a6b2d8f",
      "original_commit_id": "f718e24693f4d322d2a82d6f1f8f6d4add98c415",
      "in_reply_to_id": null,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In f718e24693f4d322d2a82d6f1f8f6d4add98c415 \"refactor: importmulti and importdescriptors rpc\"\r\n\r\n`range_exists` is unused.",
      "created_at": "2022-08-08T19:20:45Z",
      "updated_at": "2022-08-08T20:56:15Z",
      "html_url": "https://github.com/bitcoin-core/gui/pull/650#discussion_r940584339",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/gui/pulls/comments/940584339"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/gui/pulls/650"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 999,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/gui/pulls/comments/940584862",
      "pull_request_review_id": 1065661283,
      "id": 940584862,
      "node_id": "PRRC_kwDOEEET9c44EC-e",
      "diff_hunk": "@@ -1375,7 +975,102 @@ RPCHelpMan importmulti()\n \n         for (const UniValue& data : requests.getValues()) {\n             const int64_t timestamp = std::max(GetImportTimestamp(data, now), minimumTimestamp);\n-            const UniValue result = ProcessImport(*pwallet, data, timestamp);\n+            ImportMultiData multi_data = {};\n+            std::vector<std::string> warnings;\n+            UniValue result(UniValue::VOBJ);\n+            try {\n+                multi_data.internal = data.exists(\"internal\") ? data[\"internal\"].get_bool() : false;\n+                // Internal addresses should not have a label\n+                if (multi_data.internal && data.exists(\"label\")) {\n+                    throw InvalidParameter(\"Internal addresses should not have a label\");\n+                }\n+                multi_data.label = data.exists(\"label\") ? data[\"label\"].get_str() : \"\";\n+                multi_data.keypool = data.exists(\"keypool\") ? data[\"keypool\"].get_bool() : false;\n+\n+                multi_data.watch_only = data.exists(\"watchonly\") ? data[\"watchonly\"].get_bool() : false;\n+\n+                multi_data.keys = {};\n+                if (data.exists(\"keys\"))\n+                    for (size_t i = 0; i < data[\"keys\"].get_array().size(); ++i)\n+                        multi_data.keys.push_back(data[\"keys\"].get_array()[i].get_str());\n+\n+                bool isScript;\n+                FlatSigningProvider keys;",
      "path": "src/wallet/rpc/backup.cpp",
      "position": null,
      "original_position": 441,
      "commit_id": "b2b00af1d37dd69c3e64d905984e68ac6a6b2d8f",
      "original_commit_id": "f718e24693f4d322d2a82d6f1f8f6d4add98c415",
      "in_reply_to_id": null,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In f718e24693f4d322d2a82d6f1f8f6d4add98c415 \"refactor: importmulti and importdescriptors rpc\"\r\n\r\nISTM these should be part of `ImportMultiData` rather than things to be passed in to `ProcessImport` separately.",
      "created_at": "2022-08-08T19:21:27Z",
      "updated_at": "2022-08-08T20:56:15Z",
      "html_url": "https://github.com/bitcoin-core/gui/pull/650#discussion_r940584862",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/gui/pulls/comments/940584862"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/gui/pulls/650"
        }
      },
      "start_line": null,
      "original_start_line": 997,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 948,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/gui/pulls/comments/940609847",
      "pull_request_review_id": 1065661283,
      "id": 940609847,
      "node_id": "PRRC_kwDOEEET9c44EJE3",
      "diff_hunk": "@@ -0,0 +1,302 @@\n+#include <qt/importdialog.h>\n+#include <qt/forms/ui_importdialog.h>\n+\n+#include <qt/guiconstants.h>\n+#include <qt/guiutil.h>\n+#include <key_io.h>\n+#include <qt/walletmodel.h>\n+#include <interfaces/node.h>\n+#include <wallet/wallet.h>\n+#include <QKeyEvent>\n+#include <QMessageBox>\n+#include <QPushButton>\n+#include <iostream>\n+#include <QScrollBar>\n+#include <tinyformat.h>\n+#include <chain.h>\n+\n+ImportDialog::ImportDialog(Page _page, QWidget *parent, WalletModel *walletModel) :\n+    QDialog(parent, GUIUtil::dialog_flags),\n+    ui(new Ui::ImportDialog),\n+    walletModel(walletModel),\n+    page(_page)\n+{\n+    ui->setupUi(this);\n+\n+    switch (page) {\n+        case importPubkey: {\n+            ui->QStackContainer->setCurrentWidget(ui->importKeyPage);\n+            this->setWindowTitle(\"Import Public Key\");\n+            ui->keyLabelIKP->setText(\"Public Key\");\n+            ui->keyEditIKP->setPlaceholderText(\"Enter a Public Key (e.g. 1NS17iag9jJgTHDlVXjvLCEnZuQ3rJDE9L)\");\n+            ui->rescanButtonIKP->setCheckState(Qt::Checked);\n+            break;\n+        } case importPrivkey: {\n+            ui->QStackContainer->setCurrentWidget(ui->importKeyPage);\n+            this->setWindowTitle(\"Import Private Key\");\n+            ui->keyLabelIKP->setText(\"Private Key\");\n+            ui->keyEditIKP->setPlaceholderText(\"Enter a Private Key (e.g. L4sTHokqoFZpcmJgsAG2yxrf2f71v6PYpK2qEkCvc2Fp8VVdMiU3)\");\n+            ui->rescanButtonIKP->setCheckState(Qt::Checked);\n+            break;\n+        } case importAddress: {\n+            ui->QStackContainer->setCurrentWidget(ui->importAddress);\n+            this->setWindowTitle(\"Import Address\");\n+            ui->rescanButtonIA->setCheckState(Qt::Checked);\n+            ui->p2shButtonIA->setCheckState(Qt::Unchecked);\n+            break;\n+        }\n+    }\n+\n+    GUIUtil::handleCloseWindowShortcut(this);\n+}\n+\n+ImportDialog::~ImportDialog()\n+{\n+    delete ui;\n+}\n+\n+void ImportDialog::on_Accept_clicked() {\n+    switch (page) {\n+        case importPubkey: {\n+            std::string strKey = \"\";\n+            strKey.assign(ui->keyEditIKP->text().toStdString().c_str());\n+\n+            if (strKey.empty()) {\n+                QMessageBox::warning(this, tr(\"Error\"), tr(\"Key is empty\"));\n+                break;\n+            }\n+\n+            std::string strLabel;\n+            strLabel.assign(ui->labelEditIKP->text().toStdString().c_str());\n+\n+            // Whether to perform rescan after import\n+            bool fRescan = true;\n+            if (!ui->rescanButtonIKP->isChecked())\n+                fRescan = false;\n+\n+            if (fRescan && walletModel->wallet().chain().havePruned()) {\n+                // Exit early and print an error.\n+                // If a block is pruned after this check, we will import the key(s),\n+                // but fail the rescan with a generic error.\n+                QMessageBox::critical(this, tr(\"Rescan failed\"), tr(\"Rescan is disabled when blocks are pruned\"));\n+                break;\n+            }\n+\n+\n+            wallet::WalletRescanReserver reserver = walletModel->wallet().getReserver();\n+            if (fRescan && !reserver.reserve()) {\n+                QMessageBox::critical(this, tr(\"Rescan failed\"),\n+                                      tr(\"Wallet is currently rescanning. Abort existing rescan or wait.\"));\n+                break;\n+            }\n+\n+            if (!IsHex(strKey)) {\n+                QMessageBox::critical(this, tr(\"Invalid Public Key\"), tr(\"Pubkey must be a hex string\"));\n+                break;\n+            }\n+\n+            std::vector<unsigned char> data(ParseHex(strKey));\n+            CPubKey pubKey(data);\n+            if (!pubKey.IsFullyValid()) {\n+                QMessageBox::critical(this, tr(\"Invalid Public Key\"),\n+                                      tr(\"Pubkey is not a valid public key\"));\n+                break;\n+            }\n+\n+            std::set<CScript> script_pub_keys;\n+            for (const auto &dest: GetAllDestinationsForKey(pubKey)) {\n+                script_pub_keys.insert(GetScriptForDestination(dest));\n+            }\n+\n+            walletModel->wallet().MarkDirty();\n+            walletModel->wallet().ImportScriptPubKeys(strLabel, script_pub_keys, true, true, 1);\n+            walletModel->wallet().ImportPubKeys({pubKey.GetID()}, {{pubKey.GetID(), pubKey}}, {}, false, false, 1);",
      "path": "src/qt/importdialog.cpp",
      "position": null,
      "original_position": 113,
      "commit_id": "b2b00af1d37dd69c3e64d905984e68ac6a6b2d8f",
      "original_commit_id": "3a75af09dbb6c182a86ce71b15fe0824d3c68ac5",
      "in_reply_to_id": null,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In 3a75af09dbb6c182a86ce71b15fe0824d3c68ac5 \"qt: implemented importpubkey, importprivkey, and importaddress GUI's\"\r\n\r\nSince this is almost entirely copied from the RPC, I think this should be refactored. It would allow the both the RPC and the GUI to behave the same way with the locking - this implementation has us lock and release in each of the function calls, whereas the RPC holds the lock throughout. Additionally, doing so would let us expose fewer of these functions in the wallet interface.",
      "created_at": "2022-08-08T19:52:55Z",
      "updated_at": "2022-08-08T20:56:15Z",
      "html_url": "https://github.com/bitcoin-core/gui/pull/650#discussion_r940609847",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/gui/pulls/comments/940609847"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/gui/pulls/650"
        }
      },
      "start_line": null,
      "original_start_line": 106,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 156,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/gui/pulls/comments/940611471",
      "pull_request_review_id": 1065661283,
      "id": 940611471,
      "node_id": "PRRC_kwDOEEET9c44EJeP",
      "diff_hunk": "@@ -0,0 +1,302 @@\n+#include <qt/importdialog.h>\n+#include <qt/forms/ui_importdialog.h>\n+\n+#include <qt/guiconstants.h>\n+#include <qt/guiutil.h>\n+#include <key_io.h>\n+#include <qt/walletmodel.h>\n+#include <interfaces/node.h>\n+#include <wallet/wallet.h>\n+#include <QKeyEvent>\n+#include <QMessageBox>\n+#include <QPushButton>\n+#include <iostream>\n+#include <QScrollBar>\n+#include <tinyformat.h>\n+#include <chain.h>\n+\n+ImportDialog::ImportDialog(Page _page, QWidget *parent, WalletModel *walletModel) :\n+    QDialog(parent, GUIUtil::dialog_flags),\n+    ui(new Ui::ImportDialog),\n+    walletModel(walletModel),\n+    page(_page)\n+{\n+    ui->setupUi(this);\n+\n+    switch (page) {\n+        case importPubkey: {\n+            ui->QStackContainer->setCurrentWidget(ui->importKeyPage);\n+            this->setWindowTitle(\"Import Public Key\");\n+            ui->keyLabelIKP->setText(\"Public Key\");\n+            ui->keyEditIKP->setPlaceholderText(\"Enter a Public Key (e.g. 1NS17iag9jJgTHDlVXjvLCEnZuQ3rJDE9L)\");\n+            ui->rescanButtonIKP->setCheckState(Qt::Checked);\n+            break;\n+        } case importPrivkey: {\n+            ui->QStackContainer->setCurrentWidget(ui->importKeyPage);\n+            this->setWindowTitle(\"Import Private Key\");\n+            ui->keyLabelIKP->setText(\"Private Key\");\n+            ui->keyEditIKP->setPlaceholderText(\"Enter a Private Key (e.g. L4sTHokqoFZpcmJgsAG2yxrf2f71v6PYpK2qEkCvc2Fp8VVdMiU3)\");\n+            ui->rescanButtonIKP->setCheckState(Qt::Checked);\n+            break;\n+        } case importAddress: {\n+            ui->QStackContainer->setCurrentWidget(ui->importAddress);\n+            this->setWindowTitle(\"Import Address\");\n+            ui->rescanButtonIA->setCheckState(Qt::Checked);\n+            ui->p2shButtonIA->setCheckState(Qt::Unchecked);\n+            break;\n+        }\n+    }\n+\n+    GUIUtil::handleCloseWindowShortcut(this);\n+}\n+\n+ImportDialog::~ImportDialog()\n+{\n+    delete ui;\n+}\n+\n+void ImportDialog::on_Accept_clicked() {\n+    switch (page) {\n+        case importPubkey: {\n+            std::string strKey = \"\";\n+            strKey.assign(ui->keyEditIKP->text().toStdString().c_str());\n+\n+            if (strKey.empty()) {\n+                QMessageBox::warning(this, tr(\"Error\"), tr(\"Key is empty\"));\n+                break;\n+            }\n+\n+            std::string strLabel;\n+            strLabel.assign(ui->labelEditIKP->text().toStdString().c_str());\n+\n+            // Whether to perform rescan after import\n+            bool fRescan = true;\n+            if (!ui->rescanButtonIKP->isChecked())\n+                fRescan = false;\n+\n+            if (fRescan && walletModel->wallet().chain().havePruned()) {\n+                // Exit early and print an error.\n+                // If a block is pruned after this check, we will import the key(s),\n+                // but fail the rescan with a generic error.\n+                QMessageBox::critical(this, tr(\"Rescan failed\"), tr(\"Rescan is disabled when blocks are pruned\"));\n+                break;\n+            }\n+\n+\n+            wallet::WalletRescanReserver reserver = walletModel->wallet().getReserver();\n+            if (fRescan && !reserver.reserve()) {\n+                QMessageBox::critical(this, tr(\"Rescan failed\"),\n+                                      tr(\"Wallet is currently rescanning. Abort existing rescan or wait.\"));\n+                break;\n+            }\n+\n+            if (!IsHex(strKey)) {\n+                QMessageBox::critical(this, tr(\"Invalid Public Key\"), tr(\"Pubkey must be a hex string\"));\n+                break;\n+            }\n+\n+            std::vector<unsigned char> data(ParseHex(strKey));\n+            CPubKey pubKey(data);\n+            if (!pubKey.IsFullyValid()) {\n+                QMessageBox::critical(this, tr(\"Invalid Public Key\"),\n+                                      tr(\"Pubkey is not a valid public key\"));\n+                break;\n+            }\n+\n+            std::set<CScript> script_pub_keys;\n+            for (const auto &dest: GetAllDestinationsForKey(pubKey)) {\n+                script_pub_keys.insert(GetScriptForDestination(dest));\n+            }\n+\n+            walletModel->wallet().MarkDirty();\n+            walletModel->wallet().ImportScriptPubKeys(strLabel, script_pub_keys, true, true, 1);\n+            walletModel->wallet().ImportPubKeys({pubKey.GetID()}, {{pubKey.GetID(), pubKey}}, {}, false, false, 1);\n+\n+            if (fRescan) {\n+                int64_t scanned_time = walletModel->wallet().RescanFromTime(0, reserver, true);\n+                if (walletModel->wallet().IsAbortingRescan()) {\n+                    QMessageBox::critical(this, tr(\"Misc Error\"), tr(\"Rescan aborted by user.\"));\n+                    break;\n+                } else if (scanned_time > 0) {\n+                    QMessageBox::critical(this, tr(\"Wallet Error\"),\n+                                          tr(\"Rescan was unable to fully rescan the blockchain. Some transactions may be missing.\"));\n+                    break;\n+                }\n+                walletModel->wallet().ReacceptWalletTransactions();\n+            }\n+            break;\n+        }\n+        case importPrivkey: {\n+            wallet::WalletRescanReserver reserver = walletModel->wallet().getReserver();\n+            bool fRescan = true;\n+            WalletModel::UnlockContext ctx(walletModel->requestUnlock());\n+            if (!ctx.isValid()) {\n+                break;\n+            }\n+\n+            std::string strSecret = \"\";\n+            strSecret.assign(ui->keyEditIKP->text().toStdString().c_str());\n+            if (strSecret.empty()) {\n+                QMessageBox::warning(this, tr(\"Error\"), tr(\"Key is empty\"));\n+                break;\n+            }\n+\n+            std::string strLabel = \"\";\n+            strLabel.assign(ui->labelEditIKP->text().toStdString().c_str());\n+\n+            // Whether to perform rescan after import\n+            if (!ui->rescanButtonIKP->isChecked())\n+                fRescan = false;\n+\n+            if (fRescan && walletModel->wallet().chain().havePruned()) {\n+                // Exit early and print an error.\n+                // If a block is pruned after this check, we will import the key(s),\n+                // but fail the rescan with a generic error.\n+                QMessageBox::critical(this, tr(\"Rescan failed\"), tr(\"Rescan is disabled when blocks are pruned\"));\n+                break;\n+            }\n+\n+            if (fRescan && !reserver.reserve()) {\n+                QMessageBox::critical(this, tr(\"Rescan failed\"),\n+                                      tr(\"Wallet is currently rescanning. Abort existing rescan or wait.\"));\n+                break;\n+            }\n+\n+            CKey key = DecodeSecret(strSecret);\n+            if (!key.IsValid()) {\n+                QMessageBox::critical(this, tr(\"Invalid Private Key\"), tr(\"Invalid private key encoding.\"));\n+                break;\n+            }\n+\n+            CPubKey pubkey = key.GetPubKey();\n+            CHECK_NONFATAL(key.VerifyPubKey(pubkey));\n+            CKeyID vchAddress = pubkey.GetID();\n+            {\n+                walletModel->wallet().MarkDirty();\n+\n+                // We don't know which corresponding address will be used;\n+                // label all new addresses, and label existing addresses if a\n+                // label was passed.\n+                for (const auto &dest: GetAllDestinationsForKey(pubkey)) {\n+                    if (!strLabel.empty() || !walletModel->wallet().FindAddressBookEntry(dest)) {\n+                        walletModel->wallet().setAddressBook(dest, strLabel, \"receive\");\n+                    }\n+                }\n+\n+                // Use timestamp of 1 to scan the whole chain\n+                if (!walletModel->wallet().ImportPrivKeys({{vchAddress, key}}, 1)) {\n+                    QMessageBox::critical(this, tr(\"Wallet Error\"), tr(\"Error adding key to wallet\"));\n+                    break;\n+                }\n+\n+                // Add the wpkh script for this key if possible\n+                if (pubkey.IsCompressed()) {\n+                    walletModel->wallet().ImportScripts({GetScriptForDestination(WitnessV0KeyHash(vchAddress))},\n+                                                        0 /* timestamp */);\n+                }\n+            }",
      "path": "src/qt/importdialog.cpp",
      "position": null,
      "original_position": 197,
      "commit_id": "b2b00af1d37dd69c3e64d905984e68ac6a6b2d8f",
      "original_commit_id": "3a75af09dbb6c182a86ce71b15fe0824d3c68ac5",
      "in_reply_to_id": null,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In 3a75af09dbb6c182a86ce71b15fe0824d3c68ac5 \"qt: implemented importpubkey, importprivkey, and importaddress GUI's\"\r\n\r\nThis is also copied from the RPC, I think it could be refactored as well.\r\n\r\nFor handling the errors, the refactored functions could throw the same kinds of exceptions that were defined for `importmulti` and `importdescriptors`, and this GUI code can catch those and turn them into the error message boxes as necessary.",
      "created_at": "2022-08-08T19:55:04Z",
      "updated_at": "2022-08-08T20:56:15Z",
      "html_url": "https://github.com/bitcoin-core/gui/pull/650#discussion_r940611471",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/gui/pulls/comments/940611471"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/gui/pulls/650"
        }
      },
      "start_line": null,
      "original_start_line": 171,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 193,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/gui/pulls/comments/940614111",
      "pull_request_review_id": 1065661283,
      "id": 940614111,
      "node_id": "PRRC_kwDOEEET9c44EKHf",
      "diff_hunk": "@@ -0,0 +1,302 @@\n+#include <qt/importdialog.h>\n+#include <qt/forms/ui_importdialog.h>\n+\n+#include <qt/guiconstants.h>\n+#include <qt/guiutil.h>\n+#include <key_io.h>\n+#include <qt/walletmodel.h>\n+#include <interfaces/node.h>\n+#include <wallet/wallet.h>\n+#include <QKeyEvent>\n+#include <QMessageBox>\n+#include <QPushButton>\n+#include <iostream>\n+#include <QScrollBar>\n+#include <tinyformat.h>\n+#include <chain.h>\n+\n+ImportDialog::ImportDialog(Page _page, QWidget *parent, WalletModel *walletModel) :\n+    QDialog(parent, GUIUtil::dialog_flags),\n+    ui(new Ui::ImportDialog),\n+    walletModel(walletModel),\n+    page(_page)\n+{\n+    ui->setupUi(this);\n+\n+    switch (page) {\n+        case importPubkey: {\n+            ui->QStackContainer->setCurrentWidget(ui->importKeyPage);\n+            this->setWindowTitle(\"Import Public Key\");\n+            ui->keyLabelIKP->setText(\"Public Key\");\n+            ui->keyEditIKP->setPlaceholderText(\"Enter a Public Key (e.g. 1NS17iag9jJgTHDlVXjvLCEnZuQ3rJDE9L)\");\n+            ui->rescanButtonIKP->setCheckState(Qt::Checked);\n+            break;\n+        } case importPrivkey: {\n+            ui->QStackContainer->setCurrentWidget(ui->importKeyPage);\n+            this->setWindowTitle(\"Import Private Key\");\n+            ui->keyLabelIKP->setText(\"Private Key\");\n+            ui->keyEditIKP->setPlaceholderText(\"Enter a Private Key (e.g. L4sTHokqoFZpcmJgsAG2yxrf2f71v6PYpK2qEkCvc2Fp8VVdMiU3)\");\n+            ui->rescanButtonIKP->setCheckState(Qt::Checked);\n+            break;\n+        } case importAddress: {\n+            ui->QStackContainer->setCurrentWidget(ui->importAddress);\n+            this->setWindowTitle(\"Import Address\");\n+            ui->rescanButtonIA->setCheckState(Qt::Checked);\n+            ui->p2shButtonIA->setCheckState(Qt::Unchecked);\n+            break;\n+        }\n+    }\n+\n+    GUIUtil::handleCloseWindowShortcut(this);\n+}\n+\n+ImportDialog::~ImportDialog()\n+{\n+    delete ui;\n+}\n+\n+void ImportDialog::on_Accept_clicked() {\n+    switch (page) {\n+        case importPubkey: {\n+            std::string strKey = \"\";\n+            strKey.assign(ui->keyEditIKP->text().toStdString().c_str());\n+\n+            if (strKey.empty()) {\n+                QMessageBox::warning(this, tr(\"Error\"), tr(\"Key is empty\"));\n+                break;\n+            }\n+\n+            std::string strLabel;\n+            strLabel.assign(ui->labelEditIKP->text().toStdString().c_str());\n+\n+            // Whether to perform rescan after import\n+            bool fRescan = true;\n+            if (!ui->rescanButtonIKP->isChecked())\n+                fRescan = false;\n+\n+            if (fRescan && walletModel->wallet().chain().havePruned()) {\n+                // Exit early and print an error.\n+                // If a block is pruned after this check, we will import the key(s),\n+                // but fail the rescan with a generic error.\n+                QMessageBox::critical(this, tr(\"Rescan failed\"), tr(\"Rescan is disabled when blocks are pruned\"));\n+                break;\n+            }\n+\n+\n+            wallet::WalletRescanReserver reserver = walletModel->wallet().getReserver();\n+            if (fRescan && !reserver.reserve()) {\n+                QMessageBox::critical(this, tr(\"Rescan failed\"),\n+                                      tr(\"Wallet is currently rescanning. Abort existing rescan or wait.\"));\n+                break;\n+            }\n+\n+            if (!IsHex(strKey)) {\n+                QMessageBox::critical(this, tr(\"Invalid Public Key\"), tr(\"Pubkey must be a hex string\"));\n+                break;\n+            }\n+\n+            std::vector<unsigned char> data(ParseHex(strKey));\n+            CPubKey pubKey(data);\n+            if (!pubKey.IsFullyValid()) {\n+                QMessageBox::critical(this, tr(\"Invalid Public Key\"),\n+                                      tr(\"Pubkey is not a valid public key\"));\n+                break;\n+            }\n+\n+            std::set<CScript> script_pub_keys;\n+            for (const auto &dest: GetAllDestinationsForKey(pubKey)) {\n+                script_pub_keys.insert(GetScriptForDestination(dest));\n+            }\n+\n+            walletModel->wallet().MarkDirty();\n+            walletModel->wallet().ImportScriptPubKeys(strLabel, script_pub_keys, true, true, 1);\n+            walletModel->wallet().ImportPubKeys({pubKey.GetID()}, {{pubKey.GetID(), pubKey}}, {}, false, false, 1);\n+\n+            if (fRescan) {\n+                int64_t scanned_time = walletModel->wallet().RescanFromTime(0, reserver, true);\n+                if (walletModel->wallet().IsAbortingRescan()) {\n+                    QMessageBox::critical(this, tr(\"Misc Error\"), tr(\"Rescan aborted by user.\"));\n+                    break;\n+                } else if (scanned_time > 0) {\n+                    QMessageBox::critical(this, tr(\"Wallet Error\"),\n+                                          tr(\"Rescan was unable to fully rescan the blockchain. Some transactions may be missing.\"));\n+                    break;\n+                }\n+                walletModel->wallet().ReacceptWalletTransactions();\n+            }\n+            break;\n+        }\n+        case importPrivkey: {\n+            wallet::WalletRescanReserver reserver = walletModel->wallet().getReserver();\n+            bool fRescan = true;\n+            WalletModel::UnlockContext ctx(walletModel->requestUnlock());\n+            if (!ctx.isValid()) {\n+                break;\n+            }\n+\n+            std::string strSecret = \"\";\n+            strSecret.assign(ui->keyEditIKP->text().toStdString().c_str());\n+            if (strSecret.empty()) {\n+                QMessageBox::warning(this, tr(\"Error\"), tr(\"Key is empty\"));\n+                break;\n+            }\n+\n+            std::string strLabel = \"\";\n+            strLabel.assign(ui->labelEditIKP->text().toStdString().c_str());\n+\n+            // Whether to perform rescan after import\n+            if (!ui->rescanButtonIKP->isChecked())\n+                fRescan = false;\n+\n+            if (fRescan && walletModel->wallet().chain().havePruned()) {\n+                // Exit early and print an error.\n+                // If a block is pruned after this check, we will import the key(s),\n+                // but fail the rescan with a generic error.\n+                QMessageBox::critical(this, tr(\"Rescan failed\"), tr(\"Rescan is disabled when blocks are pruned\"));\n+                break;\n+            }\n+\n+            if (fRescan && !reserver.reserve()) {\n+                QMessageBox::critical(this, tr(\"Rescan failed\"),\n+                                      tr(\"Wallet is currently rescanning. Abort existing rescan or wait.\"));\n+                break;\n+            }\n+\n+            CKey key = DecodeSecret(strSecret);\n+            if (!key.IsValid()) {\n+                QMessageBox::critical(this, tr(\"Invalid Private Key\"), tr(\"Invalid private key encoding.\"));\n+                break;\n+            }\n+\n+            CPubKey pubkey = key.GetPubKey();\n+            CHECK_NONFATAL(key.VerifyPubKey(pubkey));\n+            CKeyID vchAddress = pubkey.GetID();\n+            {\n+                walletModel->wallet().MarkDirty();\n+\n+                // We don't know which corresponding address will be used;\n+                // label all new addresses, and label existing addresses if a\n+                // label was passed.\n+                for (const auto &dest: GetAllDestinationsForKey(pubkey)) {\n+                    if (!strLabel.empty() || !walletModel->wallet().FindAddressBookEntry(dest)) {\n+                        walletModel->wallet().setAddressBook(dest, strLabel, \"receive\");\n+                    }\n+                }\n+\n+                // Use timestamp of 1 to scan the whole chain\n+                if (!walletModel->wallet().ImportPrivKeys({{vchAddress, key}}, 1)) {\n+                    QMessageBox::critical(this, tr(\"Wallet Error\"), tr(\"Error adding key to wallet\"));\n+                    break;\n+                }\n+\n+                // Add the wpkh script for this key if possible\n+                if (pubkey.IsCompressed()) {\n+                    walletModel->wallet().ImportScripts({GetScriptForDestination(WitnessV0KeyHash(vchAddress))},\n+                                                        0 /* timestamp */);\n+                }\n+            }\n+\n+            if (fRescan) {\n+                int64_t scanned_time = walletModel->wallet().RescanFromTime(0, reserver, true);\n+                if (walletModel->wallet().IsAbortingRescan()) {\n+                    QMessageBox::critical(this, tr(\"Misc Error\"),\n+                                          tr(\"Rescan aborted by user.\"));\n+                    break;\n+                } else if (scanned_time > 0) {\n+                    QMessageBox::critical(this, tr(\"Wallet Error\"),\n+                                          tr(\"Rescan was unable to fully rescan the blockchain. Some transactions may be missing.\"));\n+                    break;\n+                }\n+            }\n+\n+            break;\n+        }\n+        case importAddress: {\n+            std::string strAddress = \"\";\n+            strAddress.assign(ui->keyEditIA->text().toStdString().c_str());\n+            if (strAddress.empty()) {\n+                QMessageBox::warning(this, tr(\"Error\"), tr(\"Address is empty\"));\n+                break;\n+            }\n+\n+\n+            std::string strLabel = \"\";\n+            strLabel.assign(ui->labelEditIA->text().toStdString().c_str());\n+\n+            // Whether to perform rescan after import\n+            bool fRescan = true;\n+            if (!ui->rescanButtonIA->isChecked())\n+                fRescan = false;\n+\n+            if (fRescan && walletModel->wallet().chain().havePruned()) {\n+                // Exit early and print an error.\n+                // If a block is pruned after this check, we will import the key(s),\n+                // but fail the rescan with a generic error.\n+                QMessageBox::critical(this, tr(\"Rescan failed\"), tr(\"Rescan is disabled when blocks are pruned\"));\n+                break;\n+            }\n+\n+            wallet::WalletRescanReserver reserver = walletModel->wallet().getReserver();\n+            if (fRescan && !reserver.reserve()) {\n+                QMessageBox::critical(this, tr(\"Rescan failed\"),\n+                                      tr(\"Wallet is currently rescanning. Abort existing rescan or wait.\"));\n+                break;\n+            }\n+\n+            // Whether to import a p2sh version, too\n+            bool fP2SH = false;\n+            if (ui->p2shButtonIA->isChecked())\n+                fP2SH = true;\n+\n+            CTxDestination dest = DecodeDestination(strAddress);\n+            if (IsValidDestination(dest)) {\n+                if (fP2SH) {\n+                    QMessageBox::critical(this, tr(\"Invalid Address\"),\n+                                          tr(\"Cannot use the p2sh flag with an address - use a script instead\"));\n+                    break;\n+                }\n+                if (OutputTypeFromDestination(dest) == OutputType::BECH32M) {\n+                    QMessageBox::critical(this, tr(\"Invalid Address\"),\n+                                          tr(\"Bech32m addresses cannot be imported into legacy wallets\"));\n+                    break;\n+                }\n+\n+                walletModel->wallet().MarkDirty();\n+\n+                walletModel->wallet().ImportScriptPubKeys(strLabel, {GetScriptForDestination(dest)},\n+                                                          false /* have_solving_data */, true /* apply_label */,\n+                                                          1 /* timestamp */);\n+            } else if (IsHex(strAddress)) {\n+                std::vector<unsigned char> data(ParseHex(strAddress));\n+                CScript redeem_script(data.begin(), data.end());\n+\n+                std::set <CScript> scripts = {redeem_script};\n+                walletModel->wallet().ImportScripts(scripts, 0 /* timestamp */);\n+\n+                if (fP2SH) {\n+                    scripts.insert(GetScriptForDestination(ScriptHash(redeem_script)));\n+                }\n+\n+                walletModel->wallet().ImportScriptPubKeys(strLabel, scripts, false /* have_solving_data */,\n+                                                          true /* apply_label */, 1 /* timestamp */);\n+            } else {\n+                QMessageBox::critical(this, tr(\"Invalid Address\"), tr(\"Invalid Bitcoin address or script\"));\n+                break;\n+            }",
      "path": "src/qt/importdialog.cpp",
      "position": null,
      "original_position": 285,
      "commit_id": "b2b00af1d37dd69c3e64d905984e68ac6a6b2d8f",
      "original_commit_id": "3a75af09dbb6c182a86ce71b15fe0824d3c68ac5",
      "in_reply_to_id": null,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In 3a75af09dbb6c182a86ce71b15fe0824d3c68ac5 \"qt: implemented importpubkey, importprivkey, and importaddress GUI's\"\r\n\r\nSame comment about refactoring.",
      "created_at": "2022-08-08T19:58:32Z",
      "updated_at": "2022-08-08T20:56:15Z",
      "html_url": "https://github.com/bitcoin-core/gui/pull/650#discussion_r940614111",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/gui/pulls/comments/940614111"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/gui/pulls/650"
        }
      },
      "start_line": null,
      "original_start_line": 251,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 221,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/gui/pulls/comments/940616219",
      "pull_request_review_id": 1065661283,
      "id": 940616219,
      "node_id": "PRRC_kwDOEEET9c44EKob",
      "diff_hunk": "@@ -0,0 +1,302 @@\n+#include <qt/importdialog.h>\n+#include <qt/forms/ui_importdialog.h>\n+\n+#include <qt/guiconstants.h>\n+#include <qt/guiutil.h>\n+#include <key_io.h>\n+#include <qt/walletmodel.h>\n+#include <interfaces/node.h>\n+#include <wallet/wallet.h>\n+#include <QKeyEvent>\n+#include <QMessageBox>\n+#include <QPushButton>\n+#include <iostream>\n+#include <QScrollBar>\n+#include <tinyformat.h>\n+#include <chain.h>\n+\n+ImportDialog::ImportDialog(Page _page, QWidget *parent, WalletModel *walletModel) :\n+    QDialog(parent, GUIUtil::dialog_flags),\n+    ui(new Ui::ImportDialog),\n+    walletModel(walletModel),\n+    page(_page)\n+{\n+    ui->setupUi(this);\n+\n+    switch (page) {\n+        case importPubkey: {\n+            ui->QStackContainer->setCurrentWidget(ui->importKeyPage);\n+            this->setWindowTitle(\"Import Public Key\");\n+            ui->keyLabelIKP->setText(\"Public Key\");\n+            ui->keyEditIKP->setPlaceholderText(\"Enter a Public Key (e.g. 1NS17iag9jJgTHDlVXjvLCEnZuQ3rJDE9L)\");\n+            ui->rescanButtonIKP->setCheckState(Qt::Checked);\n+            break;\n+        } case importPrivkey: {\n+            ui->QStackContainer->setCurrentWidget(ui->importKeyPage);\n+            this->setWindowTitle(\"Import Private Key\");\n+            ui->keyLabelIKP->setText(\"Private Key\");\n+            ui->keyEditIKP->setPlaceholderText(\"Enter a Private Key (e.g. L4sTHokqoFZpcmJgsAG2yxrf2f71v6PYpK2qEkCvc2Fp8VVdMiU3)\");\n+            ui->rescanButtonIKP->setCheckState(Qt::Checked);\n+            break;\n+        } case importAddress: {\n+            ui->QStackContainer->setCurrentWidget(ui->importAddress);\n+            this->setWindowTitle(\"Import Address\");\n+            ui->rescanButtonIA->setCheckState(Qt::Checked);\n+            ui->p2shButtonIA->setCheckState(Qt::Unchecked);\n+            break;\n+        }\n+    }\n+\n+    GUIUtil::handleCloseWindowShortcut(this);\n+}\n+\n+ImportDialog::~ImportDialog()\n+{\n+    delete ui;\n+}\n+\n+void ImportDialog::on_Accept_clicked() {\n+    switch (page) {\n+        case importPubkey: {\n+            std::string strKey = \"\";\n+            strKey.assign(ui->keyEditIKP->text().toStdString().c_str());",
      "path": "src/qt/importdialog.cpp",
      "position": null,
      "original_position": 62,
      "commit_id": "b2b00af1d37dd69c3e64d905984e68ac6a6b2d8f",
      "original_commit_id": "3a75af09dbb6c182a86ce71b15fe0824d3c68ac5",
      "in_reply_to_id": null,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In 3a75af09dbb6c182a86ce71b15fe0824d3c68ac5 \"qt: implemented importpubkey, importprivkey, and importaddress GUI's\"\r\n\r\nThis can be simplified to one line, here and elsewhere.\r\n\r\n```suggestion\r\n            std::string strKey = ui->keyEditIKP->text().toStdString();\r\n```",
      "created_at": "2022-08-08T20:01:28Z",
      "updated_at": "2022-08-08T20:56:15Z",
      "html_url": "https://github.com/bitcoin-core/gui/pull/650#discussion_r940616219",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/gui/pulls/comments/940616219"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/gui/pulls/650"
        }
      },
      "start_line": null,
      "original_start_line": 61,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 108,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/gui/pulls/comments/940616656",
      "pull_request_review_id": 1065661283,
      "id": 940616656,
      "node_id": "PRRC_kwDOEEET9c44EKvQ",
      "diff_hunk": "@@ -0,0 +1,302 @@\n+#include <qt/importdialog.h>\n+#include <qt/forms/ui_importdialog.h>\n+\n+#include <qt/guiconstants.h>\n+#include <qt/guiutil.h>\n+#include <key_io.h>\n+#include <qt/walletmodel.h>\n+#include <interfaces/node.h>\n+#include <wallet/wallet.h>\n+#include <QKeyEvent>\n+#include <QMessageBox>\n+#include <QPushButton>\n+#include <iostream>\n+#include <QScrollBar>\n+#include <tinyformat.h>\n+#include <chain.h>\n+\n+ImportDialog::ImportDialog(Page _page, QWidget *parent, WalletModel *walletModel) :\n+    QDialog(parent, GUIUtil::dialog_flags),\n+    ui(new Ui::ImportDialog),\n+    walletModel(walletModel),\n+    page(_page)\n+{\n+    ui->setupUi(this);\n+\n+    switch (page) {\n+        case importPubkey: {\n+            ui->QStackContainer->setCurrentWidget(ui->importKeyPage);\n+            this->setWindowTitle(\"Import Public Key\");\n+            ui->keyLabelIKP->setText(\"Public Key\");\n+            ui->keyEditIKP->setPlaceholderText(\"Enter a Public Key (e.g. 1NS17iag9jJgTHDlVXjvLCEnZuQ3rJDE9L)\");\n+            ui->rescanButtonIKP->setCheckState(Qt::Checked);\n+            break;\n+        } case importPrivkey: {\n+            ui->QStackContainer->setCurrentWidget(ui->importKeyPage);\n+            this->setWindowTitle(\"Import Private Key\");\n+            ui->keyLabelIKP->setText(\"Private Key\");\n+            ui->keyEditIKP->setPlaceholderText(\"Enter a Private Key (e.g. L4sTHokqoFZpcmJgsAG2yxrf2f71v6PYpK2qEkCvc2Fp8VVdMiU3)\");\n+            ui->rescanButtonIKP->setCheckState(Qt::Checked);\n+            break;\n+        } case importAddress: {\n+            ui->QStackContainer->setCurrentWidget(ui->importAddress);\n+            this->setWindowTitle(\"Import Address\");\n+            ui->rescanButtonIA->setCheckState(Qt::Checked);\n+            ui->p2shButtonIA->setCheckState(Qt::Unchecked);\n+            break;\n+        }\n+    }\n+\n+    GUIUtil::handleCloseWindowShortcut(this);\n+}\n+\n+ImportDialog::~ImportDialog()\n+{\n+    delete ui;\n+}\n+\n+void ImportDialog::on_Accept_clicked() {\n+    switch (page) {\n+        case importPubkey: {\n+            std::string strKey = \"\";\n+            strKey.assign(ui->keyEditIKP->text().toStdString().c_str());\n+\n+            if (strKey.empty()) {\n+                QMessageBox::warning(this, tr(\"Error\"), tr(\"Key is empty\"));\n+                break;\n+            }\n+\n+            std::string strLabel;\n+            strLabel.assign(ui->labelEditIKP->text().toStdString().c_str());",
      "path": "src/qt/importdialog.cpp",
      "position": null,
      "original_position": 70,
      "commit_id": "b2b00af1d37dd69c3e64d905984e68ac6a6b2d8f",
      "original_commit_id": "3a75af09dbb6c182a86ce71b15fe0824d3c68ac5",
      "in_reply_to_id": null,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In 3a75af09dbb6c182a86ce71b15fe0824d3c68ac5 \"qt: implemented importpubkey, importprivkey, and importaddress GUI's\"\r\n\r\nThis can be simplified to one line, here and elsewhere.\r\n\r\n```suggestion\r\n            std::string strLabel = ui->labelEditIKP->text().toStdString();\r\n```",
      "created_at": "2022-08-08T20:02:09Z",
      "updated_at": "2022-08-08T20:56:15Z",
      "html_url": "https://github.com/bitcoin-core/gui/pull/650#discussion_r940616656",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/gui/pulls/comments/940616656"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/gui/pulls/650"
        }
      },
      "start_line": null,
      "original_start_line": 69,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 116,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/gui/pulls/comments/940621024",
      "pull_request_review_id": 1065661283,
      "id": 940621024,
      "node_id": "PRRC_kwDOEEET9c44ELzg",
      "diff_hunk": "@@ -298,5 +344,377 @@ void ImportDialog::on_Accept_clicked() {\n             }\n             break;\n         }\n+        case importMulti: {\n+            bool fRescan = true;\n+            if (!ui->rescanButtonIA->isChecked())\n+                fRescan = false;\n+\n+            if (fRescan && walletModel->wallet().chain().havePruned()) {\n+                // Exit early and print an error.\n+                // If a block is pruned after this check, we will import the key(s),\n+                // but fail the rescan with a generic error.\n+                QMessageBox::critical(this, tr(\"Rescan failed\"), tr(\"Rescan is disabled when blocks are pruned\"));\n+                break;\n+            }\n+\n+            wallet::WalletRescanReserver reserver = walletModel->wallet().getReserver();\n+            if (fRescan && !reserver.reserve()) {\n+                QMessageBox::critical(this, tr(\"Rescan failed\"),\n+                                      tr(\"Wallet is currently rescanning. Abort existing rescan or wait.\"));\n+                break;\n+            }\n+\n+            int64_t now = 0;\n+            bool fRunScan = false;\n+            int64_t nLowestTimestamp = 0;\n+            std::vector<resultpdi> response = {};",
      "path": "src/qt/importdialog.cpp",
      "position": null,
      "original_position": 100,
      "commit_id": "b2b00af1d37dd69c3e64d905984e68ac6a6b2d8f",
      "original_commit_id": "c71f418f18000f537871f57a42ec76e0a25941e9",
      "in_reply_to_id": null,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In c71f418f18000f537871f57a42ec76e0a25941e9 \"qt: implemented importmulti and importdescriptors GUI's\"\r\n\r\n```suggestion\r\n            std::vector<resultpdi> response;\r\n```",
      "created_at": "2022-08-08T20:08:00Z",
      "updated_at": "2022-08-08T20:56:15Z",
      "html_url": "https://github.com/bitcoin-core/gui/pull/650#discussion_r940621024",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/gui/pulls/comments/940621024"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/gui/pulls/650"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 370,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/gui/pulls/comments/940625711",
      "pull_request_review_id": 1065661283,
      "id": 940625711,
      "node_id": "PRRC_kwDOEEET9c44EM8v",
      "diff_hunk": "@@ -298,5 +344,377 @@ void ImportDialog::on_Accept_clicked() {\n             }\n             break;\n         }\n+        case importMulti: {\n+            bool fRescan = true;\n+            if (!ui->rescanButtonIA->isChecked())\n+                fRescan = false;\n+\n+            if (fRescan && walletModel->wallet().chain().havePruned()) {\n+                // Exit early and print an error.\n+                // If a block is pruned after this check, we will import the key(s),\n+                // but fail the rescan with a generic error.\n+                QMessageBox::critical(this, tr(\"Rescan failed\"), tr(\"Rescan is disabled when blocks are pruned\"));\n+                break;\n+            }\n+\n+            wallet::WalletRescanReserver reserver = walletModel->wallet().getReserver();\n+            if (fRescan && !reserver.reserve()) {\n+                QMessageBox::critical(this, tr(\"Rescan failed\"),\n+                                      tr(\"Wallet is currently rescanning. Abort existing rescan or wait.\"));\n+                break;\n+            }\n+\n+            int64_t now = 0;\n+            bool fRunScan = false;\n+            int64_t nLowestTimestamp = 0;\n+            std::vector<resultpdi> response = {};\n+\n+            WalletModel::UnlockContext ctx(walletModel->requestUnlock());\n+            if (!ctx.isValid()) {\n+                break;\n+            }\n+\n+            // Verify all timestamps are present before importing any keys.\n+            CHECK_NONFATAL(walletModel->wallet().chain().findBlock(walletModel->wallet().GetLastBlockHash(),\n+                                                                   interfaces::FoundBlock().time(nLowestTimestamp).mtpTime(now)));\n+            const int64_t minimumTimestamp = 1;\n+\n+            for (int i = 0; i < ui->entries->count(); ++i) {\n+                ImportEntry *entry = qobject_cast<ImportEntry *>(ui->entries->itemAt(i)->widget());\n+                wallet::ImportMultiData mData = entry->getMultiData();\n+                const int64_t timestamp = std::max(GetImportTimestamp(mData.timestamp, now), minimumTimestamp);\n+                resultpdi result;\n+\n+                try {\n+                    // Internal addresses should not have a label\n+                    if (mData.internal && !mData.label.empty()) {\n+                        throw wallet::InvalidParameter(\"Internal addresses should not have a label\");\n+                    }\n+\n+                    bool isScript = false;\n+                    FlatSigningProvider keys;\n+                    if (!mData.scriptPubKey.empty()) {\n+                        // if the input isn't a valid address assume it is a script\n+                        CTxDestination dest = DecodeDestination(mData.scriptPubKey);\n+                        if (!IsValidDestination(dest)) {\n+                            isScript = true;\n+                        }\n+                    } else {\n+                        std::string error;\n+                        mData.parsed_desc = Parse(entry->getDesc(), keys, error, /* require_checksum = */ true);\n+                        if (!mData.parsed_desc) {\n+                            throw wallet::InvalidAddressOrKey(error);\n+                        }\n+                        if (mData.parsed_desc->GetOutputType() == OutputType::BECH32M) {\n+                            throw wallet::InvalidAddressOrKey(\"Bech32m descriptors cannot be imported into legacy wallets\");\n+                        }\n+                        bool range_exists = (mData.range_start && mData.range_end);\n+                        if (!mData.parsed_desc->IsRange() && range_exists) {\n+                            throw wallet::InvalidParameter(\"Range should not be specified for an un-ranged descriptor\");\n+                        } else if (mData.parsed_desc->IsRange()) {\n+                            if (!range_exists) {\n+                                throw wallet::InvalidParameter(\"Descriptor is ranged, please specify the range\");\n+                            }\n+                            RangeDescriptorCheck(mData.range_start, mData.range_end);\n+                        }\n+                    }\n+                    walletModel->wallet().ProcessImport(mData, result.warnings, isScript, keys, timestamp);\n+                    result.success = true;\n+                } catch (const wallet::MiscError& e) {\n+                    result.success = false;\n+                    result.error = e.error;\n+                } catch (const wallet::WalletError& e) {\n+                    result.success = false;\n+                    result.error = e.error;\n+                } catch (const wallet::InvalidAddressOrKey& e) {\n+                    result.success = false;\n+                    result.error = e.error;\n+                } catch (const wallet::InvalidParameter& e) {\n+                    result.success = false;\n+                    result.error = e.error;\n+                } catch (...) {\n+                    result.success = false;\n+                    result.error = \"Missing required fields\";\n+                }\n+\n+                response.push_back(result);\n+\n+                if (!fRescan) {\n+                    continue;\n+                }\n+\n+                // If at least one request was successful then allow rescan.\n+                if (result.success) {\n+                    fRunScan = true;\n+                }\n+\n+                // Get the lowest timestamp.\n+                if (timestamp < nLowestTimestamp) {\n+                    nLowestTimestamp = timestamp;\n+                }\n+            }\n+\n+            if (fRescan && fRunScan && ui->entries->count()) {\n+                int64_t scannedTime = walletModel->wallet().RescanFromTime(nLowestTimestamp, reserver, true);\n+                walletModel->wallet().ReacceptWalletTransactions();\n+\n+                if (walletModel->wallet().IsAbortingRescan()) {\n+                    QMessageBox::critical(this, tr(\"Misc Error\"),\n+                                          tr(\"Rescan aborted by user.\"));\n+\n+                    if (scannedTime > nLowestTimestamp) {\n+                        std::vector <resultpdi> results = response;\n+                        response.clear();\n+\n+                        for (int i = 0; i < ui->entries->count(); ++i) {\n+                            ImportEntry *entry = qobject_cast<ImportEntry *>(ui->entries->itemAt(i)->widget());\n+                            // If key creation date is within the successfully scanned\n+                            // range, or if the import result already has an error set, let\n+                            // the result stand unmodified. Otherwise, replace the result\n+                            // with an error message.\n+                            if (scannedTime <= GetImportTimestamp(entry->getMultiData().timestamp, now) || !results.at(i).error.empty()) {\n+                                response.push_back(results.at(i));\n+                            } else {\n+                                resultpdi result;\n+                                result.success = false;\n+                                result.error = strprintf(\n+                                                \"Rescan failed for key with creation timestamp %d. There was an error reading a \"\n+                                                \"block from time %d, which is after or within %d seconds of key creation, and \"\n+                                                \"could contain transactions pertaining to the key. As a result, transactions \"\n+                                                \"and coins using this key may not appear in the wallet. This error could be \"\n+                                                \"caused by pruning or data corruption (see bitcoind log for details) and could \"\n+                                                \"be dealt with by downloading and rescanning the relevant blocks (see -reindex \"\n+                                                \"option and rescanblockchain RPC).\",\n+                                                GetImportTimestamp(entry->getMultiData().timestamp, now), scannedTime - TIMESTAMP_WINDOW - 1,\n+                                                TIMESTAMP_WINDOW);\n+                                response.push_back(std::move(result));\n+                            }\n+                        }\n+                    }\n+                }\n+            }\n+            for (int i = 0; i < response.size(); i++) {\n+                if (!response[i].success) {\n+                    std::string warning_str;\n+                    if (response[i].warnings.size() != 0) {\n+                        for (auto w: response[i].warnings) {\n+                            warning_str += w + \"\\n\";\n+                        }\n+                    }\n+                    QMessageBox::critical(this, QString::fromStdString(\"Error: input box # \" + QString::number(i)),\n+                                          QString::fromStdString(\"Error:\" + response[i].error+\"\\n\"+\n+                                          \"Warnings:\"+\"\\n\" + warning_str));\n+                }\n+            }\n+            break;\n+        }\n+        case importDescriptors: {\n+            wallet::WalletRescanReserver reserver = walletModel->wallet().getReserver();\n+            if (!reserver.reserve()) {\n+                QMessageBox::critical(this, tr(\"Rescan failed\"),\n+                                      tr(\"Wallet is currently rescanning. Abort existing rescan or wait.\"));\n+                break;\n+            }\n+\n+            const int64_t minimum_timestamp = 1;\n+            int64_t now = 0;\n+            int64_t lowest_timestamp = 0;\n+            bool rescan = false;\n+            std::vector<resultpdi> response = {};\n+\n+            WalletModel::UnlockContext ctx(walletModel->requestUnlock());\n+            if (!ctx.isValid()) {\n+                break;\n+            }\n+\n+            CHECK_NONFATAL(walletModel->wallet().chain().findBlock(walletModel->wallet().GetLastBlockHash(),\n+                                                                   interfaces::FoundBlock().time(lowest_timestamp).mtpTime(now)));\n+\n+            // Get all timestamps and extract the lowest timestamp\n+            for (int i = 0; i < ui->entries->count(); ++i) {\n+                ImportEntry *entry = qobject_cast<ImportEntry *>(ui->entries->itemAt(i)->widget());\n+\n+                // This throws an error if \"timestamp\" doesn't exist\n+                wallet::ImportDescriptorData dData = entry->getDescriptorData();\n+                const int64_t timestamp = std::max(GetImportTimestamp(dData.timestamp, now), minimum_timestamp);\n+                resultpdi result;\n+\n+                try {\n+                    // Parse descriptor string\n+                    FlatSigningProvider keys;\n+                    std::string error;\n+                    dData.parsed_desc = Parse(entry->getDesc(), keys, error, /* require_checksum = */ true);\n+                    if (!dData.parsed_desc) {\n+                        throw wallet::InvalidAddressOrKey(error);\n+                    }\n+\n+                    bool range_exists = (dData.range_start && dData.range_end);\n+                    if (!dData.parsed_desc->IsRange() && range_exists) {\n+                        throw wallet::InvalidParameter(\"Range should not be specified for an un-ranged descriptor\");\n+                    } else if (dData.parsed_desc->IsRange()) {\n+                        if (!range_exists) {\n+                            result.warnings.push_back(\"Range not given, using default keypool range\");\n+                            dData.range_start = 0;\n+                            dData.range_end = gArgs.GetIntArg(\"-keypool\", wallet::DEFAULT_KEYPOOL_SIZE);\n+                        } else {\n+                            RangeDescriptorCheck(dData.range_start, dData.range_end);\n+                            dData.range_end++;\n+                        }\n+\n+                        if (dData.next_index) {\n+                            // bound checks\n+                            if (dData.next_index < dData.range_start || dData.next_index >= dData.range_end) {\n+                                throw wallet::InvalidParameter(\"next_index is out of range\");\n+                            }\n+                        } else {\n+                            dData.next_index = dData.range_start;\n+                        }\n+                    }\n+                    walletModel->wallet().ProcessDescriptorImport(dData, result.warnings, keys, range_exists, timestamp);\n+                    result.success = true;\n+                } catch (const wallet::MiscError& e) {\n+                    result.success = false;\n+                    result.error = e.error;\n+                } catch (const wallet::WalletError& e) {\n+                    result.success = false;\n+                    result.error = e.error;\n+                } catch (const wallet::InvalidAddressOrKey& e) {\n+                    result.success = false;\n+                    result.error = e.error;\n+                } catch (const wallet::InvalidParameter& e) {\n+                    result.success = false;\n+                    result.error = e.error;\n+                }\n+\n+                response.push_back(result);\n+\n+                if (lowest_timestamp > timestamp) {\n+                    lowest_timestamp = timestamp;\n+                }\n+\n+                // If we know the chain tip, and at least one request was successful then allow rescan\n+                if (!rescan && result.success) {\n+                    rescan = true;\n+                }\n+            }\n+            walletModel->wallet().ConnectScriptPubKeyManNotifiers();\n+\n+            // Rescan the blockchain using the lowest timestamp\n+            if (rescan) {\n+                int64_t scanned_time = walletModel->wallet().RescanFromTime(lowest_timestamp, reserver, true);\n+                walletModel->wallet().ReacceptWalletTransactions();\n+\n+                if (walletModel->wallet().IsAbortingRescan()) {\n+                    QMessageBox::critical(this, tr(\"Misc Error\"),\n+                                          tr(\"Rescan aborted by user.\"));\n+\n+                    if (scanned_time > lowest_timestamp) {\n+                        std::vector<resultpdi> results = response;\n+                        response.clear();\n+\n+                        for (int i = 0; i < ui->entries->count(); ++i) {\n+                            ImportEntry *entry = qobject_cast<ImportEntry *>(ui->entries->itemAt(i)->widget());\n+\n+                            // If the descriptor timestamp is within the successfully scanned\n+                            // range, or if the import result already has an error set, let\n+                            // the result stand unmodified. Otherwise, replace the result\n+                            // with an error message.\n+                            if (scanned_time <= GetImportTimestamp(entry->getDescriptorData().timestamp, now) || !results.at(i).error.empty()) {\n+                                response.push_back(results.at(i));\n+                            } else {\n+                                resultpdi result;\n+                                result.success = false;\n+                                result.error = strprintf(\n+                                            \"Rescan failed for descriptor with timestamp %d. There was an error reading a \"\n+                                            \"block from time %d, which is after or within %d seconds of key creation, and \"\n+                                            \"could contain transactions pertaining to the desc. As a result, transactions \"\n+                                            \"and coins using this desc may not appear in the wallet. This error could be \"\n+                                            \"caused by pruning or data corruption (see bitcoind log for details) and could \"\n+                                            \"be dealt with by downloading and rescanning the relevant blocks (see -reindex \"\n+                                            \"option and rescanblockchain RPC).\",\n+                                            GetImportTimestamp(entry->getDescriptorData().timestamp, now),\n+                                            scanned_time - TIMESTAMP_WINDOW - 1, TIMESTAMP_WINDOW);\n+                                response.push_back(std::move(result));\n+                            }\n+                        }\n+                    }\n+                }\n+            }\n+            for (int i = 0; i < response.size(); i++) {\n+                if (!response[i].success) {\n+                    std::string warning_str;\n+                    if (response[i].warnings.size() != 0) {\n+                        for (auto w: response[i].warnings) {\n+                            warning_str += w + \"\\n\";\n+                        }\n+                    }\n+                    QMessageBox::critical(this, QString::fromStdString(\"Error: input box # \" + QString::number(i)),\n+                                          QString::fromStdString(\"Error:\" + response[i].error+\"\\n\"+\n+                                                                 \"Warnings:\"+\"\\n\" + warning_str));\n+                }\n+            }\n+        }\n     }\n }\n+\n+\n+\n+ImportEntry *ImportDialog::addEntryMulti()\n+{\n+    ImportEntry *entry = new ImportEntry(ImportEntry::importMultiEntry, this);\n+    entry->setModel(walletModel);\n+    ui->entries->addWidget(entry);\n+    connect(entry, &ImportEntry::removeMultiEntry, this, &ImportDialog::removeMultiEntry);\n+\n+    // Focus the field, so that entry can start immediately\n+    //entry->clear();\n+    entry->setFocus();\n+    ui->scrollAreaWidgetContents->resize(ui->scrollAreaWidgetContents->sizeHint());\n+    qApp->processEvents();\n+    QScrollBar* bar = ui->scrollArea->verticalScrollBar();\n+    if(bar)\n+        bar->setSliderPosition(bar->maximum());\n+\n+    return entry;\n+}\n+\n+ImportEntry *ImportDialog::addEntryDescriptors()\n+{\n+    ImportEntry *entry = new ImportEntry(ImportEntry::importDescriptorsEntry, this);\n+    entry->setModel(walletModel);\n+    ui->entries->addWidget(entry);\n+    connect(entry, &ImportEntry::removeDescriptorEntry, this, &ImportDialog::removeDescriptorEntry);\n+\n+    // Focus the field, so that entry can start immediately\n+    //entry->clear();\n+    entry->setFocus();\n+    ui->scrollAreaWidgetContents->resize(ui->scrollAreaWidgetContents->sizeHint());\n+    qApp->processEvents();\n+    QScrollBar* bar = ui->scrollArea->verticalScrollBar();\n+    if(bar)\n+        bar->setSliderPosition(bar->maximum());\n+\n+    return entry;\n+}\n+\n+void ImportDialog::removeMultiEntry(ImportEntry* entry)\n+{\n+    entry->hide();\n+\n+    // If the last entry is about to be removed add an empty one\n+    if (ui->entries->count() == 1)\n+        addEntryMulti();\n+\n+    entry->deleteLater();\n+}\n+\n+void ImportDialog::removeDescriptorEntry(ImportEntry* entry)\n+{\n+    entry->hide();\n+\n+    // If the last entry is about to be removed add an empty one\n+    if (ui->entries->count() == 1)\n+        addEntryDescriptors();\n+\n+    entry->deleteLater();\n+}",
      "path": "src/qt/importdialog.cpp",
      "position": null,
      "original_position": 450,
      "commit_id": "b2b00af1d37dd69c3e64d905984e68ac6a6b2d8f",
      "original_commit_id": "c71f418f18000f537871f57a42ec76e0a25941e9",
      "in_reply_to_id": null,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In c71f418f18000f537871f57a42ec76e0a25941e9 \"qt: implemented importmulti and importdescriptors GUI's\"\r\n\r\nThese two functions are basically the same. I think you could just collapse them into a single `removeEntry` function. To figure which `addEntry` to call, you can look at `entry`'s `entryPage` member (which will need to be made public, or a getter added).",
      "created_at": "2022-08-08T20:14:33Z",
      "updated_at": "2022-08-08T20:56:15Z",
      "html_url": "https://github.com/bitcoin-core/gui/pull/650#discussion_r940625711",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/gui/pulls/comments/940625711"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/gui/pulls/650"
        }
      },
      "start_line": null,
      "original_start_line": 700,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 579,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/gui/pulls/comments/940626528",
      "pull_request_review_id": 1065661283,
      "id": 940626528,
      "node_id": "PRRC_kwDOEEET9c44ENJg",
      "diff_hunk": "@@ -298,5 +344,377 @@ void ImportDialog::on_Accept_clicked() {\n             }\n             break;\n         }\n+        case importMulti: {\n+            bool fRescan = true;\n+            if (!ui->rescanButtonIA->isChecked())\n+                fRescan = false;\n+\n+            if (fRescan && walletModel->wallet().chain().havePruned()) {\n+                // Exit early and print an error.\n+                // If a block is pruned after this check, we will import the key(s),\n+                // but fail the rescan with a generic error.\n+                QMessageBox::critical(this, tr(\"Rescan failed\"), tr(\"Rescan is disabled when blocks are pruned\"));\n+                break;\n+            }\n+\n+            wallet::WalletRescanReserver reserver = walletModel->wallet().getReserver();\n+            if (fRescan && !reserver.reserve()) {\n+                QMessageBox::critical(this, tr(\"Rescan failed\"),\n+                                      tr(\"Wallet is currently rescanning. Abort existing rescan or wait.\"));\n+                break;\n+            }\n+\n+            int64_t now = 0;\n+            bool fRunScan = false;\n+            int64_t nLowestTimestamp = 0;\n+            std::vector<resultpdi> response = {};\n+\n+            WalletModel::UnlockContext ctx(walletModel->requestUnlock());\n+            if (!ctx.isValid()) {\n+                break;\n+            }\n+\n+            // Verify all timestamps are present before importing any keys.\n+            CHECK_NONFATAL(walletModel->wallet().chain().findBlock(walletModel->wallet().GetLastBlockHash(),\n+                                                                   interfaces::FoundBlock().time(nLowestTimestamp).mtpTime(now)));\n+            const int64_t minimumTimestamp = 1;\n+\n+            for (int i = 0; i < ui->entries->count(); ++i) {\n+                ImportEntry *entry = qobject_cast<ImportEntry *>(ui->entries->itemAt(i)->widget());\n+                wallet::ImportMultiData mData = entry->getMultiData();\n+                const int64_t timestamp = std::max(GetImportTimestamp(mData.timestamp, now), minimumTimestamp);\n+                resultpdi result;\n+\n+                try {\n+                    // Internal addresses should not have a label\n+                    if (mData.internal && !mData.label.empty()) {\n+                        throw wallet::InvalidParameter(\"Internal addresses should not have a label\");\n+                    }\n+\n+                    bool isScript = false;\n+                    FlatSigningProvider keys;\n+                    if (!mData.scriptPubKey.empty()) {\n+                        // if the input isn't a valid address assume it is a script\n+                        CTxDestination dest = DecodeDestination(mData.scriptPubKey);\n+                        if (!IsValidDestination(dest)) {\n+                            isScript = true;\n+                        }\n+                    } else {\n+                        std::string error;\n+                        mData.parsed_desc = Parse(entry->getDesc(), keys, error, /* require_checksum = */ true);\n+                        if (!mData.parsed_desc) {\n+                            throw wallet::InvalidAddressOrKey(error);\n+                        }\n+                        if (mData.parsed_desc->GetOutputType() == OutputType::BECH32M) {\n+                            throw wallet::InvalidAddressOrKey(\"Bech32m descriptors cannot be imported into legacy wallets\");\n+                        }\n+                        bool range_exists = (mData.range_start && mData.range_end);\n+                        if (!mData.parsed_desc->IsRange() && range_exists) {\n+                            throw wallet::InvalidParameter(\"Range should not be specified for an un-ranged descriptor\");\n+                        } else if (mData.parsed_desc->IsRange()) {\n+                            if (!range_exists) {\n+                                throw wallet::InvalidParameter(\"Descriptor is ranged, please specify the range\");\n+                            }\n+                            RangeDescriptorCheck(mData.range_start, mData.range_end);\n+                        }\n+                    }\n+                    walletModel->wallet().ProcessImport(mData, result.warnings, isScript, keys, timestamp);\n+                    result.success = true;\n+                } catch (const wallet::MiscError& e) {\n+                    result.success = false;\n+                    result.error = e.error;\n+                } catch (const wallet::WalletError& e) {\n+                    result.success = false;\n+                    result.error = e.error;\n+                } catch (const wallet::InvalidAddressOrKey& e) {\n+                    result.success = false;\n+                    result.error = e.error;\n+                } catch (const wallet::InvalidParameter& e) {\n+                    result.success = false;\n+                    result.error = e.error;\n+                } catch (...) {\n+                    result.success = false;\n+                    result.error = \"Missing required fields\";\n+                }\n+\n+                response.push_back(result);\n+\n+                if (!fRescan) {\n+                    continue;\n+                }\n+\n+                // If at least one request was successful then allow rescan.\n+                if (result.success) {\n+                    fRunScan = true;\n+                }\n+\n+                // Get the lowest timestamp.\n+                if (timestamp < nLowestTimestamp) {\n+                    nLowestTimestamp = timestamp;\n+                }\n+            }\n+\n+            if (fRescan && fRunScan && ui->entries->count()) {\n+                int64_t scannedTime = walletModel->wallet().RescanFromTime(nLowestTimestamp, reserver, true);\n+                walletModel->wallet().ReacceptWalletTransactions();\n+\n+                if (walletModel->wallet().IsAbortingRescan()) {\n+                    QMessageBox::critical(this, tr(\"Misc Error\"),\n+                                          tr(\"Rescan aborted by user.\"));\n+\n+                    if (scannedTime > nLowestTimestamp) {\n+                        std::vector <resultpdi> results = response;\n+                        response.clear();\n+\n+                        for (int i = 0; i < ui->entries->count(); ++i) {\n+                            ImportEntry *entry = qobject_cast<ImportEntry *>(ui->entries->itemAt(i)->widget());\n+                            // If key creation date is within the successfully scanned\n+                            // range, or if the import result already has an error set, let\n+                            // the result stand unmodified. Otherwise, replace the result\n+                            // with an error message.\n+                            if (scannedTime <= GetImportTimestamp(entry->getMultiData().timestamp, now) || !results.at(i).error.empty()) {\n+                                response.push_back(results.at(i));\n+                            } else {\n+                                resultpdi result;\n+                                result.success = false;\n+                                result.error = strprintf(\n+                                                \"Rescan failed for key with creation timestamp %d. There was an error reading a \"\n+                                                \"block from time %d, which is after or within %d seconds of key creation, and \"\n+                                                \"could contain transactions pertaining to the key. As a result, transactions \"\n+                                                \"and coins using this key may not appear in the wallet. This error could be \"\n+                                                \"caused by pruning or data corruption (see bitcoind log for details) and could \"\n+                                                \"be dealt with by downloading and rescanning the relevant blocks (see -reindex \"\n+                                                \"option and rescanblockchain RPC).\",\n+                                                GetImportTimestamp(entry->getMultiData().timestamp, now), scannedTime - TIMESTAMP_WINDOW - 1,\n+                                                TIMESTAMP_WINDOW);\n+                                response.push_back(std::move(result));\n+                            }\n+                        }\n+                    }\n+                }\n+            }\n+            for (int i = 0; i < response.size(); i++) {\n+                if (!response[i].success) {\n+                    std::string warning_str;\n+                    if (response[i].warnings.size() != 0) {\n+                        for (auto w: response[i].warnings) {\n+                            warning_str += w + \"\\n\";\n+                        }\n+                    }\n+                    QMessageBox::critical(this, QString::fromStdString(\"Error: input box # \" + QString::number(i)),\n+                                          QString::fromStdString(\"Error:\" + response[i].error+\"\\n\"+\n+                                          \"Warnings:\"+\"\\n\" + warning_str));\n+                }\n+            }\n+            break;\n+        }\n+        case importDescriptors: {\n+            wallet::WalletRescanReserver reserver = walletModel->wallet().getReserver();\n+            if (!reserver.reserve()) {\n+                QMessageBox::critical(this, tr(\"Rescan failed\"),\n+                                      tr(\"Wallet is currently rescanning. Abort existing rescan or wait.\"));\n+                break;\n+            }\n+\n+            const int64_t minimum_timestamp = 1;\n+            int64_t now = 0;\n+            int64_t lowest_timestamp = 0;\n+            bool rescan = false;\n+            std::vector<resultpdi> response = {};\n+\n+            WalletModel::UnlockContext ctx(walletModel->requestUnlock());\n+            if (!ctx.isValid()) {\n+                break;\n+            }\n+\n+            CHECK_NONFATAL(walletModel->wallet().chain().findBlock(walletModel->wallet().GetLastBlockHash(),\n+                                                                   interfaces::FoundBlock().time(lowest_timestamp).mtpTime(now)));\n+\n+            // Get all timestamps and extract the lowest timestamp\n+            for (int i = 0; i < ui->entries->count(); ++i) {\n+                ImportEntry *entry = qobject_cast<ImportEntry *>(ui->entries->itemAt(i)->widget());\n+\n+                // This throws an error if \"timestamp\" doesn't exist\n+                wallet::ImportDescriptorData dData = entry->getDescriptorData();\n+                const int64_t timestamp = std::max(GetImportTimestamp(dData.timestamp, now), minimum_timestamp);\n+                resultpdi result;\n+\n+                try {\n+                    // Parse descriptor string\n+                    FlatSigningProvider keys;\n+                    std::string error;\n+                    dData.parsed_desc = Parse(entry->getDesc(), keys, error, /* require_checksum = */ true);\n+                    if (!dData.parsed_desc) {\n+                        throw wallet::InvalidAddressOrKey(error);\n+                    }\n+\n+                    bool range_exists = (dData.range_start && dData.range_end);\n+                    if (!dData.parsed_desc->IsRange() && range_exists) {\n+                        throw wallet::InvalidParameter(\"Range should not be specified for an un-ranged descriptor\");\n+                    } else if (dData.parsed_desc->IsRange()) {\n+                        if (!range_exists) {\n+                            result.warnings.push_back(\"Range not given, using default keypool range\");\n+                            dData.range_start = 0;\n+                            dData.range_end = gArgs.GetIntArg(\"-keypool\", wallet::DEFAULT_KEYPOOL_SIZE);\n+                        } else {\n+                            RangeDescriptorCheck(dData.range_start, dData.range_end);\n+                            dData.range_end++;\n+                        }\n+\n+                        if (dData.next_index) {\n+                            // bound checks\n+                            if (dData.next_index < dData.range_start || dData.next_index >= dData.range_end) {\n+                                throw wallet::InvalidParameter(\"next_index is out of range\");\n+                            }\n+                        } else {\n+                            dData.next_index = dData.range_start;\n+                        }\n+                    }\n+                    walletModel->wallet().ProcessDescriptorImport(dData, result.warnings, keys, range_exists, timestamp);\n+                    result.success = true;\n+                } catch (const wallet::MiscError& e) {\n+                    result.success = false;\n+                    result.error = e.error;\n+                } catch (const wallet::WalletError& e) {\n+                    result.success = false;\n+                    result.error = e.error;\n+                } catch (const wallet::InvalidAddressOrKey& e) {\n+                    result.success = false;\n+                    result.error = e.error;\n+                } catch (const wallet::InvalidParameter& e) {\n+                    result.success = false;\n+                    result.error = e.error;\n+                }\n+\n+                response.push_back(result);\n+\n+                if (lowest_timestamp > timestamp) {\n+                    lowest_timestamp = timestamp;\n+                }\n+\n+                // If we know the chain tip, and at least one request was successful then allow rescan\n+                if (!rescan && result.success) {\n+                    rescan = true;\n+                }\n+            }\n+            walletModel->wallet().ConnectScriptPubKeyManNotifiers();\n+\n+            // Rescan the blockchain using the lowest timestamp\n+            if (rescan) {\n+                int64_t scanned_time = walletModel->wallet().RescanFromTime(lowest_timestamp, reserver, true);\n+                walletModel->wallet().ReacceptWalletTransactions();\n+\n+                if (walletModel->wallet().IsAbortingRescan()) {\n+                    QMessageBox::critical(this, tr(\"Misc Error\"),\n+                                          tr(\"Rescan aborted by user.\"));\n+\n+                    if (scanned_time > lowest_timestamp) {\n+                        std::vector<resultpdi> results = response;\n+                        response.clear();\n+\n+                        for (int i = 0; i < ui->entries->count(); ++i) {\n+                            ImportEntry *entry = qobject_cast<ImportEntry *>(ui->entries->itemAt(i)->widget());\n+\n+                            // If the descriptor timestamp is within the successfully scanned\n+                            // range, or if the import result already has an error set, let\n+                            // the result stand unmodified. Otherwise, replace the result\n+                            // with an error message.\n+                            if (scanned_time <= GetImportTimestamp(entry->getDescriptorData().timestamp, now) || !results.at(i).error.empty()) {\n+                                response.push_back(results.at(i));\n+                            } else {\n+                                resultpdi result;\n+                                result.success = false;\n+                                result.error = strprintf(\n+                                            \"Rescan failed for descriptor with timestamp %d. There was an error reading a \"\n+                                            \"block from time %d, which is after or within %d seconds of key creation, and \"\n+                                            \"could contain transactions pertaining to the desc. As a result, transactions \"\n+                                            \"and coins using this desc may not appear in the wallet. This error could be \"\n+                                            \"caused by pruning or data corruption (see bitcoind log for details) and could \"\n+                                            \"be dealt with by downloading and rescanning the relevant blocks (see -reindex \"\n+                                            \"option and rescanblockchain RPC).\",\n+                                            GetImportTimestamp(entry->getDescriptorData().timestamp, now),\n+                                            scanned_time - TIMESTAMP_WINDOW - 1, TIMESTAMP_WINDOW);\n+                                response.push_back(std::move(result));\n+                            }\n+                        }\n+                    }\n+                }\n+            }\n+            for (int i = 0; i < response.size(); i++) {\n+                if (!response[i].success) {\n+                    std::string warning_str;\n+                    if (response[i].warnings.size() != 0) {\n+                        for (auto w: response[i].warnings) {\n+                            warning_str += w + \"\\n\";\n+                        }\n+                    }\n+                    QMessageBox::critical(this, QString::fromStdString(\"Error: input box # \" + QString::number(i)),\n+                                          QString::fromStdString(\"Error:\" + response[i].error+\"\\n\"+\n+                                                                 \"Warnings:\"+\"\\n\" + warning_str));\n+                }\n+            }\n+        }\n     }\n }\n+\n+\n+\n+ImportEntry *ImportDialog::addEntryMulti()\n+{\n+    ImportEntry *entry = new ImportEntry(ImportEntry::importMultiEntry, this);\n+    entry->setModel(walletModel);\n+    ui->entries->addWidget(entry);\n+    connect(entry, &ImportEntry::removeMultiEntry, this, &ImportDialog::removeMultiEntry);\n+\n+    // Focus the field, so that entry can start immediately\n+    //entry->clear();\n+    entry->setFocus();\n+    ui->scrollAreaWidgetContents->resize(ui->scrollAreaWidgetContents->sizeHint());\n+    qApp->processEvents();\n+    QScrollBar* bar = ui->scrollArea->verticalScrollBar();\n+    if(bar)\n+        bar->setSliderPosition(bar->maximum());\n+\n+    return entry;\n+}\n+\n+ImportEntry *ImportDialog::addEntryDescriptors()\n+{\n+    ImportEntry *entry = new ImportEntry(ImportEntry::importDescriptorsEntry, this);\n+    entry->setModel(walletModel);\n+    ui->entries->addWidget(entry);\n+    connect(entry, &ImportEntry::removeDescriptorEntry, this, &ImportDialog::removeDescriptorEntry);\n+\n+    // Focus the field, so that entry can start immediately\n+    //entry->clear();\n+    entry->setFocus();\n+    ui->scrollAreaWidgetContents->resize(ui->scrollAreaWidgetContents->sizeHint());\n+    qApp->processEvents();\n+    QScrollBar* bar = ui->scrollArea->verticalScrollBar();\n+    if(bar)\n+        bar->setSliderPosition(bar->maximum());\n+\n+    return entry;\n+}",
      "path": "src/qt/importdialog.cpp",
      "position": null,
      "original_position": 428,
      "commit_id": "b2b00af1d37dd69c3e64d905984e68ac6a6b2d8f",
      "original_commit_id": "c71f418f18000f537871f57a42ec76e0a25941e9",
      "in_reply_to_id": null,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In c71f418f18000f537871f57a42ec76e0a25941e9 \"qt: implemented importmulti and importdescriptors GUI's\"\r\n\r\nThese two functions are basically the same. You could collapse it into a single `addEntry` function that takes an `EntryPage` as a parameter to be passed to the `ImportEntry` constructor.",
      "created_at": "2022-08-08T20:15:37Z",
      "updated_at": "2022-08-08T20:56:15Z",
      "html_url": "https://github.com/bitcoin-core/gui/pull/650#discussion_r940626528",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/gui/pulls/comments/940626528"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/gui/pulls/650"
        }
      },
      "start_line": null,
      "original_start_line": 662,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 568,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/gui/pulls/comments/940630072",
      "pull_request_review_id": 1065661283,
      "id": 940630072,
      "node_id": "PRRC_kwDOEEET9c44EOA4",
      "diff_hunk": "@@ -298,5 +344,377 @@ void ImportDialog::on_Accept_clicked() {\n             }\n             break;\n         }\n+        case importMulti: {\n+            bool fRescan = true;\n+            if (!ui->rescanButtonIA->isChecked())\n+                fRescan = false;\n+\n+            if (fRescan && walletModel->wallet().chain().havePruned()) {\n+                // Exit early and print an error.\n+                // If a block is pruned after this check, we will import the key(s),\n+                // but fail the rescan with a generic error.\n+                QMessageBox::critical(this, tr(\"Rescan failed\"), tr(\"Rescan is disabled when blocks are pruned\"));\n+                break;\n+            }\n+\n+            wallet::WalletRescanReserver reserver = walletModel->wallet().getReserver();\n+            if (fRescan && !reserver.reserve()) {\n+                QMessageBox::critical(this, tr(\"Rescan failed\"),\n+                                      tr(\"Wallet is currently rescanning. Abort existing rescan or wait.\"));\n+                break;\n+            }\n+\n+            int64_t now = 0;\n+            bool fRunScan = false;\n+            int64_t nLowestTimestamp = 0;\n+            std::vector<resultpdi> response = {};\n+\n+            WalletModel::UnlockContext ctx(walletModel->requestUnlock());\n+            if (!ctx.isValid()) {\n+                break;\n+            }\n+\n+            // Verify all timestamps are present before importing any keys.\n+            CHECK_NONFATAL(walletModel->wallet().chain().findBlock(walletModel->wallet().GetLastBlockHash(),\n+                                                                   interfaces::FoundBlock().time(nLowestTimestamp).mtpTime(now)));\n+            const int64_t minimumTimestamp = 1;\n+\n+            for (int i = 0; i < ui->entries->count(); ++i) {\n+                ImportEntry *entry = qobject_cast<ImportEntry *>(ui->entries->itemAt(i)->widget());\n+                wallet::ImportMultiData mData = entry->getMultiData();\n+                const int64_t timestamp = std::max(GetImportTimestamp(mData.timestamp, now), minimumTimestamp);\n+                resultpdi result;\n+\n+                try {\n+                    // Internal addresses should not have a label\n+                    if (mData.internal && !mData.label.empty()) {\n+                        throw wallet::InvalidParameter(\"Internal addresses should not have a label\");\n+                    }\n+\n+                    bool isScript = false;\n+                    FlatSigningProvider keys;\n+                    if (!mData.scriptPubKey.empty()) {\n+                        // if the input isn't a valid address assume it is a script\n+                        CTxDestination dest = DecodeDestination(mData.scriptPubKey);\n+                        if (!IsValidDestination(dest)) {\n+                            isScript = true;\n+                        }\n+                    } else {\n+                        std::string error;\n+                        mData.parsed_desc = Parse(entry->getDesc(), keys, error, /* require_checksum = */ true);\n+                        if (!mData.parsed_desc) {\n+                            throw wallet::InvalidAddressOrKey(error);\n+                        }\n+                        if (mData.parsed_desc->GetOutputType() == OutputType::BECH32M) {\n+                            throw wallet::InvalidAddressOrKey(\"Bech32m descriptors cannot be imported into legacy wallets\");\n+                        }\n+                        bool range_exists = (mData.range_start && mData.range_end);\n+                        if (!mData.parsed_desc->IsRange() && range_exists) {\n+                            throw wallet::InvalidParameter(\"Range should not be specified for an un-ranged descriptor\");\n+                        } else if (mData.parsed_desc->IsRange()) {\n+                            if (!range_exists) {\n+                                throw wallet::InvalidParameter(\"Descriptor is ranged, please specify the range\");\n+                            }\n+                            RangeDescriptorCheck(mData.range_start, mData.range_end);\n+                        }\n+                    }\n+                    walletModel->wallet().ProcessImport(mData, result.warnings, isScript, keys, timestamp);\n+                    result.success = true;\n+                } catch (const wallet::MiscError& e) {\n+                    result.success = false;\n+                    result.error = e.error;\n+                } catch (const wallet::WalletError& e) {\n+                    result.success = false;\n+                    result.error = e.error;\n+                } catch (const wallet::InvalidAddressOrKey& e) {\n+                    result.success = false;\n+                    result.error = e.error;\n+                } catch (const wallet::InvalidParameter& e) {\n+                    result.success = false;\n+                    result.error = e.error;\n+                } catch (...) {\n+                    result.success = false;\n+                    result.error = \"Missing required fields\";\n+                }\n+\n+                response.push_back(result);\n+\n+                if (!fRescan) {\n+                    continue;\n+                }\n+\n+                // If at least one request was successful then allow rescan.\n+                if (result.success) {\n+                    fRunScan = true;\n+                }\n+\n+                // Get the lowest timestamp.\n+                if (timestamp < nLowestTimestamp) {\n+                    nLowestTimestamp = timestamp;\n+                }\n+            }\n+\n+            if (fRescan && fRunScan && ui->entries->count()) {\n+                int64_t scannedTime = walletModel->wallet().RescanFromTime(nLowestTimestamp, reserver, true);\n+                walletModel->wallet().ReacceptWalletTransactions();\n+\n+                if (walletModel->wallet().IsAbortingRescan()) {\n+                    QMessageBox::critical(this, tr(\"Misc Error\"),\n+                                          tr(\"Rescan aborted by user.\"));\n+\n+                    if (scannedTime > nLowestTimestamp) {\n+                        std::vector <resultpdi> results = response;\n+                        response.clear();\n+\n+                        for (int i = 0; i < ui->entries->count(); ++i) {\n+                            ImportEntry *entry = qobject_cast<ImportEntry *>(ui->entries->itemAt(i)->widget());\n+                            // If key creation date is within the successfully scanned\n+                            // range, or if the import result already has an error set, let\n+                            // the result stand unmodified. Otherwise, replace the result\n+                            // with an error message.\n+                            if (scannedTime <= GetImportTimestamp(entry->getMultiData().timestamp, now) || !results.at(i).error.empty()) {\n+                                response.push_back(results.at(i));\n+                            } else {\n+                                resultpdi result;\n+                                result.success = false;\n+                                result.error = strprintf(\n+                                                \"Rescan failed for key with creation timestamp %d. There was an error reading a \"\n+                                                \"block from time %d, which is after or within %d seconds of key creation, and \"\n+                                                \"could contain transactions pertaining to the key. As a result, transactions \"\n+                                                \"and coins using this key may not appear in the wallet. This error could be \"\n+                                                \"caused by pruning or data corruption (see bitcoind log for details) and could \"\n+                                                \"be dealt with by downloading and rescanning the relevant blocks (see -reindex \"\n+                                                \"option and rescanblockchain RPC).\",\n+                                                GetImportTimestamp(entry->getMultiData().timestamp, now), scannedTime - TIMESTAMP_WINDOW - 1,\n+                                                TIMESTAMP_WINDOW);\n+                                response.push_back(std::move(result));\n+                            }\n+                        }\n+                    }\n+                }\n+            }\n+            for (int i = 0; i < response.size(); i++) {",
      "path": "src/qt/importdialog.cpp",
      "position": null,
      "original_position": 226,
      "commit_id": "b2b00af1d37dd69c3e64d905984e68ac6a6b2d8f",
      "original_commit_id": "c71f418f18000f537871f57a42ec76e0a25941e9",
      "in_reply_to_id": null,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In c71f418f18000f537871f57a42ec76e0a25941e9 \"qt: implemented importmulti and importdescriptors GUI's\"\r\n\r\nCompiler warning here, also below for `importDescriptors`:\r\n\r\n```\r\nqt/importdialog.cpp: In member function ‘void ImportDialog::on_Accept_clicked()’:\r\nqt/importdialog.cpp:496:31: warning: comparison of integer expressions of different signedness: ‘int’ and ‘std::vector<resultpdi>::size_type’ {aka ‘long unsigned int’} [-Wsign-compare]\r\n  496 |             for (int i = 0; i < response.size(); i++) {\r\n      |                             ~~^~~~~~~~~~~~~~~~~\r\n```\r\n\r\n```suggestion\r\n            for (size_t i = 0; i < response.size(); i++) {\r\n```",
      "created_at": "2022-08-08T20:20:26Z",
      "updated_at": "2022-08-08T20:56:15Z",
      "html_url": "https://github.com/bitcoin-core/gui/pull/650#discussion_r940630072",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/gui/pulls/comments/940630072"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/gui/pulls/650"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 496,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/gui/pulls/comments/940634109",
      "pull_request_review_id": 1065661283,
      "id": 940634109,
      "node_id": "PRRC_kwDOEEET9c44EO_9",
      "diff_hunk": "@@ -298,5 +344,377 @@ void ImportDialog::on_Accept_clicked() {\n             }\n             break;\n         }\n+        case importMulti: {\n+            bool fRescan = true;\n+            if (!ui->rescanButtonIA->isChecked())\n+                fRescan = false;\n+\n+            if (fRescan && walletModel->wallet().chain().havePruned()) {\n+                // Exit early and print an error.\n+                // If a block is pruned after this check, we will import the key(s),\n+                // but fail the rescan with a generic error.\n+                QMessageBox::critical(this, tr(\"Rescan failed\"), tr(\"Rescan is disabled when blocks are pruned\"));\n+                break;\n+            }\n+\n+            wallet::WalletRescanReserver reserver = walletModel->wallet().getReserver();\n+            if (fRescan && !reserver.reserve()) {\n+                QMessageBox::critical(this, tr(\"Rescan failed\"),\n+                                      tr(\"Wallet is currently rescanning. Abort existing rescan or wait.\"));\n+                break;\n+            }\n+\n+            int64_t now = 0;\n+            bool fRunScan = false;\n+            int64_t nLowestTimestamp = 0;\n+            std::vector<resultpdi> response = {};\n+\n+            WalletModel::UnlockContext ctx(walletModel->requestUnlock());\n+            if (!ctx.isValid()) {\n+                break;\n+            }\n+\n+            // Verify all timestamps are present before importing any keys.\n+            CHECK_NONFATAL(walletModel->wallet().chain().findBlock(walletModel->wallet().GetLastBlockHash(),\n+                                                                   interfaces::FoundBlock().time(nLowestTimestamp).mtpTime(now)));\n+            const int64_t minimumTimestamp = 1;\n+\n+            for (int i = 0; i < ui->entries->count(); ++i) {\n+                ImportEntry *entry = qobject_cast<ImportEntry *>(ui->entries->itemAt(i)->widget());\n+                wallet::ImportMultiData mData = entry->getMultiData();\n+                const int64_t timestamp = std::max(GetImportTimestamp(mData.timestamp, now), minimumTimestamp);\n+                resultpdi result;\n+\n+                try {\n+                    // Internal addresses should not have a label\n+                    if (mData.internal && !mData.label.empty()) {\n+                        throw wallet::InvalidParameter(\"Internal addresses should not have a label\");\n+                    }\n+\n+                    bool isScript = false;\n+                    FlatSigningProvider keys;\n+                    if (!mData.scriptPubKey.empty()) {\n+                        // if the input isn't a valid address assume it is a script\n+                        CTxDestination dest = DecodeDestination(mData.scriptPubKey);\n+                        if (!IsValidDestination(dest)) {\n+                            isScript = true;\n+                        }\n+                    } else {\n+                        std::string error;\n+                        mData.parsed_desc = Parse(entry->getDesc(), keys, error, /* require_checksum = */ true);\n+                        if (!mData.parsed_desc) {\n+                            throw wallet::InvalidAddressOrKey(error);\n+                        }\n+                        if (mData.parsed_desc->GetOutputType() == OutputType::BECH32M) {\n+                            throw wallet::InvalidAddressOrKey(\"Bech32m descriptors cannot be imported into legacy wallets\");\n+                        }\n+                        bool range_exists = (mData.range_start && mData.range_end);\n+                        if (!mData.parsed_desc->IsRange() && range_exists) {\n+                            throw wallet::InvalidParameter(\"Range should not be specified for an un-ranged descriptor\");\n+                        } else if (mData.parsed_desc->IsRange()) {\n+                            if (!range_exists) {\n+                                throw wallet::InvalidParameter(\"Descriptor is ranged, please specify the range\");\n+                            }\n+                            RangeDescriptorCheck(mData.range_start, mData.range_end);\n+                        }\n+                    }\n+                    walletModel->wallet().ProcessImport(mData, result.warnings, isScript, keys, timestamp);\n+                    result.success = true;\n+                } catch (const wallet::MiscError& e) {\n+                    result.success = false;\n+                    result.error = e.error;\n+                } catch (const wallet::WalletError& e) {\n+                    result.success = false;\n+                    result.error = e.error;\n+                } catch (const wallet::InvalidAddressOrKey& e) {\n+                    result.success = false;\n+                    result.error = e.error;\n+                } catch (const wallet::InvalidParameter& e) {\n+                    result.success = false;\n+                    result.error = e.error;\n+                } catch (...) {\n+                    result.success = false;\n+                    result.error = \"Missing required fields\";\n+                }\n+\n+                response.push_back(result);\n+\n+                if (!fRescan) {\n+                    continue;\n+                }\n+\n+                // If at least one request was successful then allow rescan.\n+                if (result.success) {\n+                    fRunScan = true;\n+                }\n+\n+                // Get the lowest timestamp.\n+                if (timestamp < nLowestTimestamp) {\n+                    nLowestTimestamp = timestamp;\n+                }\n+            }\n+\n+            if (fRescan && fRunScan && ui->entries->count()) {\n+                int64_t scannedTime = walletModel->wallet().RescanFromTime(nLowestTimestamp, reserver, true);\n+                walletModel->wallet().ReacceptWalletTransactions();\n+\n+                if (walletModel->wallet().IsAbortingRescan()) {\n+                    QMessageBox::critical(this, tr(\"Misc Error\"),\n+                                          tr(\"Rescan aborted by user.\"));\n+\n+                    if (scannedTime > nLowestTimestamp) {\n+                        std::vector <resultpdi> results = response;\n+                        response.clear();\n+\n+                        for (int i = 0; i < ui->entries->count(); ++i) {\n+                            ImportEntry *entry = qobject_cast<ImportEntry *>(ui->entries->itemAt(i)->widget());\n+                            // If key creation date is within the successfully scanned\n+                            // range, or if the import result already has an error set, let\n+                            // the result stand unmodified. Otherwise, replace the result\n+                            // with an error message.\n+                            if (scannedTime <= GetImportTimestamp(entry->getMultiData().timestamp, now) || !results.at(i).error.empty()) {\n+                                response.push_back(results.at(i));\n+                            } else {\n+                                resultpdi result;\n+                                result.success = false;\n+                                result.error = strprintf(\n+                                                \"Rescan failed for key with creation timestamp %d. There was an error reading a \"\n+                                                \"block from time %d, which is after or within %d seconds of key creation, and \"\n+                                                \"could contain transactions pertaining to the key. As a result, transactions \"\n+                                                \"and coins using this key may not appear in the wallet. This error could be \"\n+                                                \"caused by pruning or data corruption (see bitcoind log for details) and could \"\n+                                                \"be dealt with by downloading and rescanning the relevant blocks (see -reindex \"\n+                                                \"option and rescanblockchain RPC).\",\n+                                                GetImportTimestamp(entry->getMultiData().timestamp, now), scannedTime - TIMESTAMP_WINDOW - 1,\n+                                                TIMESTAMP_WINDOW);\n+                                response.push_back(std::move(result));\n+                            }\n+                        }\n+                    }\n+                }\n+            }\n+            for (int i = 0; i < response.size(); i++) {\n+                if (!response[i].success) {\n+                    std::string warning_str;\n+                    if (response[i].warnings.size() != 0) {\n+                        for (auto w: response[i].warnings) {\n+                            warning_str += w + \"\\n\";\n+                        }\n+                    }\n+                    QMessageBox::critical(this, QString::fromStdString(\"Error: input box # \") + QString::number(i),",
      "path": "src/qt/importdialog.cpp",
      "position": null,
      "original_position": 234,
      "commit_id": "b2b00af1d37dd69c3e64d905984e68ac6a6b2d8f",
      "original_commit_id": "adf1a83caf37b04bfd6c86179b7121ca62d14055",
      "in_reply_to_id": null,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In c71f418f18000f537871f57a42ec76e0a25941e9 \"qt: implemented importmulti and importdescriptors GUI's\"\r\n\r\nCompiler error here, also for `importDescriptors`:\r\n\r\n```\r\nqt/importdialog.cpp:504:94: error: cannot convert ‘QStringBuilder<char [20], QString>’ to ‘const std::string&’ {aka ‘const std::__cxx11::basic_string<char>&’}\r\n  504 |                     QMessageBox::critical(this, QString::fromStdString(\"Error: input box # \" + QString::number(i)),\r\n      |                                                                        ~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\r\n      |                                                                                              |\r\n      |                                                                                              QStringBuilder<char [20], QString>\r\nIn file included from /usr/include/qt/QtCore/qobject.h:47,\r\n                 from /usr/include/qt/QtWidgets/qwidget.h:45,\r\n                 from /usr/include/qt/QtWidgets/qdialog.h:44,\r\n                 from /usr/include/qt/QtWidgets/QDialog:1,\r\n                 from ./qt/importdialog.h:4,\r\n                 from qt/importdialog.cpp:1:\r\n/usr/include/qt/QtCore/qstring.h:1555:58: note:   initializing argument 1 of ‘static QString QString::fromStdString(const std::string&)’\r\n 1555 | inline QString QString::fromStdString(const std::string &s)\r\n      |                                       ~~~~~~~~~~~~~~~~~~~^\r\n```\r\n\r\n```suggestion\r\n                    QMessageBox::critical(this, QString::fromStdString(strprintf(\"Error: input box # %d\", i)),\r\n```",
      "created_at": "2022-08-08T20:25:46Z",
      "updated_at": "2022-08-08T20:56:15Z",
      "html_url": "https://github.com/bitcoin-core/gui/pull/650#discussion_r940634109",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/gui/pulls/comments/940634109"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/gui/pulls/650"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 504,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/gui/pulls/comments/940640282",
      "pull_request_review_id": 1065661283,
      "id": 940640282,
      "node_id": "PRRC_kwDOEEET9c44EQga",
      "diff_hunk": "@@ -0,0 +1,69 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_WALLET_IMPORTS_H\n+#define BITCOIN_WALLET_IMPORTS_H\n+\n+#include <string>\n+#include <vector>\n+#include <threadsafety.h>\n+#include <script/descriptor.h>\n+#include <script/signingprovider.h>\n+#include <wallet/wallet.h>\n+\n+namespace wallet {\n+    struct MiscError {\n+        std::string error;\n+        MiscError(std::string error) : error(error) {}\n+    };\n+\n+    struct WalletError {\n+        std::string error;\n+        WalletError(std::string error) : error(error) {}\n+    };\n+\n+    struct InvalidAddressOrKey {\n+        std::string error;\n+        InvalidAddressOrKey(std::string error) : error(error) {}\n+    };\n+\n+    struct InvalidParameter {\n+        std::string error;\n+        InvalidParameter(std::string error) : error(error) {}\n+    };\n+\n+    struct ImportMultiData\n+    {\n+        std::unique_ptr<Descriptor> parsed_desc;\n+        std::string scriptPubKey;\n+        std::string redeem_script;\n+        std::string witness_script;\n+        std::string label;\n+        std::vector<std::string> pubkeys;\n+        std::vector<std::string> keys;\n+        int64_t range_start;\n+        int64_t range_end;\n+        int64_t timestamp;\n+        bool internal;\n+        bool watch_only;\n+        bool keypool;",
      "path": "src/wallet/imports.h",
      "position": null,
      "original_position": 50,
      "commit_id": "b2b00af1d37dd69c3e64d905984e68ac6a6b2d8f",
      "original_commit_id": "f718e24693f4d322d2a82d6f1f8f6d4add98c415",
      "in_reply_to_id": null,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In f718e24693f4d322d2a82d6f1f8f6d4add98c415 \"refactor: importmulti and importdescriptors rpc\"\r\n\r\nTo avoid accessing uninitialized variables, these primitives should be initialized to some safe default. Same for `ImportDescriptorData` below.",
      "created_at": "2022-08-08T20:34:01Z",
      "updated_at": "2022-08-08T20:56:15Z",
      "html_url": "https://github.com/bitcoin-core/gui/pull/650#discussion_r940640282",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/gui/pulls/comments/940640282"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/gui/pulls/650"
        }
      },
      "start_line": null,
      "original_start_line": 45,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 50,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/gui/pulls/comments/940640962",
      "pull_request_review_id": 1065661283,
      "id": 940640962,
      "node_id": "PRRC_kwDOEEET9c44EQrC",
      "diff_hunk": "@@ -298,5 +344,377 @@ void ImportDialog::on_Accept_clicked() {\n             }\n             break;\n         }\n+        case importMulti: {\n+            bool fRescan = true;\n+            if (!ui->rescanButtonIA->isChecked())\n+                fRescan = false;\n+\n+            if (fRescan && walletModel->wallet().chain().havePruned()) {\n+                // Exit early and print an error.\n+                // If a block is pruned after this check, we will import the key(s),\n+                // but fail the rescan with a generic error.\n+                QMessageBox::critical(this, tr(\"Rescan failed\"), tr(\"Rescan is disabled when blocks are pruned\"));\n+                break;\n+            }\n+\n+            wallet::WalletRescanReserver reserver = walletModel->wallet().getReserver();\n+            if (fRescan && !reserver.reserve()) {\n+                QMessageBox::critical(this, tr(\"Rescan failed\"),\n+                                      tr(\"Wallet is currently rescanning. Abort existing rescan or wait.\"));\n+                break;\n+            }\n+\n+            int64_t now = 0;\n+            bool fRunScan = false;\n+            int64_t nLowestTimestamp = 0;\n+            std::vector<resultpdi> response = {};\n+\n+            WalletModel::UnlockContext ctx(walletModel->requestUnlock());\n+            if (!ctx.isValid()) {\n+                break;\n+            }\n+\n+            // Verify all timestamps are present before importing any keys.\n+            CHECK_NONFATAL(walletModel->wallet().chain().findBlock(walletModel->wallet().GetLastBlockHash(),\n+                                                                   interfaces::FoundBlock().time(nLowestTimestamp).mtpTime(now)));\n+            const int64_t minimumTimestamp = 1;\n+\n+            for (int i = 0; i < ui->entries->count(); ++i) {\n+                ImportEntry *entry = qobject_cast<ImportEntry *>(ui->entries->itemAt(i)->widget());\n+                wallet::ImportMultiData mData = entry->getMultiData();\n+                const int64_t timestamp = std::max(GetImportTimestamp(mData.timestamp, now), minimumTimestamp);\n+                resultpdi result;\n+\n+                try {\n+                    // Internal addresses should not have a label\n+                    if (mData.internal && !mData.label.empty()) {\n+                        throw wallet::InvalidParameter(\"Internal addresses should not have a label\");\n+                    }\n+\n+                    bool isScript = false;\n+                    FlatSigningProvider keys;\n+                    if (!mData.scriptPubKey.empty()) {\n+                        // if the input isn't a valid address assume it is a script\n+                        CTxDestination dest = DecodeDestination(mData.scriptPubKey);\n+                        if (!IsValidDestination(dest)) {\n+                            isScript = true;\n+                        }\n+                    } else {\n+                        std::string error;\n+                        mData.parsed_desc = Parse(entry->getDesc(), keys, error, /* require_checksum = */ true);\n+                        if (!mData.parsed_desc) {\n+                            throw wallet::InvalidAddressOrKey(error);\n+                        }\n+                        if (mData.parsed_desc->GetOutputType() == OutputType::BECH32M) {\n+                            throw wallet::InvalidAddressOrKey(\"Bech32m descriptors cannot be imported into legacy wallets\");\n+                        }\n+                        bool range_exists = (mData.range_start && mData.range_end);\n+                        if (!mData.parsed_desc->IsRange() && range_exists) {\n+                            throw wallet::InvalidParameter(\"Range should not be specified for an un-ranged descriptor\");\n+                        } else if (mData.parsed_desc->IsRange()) {\n+                            if (!range_exists) {\n+                                throw wallet::InvalidParameter(\"Descriptor is ranged, please specify the range\");\n+                            }\n+                            RangeDescriptorCheck(mData.range_start, mData.range_end);\n+                        }\n+                    }\n+                    walletModel->wallet().ProcessImport(mData, result.warnings, isScript, keys, timestamp);\n+                    result.success = true;\n+                } catch (const wallet::MiscError& e) {\n+                    result.success = false;\n+                    result.error = e.error;\n+                } catch (const wallet::WalletError& e) {\n+                    result.success = false;\n+                    result.error = e.error;\n+                } catch (const wallet::InvalidAddressOrKey& e) {\n+                    result.success = false;\n+                    result.error = e.error;\n+                } catch (const wallet::InvalidParameter& e) {\n+                    result.success = false;\n+                    result.error = e.error;\n+                } catch (...) {\n+                    result.success = false;\n+                    result.error = \"Missing required fields\";\n+                }\n+\n+                response.push_back(result);\n+\n+                if (!fRescan) {\n+                    continue;\n+                }\n+\n+                // If at least one request was successful then allow rescan.\n+                if (result.success) {\n+                    fRunScan = true;\n+                }\n+\n+                // Get the lowest timestamp.\n+                if (timestamp < nLowestTimestamp) {\n+                    nLowestTimestamp = timestamp;\n+                }\n+            }\n+\n+            if (fRescan && fRunScan && ui->entries->count()) {\n+                int64_t scannedTime = walletModel->wallet().RescanFromTime(nLowestTimestamp, reserver, true);\n+                walletModel->wallet().ReacceptWalletTransactions();\n+\n+                if (walletModel->wallet().IsAbortingRescan()) {\n+                    QMessageBox::critical(this, tr(\"Misc Error\"),\n+                                          tr(\"Rescan aborted by user.\"));\n+\n+                    if (scannedTime > nLowestTimestamp) {\n+                        std::vector <resultpdi> results = response;\n+                        response.clear();\n+\n+                        for (int i = 0; i < ui->entries->count(); ++i) {\n+                            ImportEntry *entry = qobject_cast<ImportEntry *>(ui->entries->itemAt(i)->widget());\n+                            // If key creation date is within the successfully scanned\n+                            // range, or if the import result already has an error set, let\n+                            // the result stand unmodified. Otherwise, replace the result\n+                            // with an error message.\n+                            if (scannedTime <= GetImportTimestamp(entry->getMultiData().timestamp, now) || !results.at(i).error.empty()) {\n+                                response.push_back(results.at(i));\n+                            } else {\n+                                resultpdi result;\n+                                result.success = false;\n+                                result.error = strprintf(\n+                                                \"Rescan failed for key with creation timestamp %d. There was an error reading a \"\n+                                                \"block from time %d, which is after or within %d seconds of key creation, and \"\n+                                                \"could contain transactions pertaining to the key. As a result, transactions \"\n+                                                \"and coins using this key may not appear in the wallet. This error could be \"\n+                                                \"caused by pruning or data corruption (see bitcoind log for details) and could \"\n+                                                \"be dealt with by downloading and rescanning the relevant blocks (see -reindex \"\n+                                                \"option and rescanblockchain RPC).\",\n+                                                GetImportTimestamp(entry->getMultiData().timestamp, now), scannedTime - TIMESTAMP_WINDOW - 1,\n+                                                TIMESTAMP_WINDOW);\n+                                response.push_back(std::move(result));\n+                            }\n+                        }\n+                    }\n+                }\n+            }\n+            for (int i = 0; i < response.size(); i++) {\n+                if (!response[i].success) {\n+                    std::string warning_str;\n+                    if (response[i].warnings.size() != 0) {\n+                        for (auto w: response[i].warnings) {\n+                            warning_str += w + \"\\n\";\n+                        }\n+                    }\n+                    QMessageBox::critical(this, QString::fromStdString(\"Error: input box # \") + QString::number(i),\n+                                          QString::fromStdString(\"Error:\" + response[i].error+\"\\n\"+\n+                                          \"Warnings:\"+\"\\n\" + warning_str));\n+                }\n+            }\n+            break;\n+        }\n+        case importDescriptors: {\n+            wallet::WalletRescanReserver reserver = walletModel->wallet().getReserver();\n+            if (!reserver.reserve()) {\n+                QMessageBox::critical(this, tr(\"Rescan failed\"),\n+                                      tr(\"Wallet is currently rescanning. Abort existing rescan or wait.\"));\n+                break;\n+            }\n+\n+            const int64_t minimum_timestamp = 1;\n+            int64_t now = 0;\n+            int64_t lowest_timestamp = 0;\n+            bool rescan = false;\n+            std::vector<resultpdi> response = {};\n+\n+            WalletModel::UnlockContext ctx(walletModel->requestUnlock());\n+            if (!ctx.isValid()) {\n+                break;\n+            }\n+\n+            CHECK_NONFATAL(walletModel->wallet().chain().findBlock(walletModel->wallet().GetLastBlockHash(),\n+                                                                   interfaces::FoundBlock().time(lowest_timestamp).mtpTime(now)));\n+\n+            // Get all timestamps and extract the lowest timestamp\n+            for (int i = 0; i < ui->entries->count(); ++i) {\n+                ImportEntry *entry = qobject_cast<ImportEntry *>(ui->entries->itemAt(i)->widget());\n+\n+                // This throws an error if \"timestamp\" doesn't exist\n+                wallet::ImportDescriptorData dData = entry->getDescriptorData();\n+                const int64_t timestamp = std::max(GetImportTimestamp(dData.timestamp, now), minimum_timestamp);\n+                resultpdi result;\n+\n+                try {\n+                    // Parse descriptor string\n+                    FlatSigningProvider keys;\n+                    std::string error;\n+                    dData.parsed_desc = Parse(entry->getDesc(), keys, error, /* require_checksum = */ true);\n+                    if (!dData.parsed_desc) {\n+                        throw wallet::InvalidAddressOrKey(error);\n+                    }\n+\n+                    bool range_exists = (dData.range_start && dData.range_end);",
      "path": "src/qt/importdialog.cpp",
      "position": null,
      "original_position": 281,
      "commit_id": "b2b00af1d37dd69c3e64d905984e68ac6a6b2d8f",
      "original_commit_id": "adf1a83caf37b04bfd6c86179b7121ca62d14055",
      "in_reply_to_id": null,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In c71f418f18000f537871f57a42ec76e0a25941e9 \"qt: implemented importmulti and importdescriptors GUI's\"\r\n\r\nSurrounding parentheses are not needed\r\n\r\n```suggestion\r\n                    bool range_exists = dData.range_start && dData.range_end;\r\n```",
      "created_at": "2022-08-08T20:34:55Z",
      "updated_at": "2022-08-08T20:56:15Z",
      "html_url": "https://github.com/bitcoin-core/gui/pull/650#discussion_r940640962",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/gui/pulls/comments/940640962"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/gui/pulls/650"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 551,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/gui/pulls/comments/940650877",
      "pull_request_review_id": 1065661283,
      "id": 940650877,
      "node_id": "PRRC_kwDOEEET9c44ETF9",
      "diff_hunk": "@@ -0,0 +1,244 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#if defined(HAVE_CONFIG_H)\n+#include <config/bitcoin-config.h>\n+#endif\n+\n+#include <qt/importentry.h>\n+#include <qt/forms/ui_importentry.h>\n+\n+#include <qt/addressbookpage.h>\n+#include <qt/addresstablemodel.h>\n+#include <qt/guiutil.h>\n+#include <qt/optionsmodel.h>\n+#include <qt/walletmodel.h>\n+#include <util/string.h>\n+#include <wallet/imports.h>\n+\n+#include <QGroupBox>\n+#include <QApplication>\n+#include <QClipboard>\n+\n+ImportEntry::ImportEntry(EntryPage _entryPage, QWidget *parent) :\n+        QStackedWidget(parent),\n+        ui(new Ui::ImportEntry),\n+        model(nullptr),\n+        entryPage(_entryPage)\n+{\n+    ui->setupUi(this);\n+\n+    switch (entryPage) {\n+        case importMultiEntry: {\n+            setCurrentWidget(ui->importMultiEntry);\n+            connect(ui->importScriptPubKeyRadio, &QRadioButton::clicked, this, &ImportEntry::changeImportDialog);\n+            connect(ui->importDescriptorRadio, &QRadioButton::clicked, this, &ImportEntry::changeImportDialog);\n+            connect(ui->hideScriptsButton, &QPushButton::clicked, this, &ImportEntry::useHideScriptsButtonClicked);\n+            connect(ui->deleteMultiButton, &QPushButton::clicked, this, &ImportEntry::deleteMultiClicked);\n+\n+            ui->redeemScriptLabel->hide();\n+            ui->redeemScript->hide();\n+            ui->witnessScriptLabel->hide();\n+            ui->witnessScript->hide();\n+            ui->descLabelMulti->hide();\n+            ui->descMulti->hide();\n+\n+            ui->timestampMulti->setValidator(new Int64_tValidator(0, 0x7FFFFFFFFFFFFFFF, this));\n+            ui->startRangeMulti->setRange(0, 0x7FFFFFFF);\n+            ui->endRangeMulti->setRange(0, 0x7FFFFFFF);\n+            connect(ui->checkboxInternalMulti, &QCheckBox::clicked, this, &ImportEntry::hideLabel);\n+            break;\n+        } case importDescriptorsEntry: {\n+            setCurrentWidget(ui->importDescriptorsEntry);\n+            ui->nextIndexLabel->hide();\n+            ui->hiddenMenu->hide();\n+            ui->timestamp->setValidator(new Int64_tValidator(0, 0x7FFFFFFFFFFFFFFF, this));\n+            ui->nextIndex->setRange(0, 0x7FFFFFFF);\n+            ui->startRange->setRange(0, 0x7FFFFFFF);\n+            ui->endRange->setRange(0, 0x7FFFFFFF);\n+            connect(ui->hiddenButton, &QPushButton::clicked, this, &ImportEntry::usehiddenButtonClicked);\n+            connect(ui->deleteDescriptorButton, &QPushButton::clicked, this, &ImportEntry::deleteDescriptorClicked);\n+            connect(ui->checkboxInternal, &QCheckBox::clicked, this, &ImportEntry::hideLabelDesc);\n+            break;\n+        }\n+    }\n+}\n+\n+ImportEntry::~ImportEntry()\n+{\n+    delete ui;\n+}\n+\n+void ImportEntry::setModel(WalletModel *_model)\n+{\n+    this->model = _model;\n+}\n+\n+void ImportEntry::usehiddenButtonClicked()\n+{\n+    if (!hiddenButtonState) {\n+        ui->nextIndexLabel->show();\n+        ui->hiddenMenu->show();\n+        hiddenButtonState = true;\n+        ui->hiddenButton->setText(\"△\");\n+    } else {\n+        ui->nextIndexLabel->hide();\n+        ui->hiddenMenu->hide();\n+        hiddenButtonState = false;\n+        ui->hiddenButton->setText(\"▽\");\n+    }\n+}\n+\n+void ImportEntry::useHideScriptsButtonClicked()\n+{\n+    if (!hideScriptsButtonState) {\n+        ui->redeemScriptLabel->show();\n+        ui->redeemScript->show();\n+\n+        ui->witnessScriptLabel->show();\n+        ui->witnessScript->show();\n+        hideScriptsButtonState = true;\n+        ui->hideScriptsButton->setText(\"△\");\n+    } else {\n+        ui->redeemScriptLabel->hide();\n+        ui->redeemScript->hide();\n+\n+        ui->witnessScriptLabel->hide();\n+        ui->witnessScript->hide();\n+        hideScriptsButtonState = false;\n+        ui->hideScriptsButton->setText(\"▽\");\n+    }\n+}\n+\n+void ImportEntry::hideLabel()\n+{\n+    if (ui->checkboxInternalMulti->isChecked()) {\n+        ui->labelLabelMulti->hide();\n+        ui->labelMulti->hide();\n+    } else {\n+        ui->labelLabelMulti->show();\n+        ui->labelMulti->show();\n+    }\n+}\n+\n+void ImportEntry::hideLabelDesc()\n+{\n+    if (ui->checkboxInternal->isChecked()) {\n+        ui->labelLabel->hide();\n+        ui->label->hide();\n+    } else {\n+        ui->labelLabel->show();\n+        ui->label->show();\n+    }\n+}\n+\n+void ImportEntry::changeImportDialog()\n+{\n+    if (ui->importScriptPubKeyRadio->isChecked()) {\n+        ui->scriptPubKeyLabel->show();\n+        ui->scriptPubKey->show();\n+        ui->hideScriptsButton->show();\n+\n+        ui->redeemScriptLabel->hide();\n+        ui->redeemScript->hide();\n+\n+        ui->witnessScriptLabel->hide();\n+        ui->witnessScript->hide();\n+\n+        ui->publicKeyLabel->show();\n+        ui->publicKey->show();\n+\n+        ui->descLabelMulti->hide();\n+        ui->descMulti->hide();\n+    } else {\n+        ui->scriptPubKeyLabel->hide();\n+        ui->scriptPubKey->hide();\n+        ui->hideScriptsButton->hide();\n+\n+        ui->redeemScriptLabel->hide();\n+        ui->redeemScript->hide();\n+\n+        ui->witnessScriptLabel->hide();\n+        ui->witnessScript->hide();\n+\n+        ui->publicKeyLabel->hide();\n+        ui->publicKey->hide();\n+        ui->descLabelMulti->show();\n+        ui->descMulti->show();\n+    }\n+}\n+\n+wallet::ImportMultiData ImportEntry::getMultiData()\n+{\n+    wallet::ImportMultiData multiData;\n+\n+    if (ui->importScriptPubKeyRadio->isChecked()) {\n+        multiData.scriptPubKey = ui->scriptPubKey->text().toStdString();\n+        multiData.redeem_script = ui->redeemScript->text().toStdString();\n+        multiData.witness_script = ui->witnessScript->text().toStdString();\n+        multiData.pubkeys = SplitString(ui->publicKey->text().toStdString(), ',');",
      "path": "src/qt/importentry.cpp",
      "position": null,
      "original_position": 180,
      "commit_id": "b2b00af1d37dd69c3e64d905984e68ac6a6b2d8f",
      "original_commit_id": "46fea2598202b093c2035276b232e0f94c7e869f",
      "in_reply_to_id": null,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In c71f418f18000f537871f57a42ec76e0a25941e9 \"qt: implemented importmulti and importdescriptors GUI's\"\r\n\r\nIt looks like this is getting empty strings when no pubkeys are specified. This should check that the text is not empty.\r\n\r\nSimilar deal with the private keys.\r\n\r\n```suggestion\r\n        if (!ui->publicKey->text().isEmpty()) {\r\n            multiData.pubkeys = SplitString(ui->publicKey->text().toStdString(), ',');\r\n        }\r\n```",
      "created_at": "2022-08-08T20:48:23Z",
      "updated_at": "2022-08-08T20:56:15Z",
      "html_url": "https://github.com/bitcoin-core/gui/pull/650#discussion_r940650877",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/gui/pulls/comments/940650877"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/gui/pulls/650"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 180,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/gui/pulls/comments/940654567",
      "pull_request_review_id": 1065661283,
      "id": 940654567,
      "node_id": "PRRC_kwDOEEET9c44ET_n",
      "diff_hunk": "@@ -298,5 +344,377 @@ void ImportDialog::on_Accept_clicked() {\n             }\n             break;\n         }\n+        case importMulti: {\n+            bool fRescan = true;\n+            if (!ui->rescanButtonIA->isChecked())\n+                fRescan = false;\n+\n+            if (fRescan && walletModel->wallet().chain().havePruned()) {\n+                // Exit early and print an error.\n+                // If a block is pruned after this check, we will import the key(s),\n+                // but fail the rescan with a generic error.\n+                QMessageBox::critical(this, tr(\"Rescan failed\"), tr(\"Rescan is disabled when blocks are pruned\"));\n+                break;\n+            }\n+\n+            wallet::WalletRescanReserver reserver = walletModel->wallet().getReserver();\n+            if (fRescan && !reserver.reserve()) {\n+                QMessageBox::critical(this, tr(\"Rescan failed\"),\n+                                      tr(\"Wallet is currently rescanning. Abort existing rescan or wait.\"));\n+                break;\n+            }",
      "path": "src/qt/importdialog.cpp",
      "position": null,
      "original_position": 95,
      "commit_id": "b2b00af1d37dd69c3e64d905984e68ac6a6b2d8f",
      "original_commit_id": "46fea2598202b093c2035276b232e0f94c7e869f",
      "in_reply_to_id": null,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In c71f418f18000f537871f57a42ec76e0a25941e9 \"qt: implemented importmulti and importdescriptors GUI's\"\r\n\r\nThis rescan check boilerplate could be deduplicated and placed at the top of the function. Since some of this is not checked for some of the imports, you can guard it with an `if` that checks the enum to determine whether the check should occur.",
      "created_at": "2022-08-08T20:53:11Z",
      "updated_at": "2022-08-08T20:56:15Z",
      "html_url": "https://github.com/bitcoin-core/gui/pull/650#discussion_r940654567",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/gui/pulls/comments/940654567"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/gui/pulls/650"
        }
      },
      "start_line": null,
      "original_start_line": 348,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 301,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/gui/pulls/comments/940655561",
      "pull_request_review_id": 1065661283,
      "id": 940655561,
      "node_id": "PRRC_kwDOEEET9c44EUPJ",
      "diff_hunk": "@@ -0,0 +1,302 @@\n+#include <qt/importdialog.h>\n+#include <qt/forms/ui_importdialog.h>\n+\n+#include <qt/guiconstants.h>\n+#include <qt/guiutil.h>\n+#include <key_io.h>\n+#include <qt/walletmodel.h>\n+#include <interfaces/node.h>\n+#include <wallet/wallet.h>\n+#include <QKeyEvent>\n+#include <QMessageBox>\n+#include <QPushButton>\n+#include <iostream>\n+#include <QScrollBar>\n+#include <tinyformat.h>\n+#include <chain.h>\n+\n+ImportDialog::ImportDialog(Page _page, QWidget *parent, WalletModel *walletModel) :\n+    QDialog(parent, GUIUtil::dialog_flags),\n+    ui(new Ui::ImportDialog),\n+    walletModel(walletModel),\n+    page(_page)\n+{\n+    ui->setupUi(this);\n+\n+    switch (page) {\n+        case importPubkey: {\n+            ui->QStackContainer->setCurrentWidget(ui->importKeyPage);\n+            this->setWindowTitle(\"Import Public Key\");\n+            ui->keyLabelIKP->setText(\"Public Key\");\n+            ui->keyEditIKP->setPlaceholderText(\"Enter a Public Key (e.g. 1NS17iag9jJgTHDlVXjvLCEnZuQ3rJDE9L)\");\n+            ui->rescanButtonIKP->setCheckState(Qt::Checked);\n+            break;\n+        } case importPrivkey: {\n+            ui->QStackContainer->setCurrentWidget(ui->importKeyPage);\n+            this->setWindowTitle(\"Import Private Key\");\n+            ui->keyLabelIKP->setText(\"Private Key\");\n+            ui->keyEditIKP->setPlaceholderText(\"Enter a Private Key (e.g. L4sTHokqoFZpcmJgsAG2yxrf2f71v6PYpK2qEkCvc2Fp8VVdMiU3)\");\n+            ui->rescanButtonIKP->setCheckState(Qt::Checked);\n+            break;\n+        } case importAddress: {\n+            ui->QStackContainer->setCurrentWidget(ui->importAddress);\n+            this->setWindowTitle(\"Import Address\");\n+            ui->rescanButtonIA->setCheckState(Qt::Checked);\n+            ui->p2shButtonIA->setCheckState(Qt::Unchecked);\n+            break;\n+        }\n+    }\n+\n+    GUIUtil::handleCloseWindowShortcut(this);\n+}\n+\n+ImportDialog::~ImportDialog()\n+{\n+    delete ui;\n+}\n+\n+void ImportDialog::on_Accept_clicked() {\n+    switch (page) {\n+        case importPubkey: {\n+            std::string strKey = \"\";\n+            strKey.assign(ui->keyEditIKP->text().toStdString().c_str());\n+\n+            if (strKey.empty()) {\n+                QMessageBox::warning(this, tr(\"Error\"), tr(\"Key is empty\"));\n+                break;\n+            }\n+\n+            std::string strLabel;\n+            strLabel.assign(ui->labelEditIKP->text().toStdString().c_str());\n+\n+            // Whether to perform rescan after import\n+            bool fRescan = true;\n+            if (!ui->rescanButtonIKP->isChecked())\n+                fRescan = false;\n+\n+            if (fRescan && walletModel->wallet().chain().havePruned()) {\n+                // Exit early and print an error.\n+                // If a block is pruned after this check, we will import the key(s),\n+                // but fail the rescan with a generic error.\n+                QMessageBox::critical(this, tr(\"Rescan failed\"), tr(\"Rescan is disabled when blocks are pruned\"));\n+                break;\n+            }\n+\n+\n+            wallet::WalletRescanReserver reserver = walletModel->wallet().getReserver();\n+            if (fRescan && !reserver.reserve()) {\n+                QMessageBox::critical(this, tr(\"Rescan failed\"),\n+                                      tr(\"Wallet is currently rescanning. Abort existing rescan or wait.\"));\n+                break;\n+            }\n+\n+            if (!IsHex(strKey)) {\n+                QMessageBox::critical(this, tr(\"Invalid Public Key\"), tr(\"Pubkey must be a hex string\"));\n+                break;\n+            }\n+\n+            std::vector<unsigned char> data(ParseHex(strKey));\n+            CPubKey pubKey(data);\n+            if (!pubKey.IsFullyValid()) {\n+                QMessageBox::critical(this, tr(\"Invalid Public Key\"),\n+                                      tr(\"Pubkey is not a valid public key\"));\n+                break;\n+            }\n+\n+            std::set<CScript> script_pub_keys;\n+            for (const auto &dest: GetAllDestinationsForKey(pubKey)) {\n+                script_pub_keys.insert(GetScriptForDestination(dest));\n+            }\n+\n+            walletModel->wallet().MarkDirty();\n+            walletModel->wallet().ImportScriptPubKeys(strLabel, script_pub_keys, true, true, 1);\n+            walletModel->wallet().ImportPubKeys({pubKey.GetID()}, {{pubKey.GetID(), pubKey}}, {}, false, false, 1);\n+\n+            if (fRescan) {\n+                int64_t scanned_time = walletModel->wallet().RescanFromTime(0, reserver, true);\n+                if (walletModel->wallet().IsAbortingRescan()) {\n+                    QMessageBox::critical(this, tr(\"Misc Error\"), tr(\"Rescan aborted by user.\"));\n+                    break;\n+                } else if (scanned_time > 0) {\n+                    QMessageBox::critical(this, tr(\"Wallet Error\"),\n+                                          tr(\"Rescan was unable to fully rescan the blockchain. Some transactions may be missing.\"));\n+                    break;\n+                }\n+                walletModel->wallet().ReacceptWalletTransactions();\n+            }\n+            break;\n+        }\n+        case importPrivkey: {\n+            wallet::WalletRescanReserver reserver = walletModel->wallet().getReserver();\n+            bool fRescan = true;\n+            WalletModel::UnlockContext ctx(walletModel->requestUnlock());\n+            if (!ctx.isValid()) {\n+                break;\n+            }\n+\n+            std::string strSecret = \"\";\n+            strSecret.assign(ui->keyEditIKP->text().toStdString().c_str());\n+            if (strSecret.empty()) {\n+                QMessageBox::warning(this, tr(\"Error\"), tr(\"Key is empty\"));\n+                break;\n+            }\n+\n+            std::string strLabel = \"\";\n+            strLabel.assign(ui->labelEditIKP->text().toStdString().c_str());",
      "path": "src/qt/importdialog.cpp",
      "position": null,
      "original_position": 145,
      "commit_id": "b2b00af1d37dd69c3e64d905984e68ac6a6b2d8f",
      "original_commit_id": "8551f8473549d9e8e415e47a668002c9b61aec46",
      "in_reply_to_id": null,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In 3a75af09dbb6c182a86ce71b15fe0824d3c68ac5 \"qt: implemented importpubkey, importprivkey, and importaddress GUI's\"\r\n\r\nFetching the key and label are things that are shared for the pubkey, address, and privkey imports. This could also be deuplicated and placed at the top of the function, with the extraction of the text done only if the enum matches one of these three.",
      "created_at": "2022-08-08T20:54:31Z",
      "updated_at": "2022-08-08T20:56:15Z",
      "html_url": "https://github.com/bitcoin-core/gui/pull/650#discussion_r940655561",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/gui/pulls/comments/940655561"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/gui/pulls/650"
        }
      },
      "start_line": null,
      "original_start_line": 137,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 191,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/gui/pulls/comments/941899877",
      "pull_request_review_id": 1067511572,
      "id": 941899877,
      "node_id": "PRRC_kwDOEEET9c44JEBl",
      "diff_hunk": "@@ -1375,7 +975,102 @@ RPCHelpMan importmulti()\n \n         for (const UniValue& data : requests.getValues()) {\n             const int64_t timestamp = std::max(GetImportTimestamp(data, now), minimumTimestamp);\n-            const UniValue result = ProcessImport(*pwallet, data, timestamp);\n+            ImportMultiData multi_data = {};",
      "path": "src/wallet/rpc/backup.cpp",
      "position": null,
      "original_position": 421,
      "commit_id": "b2b00af1d37dd69c3e64d905984e68ac6a6b2d8f",
      "original_commit_id": "f718e24693f4d322d2a82d6f1f8f6d4add98c415",
      "in_reply_to_id": 940572988,
      "user": {
        "login": "KolbyML",
        "id": 31669092,
        "node_id": "MDQ6VXNlcjMxNjY5MDky",
        "avatar_url": "https://avatars.githubusercontent.com/u/31669092?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/KolbyML",
        "html_url": "https://github.com/KolbyML",
        "followers_url": "https://api.github.com/users/KolbyML/followers",
        "following_url": "https://api.github.com/users/KolbyML/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/KolbyML/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/KolbyML/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/KolbyML/subscriptions",
        "organizations_url": "https://api.github.com/users/KolbyML/orgs",
        "repos_url": "https://api.github.com/users/KolbyML/repos",
        "events_url": "https://api.github.com/users/KolbyML/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/KolbyML/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "done",
      "created_at": "2022-08-10T00:07:20Z",
      "updated_at": "2022-08-10T00:07:20Z",
      "html_url": "https://github.com/bitcoin-core/gui/pull/650#discussion_r941899877",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/gui/pulls/comments/941899877"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/gui/pulls/650"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 928,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/gui/pulls/comments/941900800",
      "pull_request_review_id": 1067512667,
      "id": 941900800,
      "node_id": "PRRC_kwDOEEET9c44JEQA",
      "diff_hunk": "@@ -1375,7 +975,102 @@ RPCHelpMan importmulti()\n \n         for (const UniValue& data : requests.getValues()) {\n             const int64_t timestamp = std::max(GetImportTimestamp(data, now), minimumTimestamp);\n-            const UniValue result = ProcessImport(*pwallet, data, timestamp);\n+            ImportMultiData multi_data = {};\n+            std::vector<std::string> warnings;\n+            UniValue result(UniValue::VOBJ);\n+            try {\n+                multi_data.internal = data.exists(\"internal\") ? data[\"internal\"].get_bool() : false;\n+                // Internal addresses should not have a label\n+                if (multi_data.internal && data.exists(\"label\")) {\n+                    throw InvalidParameter(\"Internal addresses should not have a label\");\n+                }\n+                multi_data.label = data.exists(\"label\") ? data[\"label\"].get_str() : \"\";\n+                multi_data.keypool = data.exists(\"keypool\") ? data[\"keypool\"].get_bool() : false;\n+\n+                multi_data.watch_only = data.exists(\"watchonly\") ? data[\"watchonly\"].get_bool() : false;\n+\n+                multi_data.keys = {};",
      "path": "src/wallet/rpc/backup.cpp",
      "position": null,
      "original_position": 435,
      "commit_id": "b2b00af1d37dd69c3e64d905984e68ac6a6b2d8f",
      "original_commit_id": "f718e24693f4d322d2a82d6f1f8f6d4add98c415",
      "in_reply_to_id": 940574619,
      "user": {
        "login": "KolbyML",
        "id": 31669092,
        "node_id": "MDQ6VXNlcjMxNjY5MDky",
        "avatar_url": "https://avatars.githubusercontent.com/u/31669092?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/KolbyML",
        "html_url": "https://github.com/KolbyML",
        "followers_url": "https://api.github.com/users/KolbyML/followers",
        "following_url": "https://api.github.com/users/KolbyML/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/KolbyML/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/KolbyML/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/KolbyML/subscriptions",
        "organizations_url": "https://api.github.com/users/KolbyML/orgs",
        "repos_url": "https://api.github.com/users/KolbyML/repos",
        "events_url": "https://api.github.com/users/KolbyML/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/KolbyML/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "done",
      "created_at": "2022-08-10T00:09:34Z",
      "updated_at": "2022-08-10T00:09:34Z",
      "html_url": "https://github.com/bitcoin-core/gui/pull/650#discussion_r941900800",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/gui/pulls/comments/941900800"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/gui/pulls/650"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 942,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/gui/pulls/comments/941900854",
      "pull_request_review_id": 1067512740,
      "id": 941900854,
      "node_id": "PRRC_kwDOEEET9c44JEQ2",
      "diff_hunk": "@@ -1375,7 +975,102 @@ RPCHelpMan importmulti()\n \n         for (const UniValue& data : requests.getValues()) {\n             const int64_t timestamp = std::max(GetImportTimestamp(data, now), minimumTimestamp);\n-            const UniValue result = ProcessImport(*pwallet, data, timestamp);\n+            ImportMultiData multi_data = {};\n+            std::vector<std::string> warnings;\n+            UniValue result(UniValue::VOBJ);\n+            try {\n+                multi_data.internal = data.exists(\"internal\") ? data[\"internal\"].get_bool() : false;\n+                // Internal addresses should not have a label\n+                if (multi_data.internal && data.exists(\"label\")) {\n+                    throw InvalidParameter(\"Internal addresses should not have a label\");\n+                }\n+                multi_data.label = data.exists(\"label\") ? data[\"label\"].get_str() : \"\";\n+                multi_data.keypool = data.exists(\"keypool\") ? data[\"keypool\"].get_bool() : false;\n+\n+                multi_data.watch_only = data.exists(\"watchonly\") ? data[\"watchonly\"].get_bool() : false;\n+\n+                multi_data.keys = {};\n+                if (data.exists(\"keys\"))\n+                    for (size_t i = 0; i < data[\"keys\"].get_array().size(); ++i)\n+                        multi_data.keys.push_back(data[\"keys\"].get_array()[i].get_str());\n+\n+                bool isScript;\n+                FlatSigningProvider keys;\n+                bool range_exists = false;\n+                if (data.exists(\"scriptPubKey\") && data.exists(\"desc\")) {\n+                    throw InvalidParameter(\"Both a descriptor and a scriptPubKey should not be provided.\");\n+                } else if (data.exists(\"scriptPubKey\")) {\n+\n+                    // First ensure scriptPubKey has either a script or JSON with \"address\" string\n+                    const UniValue& scriptPubKey = data[\"scriptPubKey\"];\n+                    isScript = scriptPubKey.getType() == UniValue::VSTR;\n+                    if (!isScript && !(scriptPubKey.getType() == UniValue::VOBJ && scriptPubKey.exists(\"address\"))) {\n+                        throw InvalidParameter(\"scriptPubKey must be string with script or JSON with address string\");\n+                    }\n+                    multi_data.scriptPubKey = isScript ? scriptPubKey.get_str() : scriptPubKey[\"address\"].get_str();\n+\n+                    // Optional fields.\n+                    multi_data.redeem_script = data.exists(\"redeemscript\") ? data[\"redeemscript\"].get_str() : \"\";\n+                    multi_data.witness_script = data.exists(\"witnessscript\") ? data[\"witnessscript\"].get_str() : \"\";\n+                    multi_data.pubkeys = {};",
      "path": "src/wallet/rpc/backup.cpp",
      "position": null,
      "original_position": 458,
      "commit_id": "b2b00af1d37dd69c3e64d905984e68ac6a6b2d8f",
      "original_commit_id": "f718e24693f4d322d2a82d6f1f8f6d4add98c415",
      "in_reply_to_id": 940576350,
      "user": {
        "login": "KolbyML",
        "id": 31669092,
        "node_id": "MDQ6VXNlcjMxNjY5MDky",
        "avatar_url": "https://avatars.githubusercontent.com/u/31669092?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/KolbyML",
        "html_url": "https://github.com/KolbyML",
        "followers_url": "https://api.github.com/users/KolbyML/followers",
        "following_url": "https://api.github.com/users/KolbyML/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/KolbyML/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/KolbyML/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/KolbyML/subscriptions",
        "organizations_url": "https://api.github.com/users/KolbyML/orgs",
        "repos_url": "https://api.github.com/users/KolbyML/repos",
        "events_url": "https://api.github.com/users/KolbyML/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/KolbyML/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "done",
      "created_at": "2022-08-10T00:09:43Z",
      "updated_at": "2022-08-10T00:09:43Z",
      "html_url": "https://github.com/bitcoin-core/gui/pull/650#discussion_r941900854",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/gui/pulls/comments/941900854"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/gui/pulls/650"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 964,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/gui/pulls/comments/941901238",
      "pull_request_review_id": 1067513221,
      "id": 941901238,
      "node_id": "PRRC_kwDOEEET9c44JEW2",
      "diff_hunk": "@@ -1375,7 +975,102 @@ RPCHelpMan importmulti()\n \n         for (const UniValue& data : requests.getValues()) {\n             const int64_t timestamp = std::max(GetImportTimestamp(data, now), minimumTimestamp);\n-            const UniValue result = ProcessImport(*pwallet, data, timestamp);\n+            ImportMultiData multi_data = {};\n+            std::vector<std::string> warnings;\n+            UniValue result(UniValue::VOBJ);\n+            try {\n+                multi_data.internal = data.exists(\"internal\") ? data[\"internal\"].get_bool() : false;\n+                // Internal addresses should not have a label\n+                if (multi_data.internal && data.exists(\"label\")) {\n+                    throw InvalidParameter(\"Internal addresses should not have a label\");\n+                }\n+                multi_data.label = data.exists(\"label\") ? data[\"label\"].get_str() : \"\";\n+                multi_data.keypool = data.exists(\"keypool\") ? data[\"keypool\"].get_bool() : false;\n+\n+                multi_data.watch_only = data.exists(\"watchonly\") ? data[\"watchonly\"].get_bool() : false;\n+\n+                multi_data.keys = {};\n+                if (data.exists(\"keys\"))\n+                    for (size_t i = 0; i < data[\"keys\"].get_array().size(); ++i)\n+                        multi_data.keys.push_back(data[\"keys\"].get_array()[i].get_str());\n+\n+                bool isScript;\n+                FlatSigningProvider keys;\n+                bool range_exists = false;",
      "path": "src/wallet/rpc/backup.cpp",
      "position": null,
      "original_position": 442,
      "commit_id": "b2b00af1d37dd69c3e64d905984e68ac6a6b2d8f",
      "original_commit_id": "f718e24693f4d322d2a82d6f1f8f6d4add98c415",
      "in_reply_to_id": 940584339,
      "user": {
        "login": "KolbyML",
        "id": 31669092,
        "node_id": "MDQ6VXNlcjMxNjY5MDky",
        "avatar_url": "https://avatars.githubusercontent.com/u/31669092?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/KolbyML",
        "html_url": "https://github.com/KolbyML",
        "followers_url": "https://api.github.com/users/KolbyML/followers",
        "following_url": "https://api.github.com/users/KolbyML/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/KolbyML/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/KolbyML/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/KolbyML/subscriptions",
        "organizations_url": "https://api.github.com/users/KolbyML/orgs",
        "repos_url": "https://api.github.com/users/KolbyML/repos",
        "events_url": "https://api.github.com/users/KolbyML/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/KolbyML/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "done",
      "created_at": "2022-08-10T00:10:45Z",
      "updated_at": "2022-08-10T00:10:45Z",
      "html_url": "https://github.com/bitcoin-core/gui/pull/650#discussion_r941901238",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/gui/pulls/comments/941901238"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/gui/pulls/650"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 999,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/gui/pulls/comments/941903000",
      "pull_request_review_id": 1067515285,
      "id": 941903000,
      "node_id": "PRRC_kwDOEEET9c44JEyY",
      "diff_hunk": "@@ -0,0 +1,302 @@\n+#include <qt/importdialog.h>\n+#include <qt/forms/ui_importdialog.h>\n+\n+#include <qt/guiconstants.h>\n+#include <qt/guiutil.h>\n+#include <key_io.h>\n+#include <qt/walletmodel.h>\n+#include <interfaces/node.h>\n+#include <wallet/wallet.h>\n+#include <QKeyEvent>\n+#include <QMessageBox>\n+#include <QPushButton>\n+#include <iostream>\n+#include <QScrollBar>\n+#include <tinyformat.h>\n+#include <chain.h>\n+\n+ImportDialog::ImportDialog(Page _page, QWidget *parent, WalletModel *walletModel) :\n+    QDialog(parent, GUIUtil::dialog_flags),\n+    ui(new Ui::ImportDialog),\n+    walletModel(walletModel),\n+    page(_page)\n+{\n+    ui->setupUi(this);\n+\n+    switch (page) {\n+        case importPubkey: {\n+            ui->QStackContainer->setCurrentWidget(ui->importKeyPage);\n+            this->setWindowTitle(\"Import Public Key\");\n+            ui->keyLabelIKP->setText(\"Public Key\");\n+            ui->keyEditIKP->setPlaceholderText(\"Enter a Public Key (e.g. 1NS17iag9jJgTHDlVXjvLCEnZuQ3rJDE9L)\");\n+            ui->rescanButtonIKP->setCheckState(Qt::Checked);\n+            break;\n+        } case importPrivkey: {\n+            ui->QStackContainer->setCurrentWidget(ui->importKeyPage);\n+            this->setWindowTitle(\"Import Private Key\");\n+            ui->keyLabelIKP->setText(\"Private Key\");\n+            ui->keyEditIKP->setPlaceholderText(\"Enter a Private Key (e.g. L4sTHokqoFZpcmJgsAG2yxrf2f71v6PYpK2qEkCvc2Fp8VVdMiU3)\");\n+            ui->rescanButtonIKP->setCheckState(Qt::Checked);\n+            break;\n+        } case importAddress: {\n+            ui->QStackContainer->setCurrentWidget(ui->importAddress);\n+            this->setWindowTitle(\"Import Address\");\n+            ui->rescanButtonIA->setCheckState(Qt::Checked);\n+            ui->p2shButtonIA->setCheckState(Qt::Unchecked);\n+            break;\n+        }\n+    }\n+\n+    GUIUtil::handleCloseWindowShortcut(this);\n+}\n+\n+ImportDialog::~ImportDialog()\n+{\n+    delete ui;\n+}\n+\n+void ImportDialog::on_Accept_clicked() {\n+    switch (page) {\n+        case importPubkey: {\n+            std::string strKey = \"\";\n+            strKey.assign(ui->keyEditIKP->text().toStdString().c_str());",
      "path": "src/qt/importdialog.cpp",
      "position": null,
      "original_position": 62,
      "commit_id": "b2b00af1d37dd69c3e64d905984e68ac6a6b2d8f",
      "original_commit_id": "3a75af09dbb6c182a86ce71b15fe0824d3c68ac5",
      "in_reply_to_id": 940616219,
      "user": {
        "login": "KolbyML",
        "id": 31669092,
        "node_id": "MDQ6VXNlcjMxNjY5MDky",
        "avatar_url": "https://avatars.githubusercontent.com/u/31669092?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/KolbyML",
        "html_url": "https://github.com/KolbyML",
        "followers_url": "https://api.github.com/users/KolbyML/followers",
        "following_url": "https://api.github.com/users/KolbyML/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/KolbyML/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/KolbyML/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/KolbyML/subscriptions",
        "organizations_url": "https://api.github.com/users/KolbyML/orgs",
        "repos_url": "https://api.github.com/users/KolbyML/repos",
        "events_url": "https://api.github.com/users/KolbyML/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/KolbyML/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "done",
      "created_at": "2022-08-10T00:15:22Z",
      "updated_at": "2022-08-10T00:15:22Z",
      "html_url": "https://github.com/bitcoin-core/gui/pull/650#discussion_r941903000",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/gui/pulls/comments/941903000"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/gui/pulls/650"
        }
      },
      "start_line": null,
      "original_start_line": 61,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 108,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/gui/pulls/comments/941903095",
      "pull_request_review_id": 1067515377,
      "id": 941903095,
      "node_id": "PRRC_kwDOEEET9c44JEz3",
      "diff_hunk": "@@ -0,0 +1,302 @@\n+#include <qt/importdialog.h>\n+#include <qt/forms/ui_importdialog.h>\n+\n+#include <qt/guiconstants.h>\n+#include <qt/guiutil.h>\n+#include <key_io.h>\n+#include <qt/walletmodel.h>\n+#include <interfaces/node.h>\n+#include <wallet/wallet.h>\n+#include <QKeyEvent>\n+#include <QMessageBox>\n+#include <QPushButton>\n+#include <iostream>\n+#include <QScrollBar>\n+#include <tinyformat.h>\n+#include <chain.h>\n+\n+ImportDialog::ImportDialog(Page _page, QWidget *parent, WalletModel *walletModel) :\n+    QDialog(parent, GUIUtil::dialog_flags),\n+    ui(new Ui::ImportDialog),\n+    walletModel(walletModel),\n+    page(_page)\n+{\n+    ui->setupUi(this);\n+\n+    switch (page) {\n+        case importPubkey: {\n+            ui->QStackContainer->setCurrentWidget(ui->importKeyPage);\n+            this->setWindowTitle(\"Import Public Key\");\n+            ui->keyLabelIKP->setText(\"Public Key\");\n+            ui->keyEditIKP->setPlaceholderText(\"Enter a Public Key (e.g. 1NS17iag9jJgTHDlVXjvLCEnZuQ3rJDE9L)\");\n+            ui->rescanButtonIKP->setCheckState(Qt::Checked);\n+            break;\n+        } case importPrivkey: {\n+            ui->QStackContainer->setCurrentWidget(ui->importKeyPage);\n+            this->setWindowTitle(\"Import Private Key\");\n+            ui->keyLabelIKP->setText(\"Private Key\");\n+            ui->keyEditIKP->setPlaceholderText(\"Enter a Private Key (e.g. L4sTHokqoFZpcmJgsAG2yxrf2f71v6PYpK2qEkCvc2Fp8VVdMiU3)\");\n+            ui->rescanButtonIKP->setCheckState(Qt::Checked);\n+            break;\n+        } case importAddress: {\n+            ui->QStackContainer->setCurrentWidget(ui->importAddress);\n+            this->setWindowTitle(\"Import Address\");\n+            ui->rescanButtonIA->setCheckState(Qt::Checked);\n+            ui->p2shButtonIA->setCheckState(Qt::Unchecked);\n+            break;\n+        }\n+    }\n+\n+    GUIUtil::handleCloseWindowShortcut(this);\n+}\n+\n+ImportDialog::~ImportDialog()\n+{\n+    delete ui;\n+}\n+\n+void ImportDialog::on_Accept_clicked() {\n+    switch (page) {\n+        case importPubkey: {\n+            std::string strKey = \"\";\n+            strKey.assign(ui->keyEditIKP->text().toStdString().c_str());\n+\n+            if (strKey.empty()) {\n+                QMessageBox::warning(this, tr(\"Error\"), tr(\"Key is empty\"));\n+                break;\n+            }\n+\n+            std::string strLabel;\n+            strLabel.assign(ui->labelEditIKP->text().toStdString().c_str());",
      "path": "src/qt/importdialog.cpp",
      "position": null,
      "original_position": 70,
      "commit_id": "b2b00af1d37dd69c3e64d905984e68ac6a6b2d8f",
      "original_commit_id": "3a75af09dbb6c182a86ce71b15fe0824d3c68ac5",
      "in_reply_to_id": 940616656,
      "user": {
        "login": "KolbyML",
        "id": 31669092,
        "node_id": "MDQ6VXNlcjMxNjY5MDky",
        "avatar_url": "https://avatars.githubusercontent.com/u/31669092?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/KolbyML",
        "html_url": "https://github.com/KolbyML",
        "followers_url": "https://api.github.com/users/KolbyML/followers",
        "following_url": "https://api.github.com/users/KolbyML/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/KolbyML/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/KolbyML/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/KolbyML/subscriptions",
        "organizations_url": "https://api.github.com/users/KolbyML/orgs",
        "repos_url": "https://api.github.com/users/KolbyML/repos",
        "events_url": "https://api.github.com/users/KolbyML/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/KolbyML/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "done",
      "created_at": "2022-08-10T00:15:33Z",
      "updated_at": "2022-08-10T00:15:33Z",
      "html_url": "https://github.com/bitcoin-core/gui/pull/650#discussion_r941903095",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/gui/pulls/comments/941903095"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/gui/pulls/650"
        }
      },
      "start_line": null,
      "original_start_line": 69,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 116,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/gui/pulls/comments/941903298",
      "pull_request_review_id": 1067515579,
      "id": 941903298,
      "node_id": "PRRC_kwDOEEET9c44JE3C",
      "diff_hunk": "@@ -298,5 +344,377 @@ void ImportDialog::on_Accept_clicked() {\n             }\n             break;\n         }\n+        case importMulti: {\n+            bool fRescan = true;\n+            if (!ui->rescanButtonIA->isChecked())\n+                fRescan = false;\n+\n+            if (fRescan && walletModel->wallet().chain().havePruned()) {\n+                // Exit early and print an error.\n+                // If a block is pruned after this check, we will import the key(s),\n+                // but fail the rescan with a generic error.\n+                QMessageBox::critical(this, tr(\"Rescan failed\"), tr(\"Rescan is disabled when blocks are pruned\"));\n+                break;\n+            }\n+\n+            wallet::WalletRescanReserver reserver = walletModel->wallet().getReserver();\n+            if (fRescan && !reserver.reserve()) {\n+                QMessageBox::critical(this, tr(\"Rescan failed\"),\n+                                      tr(\"Wallet is currently rescanning. Abort existing rescan or wait.\"));\n+                break;\n+            }\n+\n+            int64_t now = 0;\n+            bool fRunScan = false;\n+            int64_t nLowestTimestamp = 0;\n+            std::vector<resultpdi> response = {};",
      "path": "src/qt/importdialog.cpp",
      "position": null,
      "original_position": 100,
      "commit_id": "b2b00af1d37dd69c3e64d905984e68ac6a6b2d8f",
      "original_commit_id": "c71f418f18000f537871f57a42ec76e0a25941e9",
      "in_reply_to_id": 940621024,
      "user": {
        "login": "KolbyML",
        "id": 31669092,
        "node_id": "MDQ6VXNlcjMxNjY5MDky",
        "avatar_url": "https://avatars.githubusercontent.com/u/31669092?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/KolbyML",
        "html_url": "https://github.com/KolbyML",
        "followers_url": "https://api.github.com/users/KolbyML/followers",
        "following_url": "https://api.github.com/users/KolbyML/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/KolbyML/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/KolbyML/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/KolbyML/subscriptions",
        "organizations_url": "https://api.github.com/users/KolbyML/orgs",
        "repos_url": "https://api.github.com/users/KolbyML/repos",
        "events_url": "https://api.github.com/users/KolbyML/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/KolbyML/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "done",
      "created_at": "2022-08-10T00:16:00Z",
      "updated_at": "2022-08-10T00:16:00Z",
      "html_url": "https://github.com/bitcoin-core/gui/pull/650#discussion_r941903298",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/gui/pulls/comments/941903298"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/gui/pulls/650"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 370,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/gui/pulls/comments/941908790",
      "pull_request_review_id": 1067522219,
      "id": 941908790,
      "node_id": "PRRC_kwDOEEET9c44JGM2",
      "diff_hunk": "@@ -298,5 +344,377 @@ void ImportDialog::on_Accept_clicked() {\n             }\n             break;\n         }\n+        case importMulti: {\n+            bool fRescan = true;\n+            if (!ui->rescanButtonIA->isChecked())\n+                fRescan = false;\n+\n+            if (fRescan && walletModel->wallet().chain().havePruned()) {\n+                // Exit early and print an error.\n+                // If a block is pruned after this check, we will import the key(s),\n+                // but fail the rescan with a generic error.\n+                QMessageBox::critical(this, tr(\"Rescan failed\"), tr(\"Rescan is disabled when blocks are pruned\"));\n+                break;\n+            }\n+\n+            wallet::WalletRescanReserver reserver = walletModel->wallet().getReserver();\n+            if (fRescan && !reserver.reserve()) {\n+                QMessageBox::critical(this, tr(\"Rescan failed\"),\n+                                      tr(\"Wallet is currently rescanning. Abort existing rescan or wait.\"));\n+                break;\n+            }\n+\n+            int64_t now = 0;\n+            bool fRunScan = false;\n+            int64_t nLowestTimestamp = 0;\n+            std::vector<resultpdi> response = {};\n+\n+            WalletModel::UnlockContext ctx(walletModel->requestUnlock());\n+            if (!ctx.isValid()) {\n+                break;\n+            }\n+\n+            // Verify all timestamps are present before importing any keys.\n+            CHECK_NONFATAL(walletModel->wallet().chain().findBlock(walletModel->wallet().GetLastBlockHash(),\n+                                                                   interfaces::FoundBlock().time(nLowestTimestamp).mtpTime(now)));\n+            const int64_t minimumTimestamp = 1;\n+\n+            for (int i = 0; i < ui->entries->count(); ++i) {\n+                ImportEntry *entry = qobject_cast<ImportEntry *>(ui->entries->itemAt(i)->widget());\n+                wallet::ImportMultiData mData = entry->getMultiData();\n+                const int64_t timestamp = std::max(GetImportTimestamp(mData.timestamp, now), minimumTimestamp);\n+                resultpdi result;\n+\n+                try {\n+                    // Internal addresses should not have a label\n+                    if (mData.internal && !mData.label.empty()) {\n+                        throw wallet::InvalidParameter(\"Internal addresses should not have a label\");\n+                    }\n+\n+                    bool isScript = false;\n+                    FlatSigningProvider keys;\n+                    if (!mData.scriptPubKey.empty()) {\n+                        // if the input isn't a valid address assume it is a script\n+                        CTxDestination dest = DecodeDestination(mData.scriptPubKey);\n+                        if (!IsValidDestination(dest)) {\n+                            isScript = true;\n+                        }\n+                    } else {\n+                        std::string error;\n+                        mData.parsed_desc = Parse(entry->getDesc(), keys, error, /* require_checksum = */ true);\n+                        if (!mData.parsed_desc) {\n+                            throw wallet::InvalidAddressOrKey(error);\n+                        }\n+                        if (mData.parsed_desc->GetOutputType() == OutputType::BECH32M) {\n+                            throw wallet::InvalidAddressOrKey(\"Bech32m descriptors cannot be imported into legacy wallets\");\n+                        }\n+                        bool range_exists = (mData.range_start && mData.range_end);\n+                        if (!mData.parsed_desc->IsRange() && range_exists) {\n+                            throw wallet::InvalidParameter(\"Range should not be specified for an un-ranged descriptor\");\n+                        } else if (mData.parsed_desc->IsRange()) {\n+                            if (!range_exists) {\n+                                throw wallet::InvalidParameter(\"Descriptor is ranged, please specify the range\");\n+                            }\n+                            RangeDescriptorCheck(mData.range_start, mData.range_end);\n+                        }\n+                    }\n+                    walletModel->wallet().ProcessImport(mData, result.warnings, isScript, keys, timestamp);\n+                    result.success = true;\n+                } catch (const wallet::MiscError& e) {\n+                    result.success = false;\n+                    result.error = e.error;\n+                } catch (const wallet::WalletError& e) {\n+                    result.success = false;\n+                    result.error = e.error;\n+                } catch (const wallet::InvalidAddressOrKey& e) {\n+                    result.success = false;\n+                    result.error = e.error;\n+                } catch (const wallet::InvalidParameter& e) {\n+                    result.success = false;\n+                    result.error = e.error;\n+                } catch (...) {\n+                    result.success = false;\n+                    result.error = \"Missing required fields\";\n+                }\n+\n+                response.push_back(result);\n+\n+                if (!fRescan) {\n+                    continue;\n+                }\n+\n+                // If at least one request was successful then allow rescan.\n+                if (result.success) {\n+                    fRunScan = true;\n+                }\n+\n+                // Get the lowest timestamp.\n+                if (timestamp < nLowestTimestamp) {\n+                    nLowestTimestamp = timestamp;\n+                }\n+            }\n+\n+            if (fRescan && fRunScan && ui->entries->count()) {\n+                int64_t scannedTime = walletModel->wallet().RescanFromTime(nLowestTimestamp, reserver, true);\n+                walletModel->wallet().ReacceptWalletTransactions();\n+\n+                if (walletModel->wallet().IsAbortingRescan()) {\n+                    QMessageBox::critical(this, tr(\"Misc Error\"),\n+                                          tr(\"Rescan aborted by user.\"));\n+\n+                    if (scannedTime > nLowestTimestamp) {\n+                        std::vector <resultpdi> results = response;\n+                        response.clear();\n+\n+                        for (int i = 0; i < ui->entries->count(); ++i) {\n+                            ImportEntry *entry = qobject_cast<ImportEntry *>(ui->entries->itemAt(i)->widget());\n+                            // If key creation date is within the successfully scanned\n+                            // range, or if the import result already has an error set, let\n+                            // the result stand unmodified. Otherwise, replace the result\n+                            // with an error message.\n+                            if (scannedTime <= GetImportTimestamp(entry->getMultiData().timestamp, now) || !results.at(i).error.empty()) {\n+                                response.push_back(results.at(i));\n+                            } else {\n+                                resultpdi result;\n+                                result.success = false;\n+                                result.error = strprintf(\n+                                                \"Rescan failed for key with creation timestamp %d. There was an error reading a \"\n+                                                \"block from time %d, which is after or within %d seconds of key creation, and \"\n+                                                \"could contain transactions pertaining to the key. As a result, transactions \"\n+                                                \"and coins using this key may not appear in the wallet. This error could be \"\n+                                                \"caused by pruning or data corruption (see bitcoind log for details) and could \"\n+                                                \"be dealt with by downloading and rescanning the relevant blocks (see -reindex \"\n+                                                \"option and rescanblockchain RPC).\",\n+                                                GetImportTimestamp(entry->getMultiData().timestamp, now), scannedTime - TIMESTAMP_WINDOW - 1,\n+                                                TIMESTAMP_WINDOW);\n+                                response.push_back(std::move(result));\n+                            }\n+                        }\n+                    }\n+                }\n+            }\n+            for (int i = 0; i < response.size(); i++) {\n+                if (!response[i].success) {\n+                    std::string warning_str;\n+                    if (response[i].warnings.size() != 0) {\n+                        for (auto w: response[i].warnings) {\n+                            warning_str += w + \"\\n\";\n+                        }\n+                    }\n+                    QMessageBox::critical(this, QString::fromStdString(\"Error: input box # \" + QString::number(i)),\n+                                          QString::fromStdString(\"Error:\" + response[i].error+\"\\n\"+\n+                                          \"Warnings:\"+\"\\n\" + warning_str));\n+                }\n+            }\n+            break;\n+        }\n+        case importDescriptors: {\n+            wallet::WalletRescanReserver reserver = walletModel->wallet().getReserver();\n+            if (!reserver.reserve()) {\n+                QMessageBox::critical(this, tr(\"Rescan failed\"),\n+                                      tr(\"Wallet is currently rescanning. Abort existing rescan or wait.\"));\n+                break;\n+            }\n+\n+            const int64_t minimum_timestamp = 1;\n+            int64_t now = 0;\n+            int64_t lowest_timestamp = 0;\n+            bool rescan = false;\n+            std::vector<resultpdi> response = {};\n+\n+            WalletModel::UnlockContext ctx(walletModel->requestUnlock());\n+            if (!ctx.isValid()) {\n+                break;\n+            }\n+\n+            CHECK_NONFATAL(walletModel->wallet().chain().findBlock(walletModel->wallet().GetLastBlockHash(),\n+                                                                   interfaces::FoundBlock().time(lowest_timestamp).mtpTime(now)));\n+\n+            // Get all timestamps and extract the lowest timestamp\n+            for (int i = 0; i < ui->entries->count(); ++i) {\n+                ImportEntry *entry = qobject_cast<ImportEntry *>(ui->entries->itemAt(i)->widget());\n+\n+                // This throws an error if \"timestamp\" doesn't exist\n+                wallet::ImportDescriptorData dData = entry->getDescriptorData();\n+                const int64_t timestamp = std::max(GetImportTimestamp(dData.timestamp, now), minimum_timestamp);\n+                resultpdi result;\n+\n+                try {\n+                    // Parse descriptor string\n+                    FlatSigningProvider keys;\n+                    std::string error;\n+                    dData.parsed_desc = Parse(entry->getDesc(), keys, error, /* require_checksum = */ true);\n+                    if (!dData.parsed_desc) {\n+                        throw wallet::InvalidAddressOrKey(error);\n+                    }\n+\n+                    bool range_exists = (dData.range_start && dData.range_end);\n+                    if (!dData.parsed_desc->IsRange() && range_exists) {\n+                        throw wallet::InvalidParameter(\"Range should not be specified for an un-ranged descriptor\");\n+                    } else if (dData.parsed_desc->IsRange()) {\n+                        if (!range_exists) {\n+                            result.warnings.push_back(\"Range not given, using default keypool range\");\n+                            dData.range_start = 0;\n+                            dData.range_end = gArgs.GetIntArg(\"-keypool\", wallet::DEFAULT_KEYPOOL_SIZE);\n+                        } else {\n+                            RangeDescriptorCheck(dData.range_start, dData.range_end);\n+                            dData.range_end++;\n+                        }\n+\n+                        if (dData.next_index) {\n+                            // bound checks\n+                            if (dData.next_index < dData.range_start || dData.next_index >= dData.range_end) {\n+                                throw wallet::InvalidParameter(\"next_index is out of range\");\n+                            }\n+                        } else {\n+                            dData.next_index = dData.range_start;\n+                        }\n+                    }\n+                    walletModel->wallet().ProcessDescriptorImport(dData, result.warnings, keys, range_exists, timestamp);\n+                    result.success = true;\n+                } catch (const wallet::MiscError& e) {\n+                    result.success = false;\n+                    result.error = e.error;\n+                } catch (const wallet::WalletError& e) {\n+                    result.success = false;\n+                    result.error = e.error;\n+                } catch (const wallet::InvalidAddressOrKey& e) {\n+                    result.success = false;\n+                    result.error = e.error;\n+                } catch (const wallet::InvalidParameter& e) {\n+                    result.success = false;\n+                    result.error = e.error;\n+                }\n+\n+                response.push_back(result);\n+\n+                if (lowest_timestamp > timestamp) {\n+                    lowest_timestamp = timestamp;\n+                }\n+\n+                // If we know the chain tip, and at least one request was successful then allow rescan\n+                if (!rescan && result.success) {\n+                    rescan = true;\n+                }\n+            }\n+            walletModel->wallet().ConnectScriptPubKeyManNotifiers();\n+\n+            // Rescan the blockchain using the lowest timestamp\n+            if (rescan) {\n+                int64_t scanned_time = walletModel->wallet().RescanFromTime(lowest_timestamp, reserver, true);\n+                walletModel->wallet().ReacceptWalletTransactions();\n+\n+                if (walletModel->wallet().IsAbortingRescan()) {\n+                    QMessageBox::critical(this, tr(\"Misc Error\"),\n+                                          tr(\"Rescan aborted by user.\"));\n+\n+                    if (scanned_time > lowest_timestamp) {\n+                        std::vector<resultpdi> results = response;\n+                        response.clear();\n+\n+                        for (int i = 0; i < ui->entries->count(); ++i) {\n+                            ImportEntry *entry = qobject_cast<ImportEntry *>(ui->entries->itemAt(i)->widget());\n+\n+                            // If the descriptor timestamp is within the successfully scanned\n+                            // range, or if the import result already has an error set, let\n+                            // the result stand unmodified. Otherwise, replace the result\n+                            // with an error message.\n+                            if (scanned_time <= GetImportTimestamp(entry->getDescriptorData().timestamp, now) || !results.at(i).error.empty()) {\n+                                response.push_back(results.at(i));\n+                            } else {\n+                                resultpdi result;\n+                                result.success = false;\n+                                result.error = strprintf(\n+                                            \"Rescan failed for descriptor with timestamp %d. There was an error reading a \"\n+                                            \"block from time %d, which is after or within %d seconds of key creation, and \"\n+                                            \"could contain transactions pertaining to the desc. As a result, transactions \"\n+                                            \"and coins using this desc may not appear in the wallet. This error could be \"\n+                                            \"caused by pruning or data corruption (see bitcoind log for details) and could \"\n+                                            \"be dealt with by downloading and rescanning the relevant blocks (see -reindex \"\n+                                            \"option and rescanblockchain RPC).\",\n+                                            GetImportTimestamp(entry->getDescriptorData().timestamp, now),\n+                                            scanned_time - TIMESTAMP_WINDOW - 1, TIMESTAMP_WINDOW);\n+                                response.push_back(std::move(result));\n+                            }\n+                        }\n+                    }\n+                }\n+            }\n+            for (int i = 0; i < response.size(); i++) {\n+                if (!response[i].success) {\n+                    std::string warning_str;\n+                    if (response[i].warnings.size() != 0) {\n+                        for (auto w: response[i].warnings) {\n+                            warning_str += w + \"\\n\";\n+                        }\n+                    }\n+                    QMessageBox::critical(this, QString::fromStdString(\"Error: input box # \" + QString::number(i)),\n+                                          QString::fromStdString(\"Error:\" + response[i].error+\"\\n\"+\n+                                                                 \"Warnings:\"+\"\\n\" + warning_str));\n+                }\n+            }\n+        }\n     }\n }\n+\n+\n+\n+ImportEntry *ImportDialog::addEntryMulti()\n+{\n+    ImportEntry *entry = new ImportEntry(ImportEntry::importMultiEntry, this);\n+    entry->setModel(walletModel);\n+    ui->entries->addWidget(entry);\n+    connect(entry, &ImportEntry::removeMultiEntry, this, &ImportDialog::removeMultiEntry);\n+\n+    // Focus the field, so that entry can start immediately\n+    //entry->clear();\n+    entry->setFocus();\n+    ui->scrollAreaWidgetContents->resize(ui->scrollAreaWidgetContents->sizeHint());\n+    qApp->processEvents();\n+    QScrollBar* bar = ui->scrollArea->verticalScrollBar();\n+    if(bar)\n+        bar->setSliderPosition(bar->maximum());\n+\n+    return entry;\n+}\n+\n+ImportEntry *ImportDialog::addEntryDescriptors()\n+{\n+    ImportEntry *entry = new ImportEntry(ImportEntry::importDescriptorsEntry, this);\n+    entry->setModel(walletModel);\n+    ui->entries->addWidget(entry);\n+    connect(entry, &ImportEntry::removeDescriptorEntry, this, &ImportDialog::removeDescriptorEntry);\n+\n+    // Focus the field, so that entry can start immediately\n+    //entry->clear();\n+    entry->setFocus();\n+    ui->scrollAreaWidgetContents->resize(ui->scrollAreaWidgetContents->sizeHint());\n+    qApp->processEvents();\n+    QScrollBar* bar = ui->scrollArea->verticalScrollBar();\n+    if(bar)\n+        bar->setSliderPosition(bar->maximum());\n+\n+    return entry;\n+}\n+\n+void ImportDialog::removeMultiEntry(ImportEntry* entry)\n+{\n+    entry->hide();\n+\n+    // If the last entry is about to be removed add an empty one\n+    if (ui->entries->count() == 1)\n+        addEntryMulti();\n+\n+    entry->deleteLater();\n+}\n+\n+void ImportDialog::removeDescriptorEntry(ImportEntry* entry)\n+{\n+    entry->hide();\n+\n+    // If the last entry is about to be removed add an empty one\n+    if (ui->entries->count() == 1)\n+        addEntryDescriptors();\n+\n+    entry->deleteLater();\n+}",
      "path": "src/qt/importdialog.cpp",
      "position": null,
      "original_position": 450,
      "commit_id": "b2b00af1d37dd69c3e64d905984e68ac6a6b2d8f",
      "original_commit_id": "c71f418f18000f537871f57a42ec76e0a25941e9",
      "in_reply_to_id": 940625711,
      "user": {
        "login": "KolbyML",
        "id": 31669092,
        "node_id": "MDQ6VXNlcjMxNjY5MDky",
        "avatar_url": "https://avatars.githubusercontent.com/u/31669092?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/KolbyML",
        "html_url": "https://github.com/KolbyML",
        "followers_url": "https://api.github.com/users/KolbyML/followers",
        "following_url": "https://api.github.com/users/KolbyML/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/KolbyML/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/KolbyML/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/KolbyML/subscriptions",
        "organizations_url": "https://api.github.com/users/KolbyML/orgs",
        "repos_url": "https://api.github.com/users/KolbyML/repos",
        "events_url": "https://api.github.com/users/KolbyML/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/KolbyML/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "done",
      "created_at": "2022-08-10T00:30:16Z",
      "updated_at": "2022-08-10T00:30:16Z",
      "html_url": "https://github.com/bitcoin-core/gui/pull/650#discussion_r941908790",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/gui/pulls/comments/941908790"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/gui/pulls/650"
        }
      },
      "start_line": null,
      "original_start_line": 700,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 579,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/gui/pulls/comments/941908889",
      "pull_request_review_id": 1067522354,
      "id": 941908889,
      "node_id": "PRRC_kwDOEEET9c44JGOZ",
      "diff_hunk": "@@ -298,5 +344,377 @@ void ImportDialog::on_Accept_clicked() {\n             }\n             break;\n         }\n+        case importMulti: {\n+            bool fRescan = true;\n+            if (!ui->rescanButtonIA->isChecked())\n+                fRescan = false;\n+\n+            if (fRescan && walletModel->wallet().chain().havePruned()) {\n+                // Exit early and print an error.\n+                // If a block is pruned after this check, we will import the key(s),\n+                // but fail the rescan with a generic error.\n+                QMessageBox::critical(this, tr(\"Rescan failed\"), tr(\"Rescan is disabled when blocks are pruned\"));\n+                break;\n+            }\n+\n+            wallet::WalletRescanReserver reserver = walletModel->wallet().getReserver();\n+            if (fRescan && !reserver.reserve()) {\n+                QMessageBox::critical(this, tr(\"Rescan failed\"),\n+                                      tr(\"Wallet is currently rescanning. Abort existing rescan or wait.\"));\n+                break;\n+            }\n+\n+            int64_t now = 0;\n+            bool fRunScan = false;\n+            int64_t nLowestTimestamp = 0;\n+            std::vector<resultpdi> response = {};\n+\n+            WalletModel::UnlockContext ctx(walletModel->requestUnlock());\n+            if (!ctx.isValid()) {\n+                break;\n+            }\n+\n+            // Verify all timestamps are present before importing any keys.\n+            CHECK_NONFATAL(walletModel->wallet().chain().findBlock(walletModel->wallet().GetLastBlockHash(),\n+                                                                   interfaces::FoundBlock().time(nLowestTimestamp).mtpTime(now)));\n+            const int64_t minimumTimestamp = 1;\n+\n+            for (int i = 0; i < ui->entries->count(); ++i) {\n+                ImportEntry *entry = qobject_cast<ImportEntry *>(ui->entries->itemAt(i)->widget());\n+                wallet::ImportMultiData mData = entry->getMultiData();\n+                const int64_t timestamp = std::max(GetImportTimestamp(mData.timestamp, now), minimumTimestamp);\n+                resultpdi result;\n+\n+                try {\n+                    // Internal addresses should not have a label\n+                    if (mData.internal && !mData.label.empty()) {\n+                        throw wallet::InvalidParameter(\"Internal addresses should not have a label\");\n+                    }\n+\n+                    bool isScript = false;\n+                    FlatSigningProvider keys;\n+                    if (!mData.scriptPubKey.empty()) {\n+                        // if the input isn't a valid address assume it is a script\n+                        CTxDestination dest = DecodeDestination(mData.scriptPubKey);\n+                        if (!IsValidDestination(dest)) {\n+                            isScript = true;\n+                        }\n+                    } else {\n+                        std::string error;\n+                        mData.parsed_desc = Parse(entry->getDesc(), keys, error, /* require_checksum = */ true);\n+                        if (!mData.parsed_desc) {\n+                            throw wallet::InvalidAddressOrKey(error);\n+                        }\n+                        if (mData.parsed_desc->GetOutputType() == OutputType::BECH32M) {\n+                            throw wallet::InvalidAddressOrKey(\"Bech32m descriptors cannot be imported into legacy wallets\");\n+                        }\n+                        bool range_exists = (mData.range_start && mData.range_end);\n+                        if (!mData.parsed_desc->IsRange() && range_exists) {\n+                            throw wallet::InvalidParameter(\"Range should not be specified for an un-ranged descriptor\");\n+                        } else if (mData.parsed_desc->IsRange()) {\n+                            if (!range_exists) {\n+                                throw wallet::InvalidParameter(\"Descriptor is ranged, please specify the range\");\n+                            }\n+                            RangeDescriptorCheck(mData.range_start, mData.range_end);\n+                        }\n+                    }\n+                    walletModel->wallet().ProcessImport(mData, result.warnings, isScript, keys, timestamp);\n+                    result.success = true;\n+                } catch (const wallet::MiscError& e) {\n+                    result.success = false;\n+                    result.error = e.error;\n+                } catch (const wallet::WalletError& e) {\n+                    result.success = false;\n+                    result.error = e.error;\n+                } catch (const wallet::InvalidAddressOrKey& e) {\n+                    result.success = false;\n+                    result.error = e.error;\n+                } catch (const wallet::InvalidParameter& e) {\n+                    result.success = false;\n+                    result.error = e.error;\n+                } catch (...) {\n+                    result.success = false;\n+                    result.error = \"Missing required fields\";\n+                }\n+\n+                response.push_back(result);\n+\n+                if (!fRescan) {\n+                    continue;\n+                }\n+\n+                // If at least one request was successful then allow rescan.\n+                if (result.success) {\n+                    fRunScan = true;\n+                }\n+\n+                // Get the lowest timestamp.\n+                if (timestamp < nLowestTimestamp) {\n+                    nLowestTimestamp = timestamp;\n+                }\n+            }\n+\n+            if (fRescan && fRunScan && ui->entries->count()) {\n+                int64_t scannedTime = walletModel->wallet().RescanFromTime(nLowestTimestamp, reserver, true);\n+                walletModel->wallet().ReacceptWalletTransactions();\n+\n+                if (walletModel->wallet().IsAbortingRescan()) {\n+                    QMessageBox::critical(this, tr(\"Misc Error\"),\n+                                          tr(\"Rescan aborted by user.\"));\n+\n+                    if (scannedTime > nLowestTimestamp) {\n+                        std::vector <resultpdi> results = response;\n+                        response.clear();\n+\n+                        for (int i = 0; i < ui->entries->count(); ++i) {\n+                            ImportEntry *entry = qobject_cast<ImportEntry *>(ui->entries->itemAt(i)->widget());\n+                            // If key creation date is within the successfully scanned\n+                            // range, or if the import result already has an error set, let\n+                            // the result stand unmodified. Otherwise, replace the result\n+                            // with an error message.\n+                            if (scannedTime <= GetImportTimestamp(entry->getMultiData().timestamp, now) || !results.at(i).error.empty()) {\n+                                response.push_back(results.at(i));\n+                            } else {\n+                                resultpdi result;\n+                                result.success = false;\n+                                result.error = strprintf(\n+                                                \"Rescan failed for key with creation timestamp %d. There was an error reading a \"\n+                                                \"block from time %d, which is after or within %d seconds of key creation, and \"\n+                                                \"could contain transactions pertaining to the key. As a result, transactions \"\n+                                                \"and coins using this key may not appear in the wallet. This error could be \"\n+                                                \"caused by pruning or data corruption (see bitcoind log for details) and could \"\n+                                                \"be dealt with by downloading and rescanning the relevant blocks (see -reindex \"\n+                                                \"option and rescanblockchain RPC).\",\n+                                                GetImportTimestamp(entry->getMultiData().timestamp, now), scannedTime - TIMESTAMP_WINDOW - 1,\n+                                                TIMESTAMP_WINDOW);\n+                                response.push_back(std::move(result));\n+                            }\n+                        }\n+                    }\n+                }\n+            }\n+            for (int i = 0; i < response.size(); i++) {\n+                if (!response[i].success) {\n+                    std::string warning_str;\n+                    if (response[i].warnings.size() != 0) {\n+                        for (auto w: response[i].warnings) {\n+                            warning_str += w + \"\\n\";\n+                        }\n+                    }\n+                    QMessageBox::critical(this, QString::fromStdString(\"Error: input box # \" + QString::number(i)),\n+                                          QString::fromStdString(\"Error:\" + response[i].error+\"\\n\"+\n+                                          \"Warnings:\"+\"\\n\" + warning_str));\n+                }\n+            }\n+            break;\n+        }\n+        case importDescriptors: {\n+            wallet::WalletRescanReserver reserver = walletModel->wallet().getReserver();\n+            if (!reserver.reserve()) {\n+                QMessageBox::critical(this, tr(\"Rescan failed\"),\n+                                      tr(\"Wallet is currently rescanning. Abort existing rescan or wait.\"));\n+                break;\n+            }\n+\n+            const int64_t minimum_timestamp = 1;\n+            int64_t now = 0;\n+            int64_t lowest_timestamp = 0;\n+            bool rescan = false;\n+            std::vector<resultpdi> response = {};\n+\n+            WalletModel::UnlockContext ctx(walletModel->requestUnlock());\n+            if (!ctx.isValid()) {\n+                break;\n+            }\n+\n+            CHECK_NONFATAL(walletModel->wallet().chain().findBlock(walletModel->wallet().GetLastBlockHash(),\n+                                                                   interfaces::FoundBlock().time(lowest_timestamp).mtpTime(now)));\n+\n+            // Get all timestamps and extract the lowest timestamp\n+            for (int i = 0; i < ui->entries->count(); ++i) {\n+                ImportEntry *entry = qobject_cast<ImportEntry *>(ui->entries->itemAt(i)->widget());\n+\n+                // This throws an error if \"timestamp\" doesn't exist\n+                wallet::ImportDescriptorData dData = entry->getDescriptorData();\n+                const int64_t timestamp = std::max(GetImportTimestamp(dData.timestamp, now), minimum_timestamp);\n+                resultpdi result;\n+\n+                try {\n+                    // Parse descriptor string\n+                    FlatSigningProvider keys;\n+                    std::string error;\n+                    dData.parsed_desc = Parse(entry->getDesc(), keys, error, /* require_checksum = */ true);\n+                    if (!dData.parsed_desc) {\n+                        throw wallet::InvalidAddressOrKey(error);\n+                    }\n+\n+                    bool range_exists = (dData.range_start && dData.range_end);\n+                    if (!dData.parsed_desc->IsRange() && range_exists) {\n+                        throw wallet::InvalidParameter(\"Range should not be specified for an un-ranged descriptor\");\n+                    } else if (dData.parsed_desc->IsRange()) {\n+                        if (!range_exists) {\n+                            result.warnings.push_back(\"Range not given, using default keypool range\");\n+                            dData.range_start = 0;\n+                            dData.range_end = gArgs.GetIntArg(\"-keypool\", wallet::DEFAULT_KEYPOOL_SIZE);\n+                        } else {\n+                            RangeDescriptorCheck(dData.range_start, dData.range_end);\n+                            dData.range_end++;\n+                        }\n+\n+                        if (dData.next_index) {\n+                            // bound checks\n+                            if (dData.next_index < dData.range_start || dData.next_index >= dData.range_end) {\n+                                throw wallet::InvalidParameter(\"next_index is out of range\");\n+                            }\n+                        } else {\n+                            dData.next_index = dData.range_start;\n+                        }\n+                    }\n+                    walletModel->wallet().ProcessDescriptorImport(dData, result.warnings, keys, range_exists, timestamp);\n+                    result.success = true;\n+                } catch (const wallet::MiscError& e) {\n+                    result.success = false;\n+                    result.error = e.error;\n+                } catch (const wallet::WalletError& e) {\n+                    result.success = false;\n+                    result.error = e.error;\n+                } catch (const wallet::InvalidAddressOrKey& e) {\n+                    result.success = false;\n+                    result.error = e.error;\n+                } catch (const wallet::InvalidParameter& e) {\n+                    result.success = false;\n+                    result.error = e.error;\n+                }\n+\n+                response.push_back(result);\n+\n+                if (lowest_timestamp > timestamp) {\n+                    lowest_timestamp = timestamp;\n+                }\n+\n+                // If we know the chain tip, and at least one request was successful then allow rescan\n+                if (!rescan && result.success) {\n+                    rescan = true;\n+                }\n+            }\n+            walletModel->wallet().ConnectScriptPubKeyManNotifiers();\n+\n+            // Rescan the blockchain using the lowest timestamp\n+            if (rescan) {\n+                int64_t scanned_time = walletModel->wallet().RescanFromTime(lowest_timestamp, reserver, true);\n+                walletModel->wallet().ReacceptWalletTransactions();\n+\n+                if (walletModel->wallet().IsAbortingRescan()) {\n+                    QMessageBox::critical(this, tr(\"Misc Error\"),\n+                                          tr(\"Rescan aborted by user.\"));\n+\n+                    if (scanned_time > lowest_timestamp) {\n+                        std::vector<resultpdi> results = response;\n+                        response.clear();\n+\n+                        for (int i = 0; i < ui->entries->count(); ++i) {\n+                            ImportEntry *entry = qobject_cast<ImportEntry *>(ui->entries->itemAt(i)->widget());\n+\n+                            // If the descriptor timestamp is within the successfully scanned\n+                            // range, or if the import result already has an error set, let\n+                            // the result stand unmodified. Otherwise, replace the result\n+                            // with an error message.\n+                            if (scanned_time <= GetImportTimestamp(entry->getDescriptorData().timestamp, now) || !results.at(i).error.empty()) {\n+                                response.push_back(results.at(i));\n+                            } else {\n+                                resultpdi result;\n+                                result.success = false;\n+                                result.error = strprintf(\n+                                            \"Rescan failed for descriptor with timestamp %d. There was an error reading a \"\n+                                            \"block from time %d, which is after or within %d seconds of key creation, and \"\n+                                            \"could contain transactions pertaining to the desc. As a result, transactions \"\n+                                            \"and coins using this desc may not appear in the wallet. This error could be \"\n+                                            \"caused by pruning or data corruption (see bitcoind log for details) and could \"\n+                                            \"be dealt with by downloading and rescanning the relevant blocks (see -reindex \"\n+                                            \"option and rescanblockchain RPC).\",\n+                                            GetImportTimestamp(entry->getDescriptorData().timestamp, now),\n+                                            scanned_time - TIMESTAMP_WINDOW - 1, TIMESTAMP_WINDOW);\n+                                response.push_back(std::move(result));\n+                            }\n+                        }\n+                    }\n+                }\n+            }\n+            for (int i = 0; i < response.size(); i++) {\n+                if (!response[i].success) {\n+                    std::string warning_str;\n+                    if (response[i].warnings.size() != 0) {\n+                        for (auto w: response[i].warnings) {\n+                            warning_str += w + \"\\n\";\n+                        }\n+                    }\n+                    QMessageBox::critical(this, QString::fromStdString(\"Error: input box # \" + QString::number(i)),\n+                                          QString::fromStdString(\"Error:\" + response[i].error+\"\\n\"+\n+                                                                 \"Warnings:\"+\"\\n\" + warning_str));\n+                }\n+            }\n+        }\n     }\n }\n+\n+\n+\n+ImportEntry *ImportDialog::addEntryMulti()\n+{\n+    ImportEntry *entry = new ImportEntry(ImportEntry::importMultiEntry, this);\n+    entry->setModel(walletModel);\n+    ui->entries->addWidget(entry);\n+    connect(entry, &ImportEntry::removeMultiEntry, this, &ImportDialog::removeMultiEntry);\n+\n+    // Focus the field, so that entry can start immediately\n+    //entry->clear();\n+    entry->setFocus();\n+    ui->scrollAreaWidgetContents->resize(ui->scrollAreaWidgetContents->sizeHint());\n+    qApp->processEvents();\n+    QScrollBar* bar = ui->scrollArea->verticalScrollBar();\n+    if(bar)\n+        bar->setSliderPosition(bar->maximum());\n+\n+    return entry;\n+}\n+\n+ImportEntry *ImportDialog::addEntryDescriptors()\n+{\n+    ImportEntry *entry = new ImportEntry(ImportEntry::importDescriptorsEntry, this);\n+    entry->setModel(walletModel);\n+    ui->entries->addWidget(entry);\n+    connect(entry, &ImportEntry::removeDescriptorEntry, this, &ImportDialog::removeDescriptorEntry);\n+\n+    // Focus the field, so that entry can start immediately\n+    //entry->clear();\n+    entry->setFocus();\n+    ui->scrollAreaWidgetContents->resize(ui->scrollAreaWidgetContents->sizeHint());\n+    qApp->processEvents();\n+    QScrollBar* bar = ui->scrollArea->verticalScrollBar();\n+    if(bar)\n+        bar->setSliderPosition(bar->maximum());\n+\n+    return entry;\n+}",
      "path": "src/qt/importdialog.cpp",
      "position": null,
      "original_position": 428,
      "commit_id": "b2b00af1d37dd69c3e64d905984e68ac6a6b2d8f",
      "original_commit_id": "c71f418f18000f537871f57a42ec76e0a25941e9",
      "in_reply_to_id": 940626528,
      "user": {
        "login": "KolbyML",
        "id": 31669092,
        "node_id": "MDQ6VXNlcjMxNjY5MDky",
        "avatar_url": "https://avatars.githubusercontent.com/u/31669092?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/KolbyML",
        "html_url": "https://github.com/KolbyML",
        "followers_url": "https://api.github.com/users/KolbyML/followers",
        "following_url": "https://api.github.com/users/KolbyML/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/KolbyML/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/KolbyML/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/KolbyML/subscriptions",
        "organizations_url": "https://api.github.com/users/KolbyML/orgs",
        "repos_url": "https://api.github.com/users/KolbyML/repos",
        "events_url": "https://api.github.com/users/KolbyML/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/KolbyML/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "done",
      "created_at": "2022-08-10T00:30:36Z",
      "updated_at": "2022-08-10T00:30:37Z",
      "html_url": "https://github.com/bitcoin-core/gui/pull/650#discussion_r941908889",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/gui/pulls/comments/941908889"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/gui/pulls/650"
        }
      },
      "start_line": null,
      "original_start_line": 662,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 568,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/gui/pulls/comments/941909292",
      "pull_request_review_id": 1067522856,
      "id": 941909292,
      "node_id": "PRRC_kwDOEEET9c44JGUs",
      "diff_hunk": "@@ -298,5 +344,377 @@ void ImportDialog::on_Accept_clicked() {\n             }\n             break;\n         }\n+        case importMulti: {\n+            bool fRescan = true;\n+            if (!ui->rescanButtonIA->isChecked())\n+                fRescan = false;\n+\n+            if (fRescan && walletModel->wallet().chain().havePruned()) {\n+                // Exit early and print an error.\n+                // If a block is pruned after this check, we will import the key(s),\n+                // but fail the rescan with a generic error.\n+                QMessageBox::critical(this, tr(\"Rescan failed\"), tr(\"Rescan is disabled when blocks are pruned\"));\n+                break;\n+            }\n+\n+            wallet::WalletRescanReserver reserver = walletModel->wallet().getReserver();\n+            if (fRescan && !reserver.reserve()) {\n+                QMessageBox::critical(this, tr(\"Rescan failed\"),\n+                                      tr(\"Wallet is currently rescanning. Abort existing rescan or wait.\"));\n+                break;\n+            }\n+\n+            int64_t now = 0;\n+            bool fRunScan = false;\n+            int64_t nLowestTimestamp = 0;\n+            std::vector<resultpdi> response = {};\n+\n+            WalletModel::UnlockContext ctx(walletModel->requestUnlock());\n+            if (!ctx.isValid()) {\n+                break;\n+            }\n+\n+            // Verify all timestamps are present before importing any keys.\n+            CHECK_NONFATAL(walletModel->wallet().chain().findBlock(walletModel->wallet().GetLastBlockHash(),\n+                                                                   interfaces::FoundBlock().time(nLowestTimestamp).mtpTime(now)));\n+            const int64_t minimumTimestamp = 1;\n+\n+            for (int i = 0; i < ui->entries->count(); ++i) {\n+                ImportEntry *entry = qobject_cast<ImportEntry *>(ui->entries->itemAt(i)->widget());\n+                wallet::ImportMultiData mData = entry->getMultiData();\n+                const int64_t timestamp = std::max(GetImportTimestamp(mData.timestamp, now), minimumTimestamp);\n+                resultpdi result;\n+\n+                try {\n+                    // Internal addresses should not have a label\n+                    if (mData.internal && !mData.label.empty()) {\n+                        throw wallet::InvalidParameter(\"Internal addresses should not have a label\");\n+                    }\n+\n+                    bool isScript = false;\n+                    FlatSigningProvider keys;\n+                    if (!mData.scriptPubKey.empty()) {\n+                        // if the input isn't a valid address assume it is a script\n+                        CTxDestination dest = DecodeDestination(mData.scriptPubKey);\n+                        if (!IsValidDestination(dest)) {\n+                            isScript = true;\n+                        }\n+                    } else {\n+                        std::string error;\n+                        mData.parsed_desc = Parse(entry->getDesc(), keys, error, /* require_checksum = */ true);\n+                        if (!mData.parsed_desc) {\n+                            throw wallet::InvalidAddressOrKey(error);\n+                        }\n+                        if (mData.parsed_desc->GetOutputType() == OutputType::BECH32M) {\n+                            throw wallet::InvalidAddressOrKey(\"Bech32m descriptors cannot be imported into legacy wallets\");\n+                        }\n+                        bool range_exists = (mData.range_start && mData.range_end);\n+                        if (!mData.parsed_desc->IsRange() && range_exists) {\n+                            throw wallet::InvalidParameter(\"Range should not be specified for an un-ranged descriptor\");\n+                        } else if (mData.parsed_desc->IsRange()) {\n+                            if (!range_exists) {\n+                                throw wallet::InvalidParameter(\"Descriptor is ranged, please specify the range\");\n+                            }\n+                            RangeDescriptorCheck(mData.range_start, mData.range_end);\n+                        }\n+                    }\n+                    walletModel->wallet().ProcessImport(mData, result.warnings, isScript, keys, timestamp);\n+                    result.success = true;\n+                } catch (const wallet::MiscError& e) {\n+                    result.success = false;\n+                    result.error = e.error;\n+                } catch (const wallet::WalletError& e) {\n+                    result.success = false;\n+                    result.error = e.error;\n+                } catch (const wallet::InvalidAddressOrKey& e) {\n+                    result.success = false;\n+                    result.error = e.error;\n+                } catch (const wallet::InvalidParameter& e) {\n+                    result.success = false;\n+                    result.error = e.error;\n+                } catch (...) {\n+                    result.success = false;\n+                    result.error = \"Missing required fields\";\n+                }\n+\n+                response.push_back(result);\n+\n+                if (!fRescan) {\n+                    continue;\n+                }\n+\n+                // If at least one request was successful then allow rescan.\n+                if (result.success) {\n+                    fRunScan = true;\n+                }\n+\n+                // Get the lowest timestamp.\n+                if (timestamp < nLowestTimestamp) {\n+                    nLowestTimestamp = timestamp;\n+                }\n+            }\n+\n+            if (fRescan && fRunScan && ui->entries->count()) {\n+                int64_t scannedTime = walletModel->wallet().RescanFromTime(nLowestTimestamp, reserver, true);\n+                walletModel->wallet().ReacceptWalletTransactions();\n+\n+                if (walletModel->wallet().IsAbortingRescan()) {\n+                    QMessageBox::critical(this, tr(\"Misc Error\"),\n+                                          tr(\"Rescan aborted by user.\"));\n+\n+                    if (scannedTime > nLowestTimestamp) {\n+                        std::vector <resultpdi> results = response;\n+                        response.clear();\n+\n+                        for (int i = 0; i < ui->entries->count(); ++i) {\n+                            ImportEntry *entry = qobject_cast<ImportEntry *>(ui->entries->itemAt(i)->widget());\n+                            // If key creation date is within the successfully scanned\n+                            // range, or if the import result already has an error set, let\n+                            // the result stand unmodified. Otherwise, replace the result\n+                            // with an error message.\n+                            if (scannedTime <= GetImportTimestamp(entry->getMultiData().timestamp, now) || !results.at(i).error.empty()) {\n+                                response.push_back(results.at(i));\n+                            } else {\n+                                resultpdi result;\n+                                result.success = false;\n+                                result.error = strprintf(\n+                                                \"Rescan failed for key with creation timestamp %d. There was an error reading a \"\n+                                                \"block from time %d, which is after or within %d seconds of key creation, and \"\n+                                                \"could contain transactions pertaining to the key. As a result, transactions \"\n+                                                \"and coins using this key may not appear in the wallet. This error could be \"\n+                                                \"caused by pruning or data corruption (see bitcoind log for details) and could \"\n+                                                \"be dealt with by downloading and rescanning the relevant blocks (see -reindex \"\n+                                                \"option and rescanblockchain RPC).\",\n+                                                GetImportTimestamp(entry->getMultiData().timestamp, now), scannedTime - TIMESTAMP_WINDOW - 1,\n+                                                TIMESTAMP_WINDOW);\n+                                response.push_back(std::move(result));\n+                            }\n+                        }\n+                    }\n+                }\n+            }\n+            for (int i = 0; i < response.size(); i++) {",
      "path": "src/qt/importdialog.cpp",
      "position": null,
      "original_position": 226,
      "commit_id": "b2b00af1d37dd69c3e64d905984e68ac6a6b2d8f",
      "original_commit_id": "c71f418f18000f537871f57a42ec76e0a25941e9",
      "in_reply_to_id": 940630072,
      "user": {
        "login": "KolbyML",
        "id": 31669092,
        "node_id": "MDQ6VXNlcjMxNjY5MDky",
        "avatar_url": "https://avatars.githubusercontent.com/u/31669092?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/KolbyML",
        "html_url": "https://github.com/KolbyML",
        "followers_url": "https://api.github.com/users/KolbyML/followers",
        "following_url": "https://api.github.com/users/KolbyML/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/KolbyML/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/KolbyML/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/KolbyML/subscriptions",
        "organizations_url": "https://api.github.com/users/KolbyML/orgs",
        "repos_url": "https://api.github.com/users/KolbyML/repos",
        "events_url": "https://api.github.com/users/KolbyML/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/KolbyML/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "done",
      "created_at": "2022-08-10T00:31:44Z",
      "updated_at": "2022-08-10T00:31:44Z",
      "html_url": "https://github.com/bitcoin-core/gui/pull/650#discussion_r941909292",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/gui/pulls/comments/941909292"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/gui/pulls/650"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 496,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/gui/pulls/comments/941910166",
      "pull_request_review_id": 1067523861,
      "id": 941910166,
      "node_id": "PRRC_kwDOEEET9c44JGiW",
      "diff_hunk": "@@ -298,5 +344,377 @@ void ImportDialog::on_Accept_clicked() {\n             }\n             break;\n         }\n+        case importMulti: {\n+            bool fRescan = true;\n+            if (!ui->rescanButtonIA->isChecked())\n+                fRescan = false;\n+\n+            if (fRescan && walletModel->wallet().chain().havePruned()) {\n+                // Exit early and print an error.\n+                // If a block is pruned after this check, we will import the key(s),\n+                // but fail the rescan with a generic error.\n+                QMessageBox::critical(this, tr(\"Rescan failed\"), tr(\"Rescan is disabled when blocks are pruned\"));\n+                break;\n+            }\n+\n+            wallet::WalletRescanReserver reserver = walletModel->wallet().getReserver();\n+            if (fRescan && !reserver.reserve()) {\n+                QMessageBox::critical(this, tr(\"Rescan failed\"),\n+                                      tr(\"Wallet is currently rescanning. Abort existing rescan or wait.\"));\n+                break;\n+            }\n+\n+            int64_t now = 0;\n+            bool fRunScan = false;\n+            int64_t nLowestTimestamp = 0;\n+            std::vector<resultpdi> response = {};\n+\n+            WalletModel::UnlockContext ctx(walletModel->requestUnlock());\n+            if (!ctx.isValid()) {\n+                break;\n+            }\n+\n+            // Verify all timestamps are present before importing any keys.\n+            CHECK_NONFATAL(walletModel->wallet().chain().findBlock(walletModel->wallet().GetLastBlockHash(),\n+                                                                   interfaces::FoundBlock().time(nLowestTimestamp).mtpTime(now)));\n+            const int64_t minimumTimestamp = 1;\n+\n+            for (int i = 0; i < ui->entries->count(); ++i) {\n+                ImportEntry *entry = qobject_cast<ImportEntry *>(ui->entries->itemAt(i)->widget());\n+                wallet::ImportMultiData mData = entry->getMultiData();\n+                const int64_t timestamp = std::max(GetImportTimestamp(mData.timestamp, now), minimumTimestamp);\n+                resultpdi result;\n+\n+                try {\n+                    // Internal addresses should not have a label\n+                    if (mData.internal && !mData.label.empty()) {\n+                        throw wallet::InvalidParameter(\"Internal addresses should not have a label\");\n+                    }\n+\n+                    bool isScript = false;\n+                    FlatSigningProvider keys;\n+                    if (!mData.scriptPubKey.empty()) {\n+                        // if the input isn't a valid address assume it is a script\n+                        CTxDestination dest = DecodeDestination(mData.scriptPubKey);\n+                        if (!IsValidDestination(dest)) {\n+                            isScript = true;\n+                        }\n+                    } else {\n+                        std::string error;\n+                        mData.parsed_desc = Parse(entry->getDesc(), keys, error, /* require_checksum = */ true);\n+                        if (!mData.parsed_desc) {\n+                            throw wallet::InvalidAddressOrKey(error);\n+                        }\n+                        if (mData.parsed_desc->GetOutputType() == OutputType::BECH32M) {\n+                            throw wallet::InvalidAddressOrKey(\"Bech32m descriptors cannot be imported into legacy wallets\");\n+                        }\n+                        bool range_exists = (mData.range_start && mData.range_end);\n+                        if (!mData.parsed_desc->IsRange() && range_exists) {\n+                            throw wallet::InvalidParameter(\"Range should not be specified for an un-ranged descriptor\");\n+                        } else if (mData.parsed_desc->IsRange()) {\n+                            if (!range_exists) {\n+                                throw wallet::InvalidParameter(\"Descriptor is ranged, please specify the range\");\n+                            }\n+                            RangeDescriptorCheck(mData.range_start, mData.range_end);\n+                        }\n+                    }\n+                    walletModel->wallet().ProcessImport(mData, result.warnings, isScript, keys, timestamp);\n+                    result.success = true;\n+                } catch (const wallet::MiscError& e) {\n+                    result.success = false;\n+                    result.error = e.error;\n+                } catch (const wallet::WalletError& e) {\n+                    result.success = false;\n+                    result.error = e.error;\n+                } catch (const wallet::InvalidAddressOrKey& e) {\n+                    result.success = false;\n+                    result.error = e.error;\n+                } catch (const wallet::InvalidParameter& e) {\n+                    result.success = false;\n+                    result.error = e.error;\n+                } catch (...) {\n+                    result.success = false;\n+                    result.error = \"Missing required fields\";\n+                }\n+\n+                response.push_back(result);\n+\n+                if (!fRescan) {\n+                    continue;\n+                }\n+\n+                // If at least one request was successful then allow rescan.\n+                if (result.success) {\n+                    fRunScan = true;\n+                }\n+\n+                // Get the lowest timestamp.\n+                if (timestamp < nLowestTimestamp) {\n+                    nLowestTimestamp = timestamp;\n+                }\n+            }\n+\n+            if (fRescan && fRunScan && ui->entries->count()) {\n+                int64_t scannedTime = walletModel->wallet().RescanFromTime(nLowestTimestamp, reserver, true);\n+                walletModel->wallet().ReacceptWalletTransactions();\n+\n+                if (walletModel->wallet().IsAbortingRescan()) {\n+                    QMessageBox::critical(this, tr(\"Misc Error\"),\n+                                          tr(\"Rescan aborted by user.\"));\n+\n+                    if (scannedTime > nLowestTimestamp) {\n+                        std::vector <resultpdi> results = response;\n+                        response.clear();\n+\n+                        for (int i = 0; i < ui->entries->count(); ++i) {\n+                            ImportEntry *entry = qobject_cast<ImportEntry *>(ui->entries->itemAt(i)->widget());\n+                            // If key creation date is within the successfully scanned\n+                            // range, or if the import result already has an error set, let\n+                            // the result stand unmodified. Otherwise, replace the result\n+                            // with an error message.\n+                            if (scannedTime <= GetImportTimestamp(entry->getMultiData().timestamp, now) || !results.at(i).error.empty()) {\n+                                response.push_back(results.at(i));\n+                            } else {\n+                                resultpdi result;\n+                                result.success = false;\n+                                result.error = strprintf(\n+                                                \"Rescan failed for key with creation timestamp %d. There was an error reading a \"\n+                                                \"block from time %d, which is after or within %d seconds of key creation, and \"\n+                                                \"could contain transactions pertaining to the key. As a result, transactions \"\n+                                                \"and coins using this key may not appear in the wallet. This error could be \"\n+                                                \"caused by pruning or data corruption (see bitcoind log for details) and could \"\n+                                                \"be dealt with by downloading and rescanning the relevant blocks (see -reindex \"\n+                                                \"option and rescanblockchain RPC).\",\n+                                                GetImportTimestamp(entry->getMultiData().timestamp, now), scannedTime - TIMESTAMP_WINDOW - 1,\n+                                                TIMESTAMP_WINDOW);\n+                                response.push_back(std::move(result));\n+                            }\n+                        }\n+                    }\n+                }\n+            }\n+            for (int i = 0; i < response.size(); i++) {\n+                if (!response[i].success) {\n+                    std::string warning_str;\n+                    if (response[i].warnings.size() != 0) {\n+                        for (auto w: response[i].warnings) {\n+                            warning_str += w + \"\\n\";\n+                        }\n+                    }\n+                    QMessageBox::critical(this, QString::fromStdString(\"Error: input box # \") + QString::number(i),",
      "path": "src/qt/importdialog.cpp",
      "position": null,
      "original_position": 234,
      "commit_id": "b2b00af1d37dd69c3e64d905984e68ac6a6b2d8f",
      "original_commit_id": "adf1a83caf37b04bfd6c86179b7121ca62d14055",
      "in_reply_to_id": 940634109,
      "user": {
        "login": "KolbyML",
        "id": 31669092,
        "node_id": "MDQ6VXNlcjMxNjY5MDky",
        "avatar_url": "https://avatars.githubusercontent.com/u/31669092?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/KolbyML",
        "html_url": "https://github.com/KolbyML",
        "followers_url": "https://api.github.com/users/KolbyML/followers",
        "following_url": "https://api.github.com/users/KolbyML/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/KolbyML/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/KolbyML/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/KolbyML/subscriptions",
        "organizations_url": "https://api.github.com/users/KolbyML/orgs",
        "repos_url": "https://api.github.com/users/KolbyML/repos",
        "events_url": "https://api.github.com/users/KolbyML/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/KolbyML/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "done",
      "created_at": "2022-08-10T00:34:08Z",
      "updated_at": "2022-08-10T00:34:09Z",
      "html_url": "https://github.com/bitcoin-core/gui/pull/650#discussion_r941910166",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/gui/pulls/comments/941910166"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/gui/pulls/650"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 504,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/gui/pulls/comments/941910379",
      "pull_request_review_id": 1067524158,
      "id": 941910379,
      "node_id": "PRRC_kwDOEEET9c44JGlr",
      "diff_hunk": "@@ -298,5 +344,377 @@ void ImportDialog::on_Accept_clicked() {\n             }\n             break;\n         }\n+        case importMulti: {\n+            bool fRescan = true;\n+            if (!ui->rescanButtonIA->isChecked())\n+                fRescan = false;\n+\n+            if (fRescan && walletModel->wallet().chain().havePruned()) {\n+                // Exit early and print an error.\n+                // If a block is pruned after this check, we will import the key(s),\n+                // but fail the rescan with a generic error.\n+                QMessageBox::critical(this, tr(\"Rescan failed\"), tr(\"Rescan is disabled when blocks are pruned\"));\n+                break;\n+            }\n+\n+            wallet::WalletRescanReserver reserver = walletModel->wallet().getReserver();\n+            if (fRescan && !reserver.reserve()) {\n+                QMessageBox::critical(this, tr(\"Rescan failed\"),\n+                                      tr(\"Wallet is currently rescanning. Abort existing rescan or wait.\"));\n+                break;\n+            }\n+\n+            int64_t now = 0;\n+            bool fRunScan = false;\n+            int64_t nLowestTimestamp = 0;\n+            std::vector<resultpdi> response = {};\n+\n+            WalletModel::UnlockContext ctx(walletModel->requestUnlock());\n+            if (!ctx.isValid()) {\n+                break;\n+            }\n+\n+            // Verify all timestamps are present before importing any keys.\n+            CHECK_NONFATAL(walletModel->wallet().chain().findBlock(walletModel->wallet().GetLastBlockHash(),\n+                                                                   interfaces::FoundBlock().time(nLowestTimestamp).mtpTime(now)));\n+            const int64_t minimumTimestamp = 1;\n+\n+            for (int i = 0; i < ui->entries->count(); ++i) {\n+                ImportEntry *entry = qobject_cast<ImportEntry *>(ui->entries->itemAt(i)->widget());\n+                wallet::ImportMultiData mData = entry->getMultiData();\n+                const int64_t timestamp = std::max(GetImportTimestamp(mData.timestamp, now), minimumTimestamp);\n+                resultpdi result;\n+\n+                try {\n+                    // Internal addresses should not have a label\n+                    if (mData.internal && !mData.label.empty()) {\n+                        throw wallet::InvalidParameter(\"Internal addresses should not have a label\");\n+                    }\n+\n+                    bool isScript = false;\n+                    FlatSigningProvider keys;\n+                    if (!mData.scriptPubKey.empty()) {\n+                        // if the input isn't a valid address assume it is a script\n+                        CTxDestination dest = DecodeDestination(mData.scriptPubKey);\n+                        if (!IsValidDestination(dest)) {\n+                            isScript = true;\n+                        }\n+                    } else {\n+                        std::string error;\n+                        mData.parsed_desc = Parse(entry->getDesc(), keys, error, /* require_checksum = */ true);\n+                        if (!mData.parsed_desc) {\n+                            throw wallet::InvalidAddressOrKey(error);\n+                        }\n+                        if (mData.parsed_desc->GetOutputType() == OutputType::BECH32M) {\n+                            throw wallet::InvalidAddressOrKey(\"Bech32m descriptors cannot be imported into legacy wallets\");\n+                        }\n+                        bool range_exists = (mData.range_start && mData.range_end);\n+                        if (!mData.parsed_desc->IsRange() && range_exists) {\n+                            throw wallet::InvalidParameter(\"Range should not be specified for an un-ranged descriptor\");\n+                        } else if (mData.parsed_desc->IsRange()) {\n+                            if (!range_exists) {\n+                                throw wallet::InvalidParameter(\"Descriptor is ranged, please specify the range\");\n+                            }\n+                            RangeDescriptorCheck(mData.range_start, mData.range_end);\n+                        }\n+                    }\n+                    walletModel->wallet().ProcessImport(mData, result.warnings, isScript, keys, timestamp);\n+                    result.success = true;\n+                } catch (const wallet::MiscError& e) {\n+                    result.success = false;\n+                    result.error = e.error;\n+                } catch (const wallet::WalletError& e) {\n+                    result.success = false;\n+                    result.error = e.error;\n+                } catch (const wallet::InvalidAddressOrKey& e) {\n+                    result.success = false;\n+                    result.error = e.error;\n+                } catch (const wallet::InvalidParameter& e) {\n+                    result.success = false;\n+                    result.error = e.error;\n+                } catch (...) {\n+                    result.success = false;\n+                    result.error = \"Missing required fields\";\n+                }\n+\n+                response.push_back(result);\n+\n+                if (!fRescan) {\n+                    continue;\n+                }\n+\n+                // If at least one request was successful then allow rescan.\n+                if (result.success) {\n+                    fRunScan = true;\n+                }\n+\n+                // Get the lowest timestamp.\n+                if (timestamp < nLowestTimestamp) {\n+                    nLowestTimestamp = timestamp;\n+                }\n+            }\n+\n+            if (fRescan && fRunScan && ui->entries->count()) {\n+                int64_t scannedTime = walletModel->wallet().RescanFromTime(nLowestTimestamp, reserver, true);\n+                walletModel->wallet().ReacceptWalletTransactions();\n+\n+                if (walletModel->wallet().IsAbortingRescan()) {\n+                    QMessageBox::critical(this, tr(\"Misc Error\"),\n+                                          tr(\"Rescan aborted by user.\"));\n+\n+                    if (scannedTime > nLowestTimestamp) {\n+                        std::vector <resultpdi> results = response;\n+                        response.clear();\n+\n+                        for (int i = 0; i < ui->entries->count(); ++i) {\n+                            ImportEntry *entry = qobject_cast<ImportEntry *>(ui->entries->itemAt(i)->widget());\n+                            // If key creation date is within the successfully scanned\n+                            // range, or if the import result already has an error set, let\n+                            // the result stand unmodified. Otherwise, replace the result\n+                            // with an error message.\n+                            if (scannedTime <= GetImportTimestamp(entry->getMultiData().timestamp, now) || !results.at(i).error.empty()) {\n+                                response.push_back(results.at(i));\n+                            } else {\n+                                resultpdi result;\n+                                result.success = false;\n+                                result.error = strprintf(\n+                                                \"Rescan failed for key with creation timestamp %d. There was an error reading a \"\n+                                                \"block from time %d, which is after or within %d seconds of key creation, and \"\n+                                                \"could contain transactions pertaining to the key. As a result, transactions \"\n+                                                \"and coins using this key may not appear in the wallet. This error could be \"\n+                                                \"caused by pruning or data corruption (see bitcoind log for details) and could \"\n+                                                \"be dealt with by downloading and rescanning the relevant blocks (see -reindex \"\n+                                                \"option and rescanblockchain RPC).\",\n+                                                GetImportTimestamp(entry->getMultiData().timestamp, now), scannedTime - TIMESTAMP_WINDOW - 1,\n+                                                TIMESTAMP_WINDOW);\n+                                response.push_back(std::move(result));\n+                            }\n+                        }\n+                    }\n+                }\n+            }\n+            for (int i = 0; i < response.size(); i++) {\n+                if (!response[i].success) {\n+                    std::string warning_str;\n+                    if (response[i].warnings.size() != 0) {\n+                        for (auto w: response[i].warnings) {\n+                            warning_str += w + \"\\n\";\n+                        }\n+                    }\n+                    QMessageBox::critical(this, QString::fromStdString(\"Error: input box # \") + QString::number(i),\n+                                          QString::fromStdString(\"Error:\" + response[i].error+\"\\n\"+\n+                                          \"Warnings:\"+\"\\n\" + warning_str));\n+                }\n+            }\n+            break;\n+        }\n+        case importDescriptors: {\n+            wallet::WalletRescanReserver reserver = walletModel->wallet().getReserver();\n+            if (!reserver.reserve()) {\n+                QMessageBox::critical(this, tr(\"Rescan failed\"),\n+                                      tr(\"Wallet is currently rescanning. Abort existing rescan or wait.\"));\n+                break;\n+            }\n+\n+            const int64_t minimum_timestamp = 1;\n+            int64_t now = 0;\n+            int64_t lowest_timestamp = 0;\n+            bool rescan = false;\n+            std::vector<resultpdi> response = {};\n+\n+            WalletModel::UnlockContext ctx(walletModel->requestUnlock());\n+            if (!ctx.isValid()) {\n+                break;\n+            }\n+\n+            CHECK_NONFATAL(walletModel->wallet().chain().findBlock(walletModel->wallet().GetLastBlockHash(),\n+                                                                   interfaces::FoundBlock().time(lowest_timestamp).mtpTime(now)));\n+\n+            // Get all timestamps and extract the lowest timestamp\n+            for (int i = 0; i < ui->entries->count(); ++i) {\n+                ImportEntry *entry = qobject_cast<ImportEntry *>(ui->entries->itemAt(i)->widget());\n+\n+                // This throws an error if \"timestamp\" doesn't exist\n+                wallet::ImportDescriptorData dData = entry->getDescriptorData();\n+                const int64_t timestamp = std::max(GetImportTimestamp(dData.timestamp, now), minimum_timestamp);\n+                resultpdi result;\n+\n+                try {\n+                    // Parse descriptor string\n+                    FlatSigningProvider keys;\n+                    std::string error;\n+                    dData.parsed_desc = Parse(entry->getDesc(), keys, error, /* require_checksum = */ true);\n+                    if (!dData.parsed_desc) {\n+                        throw wallet::InvalidAddressOrKey(error);\n+                    }\n+\n+                    bool range_exists = (dData.range_start && dData.range_end);",
      "path": "src/qt/importdialog.cpp",
      "position": null,
      "original_position": 281,
      "commit_id": "b2b00af1d37dd69c3e64d905984e68ac6a6b2d8f",
      "original_commit_id": "adf1a83caf37b04bfd6c86179b7121ca62d14055",
      "in_reply_to_id": 940640962,
      "user": {
        "login": "KolbyML",
        "id": 31669092,
        "node_id": "MDQ6VXNlcjMxNjY5MDky",
        "avatar_url": "https://avatars.githubusercontent.com/u/31669092?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/KolbyML",
        "html_url": "https://github.com/KolbyML",
        "followers_url": "https://api.github.com/users/KolbyML/followers",
        "following_url": "https://api.github.com/users/KolbyML/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/KolbyML/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/KolbyML/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/KolbyML/subscriptions",
        "organizations_url": "https://api.github.com/users/KolbyML/orgs",
        "repos_url": "https://api.github.com/users/KolbyML/repos",
        "events_url": "https://api.github.com/users/KolbyML/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/KolbyML/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "done",
      "created_at": "2022-08-10T00:34:47Z",
      "updated_at": "2022-08-10T00:34:47Z",
      "html_url": "https://github.com/bitcoin-core/gui/pull/650#discussion_r941910379",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/gui/pulls/comments/941910379"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/gui/pulls/650"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 551,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/gui/pulls/comments/941911000",
      "pull_request_review_id": 1067524978,
      "id": 941911000,
      "node_id": "PRRC_kwDOEEET9c44JGvY",
      "diff_hunk": "@@ -0,0 +1,244 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#if defined(HAVE_CONFIG_H)\n+#include <config/bitcoin-config.h>\n+#endif\n+\n+#include <qt/importentry.h>\n+#include <qt/forms/ui_importentry.h>\n+\n+#include <qt/addressbookpage.h>\n+#include <qt/addresstablemodel.h>\n+#include <qt/guiutil.h>\n+#include <qt/optionsmodel.h>\n+#include <qt/walletmodel.h>\n+#include <util/string.h>\n+#include <wallet/imports.h>\n+\n+#include <QGroupBox>\n+#include <QApplication>\n+#include <QClipboard>\n+\n+ImportEntry::ImportEntry(EntryPage _entryPage, QWidget *parent) :\n+        QStackedWidget(parent),\n+        ui(new Ui::ImportEntry),\n+        model(nullptr),\n+        entryPage(_entryPage)\n+{\n+    ui->setupUi(this);\n+\n+    switch (entryPage) {\n+        case importMultiEntry: {\n+            setCurrentWidget(ui->importMultiEntry);\n+            connect(ui->importScriptPubKeyRadio, &QRadioButton::clicked, this, &ImportEntry::changeImportDialog);\n+            connect(ui->importDescriptorRadio, &QRadioButton::clicked, this, &ImportEntry::changeImportDialog);\n+            connect(ui->hideScriptsButton, &QPushButton::clicked, this, &ImportEntry::useHideScriptsButtonClicked);\n+            connect(ui->deleteMultiButton, &QPushButton::clicked, this, &ImportEntry::deleteMultiClicked);\n+\n+            ui->redeemScriptLabel->hide();\n+            ui->redeemScript->hide();\n+            ui->witnessScriptLabel->hide();\n+            ui->witnessScript->hide();\n+            ui->descLabelMulti->hide();\n+            ui->descMulti->hide();\n+\n+            ui->timestampMulti->setValidator(new Int64_tValidator(0, 0x7FFFFFFFFFFFFFFF, this));\n+            ui->startRangeMulti->setRange(0, 0x7FFFFFFF);\n+            ui->endRangeMulti->setRange(0, 0x7FFFFFFF);\n+            connect(ui->checkboxInternalMulti, &QCheckBox::clicked, this, &ImportEntry::hideLabel);\n+            break;\n+        } case importDescriptorsEntry: {\n+            setCurrentWidget(ui->importDescriptorsEntry);\n+            ui->nextIndexLabel->hide();\n+            ui->hiddenMenu->hide();\n+            ui->timestamp->setValidator(new Int64_tValidator(0, 0x7FFFFFFFFFFFFFFF, this));\n+            ui->nextIndex->setRange(0, 0x7FFFFFFF);\n+            ui->startRange->setRange(0, 0x7FFFFFFF);\n+            ui->endRange->setRange(0, 0x7FFFFFFF);\n+            connect(ui->hiddenButton, &QPushButton::clicked, this, &ImportEntry::usehiddenButtonClicked);\n+            connect(ui->deleteDescriptorButton, &QPushButton::clicked, this, &ImportEntry::deleteDescriptorClicked);\n+            connect(ui->checkboxInternal, &QCheckBox::clicked, this, &ImportEntry::hideLabelDesc);\n+            break;\n+        }\n+    }\n+}\n+\n+ImportEntry::~ImportEntry()\n+{\n+    delete ui;\n+}\n+\n+void ImportEntry::setModel(WalletModel *_model)\n+{\n+    this->model = _model;\n+}\n+\n+void ImportEntry::usehiddenButtonClicked()\n+{\n+    if (!hiddenButtonState) {\n+        ui->nextIndexLabel->show();\n+        ui->hiddenMenu->show();\n+        hiddenButtonState = true;\n+        ui->hiddenButton->setText(\"△\");\n+    } else {\n+        ui->nextIndexLabel->hide();\n+        ui->hiddenMenu->hide();\n+        hiddenButtonState = false;\n+        ui->hiddenButton->setText(\"▽\");\n+    }\n+}\n+\n+void ImportEntry::useHideScriptsButtonClicked()\n+{\n+    if (!hideScriptsButtonState) {\n+        ui->redeemScriptLabel->show();\n+        ui->redeemScript->show();\n+\n+        ui->witnessScriptLabel->show();\n+        ui->witnessScript->show();\n+        hideScriptsButtonState = true;\n+        ui->hideScriptsButton->setText(\"△\");\n+    } else {\n+        ui->redeemScriptLabel->hide();\n+        ui->redeemScript->hide();\n+\n+        ui->witnessScriptLabel->hide();\n+        ui->witnessScript->hide();\n+        hideScriptsButtonState = false;\n+        ui->hideScriptsButton->setText(\"▽\");\n+    }\n+}\n+\n+void ImportEntry::hideLabel()\n+{\n+    if (ui->checkboxInternalMulti->isChecked()) {\n+        ui->labelLabelMulti->hide();\n+        ui->labelMulti->hide();\n+    } else {\n+        ui->labelLabelMulti->show();\n+        ui->labelMulti->show();\n+    }\n+}\n+\n+void ImportEntry::hideLabelDesc()\n+{\n+    if (ui->checkboxInternal->isChecked()) {\n+        ui->labelLabel->hide();\n+        ui->label->hide();\n+    } else {\n+        ui->labelLabel->show();\n+        ui->label->show();\n+    }\n+}\n+\n+void ImportEntry::changeImportDialog()\n+{\n+    if (ui->importScriptPubKeyRadio->isChecked()) {\n+        ui->scriptPubKeyLabel->show();\n+        ui->scriptPubKey->show();\n+        ui->hideScriptsButton->show();\n+\n+        ui->redeemScriptLabel->hide();\n+        ui->redeemScript->hide();\n+\n+        ui->witnessScriptLabel->hide();\n+        ui->witnessScript->hide();\n+\n+        ui->publicKeyLabel->show();\n+        ui->publicKey->show();\n+\n+        ui->descLabelMulti->hide();\n+        ui->descMulti->hide();\n+    } else {\n+        ui->scriptPubKeyLabel->hide();\n+        ui->scriptPubKey->hide();\n+        ui->hideScriptsButton->hide();\n+\n+        ui->redeemScriptLabel->hide();\n+        ui->redeemScript->hide();\n+\n+        ui->witnessScriptLabel->hide();\n+        ui->witnessScript->hide();\n+\n+        ui->publicKeyLabel->hide();\n+        ui->publicKey->hide();\n+        ui->descLabelMulti->show();\n+        ui->descMulti->show();\n+    }\n+}\n+\n+wallet::ImportMultiData ImportEntry::getMultiData()\n+{\n+    wallet::ImportMultiData multiData;\n+\n+    if (ui->importScriptPubKeyRadio->isChecked()) {\n+        multiData.scriptPubKey = ui->scriptPubKey->text().toStdString();\n+        multiData.redeem_script = ui->redeemScript->text().toStdString();\n+        multiData.witness_script = ui->witnessScript->text().toStdString();\n+        multiData.pubkeys = SplitString(ui->publicKey->text().toStdString(), ',');",
      "path": "src/qt/importentry.cpp",
      "position": null,
      "original_position": 180,
      "commit_id": "b2b00af1d37dd69c3e64d905984e68ac6a6b2d8f",
      "original_commit_id": "46fea2598202b093c2035276b232e0f94c7e869f",
      "in_reply_to_id": 940650877,
      "user": {
        "login": "KolbyML",
        "id": 31669092,
        "node_id": "MDQ6VXNlcjMxNjY5MDky",
        "avatar_url": "https://avatars.githubusercontent.com/u/31669092?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/KolbyML",
        "html_url": "https://github.com/KolbyML",
        "followers_url": "https://api.github.com/users/KolbyML/followers",
        "following_url": "https://api.github.com/users/KolbyML/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/KolbyML/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/KolbyML/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/KolbyML/subscriptions",
        "organizations_url": "https://api.github.com/users/KolbyML/orgs",
        "repos_url": "https://api.github.com/users/KolbyML/repos",
        "events_url": "https://api.github.com/users/KolbyML/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/KolbyML/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "done",
      "created_at": "2022-08-10T00:36:48Z",
      "updated_at": "2022-08-10T00:36:48Z",
      "html_url": "https://github.com/bitcoin-core/gui/pull/650#discussion_r941911000",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/gui/pulls/comments/941911000"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/gui/pulls/650"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 180,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/gui/pulls/comments/941917557",
      "pull_request_review_id": 1067532859,
      "id": 941917557,
      "node_id": "PRRC_kwDOEEET9c44JIV1",
      "diff_hunk": "@@ -1375,7 +975,102 @@ RPCHelpMan importmulti()\n \n         for (const UniValue& data : requests.getValues()) {\n             const int64_t timestamp = std::max(GetImportTimestamp(data, now), minimumTimestamp);\n-            const UniValue result = ProcessImport(*pwallet, data, timestamp);\n+            ImportMultiData multi_data = {};\n+            std::vector<std::string> warnings;\n+            UniValue result(UniValue::VOBJ);\n+            try {\n+                multi_data.internal = data.exists(\"internal\") ? data[\"internal\"].get_bool() : false;\n+                // Internal addresses should not have a label\n+                if (multi_data.internal && data.exists(\"label\")) {\n+                    throw InvalidParameter(\"Internal addresses should not have a label\");\n+                }\n+                multi_data.label = data.exists(\"label\") ? data[\"label\"].get_str() : \"\";\n+                multi_data.keypool = data.exists(\"keypool\") ? data[\"keypool\"].get_bool() : false;\n+\n+                multi_data.watch_only = data.exists(\"watchonly\") ? data[\"watchonly\"].get_bool() : false;\n+\n+                multi_data.keys = {};\n+                if (data.exists(\"keys\"))\n+                    for (size_t i = 0; i < data[\"keys\"].get_array().size(); ++i)\n+                        multi_data.keys.push_back(data[\"keys\"].get_array()[i].get_str());\n+\n+                bool isScript;\n+                FlatSigningProvider keys;",
      "path": "src/wallet/rpc/backup.cpp",
      "position": null,
      "original_position": 441,
      "commit_id": "b2b00af1d37dd69c3e64d905984e68ac6a6b2d8f",
      "original_commit_id": "f718e24693f4d322d2a82d6f1f8f6d4add98c415",
      "in_reply_to_id": 940584862,
      "user": {
        "login": "KolbyML",
        "id": 31669092,
        "node_id": "MDQ6VXNlcjMxNjY5MDky",
        "avatar_url": "https://avatars.githubusercontent.com/u/31669092?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/KolbyML",
        "html_url": "https://github.com/KolbyML",
        "followers_url": "https://api.github.com/users/KolbyML/followers",
        "following_url": "https://api.github.com/users/KolbyML/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/KolbyML/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/KolbyML/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/KolbyML/subscriptions",
        "organizations_url": "https://api.github.com/users/KolbyML/orgs",
        "repos_url": "https://api.github.com/users/KolbyML/repos",
        "events_url": "https://api.github.com/users/KolbyML/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/KolbyML/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "done",
      "created_at": "2022-08-10T00:55:54Z",
      "updated_at": "2022-08-10T00:55:54Z",
      "html_url": "https://github.com/bitcoin-core/gui/pull/650#discussion_r941917557",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/gui/pulls/comments/941917557"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/gui/pulls/650"
        }
      },
      "start_line": null,
      "original_start_line": 997,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 948,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/gui/pulls/comments/941998667",
      "pull_request_review_id": 1067638119,
      "id": 941998667,
      "node_id": "PRRC_kwDOEEET9c44JcJL",
      "diff_hunk": "@@ -0,0 +1,302 @@\n+#include <qt/importdialog.h>\n+#include <qt/forms/ui_importdialog.h>\n+\n+#include <qt/guiconstants.h>\n+#include <qt/guiutil.h>\n+#include <key_io.h>\n+#include <qt/walletmodel.h>\n+#include <interfaces/node.h>\n+#include <wallet/wallet.h>\n+#include <QKeyEvent>\n+#include <QMessageBox>\n+#include <QPushButton>\n+#include <iostream>\n+#include <QScrollBar>\n+#include <tinyformat.h>\n+#include <chain.h>\n+\n+ImportDialog::ImportDialog(Page _page, QWidget *parent, WalletModel *walletModel) :\n+    QDialog(parent, GUIUtil::dialog_flags),\n+    ui(new Ui::ImportDialog),\n+    walletModel(walletModel),\n+    page(_page)\n+{\n+    ui->setupUi(this);\n+\n+    switch (page) {\n+        case importPubkey: {\n+            ui->QStackContainer->setCurrentWidget(ui->importKeyPage);\n+            this->setWindowTitle(\"Import Public Key\");\n+            ui->keyLabelIKP->setText(\"Public Key\");\n+            ui->keyEditIKP->setPlaceholderText(\"Enter a Public Key (e.g. 1NS17iag9jJgTHDlVXjvLCEnZuQ3rJDE9L)\");\n+            ui->rescanButtonIKP->setCheckState(Qt::Checked);\n+            break;\n+        } case importPrivkey: {\n+            ui->QStackContainer->setCurrentWidget(ui->importKeyPage);\n+            this->setWindowTitle(\"Import Private Key\");\n+            ui->keyLabelIKP->setText(\"Private Key\");\n+            ui->keyEditIKP->setPlaceholderText(\"Enter a Private Key (e.g. L4sTHokqoFZpcmJgsAG2yxrf2f71v6PYpK2qEkCvc2Fp8VVdMiU3)\");\n+            ui->rescanButtonIKP->setCheckState(Qt::Checked);\n+            break;\n+        } case importAddress: {\n+            ui->QStackContainer->setCurrentWidget(ui->importAddress);\n+            this->setWindowTitle(\"Import Address\");\n+            ui->rescanButtonIA->setCheckState(Qt::Checked);\n+            ui->p2shButtonIA->setCheckState(Qt::Unchecked);\n+            break;\n+        }\n+    }\n+\n+    GUIUtil::handleCloseWindowShortcut(this);\n+}\n+\n+ImportDialog::~ImportDialog()\n+{\n+    delete ui;\n+}\n+\n+void ImportDialog::on_Accept_clicked() {\n+    switch (page) {\n+        case importPubkey: {\n+            std::string strKey = \"\";\n+            strKey.assign(ui->keyEditIKP->text().toStdString().c_str());\n+\n+            if (strKey.empty()) {\n+                QMessageBox::warning(this, tr(\"Error\"), tr(\"Key is empty\"));\n+                break;\n+            }\n+\n+            std::string strLabel;\n+            strLabel.assign(ui->labelEditIKP->text().toStdString().c_str());\n+\n+            // Whether to perform rescan after import\n+            bool fRescan = true;\n+            if (!ui->rescanButtonIKP->isChecked())\n+                fRescan = false;\n+\n+            if (fRescan && walletModel->wallet().chain().havePruned()) {\n+                // Exit early and print an error.\n+                // If a block is pruned after this check, we will import the key(s),\n+                // but fail the rescan with a generic error.\n+                QMessageBox::critical(this, tr(\"Rescan failed\"), tr(\"Rescan is disabled when blocks are pruned\"));\n+                break;\n+            }\n+\n+\n+            wallet::WalletRescanReserver reserver = walletModel->wallet().getReserver();\n+            if (fRescan && !reserver.reserve()) {\n+                QMessageBox::critical(this, tr(\"Rescan failed\"),\n+                                      tr(\"Wallet is currently rescanning. Abort existing rescan or wait.\"));\n+                break;\n+            }\n+\n+            if (!IsHex(strKey)) {\n+                QMessageBox::critical(this, tr(\"Invalid Public Key\"), tr(\"Pubkey must be a hex string\"));\n+                break;\n+            }\n+\n+            std::vector<unsigned char> data(ParseHex(strKey));\n+            CPubKey pubKey(data);\n+            if (!pubKey.IsFullyValid()) {\n+                QMessageBox::critical(this, tr(\"Invalid Public Key\"),\n+                                      tr(\"Pubkey is not a valid public key\"));\n+                break;\n+            }\n+\n+            std::set<CScript> script_pub_keys;\n+            for (const auto &dest: GetAllDestinationsForKey(pubKey)) {\n+                script_pub_keys.insert(GetScriptForDestination(dest));\n+            }\n+\n+            walletModel->wallet().MarkDirty();\n+            walletModel->wallet().ImportScriptPubKeys(strLabel, script_pub_keys, true, true, 1);\n+            walletModel->wallet().ImportPubKeys({pubKey.GetID()}, {{pubKey.GetID(), pubKey}}, {}, false, false, 1);",
      "path": "src/qt/importdialog.cpp",
      "position": null,
      "original_position": 113,
      "commit_id": "b2b00af1d37dd69c3e64d905984e68ac6a6b2d8f",
      "original_commit_id": "3a75af09dbb6c182a86ce71b15fe0824d3c68ac5",
      "in_reply_to_id": 940609847,
      "user": {
        "login": "KolbyML",
        "id": 31669092,
        "node_id": "MDQ6VXNlcjMxNjY5MDky",
        "avatar_url": "https://avatars.githubusercontent.com/u/31669092?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/KolbyML",
        "html_url": "https://github.com/KolbyML",
        "followers_url": "https://api.github.com/users/KolbyML/followers",
        "following_url": "https://api.github.com/users/KolbyML/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/KolbyML/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/KolbyML/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/KolbyML/subscriptions",
        "organizations_url": "https://api.github.com/users/KolbyML/orgs",
        "repos_url": "https://api.github.com/users/KolbyML/repos",
        "events_url": "https://api.github.com/users/KolbyML/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/KolbyML/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "done",
      "created_at": "2022-08-10T04:11:04Z",
      "updated_at": "2022-08-10T04:11:04Z",
      "html_url": "https://github.com/bitcoin-core/gui/pull/650#discussion_r941998667",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/gui/pulls/comments/941998667"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/gui/pulls/650"
        }
      },
      "start_line": null,
      "original_start_line": 106,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 156,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/gui/pulls/comments/941998734",
      "pull_request_review_id": 1067638211,
      "id": 941998734,
      "node_id": "PRRC_kwDOEEET9c44JcKO",
      "diff_hunk": "@@ -0,0 +1,302 @@\n+#include <qt/importdialog.h>\n+#include <qt/forms/ui_importdialog.h>\n+\n+#include <qt/guiconstants.h>\n+#include <qt/guiutil.h>\n+#include <key_io.h>\n+#include <qt/walletmodel.h>\n+#include <interfaces/node.h>\n+#include <wallet/wallet.h>\n+#include <QKeyEvent>\n+#include <QMessageBox>\n+#include <QPushButton>\n+#include <iostream>\n+#include <QScrollBar>\n+#include <tinyformat.h>\n+#include <chain.h>\n+\n+ImportDialog::ImportDialog(Page _page, QWidget *parent, WalletModel *walletModel) :\n+    QDialog(parent, GUIUtil::dialog_flags),\n+    ui(new Ui::ImportDialog),\n+    walletModel(walletModel),\n+    page(_page)\n+{\n+    ui->setupUi(this);\n+\n+    switch (page) {\n+        case importPubkey: {\n+            ui->QStackContainer->setCurrentWidget(ui->importKeyPage);\n+            this->setWindowTitle(\"Import Public Key\");\n+            ui->keyLabelIKP->setText(\"Public Key\");\n+            ui->keyEditIKP->setPlaceholderText(\"Enter a Public Key (e.g. 1NS17iag9jJgTHDlVXjvLCEnZuQ3rJDE9L)\");\n+            ui->rescanButtonIKP->setCheckState(Qt::Checked);\n+            break;\n+        } case importPrivkey: {\n+            ui->QStackContainer->setCurrentWidget(ui->importKeyPage);\n+            this->setWindowTitle(\"Import Private Key\");\n+            ui->keyLabelIKP->setText(\"Private Key\");\n+            ui->keyEditIKP->setPlaceholderText(\"Enter a Private Key (e.g. L4sTHokqoFZpcmJgsAG2yxrf2f71v6PYpK2qEkCvc2Fp8VVdMiU3)\");\n+            ui->rescanButtonIKP->setCheckState(Qt::Checked);\n+            break;\n+        } case importAddress: {\n+            ui->QStackContainer->setCurrentWidget(ui->importAddress);\n+            this->setWindowTitle(\"Import Address\");\n+            ui->rescanButtonIA->setCheckState(Qt::Checked);\n+            ui->p2shButtonIA->setCheckState(Qt::Unchecked);\n+            break;\n+        }\n+    }\n+\n+    GUIUtil::handleCloseWindowShortcut(this);\n+}\n+\n+ImportDialog::~ImportDialog()\n+{\n+    delete ui;\n+}\n+\n+void ImportDialog::on_Accept_clicked() {\n+    switch (page) {\n+        case importPubkey: {\n+            std::string strKey = \"\";\n+            strKey.assign(ui->keyEditIKP->text().toStdString().c_str());\n+\n+            if (strKey.empty()) {\n+                QMessageBox::warning(this, tr(\"Error\"), tr(\"Key is empty\"));\n+                break;\n+            }\n+\n+            std::string strLabel;\n+            strLabel.assign(ui->labelEditIKP->text().toStdString().c_str());\n+\n+            // Whether to perform rescan after import\n+            bool fRescan = true;\n+            if (!ui->rescanButtonIKP->isChecked())\n+                fRescan = false;\n+\n+            if (fRescan && walletModel->wallet().chain().havePruned()) {\n+                // Exit early and print an error.\n+                // If a block is pruned after this check, we will import the key(s),\n+                // but fail the rescan with a generic error.\n+                QMessageBox::critical(this, tr(\"Rescan failed\"), tr(\"Rescan is disabled when blocks are pruned\"));\n+                break;\n+            }\n+\n+\n+            wallet::WalletRescanReserver reserver = walletModel->wallet().getReserver();\n+            if (fRescan && !reserver.reserve()) {\n+                QMessageBox::critical(this, tr(\"Rescan failed\"),\n+                                      tr(\"Wallet is currently rescanning. Abort existing rescan or wait.\"));\n+                break;\n+            }\n+\n+            if (!IsHex(strKey)) {\n+                QMessageBox::critical(this, tr(\"Invalid Public Key\"), tr(\"Pubkey must be a hex string\"));\n+                break;\n+            }\n+\n+            std::vector<unsigned char> data(ParseHex(strKey));\n+            CPubKey pubKey(data);\n+            if (!pubKey.IsFullyValid()) {\n+                QMessageBox::critical(this, tr(\"Invalid Public Key\"),\n+                                      tr(\"Pubkey is not a valid public key\"));\n+                break;\n+            }\n+\n+            std::set<CScript> script_pub_keys;\n+            for (const auto &dest: GetAllDestinationsForKey(pubKey)) {\n+                script_pub_keys.insert(GetScriptForDestination(dest));\n+            }\n+\n+            walletModel->wallet().MarkDirty();\n+            walletModel->wallet().ImportScriptPubKeys(strLabel, script_pub_keys, true, true, 1);\n+            walletModel->wallet().ImportPubKeys({pubKey.GetID()}, {{pubKey.GetID(), pubKey}}, {}, false, false, 1);\n+\n+            if (fRescan) {\n+                int64_t scanned_time = walletModel->wallet().RescanFromTime(0, reserver, true);\n+                if (walletModel->wallet().IsAbortingRescan()) {\n+                    QMessageBox::critical(this, tr(\"Misc Error\"), tr(\"Rescan aborted by user.\"));\n+                    break;\n+                } else if (scanned_time > 0) {\n+                    QMessageBox::critical(this, tr(\"Wallet Error\"),\n+                                          tr(\"Rescan was unable to fully rescan the blockchain. Some transactions may be missing.\"));\n+                    break;\n+                }\n+                walletModel->wallet().ReacceptWalletTransactions();\n+            }\n+            break;\n+        }\n+        case importPrivkey: {\n+            wallet::WalletRescanReserver reserver = walletModel->wallet().getReserver();\n+            bool fRescan = true;\n+            WalletModel::UnlockContext ctx(walletModel->requestUnlock());\n+            if (!ctx.isValid()) {\n+                break;\n+            }\n+\n+            std::string strSecret = \"\";\n+            strSecret.assign(ui->keyEditIKP->text().toStdString().c_str());\n+            if (strSecret.empty()) {\n+                QMessageBox::warning(this, tr(\"Error\"), tr(\"Key is empty\"));\n+                break;\n+            }\n+\n+            std::string strLabel = \"\";\n+            strLabel.assign(ui->labelEditIKP->text().toStdString().c_str());\n+\n+            // Whether to perform rescan after import\n+            if (!ui->rescanButtonIKP->isChecked())\n+                fRescan = false;\n+\n+            if (fRescan && walletModel->wallet().chain().havePruned()) {\n+                // Exit early and print an error.\n+                // If a block is pruned after this check, we will import the key(s),\n+                // but fail the rescan with a generic error.\n+                QMessageBox::critical(this, tr(\"Rescan failed\"), tr(\"Rescan is disabled when blocks are pruned\"));\n+                break;\n+            }\n+\n+            if (fRescan && !reserver.reserve()) {\n+                QMessageBox::critical(this, tr(\"Rescan failed\"),\n+                                      tr(\"Wallet is currently rescanning. Abort existing rescan or wait.\"));\n+                break;\n+            }\n+\n+            CKey key = DecodeSecret(strSecret);\n+            if (!key.IsValid()) {\n+                QMessageBox::critical(this, tr(\"Invalid Private Key\"), tr(\"Invalid private key encoding.\"));\n+                break;\n+            }\n+\n+            CPubKey pubkey = key.GetPubKey();\n+            CHECK_NONFATAL(key.VerifyPubKey(pubkey));\n+            CKeyID vchAddress = pubkey.GetID();\n+            {\n+                walletModel->wallet().MarkDirty();\n+\n+                // We don't know which corresponding address will be used;\n+                // label all new addresses, and label existing addresses if a\n+                // label was passed.\n+                for (const auto &dest: GetAllDestinationsForKey(pubkey)) {\n+                    if (!strLabel.empty() || !walletModel->wallet().FindAddressBookEntry(dest)) {\n+                        walletModel->wallet().setAddressBook(dest, strLabel, \"receive\");\n+                    }\n+                }\n+\n+                // Use timestamp of 1 to scan the whole chain\n+                if (!walletModel->wallet().ImportPrivKeys({{vchAddress, key}}, 1)) {\n+                    QMessageBox::critical(this, tr(\"Wallet Error\"), tr(\"Error adding key to wallet\"));\n+                    break;\n+                }\n+\n+                // Add the wpkh script for this key if possible\n+                if (pubkey.IsCompressed()) {\n+                    walletModel->wallet().ImportScripts({GetScriptForDestination(WitnessV0KeyHash(vchAddress))},\n+                                                        0 /* timestamp */);\n+                }\n+            }",
      "path": "src/qt/importdialog.cpp",
      "position": null,
      "original_position": 197,
      "commit_id": "b2b00af1d37dd69c3e64d905984e68ac6a6b2d8f",
      "original_commit_id": "3a75af09dbb6c182a86ce71b15fe0824d3c68ac5",
      "in_reply_to_id": 940611471,
      "user": {
        "login": "KolbyML",
        "id": 31669092,
        "node_id": "MDQ6VXNlcjMxNjY5MDky",
        "avatar_url": "https://avatars.githubusercontent.com/u/31669092?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/KolbyML",
        "html_url": "https://github.com/KolbyML",
        "followers_url": "https://api.github.com/users/KolbyML/followers",
        "following_url": "https://api.github.com/users/KolbyML/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/KolbyML/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/KolbyML/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/KolbyML/subscriptions",
        "organizations_url": "https://api.github.com/users/KolbyML/orgs",
        "repos_url": "https://api.github.com/users/KolbyML/repos",
        "events_url": "https://api.github.com/users/KolbyML/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/KolbyML/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "done",
      "created_at": "2022-08-10T04:11:17Z",
      "updated_at": "2022-08-10T04:11:17Z",
      "html_url": "https://github.com/bitcoin-core/gui/pull/650#discussion_r941998734",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/gui/pulls/comments/941998734"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/gui/pulls/650"
        }
      },
      "start_line": null,
      "original_start_line": 171,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 193,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/gui/pulls/comments/941998764",
      "pull_request_review_id": 1067638254,
      "id": 941998764,
      "node_id": "PRRC_kwDOEEET9c44JcKs",
      "diff_hunk": "@@ -0,0 +1,302 @@\n+#include <qt/importdialog.h>\n+#include <qt/forms/ui_importdialog.h>\n+\n+#include <qt/guiconstants.h>\n+#include <qt/guiutil.h>\n+#include <key_io.h>\n+#include <qt/walletmodel.h>\n+#include <interfaces/node.h>\n+#include <wallet/wallet.h>\n+#include <QKeyEvent>\n+#include <QMessageBox>\n+#include <QPushButton>\n+#include <iostream>\n+#include <QScrollBar>\n+#include <tinyformat.h>\n+#include <chain.h>\n+\n+ImportDialog::ImportDialog(Page _page, QWidget *parent, WalletModel *walletModel) :\n+    QDialog(parent, GUIUtil::dialog_flags),\n+    ui(new Ui::ImportDialog),\n+    walletModel(walletModel),\n+    page(_page)\n+{\n+    ui->setupUi(this);\n+\n+    switch (page) {\n+        case importPubkey: {\n+            ui->QStackContainer->setCurrentWidget(ui->importKeyPage);\n+            this->setWindowTitle(\"Import Public Key\");\n+            ui->keyLabelIKP->setText(\"Public Key\");\n+            ui->keyEditIKP->setPlaceholderText(\"Enter a Public Key (e.g. 1NS17iag9jJgTHDlVXjvLCEnZuQ3rJDE9L)\");\n+            ui->rescanButtonIKP->setCheckState(Qt::Checked);\n+            break;\n+        } case importPrivkey: {\n+            ui->QStackContainer->setCurrentWidget(ui->importKeyPage);\n+            this->setWindowTitle(\"Import Private Key\");\n+            ui->keyLabelIKP->setText(\"Private Key\");\n+            ui->keyEditIKP->setPlaceholderText(\"Enter a Private Key (e.g. L4sTHokqoFZpcmJgsAG2yxrf2f71v6PYpK2qEkCvc2Fp8VVdMiU3)\");\n+            ui->rescanButtonIKP->setCheckState(Qt::Checked);\n+            break;\n+        } case importAddress: {\n+            ui->QStackContainer->setCurrentWidget(ui->importAddress);\n+            this->setWindowTitle(\"Import Address\");\n+            ui->rescanButtonIA->setCheckState(Qt::Checked);\n+            ui->p2shButtonIA->setCheckState(Qt::Unchecked);\n+            break;\n+        }\n+    }\n+\n+    GUIUtil::handleCloseWindowShortcut(this);\n+}\n+\n+ImportDialog::~ImportDialog()\n+{\n+    delete ui;\n+}\n+\n+void ImportDialog::on_Accept_clicked() {\n+    switch (page) {\n+        case importPubkey: {\n+            std::string strKey = \"\";\n+            strKey.assign(ui->keyEditIKP->text().toStdString().c_str());\n+\n+            if (strKey.empty()) {\n+                QMessageBox::warning(this, tr(\"Error\"), tr(\"Key is empty\"));\n+                break;\n+            }\n+\n+            std::string strLabel;\n+            strLabel.assign(ui->labelEditIKP->text().toStdString().c_str());\n+\n+            // Whether to perform rescan after import\n+            bool fRescan = true;\n+            if (!ui->rescanButtonIKP->isChecked())\n+                fRescan = false;\n+\n+            if (fRescan && walletModel->wallet().chain().havePruned()) {\n+                // Exit early and print an error.\n+                // If a block is pruned after this check, we will import the key(s),\n+                // but fail the rescan with a generic error.\n+                QMessageBox::critical(this, tr(\"Rescan failed\"), tr(\"Rescan is disabled when blocks are pruned\"));\n+                break;\n+            }\n+\n+\n+            wallet::WalletRescanReserver reserver = walletModel->wallet().getReserver();\n+            if (fRescan && !reserver.reserve()) {\n+                QMessageBox::critical(this, tr(\"Rescan failed\"),\n+                                      tr(\"Wallet is currently rescanning. Abort existing rescan or wait.\"));\n+                break;\n+            }\n+\n+            if (!IsHex(strKey)) {\n+                QMessageBox::critical(this, tr(\"Invalid Public Key\"), tr(\"Pubkey must be a hex string\"));\n+                break;\n+            }\n+\n+            std::vector<unsigned char> data(ParseHex(strKey));\n+            CPubKey pubKey(data);\n+            if (!pubKey.IsFullyValid()) {\n+                QMessageBox::critical(this, tr(\"Invalid Public Key\"),\n+                                      tr(\"Pubkey is not a valid public key\"));\n+                break;\n+            }\n+\n+            std::set<CScript> script_pub_keys;\n+            for (const auto &dest: GetAllDestinationsForKey(pubKey)) {\n+                script_pub_keys.insert(GetScriptForDestination(dest));\n+            }\n+\n+            walletModel->wallet().MarkDirty();\n+            walletModel->wallet().ImportScriptPubKeys(strLabel, script_pub_keys, true, true, 1);\n+            walletModel->wallet().ImportPubKeys({pubKey.GetID()}, {{pubKey.GetID(), pubKey}}, {}, false, false, 1);\n+\n+            if (fRescan) {\n+                int64_t scanned_time = walletModel->wallet().RescanFromTime(0, reserver, true);\n+                if (walletModel->wallet().IsAbortingRescan()) {\n+                    QMessageBox::critical(this, tr(\"Misc Error\"), tr(\"Rescan aborted by user.\"));\n+                    break;\n+                } else if (scanned_time > 0) {\n+                    QMessageBox::critical(this, tr(\"Wallet Error\"),\n+                                          tr(\"Rescan was unable to fully rescan the blockchain. Some transactions may be missing.\"));\n+                    break;\n+                }\n+                walletModel->wallet().ReacceptWalletTransactions();\n+            }\n+            break;\n+        }\n+        case importPrivkey: {\n+            wallet::WalletRescanReserver reserver = walletModel->wallet().getReserver();\n+            bool fRescan = true;\n+            WalletModel::UnlockContext ctx(walletModel->requestUnlock());\n+            if (!ctx.isValid()) {\n+                break;\n+            }\n+\n+            std::string strSecret = \"\";\n+            strSecret.assign(ui->keyEditIKP->text().toStdString().c_str());\n+            if (strSecret.empty()) {\n+                QMessageBox::warning(this, tr(\"Error\"), tr(\"Key is empty\"));\n+                break;\n+            }\n+\n+            std::string strLabel = \"\";\n+            strLabel.assign(ui->labelEditIKP->text().toStdString().c_str());\n+\n+            // Whether to perform rescan after import\n+            if (!ui->rescanButtonIKP->isChecked())\n+                fRescan = false;\n+\n+            if (fRescan && walletModel->wallet().chain().havePruned()) {\n+                // Exit early and print an error.\n+                // If a block is pruned after this check, we will import the key(s),\n+                // but fail the rescan with a generic error.\n+                QMessageBox::critical(this, tr(\"Rescan failed\"), tr(\"Rescan is disabled when blocks are pruned\"));\n+                break;\n+            }\n+\n+            if (fRescan && !reserver.reserve()) {\n+                QMessageBox::critical(this, tr(\"Rescan failed\"),\n+                                      tr(\"Wallet is currently rescanning. Abort existing rescan or wait.\"));\n+                break;\n+            }\n+\n+            CKey key = DecodeSecret(strSecret);\n+            if (!key.IsValid()) {\n+                QMessageBox::critical(this, tr(\"Invalid Private Key\"), tr(\"Invalid private key encoding.\"));\n+                break;\n+            }\n+\n+            CPubKey pubkey = key.GetPubKey();\n+            CHECK_NONFATAL(key.VerifyPubKey(pubkey));\n+            CKeyID vchAddress = pubkey.GetID();\n+            {\n+                walletModel->wallet().MarkDirty();\n+\n+                // We don't know which corresponding address will be used;\n+                // label all new addresses, and label existing addresses if a\n+                // label was passed.\n+                for (const auto &dest: GetAllDestinationsForKey(pubkey)) {\n+                    if (!strLabel.empty() || !walletModel->wallet().FindAddressBookEntry(dest)) {\n+                        walletModel->wallet().setAddressBook(dest, strLabel, \"receive\");\n+                    }\n+                }\n+\n+                // Use timestamp of 1 to scan the whole chain\n+                if (!walletModel->wallet().ImportPrivKeys({{vchAddress, key}}, 1)) {\n+                    QMessageBox::critical(this, tr(\"Wallet Error\"), tr(\"Error adding key to wallet\"));\n+                    break;\n+                }\n+\n+                // Add the wpkh script for this key if possible\n+                if (pubkey.IsCompressed()) {\n+                    walletModel->wallet().ImportScripts({GetScriptForDestination(WitnessV0KeyHash(vchAddress))},\n+                                                        0 /* timestamp */);\n+                }\n+            }\n+\n+            if (fRescan) {\n+                int64_t scanned_time = walletModel->wallet().RescanFromTime(0, reserver, true);\n+                if (walletModel->wallet().IsAbortingRescan()) {\n+                    QMessageBox::critical(this, tr(\"Misc Error\"),\n+                                          tr(\"Rescan aborted by user.\"));\n+                    break;\n+                } else if (scanned_time > 0) {\n+                    QMessageBox::critical(this, tr(\"Wallet Error\"),\n+                                          tr(\"Rescan was unable to fully rescan the blockchain. Some transactions may be missing.\"));\n+                    break;\n+                }\n+            }\n+\n+            break;\n+        }\n+        case importAddress: {\n+            std::string strAddress = \"\";\n+            strAddress.assign(ui->keyEditIA->text().toStdString().c_str());\n+            if (strAddress.empty()) {\n+                QMessageBox::warning(this, tr(\"Error\"), tr(\"Address is empty\"));\n+                break;\n+            }\n+\n+\n+            std::string strLabel = \"\";\n+            strLabel.assign(ui->labelEditIA->text().toStdString().c_str());\n+\n+            // Whether to perform rescan after import\n+            bool fRescan = true;\n+            if (!ui->rescanButtonIA->isChecked())\n+                fRescan = false;\n+\n+            if (fRescan && walletModel->wallet().chain().havePruned()) {\n+                // Exit early and print an error.\n+                // If a block is pruned after this check, we will import the key(s),\n+                // but fail the rescan with a generic error.\n+                QMessageBox::critical(this, tr(\"Rescan failed\"), tr(\"Rescan is disabled when blocks are pruned\"));\n+                break;\n+            }\n+\n+            wallet::WalletRescanReserver reserver = walletModel->wallet().getReserver();\n+            if (fRescan && !reserver.reserve()) {\n+                QMessageBox::critical(this, tr(\"Rescan failed\"),\n+                                      tr(\"Wallet is currently rescanning. Abort existing rescan or wait.\"));\n+                break;\n+            }\n+\n+            // Whether to import a p2sh version, too\n+            bool fP2SH = false;\n+            if (ui->p2shButtonIA->isChecked())\n+                fP2SH = true;\n+\n+            CTxDestination dest = DecodeDestination(strAddress);\n+            if (IsValidDestination(dest)) {\n+                if (fP2SH) {\n+                    QMessageBox::critical(this, tr(\"Invalid Address\"),\n+                                          tr(\"Cannot use the p2sh flag with an address - use a script instead\"));\n+                    break;\n+                }\n+                if (OutputTypeFromDestination(dest) == OutputType::BECH32M) {\n+                    QMessageBox::critical(this, tr(\"Invalid Address\"),\n+                                          tr(\"Bech32m addresses cannot be imported into legacy wallets\"));\n+                    break;\n+                }\n+\n+                walletModel->wallet().MarkDirty();\n+\n+                walletModel->wallet().ImportScriptPubKeys(strLabel, {GetScriptForDestination(dest)},\n+                                                          false /* have_solving_data */, true /* apply_label */,\n+                                                          1 /* timestamp */);\n+            } else if (IsHex(strAddress)) {\n+                std::vector<unsigned char> data(ParseHex(strAddress));\n+                CScript redeem_script(data.begin(), data.end());\n+\n+                std::set <CScript> scripts = {redeem_script};\n+                walletModel->wallet().ImportScripts(scripts, 0 /* timestamp */);\n+\n+                if (fP2SH) {\n+                    scripts.insert(GetScriptForDestination(ScriptHash(redeem_script)));\n+                }\n+\n+                walletModel->wallet().ImportScriptPubKeys(strLabel, scripts, false /* have_solving_data */,\n+                                                          true /* apply_label */, 1 /* timestamp */);\n+            } else {\n+                QMessageBox::critical(this, tr(\"Invalid Address\"), tr(\"Invalid Bitcoin address or script\"));\n+                break;\n+            }",
      "path": "src/qt/importdialog.cpp",
      "position": null,
      "original_position": 285,
      "commit_id": "b2b00af1d37dd69c3e64d905984e68ac6a6b2d8f",
      "original_commit_id": "3a75af09dbb6c182a86ce71b15fe0824d3c68ac5",
      "in_reply_to_id": 940614111,
      "user": {
        "login": "KolbyML",
        "id": 31669092,
        "node_id": "MDQ6VXNlcjMxNjY5MDky",
        "avatar_url": "https://avatars.githubusercontent.com/u/31669092?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/KolbyML",
        "html_url": "https://github.com/KolbyML",
        "followers_url": "https://api.github.com/users/KolbyML/followers",
        "following_url": "https://api.github.com/users/KolbyML/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/KolbyML/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/KolbyML/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/KolbyML/subscriptions",
        "organizations_url": "https://api.github.com/users/KolbyML/orgs",
        "repos_url": "https://api.github.com/users/KolbyML/repos",
        "events_url": "https://api.github.com/users/KolbyML/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/KolbyML/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "done",
      "created_at": "2022-08-10T04:11:23Z",
      "updated_at": "2022-08-10T04:11:23Z",
      "html_url": "https://github.com/bitcoin-core/gui/pull/650#discussion_r941998764",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/gui/pulls/comments/941998764"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/gui/pulls/650"
        }
      },
      "start_line": null,
      "original_start_line": 251,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 221,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/gui/pulls/comments/942648648",
      "pull_request_review_id": 1068570160,
      "id": 942648648,
      "node_id": "PRRC_kwDOEEET9c44L61I",
      "diff_hunk": "@@ -298,5 +344,377 @@ void ImportDialog::on_Accept_clicked() {\n             }\n             break;\n         }\n+        case importMulti: {\n+            bool fRescan = true;\n+            if (!ui->rescanButtonIA->isChecked())\n+                fRescan = false;\n+\n+            if (fRescan && walletModel->wallet().chain().havePruned()) {\n+                // Exit early and print an error.\n+                // If a block is pruned after this check, we will import the key(s),\n+                // but fail the rescan with a generic error.\n+                QMessageBox::critical(this, tr(\"Rescan failed\"), tr(\"Rescan is disabled when blocks are pruned\"));\n+                break;\n+            }\n+\n+            wallet::WalletRescanReserver reserver = walletModel->wallet().getReserver();\n+            if (fRescan && !reserver.reserve()) {\n+                QMessageBox::critical(this, tr(\"Rescan failed\"),\n+                                      tr(\"Wallet is currently rescanning. Abort existing rescan or wait.\"));\n+                break;\n+            }",
      "path": "src/qt/importdialog.cpp",
      "position": null,
      "original_position": 95,
      "commit_id": "b2b00af1d37dd69c3e64d905984e68ac6a6b2d8f",
      "original_commit_id": "46fea2598202b093c2035276b232e0f94c7e869f",
      "in_reply_to_id": 940654567,
      "user": {
        "login": "KolbyML",
        "id": 31669092,
        "node_id": "MDQ6VXNlcjMxNjY5MDky",
        "avatar_url": "https://avatars.githubusercontent.com/u/31669092?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/KolbyML",
        "html_url": "https://github.com/KolbyML",
        "followers_url": "https://api.github.com/users/KolbyML/followers",
        "following_url": "https://api.github.com/users/KolbyML/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/KolbyML/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/KolbyML/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/KolbyML/subscriptions",
        "organizations_url": "https://api.github.com/users/KolbyML/orgs",
        "repos_url": "https://api.github.com/users/KolbyML/repos",
        "events_url": "https://api.github.com/users/KolbyML/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/KolbyML/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "done",
      "created_at": "2022-08-10T16:11:15Z",
      "updated_at": "2022-08-10T16:11:15Z",
      "html_url": "https://github.com/bitcoin-core/gui/pull/650#discussion_r942648648",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/gui/pulls/comments/942648648"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/gui/pulls/650"
        }
      },
      "start_line": null,
      "original_start_line": 348,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 301,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/gui/pulls/comments/942665595",
      "pull_request_review_id": 1068594035,
      "id": 942665595,
      "node_id": "PRRC_kwDOEEET9c44L-97",
      "diff_hunk": "@@ -0,0 +1,302 @@\n+#include <qt/importdialog.h>\n+#include <qt/forms/ui_importdialog.h>\n+\n+#include <qt/guiconstants.h>\n+#include <qt/guiutil.h>\n+#include <key_io.h>\n+#include <qt/walletmodel.h>\n+#include <interfaces/node.h>\n+#include <wallet/wallet.h>\n+#include <QKeyEvent>\n+#include <QMessageBox>\n+#include <QPushButton>\n+#include <iostream>\n+#include <QScrollBar>\n+#include <tinyformat.h>\n+#include <chain.h>\n+\n+ImportDialog::ImportDialog(Page _page, QWidget *parent, WalletModel *walletModel) :\n+    QDialog(parent, GUIUtil::dialog_flags),\n+    ui(new Ui::ImportDialog),\n+    walletModel(walletModel),\n+    page(_page)\n+{\n+    ui->setupUi(this);\n+\n+    switch (page) {\n+        case importPubkey: {\n+            ui->QStackContainer->setCurrentWidget(ui->importKeyPage);\n+            this->setWindowTitle(\"Import Public Key\");\n+            ui->keyLabelIKP->setText(\"Public Key\");\n+            ui->keyEditIKP->setPlaceholderText(\"Enter a Public Key (e.g. 1NS17iag9jJgTHDlVXjvLCEnZuQ3rJDE9L)\");\n+            ui->rescanButtonIKP->setCheckState(Qt::Checked);\n+            break;\n+        } case importPrivkey: {\n+            ui->QStackContainer->setCurrentWidget(ui->importKeyPage);\n+            this->setWindowTitle(\"Import Private Key\");\n+            ui->keyLabelIKP->setText(\"Private Key\");\n+            ui->keyEditIKP->setPlaceholderText(\"Enter a Private Key (e.g. L4sTHokqoFZpcmJgsAG2yxrf2f71v6PYpK2qEkCvc2Fp8VVdMiU3)\");\n+            ui->rescanButtonIKP->setCheckState(Qt::Checked);\n+            break;\n+        } case importAddress: {\n+            ui->QStackContainer->setCurrentWidget(ui->importAddress);\n+            this->setWindowTitle(\"Import Address\");\n+            ui->rescanButtonIA->setCheckState(Qt::Checked);\n+            ui->p2shButtonIA->setCheckState(Qt::Unchecked);\n+            break;\n+        }\n+    }\n+\n+    GUIUtil::handleCloseWindowShortcut(this);\n+}\n+\n+ImportDialog::~ImportDialog()\n+{\n+    delete ui;\n+}\n+\n+void ImportDialog::on_Accept_clicked() {\n+    switch (page) {\n+        case importPubkey: {\n+            std::string strKey = \"\";\n+            strKey.assign(ui->keyEditIKP->text().toStdString().c_str());\n+\n+            if (strKey.empty()) {\n+                QMessageBox::warning(this, tr(\"Error\"), tr(\"Key is empty\"));\n+                break;\n+            }\n+\n+            std::string strLabel;\n+            strLabel.assign(ui->labelEditIKP->text().toStdString().c_str());\n+\n+            // Whether to perform rescan after import\n+            bool fRescan = true;\n+            if (!ui->rescanButtonIKP->isChecked())\n+                fRescan = false;\n+\n+            if (fRescan && walletModel->wallet().chain().havePruned()) {\n+                // Exit early and print an error.\n+                // If a block is pruned after this check, we will import the key(s),\n+                // but fail the rescan with a generic error.\n+                QMessageBox::critical(this, tr(\"Rescan failed\"), tr(\"Rescan is disabled when blocks are pruned\"));\n+                break;\n+            }\n+\n+\n+            wallet::WalletRescanReserver reserver = walletModel->wallet().getReserver();\n+            if (fRescan && !reserver.reserve()) {\n+                QMessageBox::critical(this, tr(\"Rescan failed\"),\n+                                      tr(\"Wallet is currently rescanning. Abort existing rescan or wait.\"));\n+                break;\n+            }\n+\n+            if (!IsHex(strKey)) {\n+                QMessageBox::critical(this, tr(\"Invalid Public Key\"), tr(\"Pubkey must be a hex string\"));\n+                break;\n+            }\n+\n+            std::vector<unsigned char> data(ParseHex(strKey));\n+            CPubKey pubKey(data);\n+            if (!pubKey.IsFullyValid()) {\n+                QMessageBox::critical(this, tr(\"Invalid Public Key\"),\n+                                      tr(\"Pubkey is not a valid public key\"));\n+                break;\n+            }\n+\n+            std::set<CScript> script_pub_keys;\n+            for (const auto &dest: GetAllDestinationsForKey(pubKey)) {\n+                script_pub_keys.insert(GetScriptForDestination(dest));\n+            }\n+\n+            walletModel->wallet().MarkDirty();\n+            walletModel->wallet().ImportScriptPubKeys(strLabel, script_pub_keys, true, true, 1);\n+            walletModel->wallet().ImportPubKeys({pubKey.GetID()}, {{pubKey.GetID(), pubKey}}, {}, false, false, 1);\n+\n+            if (fRescan) {\n+                int64_t scanned_time = walletModel->wallet().RescanFromTime(0, reserver, true);\n+                if (walletModel->wallet().IsAbortingRescan()) {\n+                    QMessageBox::critical(this, tr(\"Misc Error\"), tr(\"Rescan aborted by user.\"));\n+                    break;\n+                } else if (scanned_time > 0) {\n+                    QMessageBox::critical(this, tr(\"Wallet Error\"),\n+                                          tr(\"Rescan was unable to fully rescan the blockchain. Some transactions may be missing.\"));\n+                    break;\n+                }\n+                walletModel->wallet().ReacceptWalletTransactions();\n+            }\n+            break;\n+        }\n+        case importPrivkey: {\n+            wallet::WalletRescanReserver reserver = walletModel->wallet().getReserver();\n+            bool fRescan = true;\n+            WalletModel::UnlockContext ctx(walletModel->requestUnlock());\n+            if (!ctx.isValid()) {\n+                break;\n+            }\n+\n+            std::string strSecret = \"\";\n+            strSecret.assign(ui->keyEditIKP->text().toStdString().c_str());\n+            if (strSecret.empty()) {\n+                QMessageBox::warning(this, tr(\"Error\"), tr(\"Key is empty\"));\n+                break;\n+            }\n+\n+            std::string strLabel = \"\";\n+            strLabel.assign(ui->labelEditIKP->text().toStdString().c_str());",
      "path": "src/qt/importdialog.cpp",
      "position": null,
      "original_position": 145,
      "commit_id": "b2b00af1d37dd69c3e64d905984e68ac6a6b2d8f",
      "original_commit_id": "8551f8473549d9e8e415e47a668002c9b61aec46",
      "in_reply_to_id": 940655561,
      "user": {
        "login": "KolbyML",
        "id": 31669092,
        "node_id": "MDQ6VXNlcjMxNjY5MDky",
        "avatar_url": "https://avatars.githubusercontent.com/u/31669092?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/KolbyML",
        "html_url": "https://github.com/KolbyML",
        "followers_url": "https://api.github.com/users/KolbyML/followers",
        "following_url": "https://api.github.com/users/KolbyML/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/KolbyML/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/KolbyML/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/KolbyML/subscriptions",
        "organizations_url": "https://api.github.com/users/KolbyML/orgs",
        "repos_url": "https://api.github.com/users/KolbyML/repos",
        "events_url": "https://api.github.com/users/KolbyML/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/KolbyML/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2022-08-10T16:29:01Z",
      "updated_at": "2022-08-10T16:29:02Z",
      "html_url": "https://github.com/bitcoin-core/gui/pull/650#discussion_r942665595",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/gui/pulls/comments/942665595"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/gui/pulls/650"
        }
      },
      "start_line": null,
      "original_start_line": 137,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 191,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin-core/gui/pulls/comments/943147973",
      "pull_request_review_id": 1069245127,
      "id": 943147973,
      "node_id": "PRRC_kwDOEEET9c44N0vF",
      "diff_hunk": "@@ -0,0 +1,69 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_WALLET_IMPORTS_H\n+#define BITCOIN_WALLET_IMPORTS_H\n+\n+#include <string>\n+#include <vector>\n+#include <threadsafety.h>\n+#include <script/descriptor.h>\n+#include <script/signingprovider.h>\n+#include <wallet/wallet.h>\n+\n+namespace wallet {\n+    struct MiscError {\n+        std::string error;\n+        MiscError(std::string error) : error(error) {}\n+    };\n+\n+    struct WalletError {\n+        std::string error;\n+        WalletError(std::string error) : error(error) {}\n+    };\n+\n+    struct InvalidAddressOrKey {\n+        std::string error;\n+        InvalidAddressOrKey(std::string error) : error(error) {}\n+    };\n+\n+    struct InvalidParameter {\n+        std::string error;\n+        InvalidParameter(std::string error) : error(error) {}\n+    };\n+\n+    struct ImportMultiData\n+    {\n+        std::unique_ptr<Descriptor> parsed_desc;\n+        std::string scriptPubKey;\n+        std::string redeem_script;\n+        std::string witness_script;\n+        std::string label;\n+        std::vector<std::string> pubkeys;\n+        std::vector<std::string> keys;\n+        int64_t range_start;\n+        int64_t range_end;\n+        int64_t timestamp;\n+        bool internal;\n+        bool watch_only;\n+        bool keypool;",
      "path": "src/wallet/imports.h",
      "position": null,
      "original_position": 50,
      "commit_id": "b2b00af1d37dd69c3e64d905984e68ac6a6b2d8f",
      "original_commit_id": "f718e24693f4d322d2a82d6f1f8f6d4add98c415",
      "in_reply_to_id": 940640282,
      "user": {
        "login": "KolbyML",
        "id": 31669092,
        "node_id": "MDQ6VXNlcjMxNjY5MDky",
        "avatar_url": "https://avatars.githubusercontent.com/u/31669092?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/KolbyML",
        "html_url": "https://github.com/KolbyML",
        "followers_url": "https://api.github.com/users/KolbyML/followers",
        "following_url": "https://api.github.com/users/KolbyML/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/KolbyML/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/KolbyML/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/KolbyML/subscriptions",
        "organizations_url": "https://api.github.com/users/KolbyML/orgs",
        "repos_url": "https://api.github.com/users/KolbyML/repos",
        "events_url": "https://api.github.com/users/KolbyML/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/KolbyML/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "done",
      "created_at": "2022-08-11T06:50:01Z",
      "updated_at": "2022-08-11T06:50:02Z",
      "html_url": "https://github.com/bitcoin-core/gui/pull/650#discussion_r943147973",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin-core/gui/pulls/comments/943147973"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin-core/gui/pulls/650"
        }
      },
      "start_line": null,
      "original_start_line": 45,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 50,
      "side": "RIGHT"
    }
  ]
}